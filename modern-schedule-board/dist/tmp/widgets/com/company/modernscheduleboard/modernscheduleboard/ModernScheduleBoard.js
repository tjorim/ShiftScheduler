define(['react/jsx-runtime', 'react'], (function (jsxRuntime, react) { 'use strict';

    const useSchedulerData = ({ dataSource, resourcesSource, startDateAttribute, endDateAttribute, titleAttribute, resourceIdAttribute }) => {
        const [items, setItems] = react.useState([]);
        const [resources, setResources] = react.useState([]);
        const [loading, setLoading] = react.useState(true);
        // Transform Mendix data to scheduler items
        const transformedItems = react.useMemo(() => {
            if (dataSource.status !== "available" || !dataSource.items) {
                return [];
            }
            return dataSource.items.map((item) => {
                const startDate = startDateAttribute.get(item).value;
                const endDate = endDateAttribute.get(item).value;
                const title = titleAttribute.get(item).value;
                const resourceId = resourceIdAttribute.get(item).value;
                return {
                    id: item.id,
                    title: title || "Untitled",
                    start: startDate || new Date(),
                    end: endDate || new Date(),
                    resourceId: resourceId?.toString() || "",
                    mendixObject: item
                };
            });
        }, [dataSource, startDateAttribute, endDateAttribute, titleAttribute, resourceIdAttribute]);
        // Transform Mendix data to scheduler resources
        const transformedResources = react.useMemo(() => {
            if (resourcesSource.status !== "available" || !resourcesSource.items) {
                return [];
            }
            return resourcesSource.items.map((item) => ({
                id: item.id,
                title: item.id,
                mendixObject: item
            }));
        }, [resourcesSource]);
        react.useEffect(() => {
            setItems(transformedItems);
            setLoading(dataSource.status === "loading");
        }, [transformedItems, dataSource.status]);
        react.useEffect(() => {
            setResources(transformedResources);
        }, [transformedResources]);
        const updateItem = (itemId, updates) => {
            setItems(prev => prev.map(item => (item.id === itemId ? { ...item, ...updates } : item)));
        };
        const getItemById = (id) => {
            return items.find(item => item.id === id);
        };
        const getResourceById = (id) => {
            return resources.find(resource => resource.id === id);
        };
        return {
            items,
            resources,
            loading,
            updateItem,
            getItemById,
            getResourceById
        };
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var lib$1 = {};

    var Timeline$1 = {};

    var propTypes = {exports: {}};

    var reactIs = {exports: {}};

    var reactIs_development = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var hasRequiredReactIs_development;

    function requireReactIs_development () {
    	if (hasRequiredReactIs_development) return reactIs_development;
    	hasRequiredReactIs_development = 1;

    	{
    	  (function () {

    	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    	    // nor polyfill, then a plain number is used for performance.
    	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    	    // (unstable) APIs that have been removed. Can we remove the symbols?

    	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    	    function isValidElementType(type) {
    	      return typeof type === 'string' || typeof type === 'function' ||
    	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    	    }
    	    function typeOf(object) {
    	      if (typeof object === 'object' && object !== null) {
    	        var $$typeof = object.$$typeof;
    	        switch ($$typeof) {
    	          case REACT_ELEMENT_TYPE:
    	            var type = object.type;
    	            switch (type) {
    	              case REACT_ASYNC_MODE_TYPE:
    	              case REACT_CONCURRENT_MODE_TYPE:
    	              case REACT_FRAGMENT_TYPE:
    	              case REACT_PROFILER_TYPE:
    	              case REACT_STRICT_MODE_TYPE:
    	              case REACT_SUSPENSE_TYPE:
    	                return type;
    	              default:
    	                var $$typeofType = type && type.$$typeof;
    	                switch ($$typeofType) {
    	                  case REACT_CONTEXT_TYPE:
    	                  case REACT_FORWARD_REF_TYPE:
    	                  case REACT_LAZY_TYPE:
    	                  case REACT_MEMO_TYPE:
    	                  case REACT_PROVIDER_TYPE:
    	                    return $$typeofType;
    	                  default:
    	                    return $$typeof;
    	                }
    	            }
    	          case REACT_PORTAL_TYPE:
    	            return $$typeof;
    	        }
    	      }
    	      return undefined;
    	    } // AsyncMode is deprecated along with isAsyncMode

    	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    	    var ContextConsumer = REACT_CONTEXT_TYPE;
    	    var ContextProvider = REACT_PROVIDER_TYPE;
    	    var Element = REACT_ELEMENT_TYPE;
    	    var ForwardRef = REACT_FORWARD_REF_TYPE;
    	    var Fragment = REACT_FRAGMENT_TYPE;
    	    var Lazy = REACT_LAZY_TYPE;
    	    var Memo = REACT_MEMO_TYPE;
    	    var Portal = REACT_PORTAL_TYPE;
    	    var Profiler = REACT_PROFILER_TYPE;
    	    var StrictMode = REACT_STRICT_MODE_TYPE;
    	    var Suspense = REACT_SUSPENSE_TYPE;
    	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    	    function isAsyncMode(object) {
    	      {
    	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
    	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

    	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    	        }
    	      }
    	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    	    }
    	    function isConcurrentMode(object) {
    	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    	    }
    	    function isContextConsumer(object) {
    	      return typeOf(object) === REACT_CONTEXT_TYPE;
    	    }
    	    function isContextProvider(object) {
    	      return typeOf(object) === REACT_PROVIDER_TYPE;
    	    }
    	    function isElement(object) {
    	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    	    }
    	    function isForwardRef(object) {
    	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    	    }
    	    function isFragment(object) {
    	      return typeOf(object) === REACT_FRAGMENT_TYPE;
    	    }
    	    function isLazy(object) {
    	      return typeOf(object) === REACT_LAZY_TYPE;
    	    }
    	    function isMemo(object) {
    	      return typeOf(object) === REACT_MEMO_TYPE;
    	    }
    	    function isPortal(object) {
    	      return typeOf(object) === REACT_PORTAL_TYPE;
    	    }
    	    function isProfiler(object) {
    	      return typeOf(object) === REACT_PROFILER_TYPE;
    	    }
    	    function isStrictMode(object) {
    	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    	    }
    	    function isSuspense(object) {
    	      return typeOf(object) === REACT_SUSPENSE_TYPE;
    	    }
    	    reactIs_development.AsyncMode = AsyncMode;
    	    reactIs_development.ConcurrentMode = ConcurrentMode;
    	    reactIs_development.ContextConsumer = ContextConsumer;
    	    reactIs_development.ContextProvider = ContextProvider;
    	    reactIs_development.Element = Element;
    	    reactIs_development.ForwardRef = ForwardRef;
    	    reactIs_development.Fragment = Fragment;
    	    reactIs_development.Lazy = Lazy;
    	    reactIs_development.Memo = Memo;
    	    reactIs_development.Portal = Portal;
    	    reactIs_development.Profiler = Profiler;
    	    reactIs_development.StrictMode = StrictMode;
    	    reactIs_development.Suspense = Suspense;
    	    reactIs_development.isAsyncMode = isAsyncMode;
    	    reactIs_development.isConcurrentMode = isConcurrentMode;
    	    reactIs_development.isContextConsumer = isContextConsumer;
    	    reactIs_development.isContextProvider = isContextProvider;
    	    reactIs_development.isElement = isElement;
    	    reactIs_development.isForwardRef = isForwardRef;
    	    reactIs_development.isFragment = isFragment;
    	    reactIs_development.isLazy = isLazy;
    	    reactIs_development.isMemo = isMemo;
    	    reactIs_development.isPortal = isPortal;
    	    reactIs_development.isProfiler = isProfiler;
    	    reactIs_development.isStrictMode = isStrictMode;
    	    reactIs_development.isSuspense = isSuspense;
    	    reactIs_development.isValidElementType = isValidElementType;
    	    reactIs_development.typeOf = typeOf;
    	  })();
    	}
    	return reactIs_development;
    }

    var hasRequiredReactIs;

    function requireReactIs () {
    	if (hasRequiredReactIs) return reactIs.exports;
    	hasRequiredReactIs = 1;

    	{
    	  reactIs.exports = requireReactIs_development();
    	}
    	return reactIs.exports;
    }

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */

    var objectAssign;
    var hasRequiredObjectAssign;

    function requireObjectAssign () {
    	if (hasRequiredObjectAssign) return objectAssign;
    	hasRequiredObjectAssign = 1;

    	/* eslint-disable no-unused-vars */
    	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    	var hasOwnProperty = Object.prototype.hasOwnProperty;
    	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    	function toObject(val) {
    	  if (val === null || val === undefined) {
    	    throw new TypeError('Object.assign cannot be called with null or undefined');
    	  }
    	  return Object(val);
    	}
    	function shouldUseNative() {
    	  try {
    	    if (!Object.assign) {
    	      return false;
    	    }

    	    // Detect buggy property enumeration order in older V8 versions.

    	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    	    test1[5] = 'de';
    	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
    	      return false;
    	    }

    	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    	    var test2 = {};
    	    for (var i = 0; i < 10; i++) {
    	      test2['_' + String.fromCharCode(i)] = i;
    	    }
    	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    	      return test2[n];
    	    });
    	    if (order2.join('') !== '0123456789') {
    	      return false;
    	    }

    	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    	    var test3 = {};
    	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    	      test3[letter] = letter;
    	    });
    	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
    	      return false;
    	    }
    	    return true;
    	  } catch (err) {
    	    // We don't expect any of the above to throw, but better to be safe.
    	    return false;
    	  }
    	}
    	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	  var from;
    	  var to = toObject(target);
    	  var symbols;
    	  for (var s = 1; s < arguments.length; s++) {
    	    from = Object(arguments[s]);
    	    for (var key in from) {
    	      if (hasOwnProperty.call(from, key)) {
    	        to[key] = from[key];
    	      }
    	    }
    	    if (getOwnPropertySymbols) {
    	      symbols = getOwnPropertySymbols(from);
    	      for (var i = 0; i < symbols.length; i++) {
    	        if (propIsEnumerable.call(from, symbols[i])) {
    	          to[symbols[i]] = from[symbols[i]];
    	        }
    	      }
    	    }
    	  }
    	  return to;
    	};
    	return objectAssign;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret_1;
    var hasRequiredReactPropTypesSecret;

    function requireReactPropTypesSecret () {
    	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
    	hasRequiredReactPropTypesSecret = 1;

    	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    	ReactPropTypesSecret_1 = ReactPropTypesSecret;
    	return ReactPropTypesSecret_1;
    }

    var has;
    var hasRequiredHas;

    function requireHas () {
    	if (hasRequiredHas) return has;
    	hasRequiredHas = 1;
    	has = Function.call.bind(Object.prototype.hasOwnProperty);
    	return has;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var checkPropTypes_1;
    var hasRequiredCheckPropTypes;

    function requireCheckPropTypes () {
    	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
    	hasRequiredCheckPropTypes = 1;

    	var printWarning = function () {};
    	{
    	  var ReactPropTypesSecret = requireReactPropTypesSecret();
    	  var loggedTypeFailures = {};
    	  var has = requireHas();
    	  printWarning = function (text) {
    	    var message = 'Warning: ' + text;
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {/**/}
    	  };
    	}

    	/**
    	 * Assert that the values match with the type specs.
    	 * Error messages are memorized and will only be shown once.
    	 *
    	 * @param {object} typeSpecs Map of name to a ReactPropType
    	 * @param {object} values Runtime values that need to be type-checked
    	 * @param {string} location e.g. "prop", "context", "child context"
    	 * @param {string} componentName Name of the component for error messages.
    	 * @param {?Function} getStack Returns the component stack.
    	 * @private
    	 */
    	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    	  {
    	    for (var typeSpecName in typeSpecs) {
    	      if (has(typeSpecs, typeSpecName)) {
    	        var error;
    	        // Prop type validation may throw. In case they do, we don't want to
    	        // fail the render phase where it didn't fail before. So we log it.
    	        // After these have been cleaned up, we'll let them throw.
    	        try {
    	          // This is intentionally an invariant that gets caught. It's the same
    	          // behavior as without this statement except with a better message.
    	          if (typeof typeSpecs[typeSpecName] !== 'function') {
    	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
    	            err.name = 'Invariant Violation';
    	            throw err;
    	          }
    	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
    	        } catch (ex) {
    	          error = ex;
    	        }
    	        if (error && !(error instanceof Error)) {
    	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
    	        }
    	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
    	          // Only monitor this failure once because there tends to be a lot of the
    	          // same error.
    	          loggedTypeFailures[error.message] = true;
    	          var stack = getStack ? getStack() : '';
    	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
    	        }
    	      }
    	    }
    	  }
    	}

    	/**
    	 * Resets warning cache when testing.
    	 *
    	 * @private
    	 */
    	checkPropTypes.resetWarningCache = function () {
    	  {
    	    loggedTypeFailures = {};
    	  }
    	};
    	checkPropTypes_1 = checkPropTypes;
    	return checkPropTypes_1;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var factoryWithTypeCheckers;
    var hasRequiredFactoryWithTypeCheckers;

    function requireFactoryWithTypeCheckers () {
    	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
    	hasRequiredFactoryWithTypeCheckers = 1;

    	var ReactIs = requireReactIs();
    	var assign = requireObjectAssign();
    	var ReactPropTypesSecret = requireReactPropTypesSecret();
    	var has = requireHas();
    	var checkPropTypes = requireCheckPropTypes();
    	var printWarning = function () {};
    	{
    	  printWarning = function (text) {
    	    var message = 'Warning: ' + text;
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {}
    	  };
    	}
    	function emptyFunctionThatReturnsNull() {
    	  return null;
    	}
    	factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
    	  /* global Symbol */
    	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    	  /**
    	   * Returns the iterator method function contained on the iterable object.
    	   *
    	   * Be sure to invoke the function with the iterable as context:
    	   *
    	   *     var iteratorFn = getIteratorFn(myIterable);
    	   *     if (iteratorFn) {
    	   *       var iterator = iteratorFn.call(myIterable);
    	   *       ...
    	   *     }
    	   *
    	   * @param {?object} maybeIterable
    	   * @return {?function}
    	   */
    	  function getIteratorFn(maybeIterable) {
    	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    	    if (typeof iteratorFn === 'function') {
    	      return iteratorFn;
    	    }
    	  }

    	  /**
    	   * Collection of methods that allow declaration and validation of props that are
    	   * supplied to React components. Example usage:
    	   *
    	   *   var Props = require('ReactPropTypes');
    	   *   var MyArticle = React.createClass({
    	   *     propTypes: {
    	   *       // An optional string prop named "description".
    	   *       description: Props.string,
    	   *
    	   *       // A required enum prop named "category".
    	   *       category: Props.oneOf(['News','Photos']).isRequired,
    	   *
    	   *       // A prop named "dialog" that requires an instance of Dialog.
    	   *       dialog: Props.instanceOf(Dialog).isRequired
    	   *     },
    	   *     render: function() { ... }
    	   *   });
    	   *
    	   * A more formal specification of how these methods are used:
    	   *
    	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
    	   *   decl := ReactPropTypes.{type}(.isRequired)?
    	   *
    	   * Each and every declaration produces a function with the same signature. This
    	   * allows the creation of custom validation functions. For example:
    	   *
    	   *  var MyLink = React.createClass({
    	   *    propTypes: {
    	   *      // An optional string or URI prop named "href".
    	   *      href: function(props, propName, componentName) {
    	   *        var propValue = props[propName];
    	   *        if (propValue != null && typeof propValue !== 'string' &&
    	   *            !(propValue instanceof URI)) {
    	   *          return new Error(
    	   *            'Expected a string or an URI for ' + propName + ' in ' +
    	   *            componentName
    	   *          );
    	   *        }
    	   *      }
    	   *    },
    	   *    render: function() {...}
    	   *  });
    	   *
    	   * @internal
    	   */

    	  var ANONYMOUS = '<<anonymous>>';

    	  // Important!
    	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    	  var ReactPropTypes = {
    	    array: createPrimitiveTypeChecker('array'),
    	    bigint: createPrimitiveTypeChecker('bigint'),
    	    bool: createPrimitiveTypeChecker('boolean'),
    	    func: createPrimitiveTypeChecker('function'),
    	    number: createPrimitiveTypeChecker('number'),
    	    object: createPrimitiveTypeChecker('object'),
    	    string: createPrimitiveTypeChecker('string'),
    	    symbol: createPrimitiveTypeChecker('symbol'),
    	    any: createAnyTypeChecker(),
    	    arrayOf: createArrayOfTypeChecker,
    	    element: createElementTypeChecker(),
    	    elementType: createElementTypeTypeChecker(),
    	    instanceOf: createInstanceTypeChecker,
    	    node: createNodeChecker(),
    	    objectOf: createObjectOfTypeChecker,
    	    oneOf: createEnumTypeChecker,
    	    oneOfType: createUnionTypeChecker,
    	    shape: createShapeTypeChecker,
    	    exact: createStrictShapeTypeChecker
    	  };

    	  /**
    	   * inlined Object.is polyfill to avoid requiring consumers ship their own
    	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    	   */
    	  /*eslint-disable no-self-compare*/
    	  function is(x, y) {
    	    // SameValue algorithm
    	    if (x === y) {
    	      // Steps 1-5, 7-10
    	      // Steps 6.b-6.e: +0 != -0
    	      return x !== 0 || 1 / x === 1 / y;
    	    } else {
    	      // Step 6.a: NaN == NaN
    	      return x !== x && y !== y;
    	    }
    	  }
    	  /*eslint-enable no-self-compare*/

    	  /**
    	   * We use an Error-like object for backward compatibility as people may call
    	   * PropTypes directly and inspect their output. However, we don't use real
    	   * Errors anymore. We don't inspect their stack anyway, and creating them
    	   * is prohibitively expensive if they are created too often, such as what
    	   * happens in oneOfType() for any type before the one that matched.
    	   */
    	  function PropTypeError(message, data) {
    	    this.message = message;
    	    this.data = data && typeof data === 'object' ? data : {};
    	    this.stack = '';
    	  }
    	  // Make `instanceof Error` still work for returned errors.
    	  PropTypeError.prototype = Error.prototype;
    	  function createChainableTypeChecker(validate) {
    	    {
    	      var manualPropTypeCallCache = {};
    	      var manualPropTypeWarningCount = 0;
    	    }
    	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    	      componentName = componentName || ANONYMOUS;
    	      propFullName = propFullName || propName;
    	      if (secret !== ReactPropTypesSecret) {
    	        if (throwOnDirectAccess) {
    	          // New behavior only for users of `prop-types` package
    	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    	          err.name = 'Invariant Violation';
    	          throw err;
    	        } else if (typeof console !== 'undefined') {
    	          // Old behavior for people using React.PropTypes
    	          var cacheKey = componentName + ':' + propName;
    	          if (!manualPropTypeCallCache[cacheKey] &&
    	          // Avoid spamming the console because they are often not actionable except for lib authors
    	          manualPropTypeWarningCount < 3) {
    	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
    	            manualPropTypeCallCache[cacheKey] = true;
    	            manualPropTypeWarningCount++;
    	          }
    	        }
    	      }
    	      if (props[propName] == null) {
    	        if (isRequired) {
    	          if (props[propName] === null) {
    	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
    	          }
    	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
    	        }
    	        return null;
    	      } else {
    	        return validate(props, propName, componentName, location, propFullName);
    	      }
    	    }
    	    var chainedCheckType = checkType.bind(null, false);
    	    chainedCheckType.isRequired = checkType.bind(null, true);
    	    return chainedCheckType;
    	  }
    	  function createPrimitiveTypeChecker(expectedType) {
    	    function validate(props, propName, componentName, location, propFullName, secret) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== expectedType) {
    	        // `propValue` being instance of, say, date/regexp, pass the 'object'
    	        // check, but we can offer a more precise error message here rather than
    	        // 'of type `object`'.
    	        var preciseType = getPreciseType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
    	          expectedType: expectedType
    	        });
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createAnyTypeChecker() {
    	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    	  }
    	  function createArrayOfTypeChecker(typeChecker) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (typeof typeChecker !== 'function') {
    	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    	      }
    	      var propValue = props[propName];
    	      if (!Array.isArray(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    	      }
    	      for (var i = 0; i < propValue.length; i++) {
    	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
    	        if (error instanceof Error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createElementTypeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      if (!isValidElement(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createElementTypeTypeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      if (!ReactIs.isValidElementType(propValue)) {
    	        var propType = getPropType(propValue);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createInstanceTypeChecker(expectedClass) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (!(props[propName] instanceof expectedClass)) {
    	        var expectedClassName = expectedClass.name || ANONYMOUS;
    	        var actualClassName = getClassName(props[propName]);
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createEnumTypeChecker(expectedValues) {
    	    if (!Array.isArray(expectedValues)) {
    	      {
    	        if (arguments.length > 1) {
    	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
    	        } else {
    	          printWarning('Invalid argument supplied to oneOf, expected an array.');
    	        }
    	      }
    	      return emptyFunctionThatReturnsNull;
    	    }
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      for (var i = 0; i < expectedValues.length; i++) {
    	        if (is(propValue, expectedValues[i])) {
    	          return null;
    	        }
    	      }
    	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
    	        var type = getPreciseType(value);
    	        if (type === 'symbol') {
    	          return String(value);
    	        }
    	        return value;
    	      });
    	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createObjectOfTypeChecker(typeChecker) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (typeof typeChecker !== 'function') {
    	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    	      }
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    	      }
    	      for (var key in propValue) {
    	        if (has(propValue, key)) {
    	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	          if (error instanceof Error) {
    	            return error;
    	          }
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createUnionTypeChecker(arrayOfTypeCheckers) {
    	    if (!Array.isArray(arrayOfTypeCheckers)) {
    	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
    	      return emptyFunctionThatReturnsNull;
    	    }
    	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
    	      var checker = arrayOfTypeCheckers[i];
    	      if (typeof checker !== 'function') {
    	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
    	        return emptyFunctionThatReturnsNull;
    	      }
    	    }
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var expectedTypes = [];
    	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
    	        var checker = arrayOfTypeCheckers[i];
    	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
    	        if (checkerResult == null) {
    	          return null;
    	        }
    	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
    	          expectedTypes.push(checkerResult.data.expectedType);
    	        }
    	      }
    	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
    	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createNodeChecker() {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      if (!isNode(props[propName])) {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function invalidValidatorError(componentName, location, propFullName, key, type) {
    	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    	  }
    	  function createShapeTypeChecker(shapeTypes) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    	      }
    	      for (var key in shapeTypes) {
    	        var checker = shapeTypes[key];
    	        if (typeof checker !== 'function') {
    	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
    	        }
    	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	        if (error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function createStrictShapeTypeChecker(shapeTypes) {
    	    function validate(props, propName, componentName, location, propFullName) {
    	      var propValue = props[propName];
    	      var propType = getPropType(propValue);
    	      if (propType !== 'object') {
    	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    	      }
    	      // We need to check all keys in case some are required but missing from props.
    	      var allKeys = assign({}, props[propName], shapeTypes);
    	      for (var key in allKeys) {
    	        var checker = shapeTypes[key];
    	        if (has(shapeTypes, key) && typeof checker !== 'function') {
    	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
    	        }
    	        if (!checker) {
    	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
    	        }
    	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
    	        if (error) {
    	          return error;
    	        }
    	      }
    	      return null;
    	    }
    	    return createChainableTypeChecker(validate);
    	  }
    	  function isNode(propValue) {
    	    switch (typeof propValue) {
    	      case 'number':
    	      case 'string':
    	      case 'undefined':
    	        return true;
    	      case 'boolean':
    	        return !propValue;
    	      case 'object':
    	        if (Array.isArray(propValue)) {
    	          return propValue.every(isNode);
    	        }
    	        if (propValue === null || isValidElement(propValue)) {
    	          return true;
    	        }
    	        var iteratorFn = getIteratorFn(propValue);
    	        if (iteratorFn) {
    	          var iterator = iteratorFn.call(propValue);
    	          var step;
    	          if (iteratorFn !== propValue.entries) {
    	            while (!(step = iterator.next()).done) {
    	              if (!isNode(step.value)) {
    	                return false;
    	              }
    	            }
    	          } else {
    	            // Iterator will provide entry [k,v] tuples rather than values.
    	            while (!(step = iterator.next()).done) {
    	              var entry = step.value;
    	              if (entry) {
    	                if (!isNode(entry[1])) {
    	                  return false;
    	                }
    	              }
    	            }
    	          }
    	        } else {
    	          return false;
    	        }
    	        return true;
    	      default:
    	        return false;
    	    }
    	  }
    	  function isSymbol(propType, propValue) {
    	    // Native Symbol.
    	    if (propType === 'symbol') {
    	      return true;
    	    }

    	    // falsy value can't be a Symbol
    	    if (!propValue) {
    	      return false;
    	    }

    	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    	    if (propValue['@@toStringTag'] === 'Symbol') {
    	      return true;
    	    }

    	    // Fallback for non-spec compliant Symbols which are polyfilled.
    	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    	      return true;
    	    }
    	    return false;
    	  }

    	  // Equivalent of `typeof` but with special handling for array and regexp.
    	  function getPropType(propValue) {
    	    var propType = typeof propValue;
    	    if (Array.isArray(propValue)) {
    	      return 'array';
    	    }
    	    if (propValue instanceof RegExp) {
    	      // Old webkits (at least until Android 4.0) return 'function' rather than
    	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    	      // passes PropTypes.object.
    	      return 'object';
    	    }
    	    if (isSymbol(propType, propValue)) {
    	      return 'symbol';
    	    }
    	    return propType;
    	  }

    	  // This handles more types than `getPropType`. Only used for error messages.
    	  // See `createPrimitiveTypeChecker`.
    	  function getPreciseType(propValue) {
    	    if (typeof propValue === 'undefined' || propValue === null) {
    	      return '' + propValue;
    	    }
    	    var propType = getPropType(propValue);
    	    if (propType === 'object') {
    	      if (propValue instanceof Date) {
    	        return 'date';
    	      } else if (propValue instanceof RegExp) {
    	        return 'regexp';
    	      }
    	    }
    	    return propType;
    	  }

    	  // Returns a string that is postfixed to a warning about an invalid type.
    	  // For example, "undefined" or "of type array"
    	  function getPostfixForTypeWarning(value) {
    	    var type = getPreciseType(value);
    	    switch (type) {
    	      case 'array':
    	      case 'object':
    	        return 'an ' + type;
    	      case 'boolean':
    	      case 'date':
    	      case 'regexp':
    	        return 'a ' + type;
    	      default:
    	        return type;
    	    }
    	  }

    	  // Returns class name of the object, if any.
    	  function getClassName(propValue) {
    	    if (!propValue.constructor || !propValue.constructor.name) {
    	      return ANONYMOUS;
    	    }
    	    return propValue.constructor.name;
    	  }
    	  ReactPropTypes.checkPropTypes = checkPropTypes;
    	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    	  ReactPropTypes.PropTypes = ReactPropTypes;
    	  return ReactPropTypes;
    	};
    	return factoryWithTypeCheckers;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var hasRequiredPropTypes;

    function requirePropTypes () {
    	if (hasRequiredPropTypes) return propTypes.exports;
    	hasRequiredPropTypes = 1;
    	{
    	  var ReactIs = requireReactIs();

    	  // By explicitly using `prop-types` you are opting into new development behavior.
    	  // http://fb.me/prop-types-in-prod
    	  var throwOnDirectAccess = true;
    	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    	}
    	return propTypes.exports;
    }

    var Items = {};

    var Item = {};

    var interact_min$1 = {exports: {}};

    /* interact.js 1.10.27 | https://raw.github.com/taye/interact.js/main/LICENSE */
    var interact_min = interact_min$1.exports;

    var hasRequiredInteract_min;

    function requireInteract_min () {
    	if (hasRequiredInteract_min) return interact_min$1.exports;
    	hasRequiredInteract_min = 1;
    	(function (module, exports) {
    		!function (t, e) {
    		  module.exports = e() ;
    		}(interact_min, function () {

    		  function t(t, e) {
    		    var n = Object.keys(t);
    		    if (Object.getOwnPropertySymbols) {
    		      var r = Object.getOwnPropertySymbols(t);
    		      e && (r = r.filter(function (e) {
    		        return Object.getOwnPropertyDescriptor(t, e).enumerable;
    		      })), n.push.apply(n, r);
    		    }
    		    return n;
    		  }
    		  function e(e) {
    		    for (var n = 1; n < arguments.length; n++) {
    		      var r = null != arguments[n] ? arguments[n] : {};
    		      n % 2 ? t(Object(r), !0).forEach(function (t) {
    		        a(e, t, r[t]);
    		      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : t(Object(r)).forEach(function (t) {
    		        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
    		      });
    		    }
    		    return e;
    		  }
    		  function n(t) {
    		    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
    		      return typeof t;
    		    } : function (t) {
    		      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    		    }, n(t);
    		  }
    		  function r(t, e) {
    		    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    		  }
    		  function i(t, e) {
    		    for (var n = 0; n < e.length; n++) {
    		      var r = e[n];
    		      r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, d(r.key), r);
    		    }
    		  }
    		  function o(t, e, n) {
    		    return e && i(t.prototype, e), n && i(t, n), Object.defineProperty(t, "prototype", {
    		      writable: !1
    		    }), t;
    		  }
    		  function a(t, e, n) {
    		    return (e = d(e)) in t ? Object.defineProperty(t, e, {
    		      value: n,
    		      enumerable: !0,
    		      configurable: !0,
    		      writable: !0
    		    }) : t[e] = n, t;
    		  }
    		  function s(t, e) {
    		    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    		    t.prototype = Object.create(e && e.prototype, {
    		      constructor: {
    		        value: t,
    		        writable: !0,
    		        configurable: !0
    		      }
    		    }), Object.defineProperty(t, "prototype", {
    		      writable: !1
    		    }), e && l(t, e);
    		  }
    		  function c(t) {
    		    return c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    		      return t.__proto__ || Object.getPrototypeOf(t);
    		    }, c(t);
    		  }
    		  function l(t, e) {
    		    return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    		      return t.__proto__ = e, t;
    		    }, l(t, e);
    		  }
    		  function u(t) {
    		    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		    return t;
    		  }
    		  function p(t) {
    		    var e = function () {
    		      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
    		      if (Reflect.construct.sham) return !1;
    		      if ("function" == typeof Proxy) return !0;
    		      try {
    		        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
    		      } catch (t) {
    		        return !1;
    		      }
    		    }();
    		    return function () {
    		      var n,
    		        r = c(t);
    		      if (e) {
    		        var i = c(this).constructor;
    		        n = Reflect.construct(r, arguments, i);
    		      } else n = r.apply(this, arguments);
    		      return function (t, e) {
    		        if (e && ("object" == typeof e || "function" == typeof e)) return e;
    		        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    		        return u(t);
    		      }(this, n);
    		    };
    		  }
    		  function f() {
    		    return f = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (t, e, n) {
    		      var r = function (t, e) {
    		        for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = c(t)););
    		        return t;
    		      }(t, e);
    		      if (r) {
    		        var i = Object.getOwnPropertyDescriptor(r, e);
    		        return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    		      }
    		    }, f.apply(this, arguments);
    		  }
    		  function d(t) {
    		    var e = function (t, e) {
    		      if ("object" != typeof t || null === t) return t;
    		      var n = t[Symbol.toPrimitive];
    		      if (void 0 !== n) {
    		        var r = n.call(t, e || "default");
    		        if ("object" != typeof r) return r;
    		        throw new TypeError("@@toPrimitive must return a primitive value.");
    		      }
    		      return ("string" === e ? String : Number)(t);
    		    }(t, "string");
    		    return "symbol" == typeof e ? e : e + "";
    		  }
    		  var h = function (t) {
    		      return !(!t || !t.Window) && t instanceof t.Window;
    		    },
    		    v = void 0,
    		    g = void 0;
    		  function m(t) {
    		    v = t;
    		    var e = t.document.createTextNode("");
    		    e.ownerDocument !== t.document && "function" == typeof t.wrap && t.wrap(e) === e && (t = t.wrap(t)), g = t;
    		  }
    		  function y(t) {
    		    return h(t) ? t : (t.ownerDocument || t).defaultView || g.window;
    		  }
    		  "undefined" != typeof window && window && m(window);
    		  var b = function (t) {
    		      return !!t && "object" === n(t);
    		    },
    		    x = function (t) {
    		      return "function" == typeof t;
    		    },
    		    w = {
    		      window: function (t) {
    		        return t === g || h(t);
    		      },
    		      docFrag: function (t) {
    		        return b(t) && 11 === t.nodeType;
    		      },
    		      object: b,
    		      func: x,
    		      number: function (t) {
    		        return "number" == typeof t;
    		      },
    		      bool: function (t) {
    		        return "boolean" == typeof t;
    		      },
    		      string: function (t) {
    		        return "string" == typeof t;
    		      },
    		      element: function (t) {
    		        if (!t || "object" !== n(t)) return !1;
    		        var e = y(t) || g;
    		        return /object|function/.test("undefined" == typeof Element ? "undefined" : n(Element)) ? t instanceof Element || t instanceof e.Element : 1 === t.nodeType && "string" == typeof t.nodeName;
    		      },
    		      plainObject: function (t) {
    		        return b(t) && !!t.constructor && /function Object\b/.test(t.constructor.toString());
    		      },
    		      array: function (t) {
    		        return b(t) && void 0 !== t.length && x(t.splice);
    		      }
    		    };
    		  function E(t) {
    		    var e = t.interaction;
    		    if ("drag" === e.prepared.name) {
    		      var n = e.prepared.axis;
    		      "x" === n ? (e.coords.cur.page.y = e.coords.start.page.y, e.coords.cur.client.y = e.coords.start.client.y, e.coords.velocity.client.y = 0, e.coords.velocity.page.y = 0) : "y" === n && (e.coords.cur.page.x = e.coords.start.page.x, e.coords.cur.client.x = e.coords.start.client.x, e.coords.velocity.client.x = 0, e.coords.velocity.page.x = 0);
    		    }
    		  }
    		  function T(t) {
    		    var e = t.iEvent,
    		      n = t.interaction;
    		    if ("drag" === n.prepared.name) {
    		      var r = n.prepared.axis;
    		      if ("x" === r || "y" === r) {
    		        var i = "x" === r ? "y" : "x";
    		        e.page[i] = n.coords.start.page[i], e.client[i] = n.coords.start.client[i], e.delta[i] = 0;
    		      }
    		    }
    		  }
    		  var S = {
    		      id: "actions/drag",
    		      install: function (t) {
    		        var e = t.actions,
    		          n = t.Interactable,
    		          r = t.defaults;
    		        n.prototype.draggable = S.draggable, e.map.drag = S, e.methodDict.drag = "draggable", r.actions.drag = S.defaults;
    		      },
    		      listeners: {
    		        "interactions:before-action-move": E,
    		        "interactions:action-resume": E,
    		        "interactions:action-move": T,
    		        "auto-start:check": function (t) {
    		          var e = t.interaction,
    		            n = t.interactable,
    		            r = t.buttons,
    		            i = n.options.drag;
    		          if (i && i.enabled && (!e.pointerIsDown || !/mouse|pointer/.test(e.pointerType) || 0 != (r & n.options.drag.mouseButtons))) return t.action = {
    		            name: "drag",
    		            axis: "start" === i.lockAxis ? i.startAxis : i.lockAxis
    		          }, !1;
    		        }
    		      },
    		      draggable: function (t) {
    		        return w.object(t) ? (this.options.drag.enabled = !1 !== t.enabled, this.setPerAction("drag", t), this.setOnEvents("drag", t), /^(xy|x|y|start)$/.test(t.lockAxis) && (this.options.drag.lockAxis = t.lockAxis), /^(xy|x|y)$/.test(t.startAxis) && (this.options.drag.startAxis = t.startAxis), this) : w.bool(t) ? (this.options.drag.enabled = t, this) : this.options.drag;
    		      },
    		      beforeMove: E,
    		      move: T,
    		      defaults: {
    		        startAxis: "xy",
    		        lockAxis: "xy"
    		      },
    		      getCursor: function () {
    		        return "move";
    		      },
    		      filterEventType: function (t) {
    		        return 0 === t.search("drag");
    		      }
    		    },
    		    _ = S,
    		    P = {
    		      init: function (t) {
    		        var e = t;
    		        P.document = e.document, P.DocumentFragment = e.DocumentFragment || O, P.SVGElement = e.SVGElement || O, P.SVGSVGElement = e.SVGSVGElement || O, P.SVGElementInstance = e.SVGElementInstance || O, P.Element = e.Element || O, P.HTMLElement = e.HTMLElement || P.Element, P.Event = e.Event, P.Touch = e.Touch || O, P.PointerEvent = e.PointerEvent || e.MSPointerEvent;
    		      },
    		      document: null,
    		      DocumentFragment: null,
    		      SVGElement: null,
    		      SVGSVGElement: null,
    		      SVGElementInstance: null,
    		      Element: null,
    		      HTMLElement: null,
    		      Event: null,
    		      Touch: null,
    		      PointerEvent: null
    		    };
    		  function O() {}
    		  var k = P;
    		  var D = {
    		    init: function (t) {
    		      var e = k.Element,
    		        n = t.navigator || {};
    		      D.supportsTouch = "ontouchstart" in t || w.func(t.DocumentTouch) && k.document instanceof t.DocumentTouch, D.supportsPointerEvent = !1 !== n.pointerEnabled && !!k.PointerEvent, D.isIOS = /iP(hone|od|ad)/.test(n.platform), D.isIOS7 = /iP(hone|od|ad)/.test(n.platform) && /OS 7[^\d]/.test(n.appVersion), D.isIe9 = /MSIE 9/.test(n.userAgent), D.isOperaMobile = "Opera" === n.appName && D.supportsTouch && /Presto/.test(n.userAgent), D.prefixedMatchesSelector = "matches" in e.prototype ? "matches" : "webkitMatchesSelector" in e.prototype ? "webkitMatchesSelector" : "mozMatchesSelector" in e.prototype ? "mozMatchesSelector" : "oMatchesSelector" in e.prototype ? "oMatchesSelector" : "msMatchesSelector", D.pEventTypes = D.supportsPointerEvent ? k.PointerEvent === t.MSPointerEvent ? {
    		        up: "MSPointerUp",
    		        down: "MSPointerDown",
    		        over: "mouseover",
    		        out: "mouseout",
    		        move: "MSPointerMove",
    		        cancel: "MSPointerCancel"
    		      } : {
    		        up: "pointerup",
    		        down: "pointerdown",
    		        over: "pointerover",
    		        out: "pointerout",
    		        move: "pointermove",
    		        cancel: "pointercancel"
    		      } : null, D.wheelEvent = k.document && "onmousewheel" in k.document ? "mousewheel" : "wheel";
    		    },
    		    supportsTouch: null,
    		    supportsPointerEvent: null,
    		    isIOS7: null,
    		    isIOS: null,
    		    isIe9: null,
    		    isOperaMobile: null,
    		    prefixedMatchesSelector: null,
    		    pEventTypes: null,
    		    wheelEvent: null
    		  };
    		  var I = D;
    		  function M(t, e) {
    		    if (t.contains) return t.contains(e);
    		    for (; e;) {
    		      if (e === t) return !0;
    		      e = e.parentNode;
    		    }
    		    return !1;
    		  }
    		  function z(t, e) {
    		    for (; w.element(t);) {
    		      if (R(t, e)) return t;
    		      t = A(t);
    		    }
    		    return null;
    		  }
    		  function A(t) {
    		    var e = t.parentNode;
    		    if (w.docFrag(e)) {
    		      for (; (e = e.host) && w.docFrag(e););
    		      return e;
    		    }
    		    return e;
    		  }
    		  function R(t, e) {
    		    return g !== v && (e = e.replace(/\/deep\//g, " ")), t[I.prefixedMatchesSelector](e);
    		  }
    		  var C = function (t) {
    		    return t.parentNode || t.host;
    		  };
    		  function j(t, e) {
    		    for (var n, r = [], i = t; (n = C(i)) && i !== e && n !== i.ownerDocument;) r.unshift(i), i = n;
    		    return r;
    		  }
    		  function F(t, e, n) {
    		    for (; w.element(t);) {
    		      if (R(t, e)) return !0;
    		      if ((t = A(t)) === n) return R(t, e);
    		    }
    		    return !1;
    		  }
    		  function X(t) {
    		    return t.correspondingUseElement || t;
    		  }
    		  function Y(t) {
    		    var e = t instanceof k.SVGElement ? t.getBoundingClientRect() : t.getClientRects()[0];
    		    return e && {
    		      left: e.left,
    		      right: e.right,
    		      top: e.top,
    		      bottom: e.bottom,
    		      width: e.width || e.right - e.left,
    		      height: e.height || e.bottom - e.top
    		    };
    		  }
    		  function L(t) {
    		    var e,
    		      n = Y(t);
    		    if (!I.isIOS7 && n) {
    		      var r = {
    		        x: (e = (e = y(t)) || g).scrollX || e.document.documentElement.scrollLeft,
    		        y: e.scrollY || e.document.documentElement.scrollTop
    		      };
    		      n.left += r.x, n.right += r.x, n.top += r.y, n.bottom += r.y;
    		    }
    		    return n;
    		  }
    		  function q(t) {
    		    for (var e = []; t;) e.push(t), t = A(t);
    		    return e;
    		  }
    		  function B(t) {
    		    return !!w.string(t) && (k.document.querySelector(t), !0);
    		  }
    		  function V(t, e) {
    		    for (var n in e) t[n] = e[n];
    		    return t;
    		  }
    		  function W(t, e, n) {
    		    return "parent" === t ? A(n) : "self" === t ? e.getRect(n) : z(n, t);
    		  }
    		  function G(t, e, n, r) {
    		    var i = t;
    		    return w.string(i) ? i = W(i, e, n) : w.func(i) && (i = i.apply(void 0, r)), w.element(i) && (i = L(i)), i;
    		  }
    		  function N(t) {
    		    return t && {
    		      x: "x" in t ? t.x : t.left,
    		      y: "y" in t ? t.y : t.top
    		    };
    		  }
    		  function U(t) {
    		    return !t || "x" in t && "y" in t || ((t = V({}, t)).x = t.left || 0, t.y = t.top || 0, t.width = t.width || (t.right || 0) - t.x, t.height = t.height || (t.bottom || 0) - t.y), t;
    		  }
    		  function H(t, e, n) {
    		    t.left && (e.left += n.x), t.right && (e.right += n.x), t.top && (e.top += n.y), t.bottom && (e.bottom += n.y), e.width = e.right - e.left, e.height = e.bottom - e.top;
    		  }
    		  function K(t, e, n) {
    		    var r = n && t.options[n];
    		    return N(G(r && r.origin || t.options.origin, t, e, [t && e])) || {
    		      x: 0,
    		      y: 0
    		    };
    		  }
    		  function $(t, e) {
    		    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function (t) {
    		        return !0;
    		      },
    		      r = arguments.length > 3 ? arguments[3] : void 0;
    		    if (r = r || {}, w.string(t) && -1 !== t.search(" ") && (t = J(t)), w.array(t)) return t.forEach(function (t) {
    		      return $(t, e, n, r);
    		    }), r;
    		    if (w.object(t) && (e = t, t = ""), w.func(e) && n(t)) r[t] = r[t] || [], r[t].push(e);else if (w.array(e)) for (var i = 0, o = e; i < o.length; i++) {
    		      var a = o[i];
    		      $(t, a, n, r);
    		    } else if (w.object(e)) for (var s in e) {
    		      $(J(s).map(function (e) {
    		        return "".concat(t).concat(e);
    		      }), e[s], n, r);
    		    }
    		    return r;
    		  }
    		  function J(t) {
    		    return t.trim().split(/ +/);
    		  }
    		  var Q = function (t, e) {
    		      return Math.sqrt(t * t + e * e);
    		    },
    		    Z = ["webkit", "moz"];
    		  function tt(t, e) {
    		    t.__set || (t.__set = {});
    		    var n = function (n) {
    		      if (Z.some(function (t) {
    		        return 0 === n.indexOf(t);
    		      })) return 1;
    		      "function" != typeof t[n] && "__set" !== n && Object.defineProperty(t, n, {
    		        get: function () {
    		          return n in t.__set ? t.__set[n] : t.__set[n] = e[n];
    		        },
    		        set: function (e) {
    		          t.__set[n] = e;
    		        },
    		        configurable: !0
    		      });
    		    };
    		    for (var r in e) n(r);
    		    return t;
    		  }
    		  function et(t, e) {
    		    t.page = t.page || {}, t.page.x = e.page.x, t.page.y = e.page.y, t.client = t.client || {}, t.client.x = e.client.x, t.client.y = e.client.y, t.timeStamp = e.timeStamp;
    		  }
    		  function nt(t) {
    		    t.page.x = 0, t.page.y = 0, t.client.x = 0, t.client.y = 0;
    		  }
    		  function rt(t) {
    		    return t instanceof k.Event || t instanceof k.Touch;
    		  }
    		  function it(t, e, n) {
    		    return t = t || "page", (n = n || {}).x = e[t + "X"], n.y = e[t + "Y"], n;
    		  }
    		  function ot(t, e) {
    		    return e = e || {
    		      x: 0,
    		      y: 0
    		    }, I.isOperaMobile && rt(t) ? (it("screen", t, e), e.x += window.scrollX, e.y += window.scrollY) : it("page", t, e), e;
    		  }
    		  function at(t) {
    		    return w.number(t.pointerId) ? t.pointerId : t.identifier;
    		  }
    		  function st(t, e, n) {
    		    var r = e.length > 1 ? lt(e) : e[0];
    		    ot(r, t.page), function (t, e) {
    		      e = e || {}, I.isOperaMobile && rt(t) ? it("screen", t, e) : it("client", t, e);
    		    }(r, t.client), t.timeStamp = n;
    		  }
    		  function ct(t) {
    		    var e = [];
    		    return w.array(t) ? (e[0] = t[0], e[1] = t[1]) : "touchend" === t.type ? 1 === t.touches.length ? (e[0] = t.touches[0], e[1] = t.changedTouches[0]) : 0 === t.touches.length && (e[0] = t.changedTouches[0], e[1] = t.changedTouches[1]) : (e[0] = t.touches[0], e[1] = t.touches[1]), e;
    		  }
    		  function lt(t) {
    		    for (var e = {
    		        pageX: 0,
    		        pageY: 0,
    		        clientX: 0,
    		        clientY: 0,
    		        screenX: 0,
    		        screenY: 0
    		      }, n = 0; n < t.length; n++) {
    		      var r = t[n];
    		      for (var i in e) e[i] += r[i];
    		    }
    		    for (var o in e) e[o] /= t.length;
    		    return e;
    		  }
    		  function ut(t) {
    		    if (!t.length) return null;
    		    var e = ct(t),
    		      n = Math.min(e[0].pageX, e[1].pageX),
    		      r = Math.min(e[0].pageY, e[1].pageY),
    		      i = Math.max(e[0].pageX, e[1].pageX),
    		      o = Math.max(e[0].pageY, e[1].pageY);
    		    return {
    		      x: n,
    		      y: r,
    		      left: n,
    		      top: r,
    		      right: i,
    		      bottom: o,
    		      width: i - n,
    		      height: o - r
    		    };
    		  }
    		  function pt(t, e) {
    		    var n = e + "X",
    		      r = e + "Y",
    		      i = ct(t),
    		      o = i[0][n] - i[1][n],
    		      a = i[0][r] - i[1][r];
    		    return Q(o, a);
    		  }
    		  function ft(t, e) {
    		    var n = e + "X",
    		      r = e + "Y",
    		      i = ct(t),
    		      o = i[1][n] - i[0][n],
    		      a = i[1][r] - i[0][r];
    		    return 180 * Math.atan2(a, o) / Math.PI;
    		  }
    		  function dt(t) {
    		    return w.string(t.pointerType) ? t.pointerType : w.number(t.pointerType) ? [void 0, void 0, "touch", "pen", "mouse"][t.pointerType] : /touch/.test(t.type || "") || t instanceof k.Touch ? "touch" : "mouse";
    		  }
    		  function ht(t) {
    		    var e = w.func(t.composedPath) ? t.composedPath() : t.path;
    		    return [X(e ? e[0] : t.target), X(t.currentTarget)];
    		  }
    		  var vt = function () {
    		    function t(e) {
    		      r(this, t), this.immediatePropagationStopped = !1, this.propagationStopped = !1, this._interaction = e;
    		    }
    		    return o(t, [{
    		      key: "preventDefault",
    		      value: function () {}
    		    }, {
    		      key: "stopPropagation",
    		      value: function () {
    		        this.propagationStopped = !0;
    		      }
    		    }, {
    		      key: "stopImmediatePropagation",
    		      value: function () {
    		        this.immediatePropagationStopped = this.propagationStopped = !0;
    		      }
    		    }]), t;
    		  }();
    		  Object.defineProperty(vt.prototype, "interaction", {
    		    get: function () {
    		      return this._interaction._proxy;
    		    },
    		    set: function () {}
    		  });
    		  var gt = function (t, e) {
    		      for (var n = 0; n < e.length; n++) {
    		        var r = e[n];
    		        t.push(r);
    		      }
    		      return t;
    		    },
    		    mt = function (t) {
    		      return gt([], t);
    		    },
    		    yt = function (t, e) {
    		      for (var n = 0; n < t.length; n++) if (e(t[n], n, t)) return n;
    		      return -1;
    		    },
    		    bt = function (t, e) {
    		      return t[yt(t, e)];
    		    },
    		    xt = function (t) {
    		      s(n, t);
    		      var e = p(n);
    		      function n(t, i, o) {
    		        var a;
    		        r(this, n), (a = e.call(this, i._interaction)).dropzone = void 0, a.dragEvent = void 0, a.relatedTarget = void 0, a.draggable = void 0, a.propagationStopped = !1, a.immediatePropagationStopped = !1;
    		        var s = "dragleave" === o ? t.prev : t.cur,
    		          c = s.element,
    		          l = s.dropzone;
    		        return a.type = o, a.target = c, a.currentTarget = c, a.dropzone = l, a.dragEvent = i, a.relatedTarget = i.target, a.draggable = i.interactable, a.timeStamp = i.timeStamp, a;
    		      }
    		      return o(n, [{
    		        key: "reject",
    		        value: function () {
    		          var t = this,
    		            e = this._interaction.dropState;
    		          if ("dropactivate" === this.type || this.dropzone && e.cur.dropzone === this.dropzone && e.cur.element === this.target) if (e.prev.dropzone = this.dropzone, e.prev.element = this.target, e.rejected = !0, e.events.enter = null, this.stopImmediatePropagation(), "dropactivate" === this.type) {
    		            var r = e.activeDrops,
    		              i = yt(r, function (e) {
    		                var n = e.dropzone,
    		                  r = e.element;
    		                return n === t.dropzone && r === t.target;
    		              });
    		            e.activeDrops.splice(i, 1);
    		            var o = new n(e, this.dragEvent, "dropdeactivate");
    		            o.dropzone = this.dropzone, o.target = this.target, this.dropzone.fire(o);
    		          } else this.dropzone.fire(new n(e, this.dragEvent, "dragleave"));
    		        }
    		      }, {
    		        key: "preventDefault",
    		        value: function () {}
    		      }, {
    		        key: "stopPropagation",
    		        value: function () {
    		          this.propagationStopped = !0;
    		        }
    		      }, {
    		        key: "stopImmediatePropagation",
    		        value: function () {
    		          this.immediatePropagationStopped = this.propagationStopped = !0;
    		        }
    		      }]), n;
    		    }(vt);
    		  function wt(t, e) {
    		    for (var n = 0, r = t.slice(); n < r.length; n++) {
    		      var i = r[n],
    		        o = i.dropzone,
    		        a = i.element;
    		      e.dropzone = o, e.target = a, o.fire(e), e.propagationStopped = e.immediatePropagationStopped = !1;
    		    }
    		  }
    		  function Et(t, e) {
    		    for (var n = function (t, e) {
    		        for (var n = [], r = 0, i = t.interactables.list; r < i.length; r++) {
    		          var o = i[r];
    		          if (o.options.drop.enabled) {
    		            var a = o.options.drop.accept;
    		            if (!(w.element(a) && a !== e || w.string(a) && !R(e, a) || w.func(a) && !a({
    		              dropzone: o,
    		              draggableElement: e
    		            }))) for (var s = 0, c = o.getAllElements(); s < c.length; s++) {
    		              var l = c[s];
    		              l !== e && n.push({
    		                dropzone: o,
    		                element: l,
    		                rect: o.getRect(l)
    		              });
    		            }
    		          }
    		        }
    		        return n;
    		      }(t, e), r = 0; r < n.length; r++) {
    		      var i = n[r];
    		      i.rect = i.dropzone.getRect(i.element);
    		    }
    		    return n;
    		  }
    		  function Tt(t, e, n) {
    		    for (var r = t.dropState, i = t.interactable, o = t.element, a = [], s = 0, c = r.activeDrops; s < c.length; s++) {
    		      var l = c[s],
    		        u = l.dropzone,
    		        p = l.element,
    		        f = l.rect,
    		        d = u.dropCheck(e, n, i, o, p, f);
    		      a.push(d ? p : null);
    		    }
    		    var h = function (t) {
    		      for (var e, n, r, i = [], o = 0; o < t.length; o++) {
    		        var a = t[o],
    		          s = t[e];
    		        if (a && o !== e) if (s) {
    		          var c = C(a),
    		            l = C(s);
    		          if (c !== a.ownerDocument) if (l !== a.ownerDocument) {
    		            if (c !== l) {
    		              i = i.length ? i : j(s);
    		              var u = void 0;
    		              if (s instanceof k.HTMLElement && a instanceof k.SVGElement && !(a instanceof k.SVGSVGElement)) {
    		                if (a === l) continue;
    		                u = a.ownerSVGElement;
    		              } else u = a;
    		              for (var p = j(u, s.ownerDocument), f = 0; p[f] && p[f] === i[f];) f++;
    		              var d = [p[f - 1], p[f], i[f]];
    		              if (d[0]) for (var h = d[0].lastChild; h;) {
    		                if (h === d[1]) {
    		                  e = o, i = p;
    		                  break;
    		                }
    		                if (h === d[2]) break;
    		                h = h.previousSibling;
    		              }
    		            } else r = s, (parseInt(y(n = a).getComputedStyle(n).zIndex, 10) || 0) >= (parseInt(y(r).getComputedStyle(r).zIndex, 10) || 0) && (e = o);
    		          } else e = o;
    		        } else e = o;
    		      }
    		      return e;
    		    }(a);
    		    return r.activeDrops[h] || null;
    		  }
    		  function St(t, e, n) {
    		    var r = t.dropState,
    		      i = {
    		        enter: null,
    		        leave: null,
    		        activate: null,
    		        deactivate: null,
    		        move: null,
    		        drop: null
    		      };
    		    return "dragstart" === n.type && (i.activate = new xt(r, n, "dropactivate"), i.activate.target = null, i.activate.dropzone = null), "dragend" === n.type && (i.deactivate = new xt(r, n, "dropdeactivate"), i.deactivate.target = null, i.deactivate.dropzone = null), r.rejected || (r.cur.element !== r.prev.element && (r.prev.dropzone && (i.leave = new xt(r, n, "dragleave"), n.dragLeave = i.leave.target = r.prev.element, n.prevDropzone = i.leave.dropzone = r.prev.dropzone), r.cur.dropzone && (i.enter = new xt(r, n, "dragenter"), n.dragEnter = r.cur.element, n.dropzone = r.cur.dropzone)), "dragend" === n.type && r.cur.dropzone && (i.drop = new xt(r, n, "drop"), n.dropzone = r.cur.dropzone, n.relatedTarget = r.cur.element), "dragmove" === n.type && r.cur.dropzone && (i.move = new xt(r, n, "dropmove"), n.dropzone = r.cur.dropzone)), i;
    		  }
    		  function _t(t, e) {
    		    var n = t.dropState,
    		      r = n.activeDrops,
    		      i = n.cur,
    		      o = n.prev;
    		    e.leave && o.dropzone.fire(e.leave), e.enter && i.dropzone.fire(e.enter), e.move && i.dropzone.fire(e.move), e.drop && i.dropzone.fire(e.drop), e.deactivate && wt(r, e.deactivate), n.prev.dropzone = i.dropzone, n.prev.element = i.element;
    		  }
    		  function Pt(t, e) {
    		    var n = t.interaction,
    		      r = t.iEvent,
    		      i = t.event;
    		    if ("dragmove" === r.type || "dragend" === r.type) {
    		      var o = n.dropState;
    		      e.dynamicDrop && (o.activeDrops = Et(e, n.element));
    		      var a = r,
    		        s = Tt(n, a, i);
    		      o.rejected = o.rejected && !!s && s.dropzone === o.cur.dropzone && s.element === o.cur.element, o.cur.dropzone = s && s.dropzone, o.cur.element = s && s.element, o.events = St(n, 0, a);
    		    }
    		  }
    		  var Ot = {
    		      id: "actions/drop",
    		      install: function (t) {
    		        var e = t.actions,
    		          n = t.interactStatic,
    		          r = t.Interactable,
    		          i = t.defaults;
    		        t.usePlugin(_), r.prototype.dropzone = function (t) {
    		          return function (t, e) {
    		            if (w.object(e)) {
    		              if (t.options.drop.enabled = !1 !== e.enabled, e.listeners) {
    		                var n = $(e.listeners),
    		                  r = Object.keys(n).reduce(function (t, e) {
    		                    return t[/^(enter|leave)/.test(e) ? "drag".concat(e) : /^(activate|deactivate|move)/.test(e) ? "drop".concat(e) : e] = n[e], t;
    		                  }, {}),
    		                  i = t.options.drop.listeners;
    		                i && t.off(i), t.on(r), t.options.drop.listeners = r;
    		              }
    		              return w.func(e.ondrop) && t.on("drop", e.ondrop), w.func(e.ondropactivate) && t.on("dropactivate", e.ondropactivate), w.func(e.ondropdeactivate) && t.on("dropdeactivate", e.ondropdeactivate), w.func(e.ondragenter) && t.on("dragenter", e.ondragenter), w.func(e.ondragleave) && t.on("dragleave", e.ondragleave), w.func(e.ondropmove) && t.on("dropmove", e.ondropmove), /^(pointer|center)$/.test(e.overlap) ? t.options.drop.overlap = e.overlap : w.number(e.overlap) && (t.options.drop.overlap = Math.max(Math.min(1, e.overlap), 0)), "accept" in e && (t.options.drop.accept = e.accept), "checker" in e && (t.options.drop.checker = e.checker), t;
    		            }
    		            if (w.bool(e)) return t.options.drop.enabled = e, t;
    		            return t.options.drop;
    		          }(this, t);
    		        }, r.prototype.dropCheck = function (t, e, n, r, i, o) {
    		          return function (t, e, n, r, i, o, a) {
    		            var s = !1;
    		            if (!(a = a || t.getRect(o))) return !!t.options.drop.checker && t.options.drop.checker(e, n, s, t, o, r, i);
    		            var c = t.options.drop.overlap;
    		            if ("pointer" === c) {
    		              var l = K(r, i, "drag"),
    		                u = ot(e);
    		              u.x += l.x, u.y += l.y;
    		              var p = u.x > a.left && u.x < a.right,
    		                f = u.y > a.top && u.y < a.bottom;
    		              s = p && f;
    		            }
    		            var d = r.getRect(i);
    		            if (d && "center" === c) {
    		              var h = d.left + d.width / 2,
    		                v = d.top + d.height / 2;
    		              s = h >= a.left && h <= a.right && v >= a.top && v <= a.bottom;
    		            }
    		            if (d && w.number(c)) {
    		              s = Math.max(0, Math.min(a.right, d.right) - Math.max(a.left, d.left)) * Math.max(0, Math.min(a.bottom, d.bottom) - Math.max(a.top, d.top)) / (d.width * d.height) >= c;
    		            }
    		            t.options.drop.checker && (s = t.options.drop.checker(e, n, s, t, o, r, i));
    		            return s;
    		          }(this, t, e, n, r, i, o);
    		        }, n.dynamicDrop = function (e) {
    		          return w.bool(e) ? (t.dynamicDrop = e, n) : t.dynamicDrop;
    		        }, V(e.phaselessTypes, {
    		          dragenter: !0,
    		          dragleave: !0,
    		          dropactivate: !0,
    		          dropdeactivate: !0,
    		          dropmove: !0,
    		          drop: !0
    		        }), e.methodDict.drop = "dropzone", t.dynamicDrop = !1, i.actions.drop = Ot.defaults;
    		      },
    		      listeners: {
    		        "interactions:before-action-start": function (t) {
    		          var e = t.interaction;
    		          "drag" === e.prepared.name && (e.dropState = {
    		            cur: {
    		              dropzone: null,
    		              element: null
    		            },
    		            prev: {
    		              dropzone: null,
    		              element: null
    		            },
    		            rejected: null,
    		            events: null,
    		            activeDrops: []
    		          });
    		        },
    		        "interactions:after-action-start": function (t, e) {
    		          var n = t.interaction,
    		            r = (t.event, t.iEvent);
    		          if ("drag" === n.prepared.name) {
    		            var i = n.dropState;
    		            i.activeDrops = [], i.events = {}, i.activeDrops = Et(e, n.element), i.events = St(n, 0, r), i.events.activate && (wt(i.activeDrops, i.events.activate), e.fire("actions/drop:start", {
    		              interaction: n,
    		              dragEvent: r
    		            }));
    		          }
    		        },
    		        "interactions:action-move": Pt,
    		        "interactions:after-action-move": function (t, e) {
    		          var n = t.interaction,
    		            r = t.iEvent;
    		          if ("drag" === n.prepared.name) {
    		            var i = n.dropState;
    		            _t(n, i.events), e.fire("actions/drop:move", {
    		              interaction: n,
    		              dragEvent: r
    		            }), i.events = {};
    		          }
    		        },
    		        "interactions:action-end": function (t, e) {
    		          if ("drag" === t.interaction.prepared.name) {
    		            var n = t.interaction,
    		              r = t.iEvent;
    		            Pt(t, e), _t(n, n.dropState.events), e.fire("actions/drop:end", {
    		              interaction: n,
    		              dragEvent: r
    		            });
    		          }
    		        },
    		        "interactions:stop": function (t) {
    		          var e = t.interaction;
    		          if ("drag" === e.prepared.name) {
    		            var n = e.dropState;
    		            n && (n.activeDrops = null, n.events = null, n.cur.dropzone = null, n.cur.element = null, n.prev.dropzone = null, n.prev.element = null, n.rejected = !1);
    		          }
    		        }
    		      },
    		      getActiveDrops: Et,
    		      getDrop: Tt,
    		      getDropEvents: St,
    		      fireDropEvents: _t,
    		      filterEventType: function (t) {
    		        return 0 === t.search("drag") || 0 === t.search("drop");
    		      },
    		      defaults: {
    		        enabled: !1,
    		        accept: null,
    		        overlap: "pointer"
    		      }
    		    },
    		    kt = Ot;
    		  function Dt(t) {
    		    var e = t.interaction,
    		      n = t.iEvent,
    		      r = t.phase;
    		    if ("gesture" === e.prepared.name) {
    		      var i = e.pointers.map(function (t) {
    		          return t.pointer;
    		        }),
    		        o = "start" === r,
    		        a = "end" === r,
    		        s = e.interactable.options.deltaSource;
    		      if (n.touches = [i[0], i[1]], o) n.distance = pt(i, s), n.box = ut(i), n.scale = 1, n.ds = 0, n.angle = ft(i, s), n.da = 0, e.gesture.startDistance = n.distance, e.gesture.startAngle = n.angle;else if (a || e.pointers.length < 2) {
    		        var c = e.prevEvent;
    		        n.distance = c.distance, n.box = c.box, n.scale = c.scale, n.ds = 0, n.angle = c.angle, n.da = 0;
    		      } else n.distance = pt(i, s), n.box = ut(i), n.scale = n.distance / e.gesture.startDistance, n.angle = ft(i, s), n.ds = n.scale - e.gesture.scale, n.da = n.angle - e.gesture.angle;
    		      e.gesture.distance = n.distance, e.gesture.angle = n.angle, w.number(n.scale) && n.scale !== 1 / 0 && !isNaN(n.scale) && (e.gesture.scale = n.scale);
    		    }
    		  }
    		  var It = {
    		      id: "actions/gesture",
    		      before: ["actions/drag", "actions/resize"],
    		      install: function (t) {
    		        var e = t.actions,
    		          n = t.Interactable,
    		          r = t.defaults;
    		        n.prototype.gesturable = function (t) {
    		          return w.object(t) ? (this.options.gesture.enabled = !1 !== t.enabled, this.setPerAction("gesture", t), this.setOnEvents("gesture", t), this) : w.bool(t) ? (this.options.gesture.enabled = t, this) : this.options.gesture;
    		        }, e.map.gesture = It, e.methodDict.gesture = "gesturable", r.actions.gesture = It.defaults;
    		      },
    		      listeners: {
    		        "interactions:action-start": Dt,
    		        "interactions:action-move": Dt,
    		        "interactions:action-end": Dt,
    		        "interactions:new": function (t) {
    		          t.interaction.gesture = {
    		            angle: 0,
    		            distance: 0,
    		            scale: 1,
    		            startAngle: 0,
    		            startDistance: 0
    		          };
    		        },
    		        "auto-start:check": function (t) {
    		          if (!(t.interaction.pointers.length < 2)) {
    		            var e = t.interactable.options.gesture;
    		            if (e && e.enabled) return t.action = {
    		              name: "gesture"
    		            }, !1;
    		          }
    		        }
    		      },
    		      defaults: {},
    		      getCursor: function () {
    		        return "";
    		      },
    		      filterEventType: function (t) {
    		        return 0 === t.search("gesture");
    		      }
    		    },
    		    Mt = It;
    		  function zt(t, e, n, r, i, o, a) {
    		    if (!e) return !1;
    		    if (!0 === e) {
    		      var s = w.number(o.width) ? o.width : o.right - o.left,
    		        c = w.number(o.height) ? o.height : o.bottom - o.top;
    		      if (a = Math.min(a, Math.abs(("left" === t || "right" === t ? s : c) / 2)), s < 0 && ("left" === t ? t = "right" : "right" === t && (t = "left")), c < 0 && ("top" === t ? t = "bottom" : "bottom" === t && (t = "top")), "left" === t) {
    		        var l = s >= 0 ? o.left : o.right;
    		        return n.x < l + a;
    		      }
    		      if ("top" === t) {
    		        var u = c >= 0 ? o.top : o.bottom;
    		        return n.y < u + a;
    		      }
    		      if ("right" === t) return n.x > (s >= 0 ? o.right : o.left) - a;
    		      if ("bottom" === t) return n.y > (c >= 0 ? o.bottom : o.top) - a;
    		    }
    		    return !!w.element(r) && (w.element(e) ? e === r : F(r, e, i));
    		  }
    		  function At(t) {
    		    var e = t.iEvent,
    		      n = t.interaction;
    		    if ("resize" === n.prepared.name && n.resizeAxes) {
    		      var r = e;
    		      n.interactable.options.resize.square ? ("y" === n.resizeAxes ? r.delta.x = r.delta.y : r.delta.y = r.delta.x, r.axes = "xy") : (r.axes = n.resizeAxes, "x" === n.resizeAxes ? r.delta.y = 0 : "y" === n.resizeAxes && (r.delta.x = 0));
    		    }
    		  }
    		  var Rt,
    		    Ct,
    		    jt = {
    		      id: "actions/resize",
    		      before: ["actions/drag"],
    		      install: function (t) {
    		        var e = t.actions,
    		          n = t.browser,
    		          r = t.Interactable,
    		          i = t.defaults;
    		        jt.cursors = function (t) {
    		          return t.isIe9 ? {
    		            x: "e-resize",
    		            y: "s-resize",
    		            xy: "se-resize",
    		            top: "n-resize",
    		            left: "w-resize",
    		            bottom: "s-resize",
    		            right: "e-resize",
    		            topleft: "se-resize",
    		            bottomright: "se-resize",
    		            topright: "ne-resize",
    		            bottomleft: "ne-resize"
    		          } : {
    		            x: "ew-resize",
    		            y: "ns-resize",
    		            xy: "nwse-resize",
    		            top: "ns-resize",
    		            left: "ew-resize",
    		            bottom: "ns-resize",
    		            right: "ew-resize",
    		            topleft: "nwse-resize",
    		            bottomright: "nwse-resize",
    		            topright: "nesw-resize",
    		            bottomleft: "nesw-resize"
    		          };
    		        }(n), jt.defaultMargin = n.supportsTouch || n.supportsPointerEvent ? 20 : 10, r.prototype.resizable = function (e) {
    		          return function (t, e, n) {
    		            if (w.object(e)) return t.options.resize.enabled = !1 !== e.enabled, t.setPerAction("resize", e), t.setOnEvents("resize", e), w.string(e.axis) && /^x$|^y$|^xy$/.test(e.axis) ? t.options.resize.axis = e.axis : null === e.axis && (t.options.resize.axis = n.defaults.actions.resize.axis), w.bool(e.preserveAspectRatio) ? t.options.resize.preserveAspectRatio = e.preserveAspectRatio : w.bool(e.square) && (t.options.resize.square = e.square), t;
    		            if (w.bool(e)) return t.options.resize.enabled = e, t;
    		            return t.options.resize;
    		          }(this, e, t);
    		        }, e.map.resize = jt, e.methodDict.resize = "resizable", i.actions.resize = jt.defaults;
    		      },
    		      listeners: {
    		        "interactions:new": function (t) {
    		          t.interaction.resizeAxes = "xy";
    		        },
    		        "interactions:action-start": function (t) {
    		          !function (t) {
    		            var e = t.iEvent,
    		              n = t.interaction;
    		            if ("resize" === n.prepared.name && n.prepared.edges) {
    		              var r = e,
    		                i = n.rect;
    		              n._rects = {
    		                start: V({}, i),
    		                corrected: V({}, i),
    		                previous: V({}, i),
    		                delta: {
    		                  left: 0,
    		                  right: 0,
    		                  width: 0,
    		                  top: 0,
    		                  bottom: 0,
    		                  height: 0
    		                }
    		              }, r.edges = n.prepared.edges, r.rect = n._rects.corrected, r.deltaRect = n._rects.delta;
    		            }
    		          }(t), At(t);
    		        },
    		        "interactions:action-move": function (t) {
    		          !function (t) {
    		            var e = t.iEvent,
    		              n = t.interaction;
    		            if ("resize" === n.prepared.name && n.prepared.edges) {
    		              var r = e,
    		                i = n.interactable.options.resize.invert,
    		                o = "reposition" === i || "negate" === i,
    		                a = n.rect,
    		                s = n._rects,
    		                c = s.start,
    		                l = s.corrected,
    		                u = s.delta,
    		                p = s.previous;
    		              if (V(p, l), o) {
    		                if (V(l, a), "reposition" === i) {
    		                  if (l.top > l.bottom) {
    		                    var f = l.top;
    		                    l.top = l.bottom, l.bottom = f;
    		                  }
    		                  if (l.left > l.right) {
    		                    var d = l.left;
    		                    l.left = l.right, l.right = d;
    		                  }
    		                }
    		              } else l.top = Math.min(a.top, c.bottom), l.bottom = Math.max(a.bottom, c.top), l.left = Math.min(a.left, c.right), l.right = Math.max(a.right, c.left);
    		              for (var h in l.width = l.right - l.left, l.height = l.bottom - l.top, l) u[h] = l[h] - p[h];
    		              r.edges = n.prepared.edges, r.rect = l, r.deltaRect = u;
    		            }
    		          }(t), At(t);
    		        },
    		        "interactions:action-end": function (t) {
    		          var e = t.iEvent,
    		            n = t.interaction;
    		          if ("resize" === n.prepared.name && n.prepared.edges) {
    		            var r = e;
    		            r.edges = n.prepared.edges, r.rect = n._rects.corrected, r.deltaRect = n._rects.delta;
    		          }
    		        },
    		        "auto-start:check": function (t) {
    		          var e = t.interaction,
    		            n = t.interactable,
    		            r = t.element,
    		            i = t.rect,
    		            o = t.buttons;
    		          if (i) {
    		            var a = V({}, e.coords.cur.page),
    		              s = n.options.resize;
    		            if (s && s.enabled && (!e.pointerIsDown || !/mouse|pointer/.test(e.pointerType) || 0 != (o & s.mouseButtons))) {
    		              if (w.object(s.edges)) {
    		                var c = {
    		                  left: !1,
    		                  right: !1,
    		                  top: !1,
    		                  bottom: !1
    		                };
    		                for (var l in c) c[l] = zt(l, s.edges[l], a, e._latestPointer.eventTarget, r, i, s.margin || jt.defaultMargin);
    		                c.left = c.left && !c.right, c.top = c.top && !c.bottom, (c.left || c.right || c.top || c.bottom) && (t.action = {
    		                  name: "resize",
    		                  edges: c
    		                });
    		              } else {
    		                var u = "y" !== s.axis && a.x > i.right - jt.defaultMargin,
    		                  p = "x" !== s.axis && a.y > i.bottom - jt.defaultMargin;
    		                (u || p) && (t.action = {
    		                  name: "resize",
    		                  axes: (u ? "x" : "") + (p ? "y" : "")
    		                });
    		              }
    		              return !t.action && void 0;
    		            }
    		          }
    		        }
    		      },
    		      defaults: {
    		        square: !1,
    		        preserveAspectRatio: !1,
    		        axis: "xy",
    		        margin: NaN,
    		        edges: null,
    		        invert: "none"
    		      },
    		      cursors: null,
    		      getCursor: function (t) {
    		        var e = t.edges,
    		          n = t.axis,
    		          r = t.name,
    		          i = jt.cursors,
    		          o = null;
    		        if (n) o = i[r + n];else if (e) {
    		          for (var a = "", s = 0, c = ["top", "bottom", "left", "right"]; s < c.length; s++) {
    		            var l = c[s];
    		            e[l] && (a += l);
    		          }
    		          o = i[a];
    		        }
    		        return o;
    		      },
    		      filterEventType: function (t) {
    		        return 0 === t.search("resize");
    		      },
    		      defaultMargin: null
    		    },
    		    Ft = jt,
    		    Xt = {
    		      id: "actions",
    		      install: function (t) {
    		        t.usePlugin(Mt), t.usePlugin(Ft), t.usePlugin(_), t.usePlugin(kt);
    		      }
    		    },
    		    Yt = 0;
    		  var Lt = {
    		    request: function (t) {
    		      return Rt(t);
    		    },
    		    cancel: function (t) {
    		      return Ct(t);
    		    },
    		    init: function (t) {
    		      if (Rt = t.requestAnimationFrame, Ct = t.cancelAnimationFrame, !Rt) for (var e = ["ms", "moz", "webkit", "o"], n = 0; n < e.length; n++) {
    		        var r = e[n];
    		        Rt = t["".concat(r, "RequestAnimationFrame")], Ct = t["".concat(r, "CancelAnimationFrame")] || t["".concat(r, "CancelRequestAnimationFrame")];
    		      }
    		      Rt = Rt && Rt.bind(t), Ct = Ct && Ct.bind(t), Rt || (Rt = function (e) {
    		        var n = Date.now(),
    		          r = Math.max(0, 16 - (n - Yt)),
    		          i = t.setTimeout(function () {
    		            e(n + r);
    		          }, r);
    		        return Yt = n + r, i;
    		      }, Ct = function (t) {
    		        return clearTimeout(t);
    		      });
    		    }
    		  };
    		  var qt = {
    		    defaults: {
    		      enabled: !1,
    		      margin: 60,
    		      container: null,
    		      speed: 300
    		    },
    		    now: Date.now,
    		    interaction: null,
    		    i: 0,
    		    x: 0,
    		    y: 0,
    		    isScrolling: !1,
    		    prevTime: 0,
    		    margin: 0,
    		    speed: 0,
    		    start: function (t) {
    		      qt.isScrolling = !0, Lt.cancel(qt.i), t.autoScroll = qt, qt.interaction = t, qt.prevTime = qt.now(), qt.i = Lt.request(qt.scroll);
    		    },
    		    stop: function () {
    		      qt.isScrolling = !1, qt.interaction && (qt.interaction.autoScroll = null), Lt.cancel(qt.i);
    		    },
    		    scroll: function () {
    		      var t = qt.interaction,
    		        e = t.interactable,
    		        n = t.element,
    		        r = t.prepared.name,
    		        i = e.options[r].autoScroll,
    		        o = Bt(i.container, e, n),
    		        a = qt.now(),
    		        s = (a - qt.prevTime) / 1e3,
    		        c = i.speed * s;
    		      if (c >= 1) {
    		        var l = {
    		          x: qt.x * c,
    		          y: qt.y * c
    		        };
    		        if (l.x || l.y) {
    		          var u = Vt(o);
    		          w.window(o) ? o.scrollBy(l.x, l.y) : o && (o.scrollLeft += l.x, o.scrollTop += l.y);
    		          var p = Vt(o),
    		            f = {
    		              x: p.x - u.x,
    		              y: p.y - u.y
    		            };
    		          (f.x || f.y) && e.fire({
    		            type: "autoscroll",
    		            target: n,
    		            interactable: e,
    		            delta: f,
    		            interaction: t,
    		            container: o
    		          });
    		        }
    		        qt.prevTime = a;
    		      }
    		      qt.isScrolling && (Lt.cancel(qt.i), qt.i = Lt.request(qt.scroll));
    		    },
    		    check: function (t, e) {
    		      var n;
    		      return null == (n = t.options[e].autoScroll) ? void 0 : n.enabled;
    		    },
    		    onInteractionMove: function (t) {
    		      var e = t.interaction,
    		        n = t.pointer;
    		      if (e.interacting() && qt.check(e.interactable, e.prepared.name)) if (e.simulation) qt.x = qt.y = 0;else {
    		        var r,
    		          i,
    		          o,
    		          a,
    		          s = e.interactable,
    		          c = e.element,
    		          l = e.prepared.name,
    		          u = s.options[l].autoScroll,
    		          p = Bt(u.container, s, c);
    		        if (w.window(p)) a = n.clientX < qt.margin, r = n.clientY < qt.margin, i = n.clientX > p.innerWidth - qt.margin, o = n.clientY > p.innerHeight - qt.margin;else {
    		          var f = Y(p);
    		          a = n.clientX < f.left + qt.margin, r = n.clientY < f.top + qt.margin, i = n.clientX > f.right - qt.margin, o = n.clientY > f.bottom - qt.margin;
    		        }
    		        qt.x = i ? 1 : a ? -1 : 0, qt.y = o ? 1 : r ? -1 : 0, qt.isScrolling || (qt.margin = u.margin, qt.speed = u.speed, qt.start(e));
    		      }
    		    }
    		  };
    		  function Bt(t, e, n) {
    		    return (w.string(t) ? W(t, e, n) : t) || y(n);
    		  }
    		  function Vt(t) {
    		    return w.window(t) && (t = window.document.body), {
    		      x: t.scrollLeft,
    		      y: t.scrollTop
    		    };
    		  }
    		  var Wt = {
    		      id: "auto-scroll",
    		      install: function (t) {
    		        var e = t.defaults,
    		          n = t.actions;
    		        t.autoScroll = qt, qt.now = function () {
    		          return t.now();
    		        }, n.phaselessTypes.autoscroll = !0, e.perAction.autoScroll = qt.defaults;
    		      },
    		      listeners: {
    		        "interactions:new": function (t) {
    		          t.interaction.autoScroll = null;
    		        },
    		        "interactions:destroy": function (t) {
    		          t.interaction.autoScroll = null, qt.stop(), qt.interaction && (qt.interaction = null);
    		        },
    		        "interactions:stop": qt.stop,
    		        "interactions:action-move": function (t) {
    		          return qt.onInteractionMove(t);
    		        }
    		      }
    		    },
    		    Gt = Wt;
    		  function Nt(t, e) {
    		    var n = !1;
    		    return function () {
    		      return n || (g.console.warn(e), n = !0), t.apply(this, arguments);
    		    };
    		  }
    		  function Ut(t, e) {
    		    return t.name = e.name, t.axis = e.axis, t.edges = e.edges, t;
    		  }
    		  function Ht(t) {
    		    return w.bool(t) ? (this.options.styleCursor = t, this) : null === t ? (delete this.options.styleCursor, this) : this.options.styleCursor;
    		  }
    		  function Kt(t) {
    		    return w.func(t) ? (this.options.actionChecker = t, this) : null === t ? (delete this.options.actionChecker, this) : this.options.actionChecker;
    		  }
    		  var $t = {
    		    id: "auto-start/interactableMethods",
    		    install: function (t) {
    		      var e = t.Interactable;
    		      e.prototype.getAction = function (e, n, r, i) {
    		        var o = function (t, e, n, r, i) {
    		          var o = t.getRect(r),
    		            a = e.buttons || {
    		              0: 1,
    		              1: 4,
    		              3: 8,
    		              4: 16
    		            }[e.button],
    		            s = {
    		              action: null,
    		              interactable: t,
    		              interaction: n,
    		              element: r,
    		              rect: o,
    		              buttons: a
    		            };
    		          return i.fire("auto-start:check", s), s.action;
    		        }(this, n, r, i, t);
    		        return this.options.actionChecker ? this.options.actionChecker(e, n, o, this, i, r) : o;
    		      }, e.prototype.ignoreFrom = Nt(function (t) {
    		        return this._backCompatOption("ignoreFrom", t);
    		      }, "Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."), e.prototype.allowFrom = Nt(function (t) {
    		        return this._backCompatOption("allowFrom", t);
    		      }, "Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."), e.prototype.actionChecker = Kt, e.prototype.styleCursor = Ht;
    		    }
    		  };
    		  function Jt(t, e, n, r, i) {
    		    return e.testIgnoreAllow(e.options[t.name], n, r) && e.options[t.name].enabled && ee(e, n, t, i) ? t : null;
    		  }
    		  function Qt(t, e, n, r, i, o, a) {
    		    for (var s = 0, c = r.length; s < c; s++) {
    		      var l = r[s],
    		        u = i[s],
    		        p = l.getAction(e, n, t, u);
    		      if (p) {
    		        var f = Jt(p, l, u, o, a);
    		        if (f) return {
    		          action: f,
    		          interactable: l,
    		          element: u
    		        };
    		      }
    		    }
    		    return {
    		      action: null,
    		      interactable: null,
    		      element: null
    		    };
    		  }
    		  function Zt(t, e, n, r, i) {
    		    var o = [],
    		      a = [],
    		      s = r;
    		    function c(t) {
    		      o.push(t), a.push(s);
    		    }
    		    for (; w.element(s);) {
    		      o = [], a = [], i.interactables.forEachMatch(s, c);
    		      var l = Qt(t, e, n, o, a, r, i);
    		      if (l.action && !l.interactable.options[l.action.name].manualStart) return l;
    		      s = A(s);
    		    }
    		    return {
    		      action: null,
    		      interactable: null,
    		      element: null
    		    };
    		  }
    		  function te(t, e, n) {
    		    var r = e.action,
    		      i = e.interactable,
    		      o = e.element;
    		    r = r || {
    		      name: null
    		    }, t.interactable = i, t.element = o, Ut(t.prepared, r), t.rect = i && r.name ? i.getRect(o) : null, ie(t, n), n.fire("autoStart:prepared", {
    		      interaction: t
    		    });
    		  }
    		  function ee(t, e, n, r) {
    		    var i = t.options,
    		      o = i[n.name].max,
    		      a = i[n.name].maxPerElement,
    		      s = r.autoStart.maxInteractions,
    		      c = 0,
    		      l = 0,
    		      u = 0;
    		    if (!(o && a && s)) return !1;
    		    for (var p = 0, f = r.interactions.list; p < f.length; p++) {
    		      var d = f[p],
    		        h = d.prepared.name;
    		      if (d.interacting()) {
    		        if (++c >= s) return !1;
    		        if (d.interactable === t) {
    		          if ((l += h === n.name ? 1 : 0) >= o) return !1;
    		          if (d.element === e && (u++, h === n.name && u >= a)) return !1;
    		        }
    		      }
    		    }
    		    return s > 0;
    		  }
    		  function ne(t, e) {
    		    return w.number(t) ? (e.autoStart.maxInteractions = t, this) : e.autoStart.maxInteractions;
    		  }
    		  function re(t, e, n) {
    		    var r = n.autoStart.cursorElement;
    		    r && r !== t && (r.style.cursor = ""), t.ownerDocument.documentElement.style.cursor = e, t.style.cursor = e, n.autoStart.cursorElement = e ? t : null;
    		  }
    		  function ie(t, e) {
    		    var n = t.interactable,
    		      r = t.element,
    		      i = t.prepared;
    		    if ("mouse" === t.pointerType && n && n.options.styleCursor) {
    		      var o = "";
    		      if (i.name) {
    		        var a = n.options[i.name].cursorChecker;
    		        o = w.func(a) ? a(i, n, r, t._interacting) : e.actions.map[i.name].getCursor(i);
    		      }
    		      re(t.element, o || "", e);
    		    } else e.autoStart.cursorElement && re(e.autoStart.cursorElement, "", e);
    		  }
    		  var oe = {
    		      id: "auto-start/base",
    		      before: ["actions"],
    		      install: function (t) {
    		        var e = t.interactStatic,
    		          n = t.defaults;
    		        t.usePlugin($t), n.base.actionChecker = null, n.base.styleCursor = !0, V(n.perAction, {
    		          manualStart: !1,
    		          max: 1 / 0,
    		          maxPerElement: 1,
    		          allowFrom: null,
    		          ignoreFrom: null,
    		          mouseButtons: 1
    		        }), e.maxInteractions = function (e) {
    		          return ne(e, t);
    		        }, t.autoStart = {
    		          maxInteractions: 1 / 0,
    		          withinInteractionLimit: ee,
    		          cursorElement: null
    		        };
    		      },
    		      listeners: {
    		        "interactions:down": function (t, e) {
    		          var n = t.interaction,
    		            r = t.pointer,
    		            i = t.event,
    		            o = t.eventTarget;
    		          n.interacting() || te(n, Zt(n, r, i, o, e), e);
    		        },
    		        "interactions:move": function (t, e) {
    		          !function (t, e) {
    		            var n = t.interaction,
    		              r = t.pointer,
    		              i = t.event,
    		              o = t.eventTarget;
    		            "mouse" !== n.pointerType || n.pointerIsDown || n.interacting() || te(n, Zt(n, r, i, o, e), e);
    		          }(t, e), function (t, e) {
    		            var n = t.interaction;
    		            if (n.pointerIsDown && !n.interacting() && n.pointerWasMoved && n.prepared.name) {
    		              e.fire("autoStart:before-start", t);
    		              var r = n.interactable,
    		                i = n.prepared.name;
    		              i && r && (r.options[i].manualStart || !ee(r, n.element, n.prepared, e) ? n.stop() : (n.start(n.prepared, r, n.element), ie(n, e)));
    		            }
    		          }(t, e);
    		        },
    		        "interactions:stop": function (t, e) {
    		          var n = t.interaction,
    		            r = n.interactable;
    		          r && r.options.styleCursor && re(n.element, "", e);
    		        }
    		      },
    		      maxInteractions: ne,
    		      withinInteractionLimit: ee,
    		      validateAction: Jt
    		    },
    		    ae = oe;
    		  var se = {
    		    id: "auto-start/dragAxis",
    		    listeners: {
    		      "autoStart:before-start": function (t, e) {
    		        var n = t.interaction,
    		          r = t.eventTarget,
    		          i = t.dx,
    		          o = t.dy;
    		        if ("drag" === n.prepared.name) {
    		          var a = Math.abs(i),
    		            s = Math.abs(o),
    		            c = n.interactable.options.drag,
    		            l = c.startAxis,
    		            u = a > s ? "x" : a < s ? "y" : "xy";
    		          if (n.prepared.axis = "start" === c.lockAxis ? u[0] : c.lockAxis, "xy" !== u && "xy" !== l && l !== u) {
    		            n.prepared.name = null;
    		            for (var p = r, f = function (t) {
    		                if (t !== n.interactable) {
    		                  var i = n.interactable.options.drag;
    		                  if (!i.manualStart && t.testIgnoreAllow(i, p, r)) {
    		                    var o = t.getAction(n.downPointer, n.downEvent, n, p);
    		                    if (o && "drag" === o.name && function (t, e) {
    		                      if (!e) return !1;
    		                      var n = e.options.drag.startAxis;
    		                      return "xy" === t || "xy" === n || n === t;
    		                    }(u, t) && ae.validateAction(o, t, p, r, e)) return t;
    		                  }
    		                }
    		              }; w.element(p);) {
    		              var d = e.interactables.forEachMatch(p, f);
    		              if (d) {
    		                n.prepared.name = "drag", n.interactable = d, n.element = p;
    		                break;
    		              }
    		              p = A(p);
    		            }
    		          }
    		        }
    		      }
    		    }
    		  };
    		  function ce(t) {
    		    var e = t.prepared && t.prepared.name;
    		    if (!e) return null;
    		    var n = t.interactable.options;
    		    return n[e].hold || n[e].delay;
    		  }
    		  var le = {
    		      id: "auto-start/hold",
    		      install: function (t) {
    		        var e = t.defaults;
    		        t.usePlugin(ae), e.perAction.hold = 0, e.perAction.delay = 0;
    		      },
    		      listeners: {
    		        "interactions:new": function (t) {
    		          t.interaction.autoStartHoldTimer = null;
    		        },
    		        "autoStart:prepared": function (t) {
    		          var e = t.interaction,
    		            n = ce(e);
    		          n > 0 && (e.autoStartHoldTimer = setTimeout(function () {
    		            e.start(e.prepared, e.interactable, e.element);
    		          }, n));
    		        },
    		        "interactions:move": function (t) {
    		          var e = t.interaction,
    		            n = t.duplicate;
    		          e.autoStartHoldTimer && e.pointerWasMoved && !n && (clearTimeout(e.autoStartHoldTimer), e.autoStartHoldTimer = null);
    		        },
    		        "autoStart:before-start": function (t) {
    		          var e = t.interaction;
    		          ce(e) > 0 && (e.prepared.name = null);
    		        }
    		      },
    		      getHoldDuration: ce
    		    },
    		    ue = le,
    		    pe = {
    		      id: "auto-start",
    		      install: function (t) {
    		        t.usePlugin(ae), t.usePlugin(ue), t.usePlugin(se);
    		      }
    		    },
    		    fe = function (t) {
    		      return /^(always|never|auto)$/.test(t) ? (this.options.preventDefault = t, this) : w.bool(t) ? (this.options.preventDefault = t ? "always" : "never", this) : this.options.preventDefault;
    		    };
    		  function de(t) {
    		    var e = t.interaction,
    		      n = t.event;
    		    e.interactable && e.interactable.checkAndPreventDefault(n);
    		  }
    		  var he = {
    		    id: "core/interactablePreventDefault",
    		    install: function (t) {
    		      var e = t.Interactable;
    		      e.prototype.preventDefault = fe, e.prototype.checkAndPreventDefault = function (e) {
    		        return function (t, e, n) {
    		          var r = t.options.preventDefault;
    		          if ("never" !== r) if ("always" !== r) {
    		            if (e.events.supportsPassive && /^touch(start|move)$/.test(n.type)) {
    		              var i = y(n.target).document,
    		                o = e.getDocOptions(i);
    		              if (!o || !o.events || !1 !== o.events.passive) return;
    		            }
    		            /^(mouse|pointer|touch)*(down|start)/i.test(n.type) || w.element(n.target) && R(n.target, "input,select,textarea,[contenteditable=true],[contenteditable=true] *") || n.preventDefault();
    		          } else n.preventDefault();
    		        }(this, t, e);
    		      }, t.interactions.docEvents.push({
    		        type: "dragstart",
    		        listener: function (e) {
    		          for (var n = 0, r = t.interactions.list; n < r.length; n++) {
    		            var i = r[n];
    		            if (i.element && (i.element === e.target || M(i.element, e.target))) return void i.interactable.checkAndPreventDefault(e);
    		          }
    		        }
    		      });
    		    },
    		    listeners: ["down", "move", "up", "cancel"].reduce(function (t, e) {
    		      return t["interactions:".concat(e)] = de, t;
    		    }, {})
    		  };
    		  function ve(t, e) {
    		    if (e.phaselessTypes[t]) return !0;
    		    for (var n in e.map) if (0 === t.indexOf(n) && t.substr(n.length) in e.phases) return !0;
    		    return !1;
    		  }
    		  function ge(t) {
    		    var e = {};
    		    for (var n in t) {
    		      var r = t[n];
    		      w.plainObject(r) ? e[n] = ge(r) : w.array(r) ? e[n] = mt(r) : e[n] = r;
    		    }
    		    return e;
    		  }
    		  var me = function () {
    		    function t(e) {
    		      r(this, t), this.states = [], this.startOffset = {
    		        left: 0,
    		        right: 0,
    		        top: 0,
    		        bottom: 0
    		      }, this.startDelta = void 0, this.result = void 0, this.endResult = void 0, this.startEdges = void 0, this.edges = void 0, this.interaction = void 0, this.interaction = e, this.result = ye(), this.edges = {
    		        left: !1,
    		        right: !1,
    		        top: !1,
    		        bottom: !1
    		      };
    		    }
    		    return o(t, [{
    		      key: "start",
    		      value: function (t, e) {
    		        var n,
    		          r,
    		          i = t.phase,
    		          o = this.interaction,
    		          a = function (t) {
    		            var e = t.interactable.options[t.prepared.name],
    		              n = e.modifiers;
    		            if (n && n.length) return n;
    		            return ["snap", "snapSize", "snapEdges", "restrict", "restrictEdges", "restrictSize"].map(function (t) {
    		              var n = e[t];
    		              return n && n.enabled && {
    		                options: n,
    		                methods: n._methods
    		              };
    		            }).filter(function (t) {
    		              return !!t;
    		            });
    		          }(o);
    		        this.prepareStates(a), this.startEdges = V({}, o.edges), this.edges = V({}, this.startEdges), this.startOffset = (n = o.rect, r = e, n ? {
    		          left: r.x - n.left,
    		          top: r.y - n.top,
    		          right: n.right - r.x,
    		          bottom: n.bottom - r.y
    		        } : {
    		          left: 0,
    		          top: 0,
    		          right: 0,
    		          bottom: 0
    		        }), this.startDelta = {
    		          x: 0,
    		          y: 0
    		        };
    		        var s = this.fillArg({
    		          phase: i,
    		          pageCoords: e,
    		          preEnd: !1
    		        });
    		        return this.result = ye(), this.startAll(s), this.result = this.setAll(s);
    		      }
    		    }, {
    		      key: "fillArg",
    		      value: function (t) {
    		        var e = this.interaction;
    		        return t.interaction = e, t.interactable = e.interactable, t.element = e.element, t.rect || (t.rect = e.rect), t.edges || (t.edges = this.startEdges), t.startOffset = this.startOffset, t;
    		      }
    		    }, {
    		      key: "startAll",
    		      value: function (t) {
    		        for (var e = 0, n = this.states; e < n.length; e++) {
    		          var r = n[e];
    		          r.methods.start && (t.state = r, r.methods.start(t));
    		        }
    		      }
    		    }, {
    		      key: "setAll",
    		      value: function (t) {
    		        var e = t.phase,
    		          n = t.preEnd,
    		          r = t.skipModifiers,
    		          i = t.rect,
    		          o = t.edges;
    		        t.coords = V({}, t.pageCoords), t.rect = V({}, i), t.edges = V({}, o);
    		        for (var a = r ? this.states.slice(r) : this.states, s = ye(t.coords, t.rect), c = 0; c < a.length; c++) {
    		          var l,
    		            u = a[c],
    		            p = u.options,
    		            f = V({}, t.coords),
    		            d = null;
    		          null != (l = u.methods) && l.set && this.shouldDo(p, n, e) && (t.state = u, d = u.methods.set(t), H(t.edges, t.rect, {
    		            x: t.coords.x - f.x,
    		            y: t.coords.y - f.y
    		          })), s.eventProps.push(d);
    		        }
    		        V(this.edges, t.edges), s.delta.x = t.coords.x - t.pageCoords.x, s.delta.y = t.coords.y - t.pageCoords.y, s.rectDelta.left = t.rect.left - i.left, s.rectDelta.right = t.rect.right - i.right, s.rectDelta.top = t.rect.top - i.top, s.rectDelta.bottom = t.rect.bottom - i.bottom;
    		        var h = this.result.coords,
    		          v = this.result.rect;
    		        if (h && v) {
    		          var g = s.rect.left !== v.left || s.rect.right !== v.right || s.rect.top !== v.top || s.rect.bottom !== v.bottom;
    		          s.changed = g || h.x !== s.coords.x || h.y !== s.coords.y;
    		        }
    		        return s;
    		      }
    		    }, {
    		      key: "applyToInteraction",
    		      value: function (t) {
    		        var e = this.interaction,
    		          n = t.phase,
    		          r = e.coords.cur,
    		          i = e.coords.start,
    		          o = this.result,
    		          a = this.startDelta,
    		          s = o.delta;
    		        "start" === n && V(this.startDelta, o.delta);
    		        for (var c = 0, l = [[i, a], [r, s]]; c < l.length; c++) {
    		          var u = l[c],
    		            p = u[0],
    		            f = u[1];
    		          p.page.x += f.x, p.page.y += f.y, p.client.x += f.x, p.client.y += f.y;
    		        }
    		        var d = this.result.rectDelta,
    		          h = t.rect || e.rect;
    		        h.left += d.left, h.right += d.right, h.top += d.top, h.bottom += d.bottom, h.width = h.right - h.left, h.height = h.bottom - h.top;
    		      }
    		    }, {
    		      key: "setAndApply",
    		      value: function (t) {
    		        var e = this.interaction,
    		          n = t.phase,
    		          r = t.preEnd,
    		          i = t.skipModifiers,
    		          o = this.setAll(this.fillArg({
    		            preEnd: r,
    		            phase: n,
    		            pageCoords: t.modifiedCoords || e.coords.cur.page
    		          }));
    		        if (this.result = o, !o.changed && (!i || i < this.states.length) && e.interacting()) return !1;
    		        if (t.modifiedCoords) {
    		          var a = e.coords.cur.page,
    		            s = {
    		              x: t.modifiedCoords.x - a.x,
    		              y: t.modifiedCoords.y - a.y
    		            };
    		          o.coords.x += s.x, o.coords.y += s.y, o.delta.x += s.x, o.delta.y += s.y;
    		        }
    		        this.applyToInteraction(t);
    		      }
    		    }, {
    		      key: "beforeEnd",
    		      value: function (t) {
    		        var e = t.interaction,
    		          n = t.event,
    		          r = this.states;
    		        if (r && r.length) {
    		          for (var i = !1, o = 0; o < r.length; o++) {
    		            var a = r[o];
    		            t.state = a;
    		            var s = a.options,
    		              c = a.methods,
    		              l = c.beforeEnd && c.beforeEnd(t);
    		            if (l) return this.endResult = l, !1;
    		            i = i || !i && this.shouldDo(s, !0, t.phase, !0);
    		          }
    		          i && e.move({
    		            event: n,
    		            preEnd: !0
    		          });
    		        }
    		      }
    		    }, {
    		      key: "stop",
    		      value: function (t) {
    		        var e = t.interaction;
    		        if (this.states && this.states.length) {
    		          var n = V({
    		            states: this.states,
    		            interactable: e.interactable,
    		            element: e.element,
    		            rect: null
    		          }, t);
    		          this.fillArg(n);
    		          for (var r = 0, i = this.states; r < i.length; r++) {
    		            var o = i[r];
    		            n.state = o, o.methods.stop && o.methods.stop(n);
    		          }
    		          this.states = null, this.endResult = null;
    		        }
    		      }
    		    }, {
    		      key: "prepareStates",
    		      value: function (t) {
    		        this.states = [];
    		        for (var e = 0; e < t.length; e++) {
    		          var n = t[e],
    		            r = n.options,
    		            i = n.methods,
    		            o = n.name;
    		          this.states.push({
    		            options: r,
    		            methods: i,
    		            index: e,
    		            name: o
    		          });
    		        }
    		        return this.states;
    		      }
    		    }, {
    		      key: "restoreInteractionCoords",
    		      value: function (t) {
    		        var e = t.interaction,
    		          n = e.coords,
    		          r = e.rect,
    		          i = e.modification;
    		        if (i.result) {
    		          for (var o = i.startDelta, a = i.result, s = a.delta, c = a.rectDelta, l = 0, u = [[n.start, o], [n.cur, s]]; l < u.length; l++) {
    		            var p = u[l],
    		              f = p[0],
    		              d = p[1];
    		            f.page.x -= d.x, f.page.y -= d.y, f.client.x -= d.x, f.client.y -= d.y;
    		          }
    		          r.left -= c.left, r.right -= c.right, r.top -= c.top, r.bottom -= c.bottom;
    		        }
    		      }
    		    }, {
    		      key: "shouldDo",
    		      value: function (t, e, n, r) {
    		        return !(!t || !1 === t.enabled || r && !t.endOnly || t.endOnly && !e || "start" === n && !t.setStart);
    		      }
    		    }, {
    		      key: "copyFrom",
    		      value: function (t) {
    		        this.startOffset = t.startOffset, this.startDelta = t.startDelta, this.startEdges = t.startEdges, this.edges = t.edges, this.states = t.states.map(function (t) {
    		          return ge(t);
    		        }), this.result = ye(V({}, t.result.coords), V({}, t.result.rect));
    		      }
    		    }, {
    		      key: "destroy",
    		      value: function () {
    		        for (var t in this) this[t] = null;
    		      }
    		    }]), t;
    		  }();
    		  function ye(t, e) {
    		    return {
    		      rect: e,
    		      coords: t,
    		      delta: {
    		        x: 0,
    		        y: 0
    		      },
    		      rectDelta: {
    		        left: 0,
    		        right: 0,
    		        top: 0,
    		        bottom: 0
    		      },
    		      eventProps: [],
    		      changed: !0
    		    };
    		  }
    		  function be(t, e) {
    		    var n = t.defaults,
    		      r = {
    		        start: t.start,
    		        set: t.set,
    		        beforeEnd: t.beforeEnd,
    		        stop: t.stop
    		      },
    		      i = function (t) {
    		        var i = t || {};
    		        for (var o in i.enabled = !1 !== i.enabled, n) o in i || (i[o] = n[o]);
    		        var a = {
    		          options: i,
    		          methods: r,
    		          name: e,
    		          enable: function () {
    		            return i.enabled = !0, a;
    		          },
    		          disable: function () {
    		            return i.enabled = !1, a;
    		          }
    		        };
    		        return a;
    		      };
    		    return e && "string" == typeof e && (i._defaults = n, i._methods = r), i;
    		  }
    		  function xe(t) {
    		    var e = t.iEvent,
    		      n = t.interaction.modification.result;
    		    n && (e.modifiers = n.eventProps);
    		  }
    		  var we = {
    		      id: "modifiers/base",
    		      before: ["actions"],
    		      install: function (t) {
    		        t.defaults.perAction.modifiers = [];
    		      },
    		      listeners: {
    		        "interactions:new": function (t) {
    		          var e = t.interaction;
    		          e.modification = new me(e);
    		        },
    		        "interactions:before-action-start": function (t) {
    		          var e = t.interaction,
    		            n = t.interaction.modification;
    		          n.start(t, e.coords.start.page), e.edges = n.edges, n.applyToInteraction(t);
    		        },
    		        "interactions:before-action-move": function (t) {
    		          var e = t.interaction,
    		            n = e.modification,
    		            r = n.setAndApply(t);
    		          return e.edges = n.edges, r;
    		        },
    		        "interactions:before-action-end": function (t) {
    		          var e = t.interaction,
    		            n = e.modification,
    		            r = n.beforeEnd(t);
    		          return e.edges = n.startEdges, r;
    		        },
    		        "interactions:action-start": xe,
    		        "interactions:action-move": xe,
    		        "interactions:action-end": xe,
    		        "interactions:after-action-start": function (t) {
    		          return t.interaction.modification.restoreInteractionCoords(t);
    		        },
    		        "interactions:after-action-move": function (t) {
    		          return t.interaction.modification.restoreInteractionCoords(t);
    		        },
    		        "interactions:stop": function (t) {
    		          return t.interaction.modification.stop(t);
    		        }
    		      }
    		    },
    		    Ee = we,
    		    Te = {
    		      base: {
    		        preventDefault: "auto",
    		        deltaSource: "page"
    		      },
    		      perAction: {
    		        enabled: !1,
    		        origin: {
    		          x: 0,
    		          y: 0
    		        }
    		      },
    		      actions: {}
    		    },
    		    Se = function (t) {
    		      s(n, t);
    		      var e = p(n);
    		      function n(t, i, o, a, s, c, l) {
    		        var p;
    		        r(this, n), (p = e.call(this, t)).relatedTarget = null, p.screenX = void 0, p.screenY = void 0, p.button = void 0, p.buttons = void 0, p.ctrlKey = void 0, p.shiftKey = void 0, p.altKey = void 0, p.metaKey = void 0, p.page = void 0, p.client = void 0, p.delta = void 0, p.rect = void 0, p.x0 = void 0, p.y0 = void 0, p.t0 = void 0, p.dt = void 0, p.duration = void 0, p.clientX0 = void 0, p.clientY0 = void 0, p.velocity = void 0, p.speed = void 0, p.swipe = void 0, p.axes = void 0, p.preEnd = void 0, s = s || t.element;
    		        var f = t.interactable,
    		          d = (f && f.options || Te).deltaSource,
    		          h = K(f, s, o),
    		          v = "start" === a,
    		          g = "end" === a,
    		          m = v ? u(p) : t.prevEvent,
    		          y = v ? t.coords.start : g ? {
    		            page: m.page,
    		            client: m.client,
    		            timeStamp: t.coords.cur.timeStamp
    		          } : t.coords.cur;
    		        return p.page = V({}, y.page), p.client = V({}, y.client), p.rect = V({}, t.rect), p.timeStamp = y.timeStamp, g || (p.page.x -= h.x, p.page.y -= h.y, p.client.x -= h.x, p.client.y -= h.y), p.ctrlKey = i.ctrlKey, p.altKey = i.altKey, p.shiftKey = i.shiftKey, p.metaKey = i.metaKey, p.button = i.button, p.buttons = i.buttons, p.target = s, p.currentTarget = s, p.preEnd = c, p.type = l || o + (a || ""), p.interactable = f, p.t0 = v ? t.pointers[t.pointers.length - 1].downTime : m.t0, p.x0 = t.coords.start.page.x - h.x, p.y0 = t.coords.start.page.y - h.y, p.clientX0 = t.coords.start.client.x - h.x, p.clientY0 = t.coords.start.client.y - h.y, p.delta = v || g ? {
    		          x: 0,
    		          y: 0
    		        } : {
    		          x: p[d].x - m[d].x,
    		          y: p[d].y - m[d].y
    		        }, p.dt = t.coords.delta.timeStamp, p.duration = p.timeStamp - p.t0, p.velocity = V({}, t.coords.velocity[d]), p.speed = Q(p.velocity.x, p.velocity.y), p.swipe = g || "inertiastart" === a ? p.getSwipe() : null, p;
    		      }
    		      return o(n, [{
    		        key: "getSwipe",
    		        value: function () {
    		          var t = this._interaction;
    		          if (t.prevEvent.speed < 600 || this.timeStamp - t.prevEvent.timeStamp > 150) return null;
    		          var e = 180 * Math.atan2(t.prevEvent.velocityY, t.prevEvent.velocityX) / Math.PI;
    		          e < 0 && (e += 360);
    		          var n = 112.5 <= e && e < 247.5,
    		            r = 202.5 <= e && e < 337.5;
    		          return {
    		            up: r,
    		            down: !r && 22.5 <= e && e < 157.5,
    		            left: n,
    		            right: !n && (292.5 <= e || e < 67.5),
    		            angle: e,
    		            speed: t.prevEvent.speed,
    		            velocity: {
    		              x: t.prevEvent.velocityX,
    		              y: t.prevEvent.velocityY
    		            }
    		          };
    		        }
    		      }, {
    		        key: "preventDefault",
    		        value: function () {}
    		      }, {
    		        key: "stopImmediatePropagation",
    		        value: function () {
    		          this.immediatePropagationStopped = this.propagationStopped = !0;
    		        }
    		      }, {
    		        key: "stopPropagation",
    		        value: function () {
    		          this.propagationStopped = !0;
    		        }
    		      }]), n;
    		    }(vt);
    		  Object.defineProperties(Se.prototype, {
    		    pageX: {
    		      get: function () {
    		        return this.page.x;
    		      },
    		      set: function (t) {
    		        this.page.x = t;
    		      }
    		    },
    		    pageY: {
    		      get: function () {
    		        return this.page.y;
    		      },
    		      set: function (t) {
    		        this.page.y = t;
    		      }
    		    },
    		    clientX: {
    		      get: function () {
    		        return this.client.x;
    		      },
    		      set: function (t) {
    		        this.client.x = t;
    		      }
    		    },
    		    clientY: {
    		      get: function () {
    		        return this.client.y;
    		      },
    		      set: function (t) {
    		        this.client.y = t;
    		      }
    		    },
    		    dx: {
    		      get: function () {
    		        return this.delta.x;
    		      },
    		      set: function (t) {
    		        this.delta.x = t;
    		      }
    		    },
    		    dy: {
    		      get: function () {
    		        return this.delta.y;
    		      },
    		      set: function (t) {
    		        this.delta.y = t;
    		      }
    		    },
    		    velocityX: {
    		      get: function () {
    		        return this.velocity.x;
    		      },
    		      set: function (t) {
    		        this.velocity.x = t;
    		      }
    		    },
    		    velocityY: {
    		      get: function () {
    		        return this.velocity.y;
    		      },
    		      set: function (t) {
    		        this.velocity.y = t;
    		      }
    		    }
    		  });
    		  var _e = o(function t(e, n, i, o, a) {
    		      r(this, t), this.id = void 0, this.pointer = void 0, this.event = void 0, this.downTime = void 0, this.downTarget = void 0, this.id = e, this.pointer = n, this.event = i, this.downTime = o, this.downTarget = a;
    		    }),
    		    Pe = function (t) {
    		      return t.interactable = "", t.element = "", t.prepared = "", t.pointerIsDown = "", t.pointerWasMoved = "", t._proxy = "", t;
    		    }({}),
    		    Oe = function (t) {
    		      return t.start = "", t.move = "", t.end = "", t.stop = "", t.interacting = "", t;
    		    }({}),
    		    ke = 0,
    		    De = function () {
    		      function t(e) {
    		        var n = this,
    		          i = e.pointerType,
    		          o = e.scopeFire;
    		        r(this, t), this.interactable = null, this.element = null, this.rect = null, this._rects = void 0, this.edges = null, this._scopeFire = void 0, this.prepared = {
    		          name: null,
    		          axis: null,
    		          edges: null
    		        }, this.pointerType = void 0, this.pointers = [], this.downEvent = null, this.downPointer = {}, this._latestPointer = {
    		          pointer: null,
    		          event: null,
    		          eventTarget: null
    		        }, this.prevEvent = null, this.pointerIsDown = !1, this.pointerWasMoved = !1, this._interacting = !1, this._ending = !1, this._stopped = !0, this._proxy = void 0, this.simulation = null, this.doMove = Nt(function (t) {
    		          this.move(t);
    		        }, "The interaction.doMove() method has been renamed to interaction.move()"), this.coords = {
    		          start: {
    		            page: {
    		              x: 0,
    		              y: 0
    		            },
    		            client: {
    		              x: 0,
    		              y: 0
    		            },
    		            timeStamp: 0
    		          },
    		          prev: {
    		            page: {
    		              x: 0,
    		              y: 0
    		            },
    		            client: {
    		              x: 0,
    		              y: 0
    		            },
    		            timeStamp: 0
    		          },
    		          cur: {
    		            page: {
    		              x: 0,
    		              y: 0
    		            },
    		            client: {
    		              x: 0,
    		              y: 0
    		            },
    		            timeStamp: 0
    		          },
    		          delta: {
    		            page: {
    		              x: 0,
    		              y: 0
    		            },
    		            client: {
    		              x: 0,
    		              y: 0
    		            },
    		            timeStamp: 0
    		          },
    		          velocity: {
    		            page: {
    		              x: 0,
    		              y: 0
    		            },
    		            client: {
    		              x: 0,
    		              y: 0
    		            },
    		            timeStamp: 0
    		          }
    		        }, this._id = ke++, this._scopeFire = o, this.pointerType = i;
    		        var a = this;
    		        this._proxy = {};
    		        var s = function (t) {
    		          Object.defineProperty(n._proxy, t, {
    		            get: function () {
    		              return a[t];
    		            }
    		          });
    		        };
    		        for (var c in Pe) s(c);
    		        var l = function (t) {
    		          Object.defineProperty(n._proxy, t, {
    		            value: function () {
    		              return a[t].apply(a, arguments);
    		            }
    		          });
    		        };
    		        for (var u in Oe) l(u);
    		        this._scopeFire("interactions:new", {
    		          interaction: this
    		        });
    		      }
    		      return o(t, [{
    		        key: "pointerMoveTolerance",
    		        get: function () {
    		          return 1;
    		        }
    		      }, {
    		        key: "pointerDown",
    		        value: function (t, e, n) {
    		          var r = this.updatePointer(t, e, n, !0),
    		            i = this.pointers[r];
    		          this._scopeFire("interactions:down", {
    		            pointer: t,
    		            event: e,
    		            eventTarget: n,
    		            pointerIndex: r,
    		            pointerInfo: i,
    		            type: "down",
    		            interaction: this
    		          });
    		        }
    		      }, {
    		        key: "start",
    		        value: function (t, e, n) {
    		          return !(this.interacting() || !this.pointerIsDown || this.pointers.length < ("gesture" === t.name ? 2 : 1) || !e.options[t.name].enabled) && (Ut(this.prepared, t), this.interactable = e, this.element = n, this.rect = e.getRect(n), this.edges = this.prepared.edges ? V({}, this.prepared.edges) : {
    		            left: !0,
    		            right: !0,
    		            top: !0,
    		            bottom: !0
    		          }, this._stopped = !1, this._interacting = this._doPhase({
    		            interaction: this,
    		            event: this.downEvent,
    		            phase: "start"
    		          }) && !this._stopped, this._interacting);
    		        }
    		      }, {
    		        key: "pointerMove",
    		        value: function (t, e, n) {
    		          this.simulation || this.modification && this.modification.endResult || this.updatePointer(t, e, n, !1);
    		          var r,
    		            i,
    		            o = this.coords.cur.page.x === this.coords.prev.page.x && this.coords.cur.page.y === this.coords.prev.page.y && this.coords.cur.client.x === this.coords.prev.client.x && this.coords.cur.client.y === this.coords.prev.client.y;
    		          this.pointerIsDown && !this.pointerWasMoved && (r = this.coords.cur.client.x - this.coords.start.client.x, i = this.coords.cur.client.y - this.coords.start.client.y, this.pointerWasMoved = Q(r, i) > this.pointerMoveTolerance);
    		          var a,
    		            s,
    		            c,
    		            l = this.getPointerIndex(t),
    		            u = {
    		              pointer: t,
    		              pointerIndex: l,
    		              pointerInfo: this.pointers[l],
    		              event: e,
    		              type: "move",
    		              eventTarget: n,
    		              dx: r,
    		              dy: i,
    		              duplicate: o,
    		              interaction: this
    		            };
    		          o || (a = this.coords.velocity, s = this.coords.delta, c = Math.max(s.timeStamp / 1e3, .001), a.page.x = s.page.x / c, a.page.y = s.page.y / c, a.client.x = s.client.x / c, a.client.y = s.client.y / c, a.timeStamp = c), this._scopeFire("interactions:move", u), o || this.simulation || (this.interacting() && (u.type = null, this.move(u)), this.pointerWasMoved && et(this.coords.prev, this.coords.cur));
    		        }
    		      }, {
    		        key: "move",
    		        value: function (t) {
    		          t && t.event || nt(this.coords.delta), (t = V({
    		            pointer: this._latestPointer.pointer,
    		            event: this._latestPointer.event,
    		            eventTarget: this._latestPointer.eventTarget,
    		            interaction: this
    		          }, t || {})).phase = "move", this._doPhase(t);
    		        }
    		      }, {
    		        key: "pointerUp",
    		        value: function (t, e, n, r) {
    		          var i = this.getPointerIndex(t);
    		          -1 === i && (i = this.updatePointer(t, e, n, !1));
    		          var o = /cancel$/i.test(e.type) ? "cancel" : "up";
    		          this._scopeFire("interactions:".concat(o), {
    		            pointer: t,
    		            pointerIndex: i,
    		            pointerInfo: this.pointers[i],
    		            event: e,
    		            eventTarget: n,
    		            type: o,
    		            curEventTarget: r,
    		            interaction: this
    		          }), this.simulation || this.end(e), this.removePointer(t, e);
    		        }
    		      }, {
    		        key: "documentBlur",
    		        value: function (t) {
    		          this.end(t), this._scopeFire("interactions:blur", {
    		            event: t,
    		            type: "blur",
    		            interaction: this
    		          });
    		        }
    		      }, {
    		        key: "end",
    		        value: function (t) {
    		          var e;
    		          this._ending = !0, t = t || this._latestPointer.event, this.interacting() && (e = this._doPhase({
    		            event: t,
    		            interaction: this,
    		            phase: "end"
    		          })), this._ending = !1, !0 === e && this.stop();
    		        }
    		      }, {
    		        key: "currentAction",
    		        value: function () {
    		          return this._interacting ? this.prepared.name : null;
    		        }
    		      }, {
    		        key: "interacting",
    		        value: function () {
    		          return this._interacting;
    		        }
    		      }, {
    		        key: "stop",
    		        value: function () {
    		          this._scopeFire("interactions:stop", {
    		            interaction: this
    		          }), this.interactable = this.element = null, this._interacting = !1, this._stopped = !0, this.prepared.name = this.prevEvent = null;
    		        }
    		      }, {
    		        key: "getPointerIndex",
    		        value: function (t) {
    		          var e = at(t);
    		          return "mouse" === this.pointerType || "pen" === this.pointerType ? this.pointers.length - 1 : yt(this.pointers, function (t) {
    		            return t.id === e;
    		          });
    		        }
    		      }, {
    		        key: "getPointerInfo",
    		        value: function (t) {
    		          return this.pointers[this.getPointerIndex(t)];
    		        }
    		      }, {
    		        key: "updatePointer",
    		        value: function (t, e, n, r) {
    		          var i,
    		            o,
    		            a,
    		            s = at(t),
    		            c = this.getPointerIndex(t),
    		            l = this.pointers[c];
    		          return r = !1 !== r && (r || /(down|start)$/i.test(e.type)), l ? l.pointer = t : (l = new _e(s, t, e, null, null), c = this.pointers.length, this.pointers.push(l)), st(this.coords.cur, this.pointers.map(function (t) {
    		            return t.pointer;
    		          }), this._now()), i = this.coords.delta, o = this.coords.prev, a = this.coords.cur, i.page.x = a.page.x - o.page.x, i.page.y = a.page.y - o.page.y, i.client.x = a.client.x - o.client.x, i.client.y = a.client.y - o.client.y, i.timeStamp = a.timeStamp - o.timeStamp, r && (this.pointerIsDown = !0, l.downTime = this.coords.cur.timeStamp, l.downTarget = n, tt(this.downPointer, t), this.interacting() || (et(this.coords.start, this.coords.cur), et(this.coords.prev, this.coords.cur), this.downEvent = e, this.pointerWasMoved = !1)), this._updateLatestPointer(t, e, n), this._scopeFire("interactions:update-pointer", {
    		            pointer: t,
    		            event: e,
    		            eventTarget: n,
    		            down: r,
    		            pointerInfo: l,
    		            pointerIndex: c,
    		            interaction: this
    		          }), c;
    		        }
    		      }, {
    		        key: "removePointer",
    		        value: function (t, e) {
    		          var n = this.getPointerIndex(t);
    		          if (-1 !== n) {
    		            var r = this.pointers[n];
    		            this._scopeFire("interactions:remove-pointer", {
    		              pointer: t,
    		              event: e,
    		              eventTarget: null,
    		              pointerIndex: n,
    		              pointerInfo: r,
    		              interaction: this
    		            }), this.pointers.splice(n, 1), this.pointerIsDown = !1;
    		          }
    		        }
    		      }, {
    		        key: "_updateLatestPointer",
    		        value: function (t, e, n) {
    		          this._latestPointer.pointer = t, this._latestPointer.event = e, this._latestPointer.eventTarget = n;
    		        }
    		      }, {
    		        key: "destroy",
    		        value: function () {
    		          this._latestPointer.pointer = null, this._latestPointer.event = null, this._latestPointer.eventTarget = null;
    		        }
    		      }, {
    		        key: "_createPreparedEvent",
    		        value: function (t, e, n, r) {
    		          return new Se(this, t, this.prepared.name, e, this.element, n, r);
    		        }
    		      }, {
    		        key: "_fireEvent",
    		        value: function (t) {
    		          var e;
    		          null == (e = this.interactable) || e.fire(t), (!this.prevEvent || t.timeStamp >= this.prevEvent.timeStamp) && (this.prevEvent = t);
    		        }
    		      }, {
    		        key: "_doPhase",
    		        value: function (t) {
    		          var e = t.event,
    		            n = t.phase,
    		            r = t.preEnd,
    		            i = t.type,
    		            o = this.rect;
    		          if (o && "move" === n && (H(this.edges, o, this.coords.delta[this.interactable.options.deltaSource]), o.width = o.right - o.left, o.height = o.bottom - o.top), !1 === this._scopeFire("interactions:before-action-".concat(n), t)) return !1;
    		          var a = t.iEvent = this._createPreparedEvent(e, n, r, i);
    		          return this._scopeFire("interactions:action-".concat(n), t), "start" === n && (this.prevEvent = a), this._fireEvent(a), this._scopeFire("interactions:after-action-".concat(n), t), !0;
    		        }
    		      }, {
    		        key: "_now",
    		        value: function () {
    		          return Date.now();
    		        }
    		      }]), t;
    		    }();
    		  function Ie(t) {
    		    Me(t.interaction);
    		  }
    		  function Me(t) {
    		    if (!function (t) {
    		      return !(!t.offset.pending.x && !t.offset.pending.y);
    		    }(t)) return !1;
    		    var e = t.offset.pending;
    		    return Ae(t.coords.cur, e), Ae(t.coords.delta, e), H(t.edges, t.rect, e), e.x = 0, e.y = 0, !0;
    		  }
    		  function ze(t) {
    		    var e = t.x,
    		      n = t.y;
    		    this.offset.pending.x += e, this.offset.pending.y += n, this.offset.total.x += e, this.offset.total.y += n;
    		  }
    		  function Ae(t, e) {
    		    var n = t.page,
    		      r = t.client,
    		      i = e.x,
    		      o = e.y;
    		    n.x += i, n.y += o, r.x += i, r.y += o;
    		  }
    		  Oe.offsetBy = "";
    		  var Re = {
    		      id: "offset",
    		      before: ["modifiers", "pointer-events", "actions", "inertia"],
    		      install: function (t) {
    		        t.Interaction.prototype.offsetBy = ze;
    		      },
    		      listeners: {
    		        "interactions:new": function (t) {
    		          t.interaction.offset = {
    		            total: {
    		              x: 0,
    		              y: 0
    		            },
    		            pending: {
    		              x: 0,
    		              y: 0
    		            }
    		          };
    		        },
    		        "interactions:update-pointer": function (t) {
    		          return function (t) {
    		            t.pointerIsDown && (Ae(t.coords.cur, t.offset.total), t.offset.pending.x = 0, t.offset.pending.y = 0);
    		          }(t.interaction);
    		        },
    		        "interactions:before-action-start": Ie,
    		        "interactions:before-action-move": Ie,
    		        "interactions:before-action-end": function (t) {
    		          var e = t.interaction;
    		          if (Me(e)) return e.move({
    		            offset: !0
    		          }), e.end(), !1;
    		        },
    		        "interactions:stop": function (t) {
    		          var e = t.interaction;
    		          e.offset.total.x = 0, e.offset.total.y = 0, e.offset.pending.x = 0, e.offset.pending.y = 0;
    		        }
    		      }
    		    },
    		    Ce = Re;
    		  var je = function () {
    		    function t(e) {
    		      r(this, t), this.active = !1, this.isModified = !1, this.smoothEnd = !1, this.allowResume = !1, this.modification = void 0, this.modifierCount = 0, this.modifierArg = void 0, this.startCoords = void 0, this.t0 = 0, this.v0 = 0, this.te = 0, this.targetOffset = void 0, this.modifiedOffset = void 0, this.currentOffset = void 0, this.lambda_v0 = 0, this.one_ve_v0 = 0, this.timeout = void 0, this.interaction = void 0, this.interaction = e;
    		    }
    		    return o(t, [{
    		      key: "start",
    		      value: function (t) {
    		        var e = this.interaction,
    		          n = Fe(e);
    		        if (!n || !n.enabled) return !1;
    		        var r = e.coords.velocity.client,
    		          i = Q(r.x, r.y),
    		          o = this.modification || (this.modification = new me(e));
    		        if (o.copyFrom(e.modification), this.t0 = e._now(), this.allowResume = n.allowResume, this.v0 = i, this.currentOffset = {
    		          x: 0,
    		          y: 0
    		        }, this.startCoords = e.coords.cur.page, this.modifierArg = o.fillArg({
    		          pageCoords: this.startCoords,
    		          preEnd: !0,
    		          phase: "inertiastart"
    		        }), this.t0 - e.coords.cur.timeStamp < 50 && i > n.minSpeed && i > n.endSpeed) this.startInertia();else {
    		          if (o.result = o.setAll(this.modifierArg), !o.result.changed) return !1;
    		          this.startSmoothEnd();
    		        }
    		        return e.modification.result.rect = null, e.offsetBy(this.targetOffset), e._doPhase({
    		          interaction: e,
    		          event: t,
    		          phase: "inertiastart"
    		        }), e.offsetBy({
    		          x: -this.targetOffset.x,
    		          y: -this.targetOffset.y
    		        }), e.modification.result.rect = null, this.active = !0, e.simulation = this, !0;
    		      }
    		    }, {
    		      key: "startInertia",
    		      value: function () {
    		        var t = this,
    		          e = this.interaction.coords.velocity.client,
    		          n = Fe(this.interaction),
    		          r = n.resistance,
    		          i = -Math.log(n.endSpeed / this.v0) / r;
    		        this.targetOffset = {
    		          x: (e.x - i) / r,
    		          y: (e.y - i) / r
    		        }, this.te = i, this.lambda_v0 = r / this.v0, this.one_ve_v0 = 1 - n.endSpeed / this.v0;
    		        var o = this.modification,
    		          a = this.modifierArg;
    		        a.pageCoords = {
    		          x: this.startCoords.x + this.targetOffset.x,
    		          y: this.startCoords.y + this.targetOffset.y
    		        }, o.result = o.setAll(a), o.result.changed && (this.isModified = !0, this.modifiedOffset = {
    		          x: this.targetOffset.x + o.result.delta.x,
    		          y: this.targetOffset.y + o.result.delta.y
    		        }), this.onNextFrame(function () {
    		          return t.inertiaTick();
    		        });
    		      }
    		    }, {
    		      key: "startSmoothEnd",
    		      value: function () {
    		        var t = this;
    		        this.smoothEnd = !0, this.isModified = !0, this.targetOffset = {
    		          x: this.modification.result.delta.x,
    		          y: this.modification.result.delta.y
    		        }, this.onNextFrame(function () {
    		          return t.smoothEndTick();
    		        });
    		      }
    		    }, {
    		      key: "onNextFrame",
    		      value: function (t) {
    		        var e = this;
    		        this.timeout = Lt.request(function () {
    		          e.active && t();
    		        });
    		      }
    		    }, {
    		      key: "inertiaTick",
    		      value: function () {
    		        var t,
    		          e,
    		          n,
    		          r,
    		          i,
    		          o,
    		          a,
    		          s = this,
    		          c = this.interaction,
    		          l = Fe(c).resistance,
    		          u = (c._now() - this.t0) / 1e3;
    		        if (u < this.te) {
    		          var p,
    		            f = 1 - (Math.exp(-l * u) - this.lambda_v0) / this.one_ve_v0;
    		          this.isModified ? (t = 0, e = 0, n = this.targetOffset.x, r = this.targetOffset.y, i = this.modifiedOffset.x, o = this.modifiedOffset.y, p = {
    		            x: Ye(a = f, t, n, i),
    		            y: Ye(a, e, r, o)
    		          }) : p = {
    		            x: this.targetOffset.x * f,
    		            y: this.targetOffset.y * f
    		          };
    		          var d = {
    		            x: p.x - this.currentOffset.x,
    		            y: p.y - this.currentOffset.y
    		          };
    		          this.currentOffset.x += d.x, this.currentOffset.y += d.y, c.offsetBy(d), c.move(), this.onNextFrame(function () {
    		            return s.inertiaTick();
    		          });
    		        } else c.offsetBy({
    		          x: this.modifiedOffset.x - this.currentOffset.x,
    		          y: this.modifiedOffset.y - this.currentOffset.y
    		        }), this.end();
    		      }
    		    }, {
    		      key: "smoothEndTick",
    		      value: function () {
    		        var t = this,
    		          e = this.interaction,
    		          n = e._now() - this.t0,
    		          r = Fe(e).smoothEndDuration;
    		        if (n < r) {
    		          var i = {
    		              x: Le(n, 0, this.targetOffset.x, r),
    		              y: Le(n, 0, this.targetOffset.y, r)
    		            },
    		            o = {
    		              x: i.x - this.currentOffset.x,
    		              y: i.y - this.currentOffset.y
    		            };
    		          this.currentOffset.x += o.x, this.currentOffset.y += o.y, e.offsetBy(o), e.move({
    		            skipModifiers: this.modifierCount
    		          }), this.onNextFrame(function () {
    		            return t.smoothEndTick();
    		          });
    		        } else e.offsetBy({
    		          x: this.targetOffset.x - this.currentOffset.x,
    		          y: this.targetOffset.y - this.currentOffset.y
    		        }), this.end();
    		      }
    		    }, {
    		      key: "resume",
    		      value: function (t) {
    		        var e = t.pointer,
    		          n = t.event,
    		          r = t.eventTarget,
    		          i = this.interaction;
    		        i.offsetBy({
    		          x: -this.currentOffset.x,
    		          y: -this.currentOffset.y
    		        }), i.updatePointer(e, n, r, !0), i._doPhase({
    		          interaction: i,
    		          event: n,
    		          phase: "resume"
    		        }), et(i.coords.prev, i.coords.cur), this.stop();
    		      }
    		    }, {
    		      key: "end",
    		      value: function () {
    		        this.interaction.move(), this.interaction.end(), this.stop();
    		      }
    		    }, {
    		      key: "stop",
    		      value: function () {
    		        this.active = this.smoothEnd = !1, this.interaction.simulation = null, Lt.cancel(this.timeout);
    		      }
    		    }]), t;
    		  }();
    		  function Fe(t) {
    		    var e = t.interactable,
    		      n = t.prepared;
    		    return e && e.options && n.name && e.options[n.name].inertia;
    		  }
    		  var Xe = {
    		    id: "inertia",
    		    before: ["modifiers", "actions"],
    		    install: function (t) {
    		      var e = t.defaults;
    		      t.usePlugin(Ce), t.usePlugin(Ee), t.actions.phases.inertiastart = !0, t.actions.phases.resume = !0, e.perAction.inertia = {
    		        enabled: !1,
    		        resistance: 10,
    		        minSpeed: 100,
    		        endSpeed: 10,
    		        allowResume: !0,
    		        smoothEndDuration: 300
    		      };
    		    },
    		    listeners: {
    		      "interactions:new": function (t) {
    		        var e = t.interaction;
    		        e.inertia = new je(e);
    		      },
    		      "interactions:before-action-end": function (t) {
    		        var e = t.interaction,
    		          n = t.event;
    		        return (!e._interacting || e.simulation || !e.inertia.start(n)) && null;
    		      },
    		      "interactions:down": function (t) {
    		        var e = t.interaction,
    		          n = t.eventTarget,
    		          r = e.inertia;
    		        if (r.active) for (var i = n; w.element(i);) {
    		          if (i === e.element) {
    		            r.resume(t);
    		            break;
    		          }
    		          i = A(i);
    		        }
    		      },
    		      "interactions:stop": function (t) {
    		        var e = t.interaction.inertia;
    		        e.active && e.stop();
    		      },
    		      "interactions:before-action-resume": function (t) {
    		        var e = t.interaction.modification;
    		        e.stop(t), e.start(t, t.interaction.coords.cur.page), e.applyToInteraction(t);
    		      },
    		      "interactions:before-action-inertiastart": function (t) {
    		        return t.interaction.modification.setAndApply(t);
    		      },
    		      "interactions:action-resume": xe,
    		      "interactions:action-inertiastart": xe,
    		      "interactions:after-action-inertiastart": function (t) {
    		        return t.interaction.modification.restoreInteractionCoords(t);
    		      },
    		      "interactions:after-action-resume": function (t) {
    		        return t.interaction.modification.restoreInteractionCoords(t);
    		      }
    		    }
    		  };
    		  function Ye(t, e, n, r) {
    		    var i = 1 - t;
    		    return i * i * e + 2 * i * t * n + t * t * r;
    		  }
    		  function Le(t, e, n, r) {
    		    return -n * (t /= r) * (t - 2) + e;
    		  }
    		  var qe = Xe;
    		  function Be(t, e) {
    		    for (var n = 0; n < e.length; n++) {
    		      var r = e[n];
    		      if (t.immediatePropagationStopped) break;
    		      r(t);
    		    }
    		  }
    		  var Ve = function () {
    		    function t(e) {
    		      r(this, t), this.options = void 0, this.types = {}, this.propagationStopped = !1, this.immediatePropagationStopped = !1, this.global = void 0, this.options = V({}, e || {});
    		    }
    		    return o(t, [{
    		      key: "fire",
    		      value: function (t) {
    		        var e,
    		          n = this.global;
    		        (e = this.types[t.type]) && Be(t, e), !t.propagationStopped && n && (e = n[t.type]) && Be(t, e);
    		      }
    		    }, {
    		      key: "on",
    		      value: function (t, e) {
    		        var n = $(t, e);
    		        for (t in n) this.types[t] = gt(this.types[t] || [], n[t]);
    		      }
    		    }, {
    		      key: "off",
    		      value: function (t, e) {
    		        var n = $(t, e);
    		        for (t in n) {
    		          var r = this.types[t];
    		          if (r && r.length) for (var i = 0, o = n[t]; i < o.length; i++) {
    		            var a = o[i],
    		              s = r.indexOf(a);
    		            -1 !== s && r.splice(s, 1);
    		          }
    		        }
    		      }
    		    }, {
    		      key: "getRect",
    		      value: function (t) {
    		        return null;
    		      }
    		    }]), t;
    		  }();
    		  var We = function () {
    		    function t(e) {
    		      r(this, t), this.currentTarget = void 0, this.originalEvent = void 0, this.type = void 0, this.originalEvent = e, tt(this, e);
    		    }
    		    return o(t, [{
    		      key: "preventOriginalDefault",
    		      value: function () {
    		        this.originalEvent.preventDefault();
    		      }
    		    }, {
    		      key: "stopPropagation",
    		      value: function () {
    		        this.originalEvent.stopPropagation();
    		      }
    		    }, {
    		      key: "stopImmediatePropagation",
    		      value: function () {
    		        this.originalEvent.stopImmediatePropagation();
    		      }
    		    }]), t;
    		  }();
    		  function Ge(t) {
    		    return w.object(t) ? {
    		      capture: !!t.capture,
    		      passive: !!t.passive
    		    } : {
    		      capture: !!t,
    		      passive: !1
    		    };
    		  }
    		  function Ne(t, e) {
    		    return t === e || ("boolean" == typeof t ? !!e.capture === t && !1 == !!e.passive : !!t.capture == !!e.capture && !!t.passive == !!e.passive);
    		  }
    		  var Ue = {
    		      id: "events",
    		      install: function (t) {
    		        var e,
    		          n = [],
    		          r = {},
    		          i = [],
    		          o = {
    		            add: a,
    		            remove: s,
    		            addDelegate: function (t, e, n, o, s) {
    		              var u = Ge(s);
    		              if (!r[n]) {
    		                r[n] = [];
    		                for (var p = 0; p < i.length; p++) {
    		                  var f = i[p];
    		                  a(f, n, c), a(f, n, l, !0);
    		                }
    		              }
    		              var d = r[n],
    		                h = bt(d, function (n) {
    		                  return n.selector === t && n.context === e;
    		                });
    		              h || (h = {
    		                selector: t,
    		                context: e,
    		                listeners: []
    		              }, d.push(h));
    		              h.listeners.push({
    		                func: o,
    		                options: u
    		              });
    		            },
    		            removeDelegate: function (t, e, n, i, o) {
    		              var a,
    		                u = Ge(o),
    		                p = r[n],
    		                f = !1;
    		              if (!p) return;
    		              for (a = p.length - 1; a >= 0; a--) {
    		                var d = p[a];
    		                if (d.selector === t && d.context === e) {
    		                  for (var h = d.listeners, v = h.length - 1; v >= 0; v--) {
    		                    var g = h[v];
    		                    if (g.func === i && Ne(g.options, u)) {
    		                      h.splice(v, 1), h.length || (p.splice(a, 1), s(e, n, c), s(e, n, l, !0)), f = !0;
    		                      break;
    		                    }
    		                  }
    		                  if (f) break;
    		                }
    		              }
    		            },
    		            delegateListener: c,
    		            delegateUseCapture: l,
    		            delegatedEvents: r,
    		            documents: i,
    		            targets: n,
    		            supportsOptions: !1,
    		            supportsPassive: !1
    		          };
    		        function a(t, e, r, i) {
    		          if (t.addEventListener) {
    		            var a = Ge(i),
    		              s = bt(n, function (e) {
    		                return e.eventTarget === t;
    		              });
    		            s || (s = {
    		              eventTarget: t,
    		              events: {}
    		            }, n.push(s)), s.events[e] || (s.events[e] = []), bt(s.events[e], function (t) {
    		              return t.func === r && Ne(t.options, a);
    		            }) || (t.addEventListener(e, r, o.supportsOptions ? a : a.capture), s.events[e].push({
    		              func: r,
    		              options: a
    		            }));
    		          }
    		        }
    		        function s(t, e, r, i) {
    		          if (t.addEventListener && t.removeEventListener) {
    		            var a = yt(n, function (e) {
    		                return e.eventTarget === t;
    		              }),
    		              c = n[a];
    		            if (c && c.events) if ("all" !== e) {
    		              var l = !1,
    		                u = c.events[e];
    		              if (u) {
    		                if ("all" === r) {
    		                  for (var p = u.length - 1; p >= 0; p--) {
    		                    var f = u[p];
    		                    s(t, e, f.func, f.options);
    		                  }
    		                  return;
    		                }
    		                for (var d = Ge(i), h = 0; h < u.length; h++) {
    		                  var v = u[h];
    		                  if (v.func === r && Ne(v.options, d)) {
    		                    t.removeEventListener(e, r, o.supportsOptions ? d : d.capture), u.splice(h, 1), 0 === u.length && (delete c.events[e], l = !0);
    		                    break;
    		                  }
    		                }
    		              }
    		              l && !Object.keys(c.events).length && n.splice(a, 1);
    		            } else for (e in c.events) c.events.hasOwnProperty(e) && s(t, e, "all");
    		          }
    		        }
    		        function c(t, e) {
    		          for (var n = Ge(e), i = new We(t), o = r[t.type], a = ht(t)[0], s = a; w.element(s);) {
    		            for (var c = 0; c < o.length; c++) {
    		              var l = o[c],
    		                u = l.selector,
    		                p = l.context;
    		              if (R(s, u) && M(p, a) && M(p, s)) {
    		                var f = l.listeners;
    		                i.currentTarget = s;
    		                for (var d = 0; d < f.length; d++) {
    		                  var h = f[d];
    		                  Ne(h.options, n) && h.func(i);
    		                }
    		              }
    		            }
    		            s = A(s);
    		          }
    		        }
    		        function l(t) {
    		          return c(t, !0);
    		        }
    		        return null == (e = t.document) || e.createElement("div").addEventListener("test", null, {
    		          get capture() {
    		            return o.supportsOptions = !0;
    		          },
    		          get passive() {
    		            return o.supportsPassive = !0;
    		          }
    		        }), t.events = o, o;
    		      }
    		    },
    		    He = {
    		      methodOrder: ["simulationResume", "mouseOrPen", "hasPointer", "idle"],
    		      search: function (t) {
    		        for (var e = 0, n = He.methodOrder; e < n.length; e++) {
    		          var r = n[e],
    		            i = He[r](t);
    		          if (i) return i;
    		        }
    		        return null;
    		      },
    		      simulationResume: function (t) {
    		        var e = t.pointerType,
    		          n = t.eventType,
    		          r = t.eventTarget,
    		          i = t.scope;
    		        if (!/down|start/i.test(n)) return null;
    		        for (var o = 0, a = i.interactions.list; o < a.length; o++) {
    		          var s = a[o],
    		            c = r;
    		          if (s.simulation && s.simulation.allowResume && s.pointerType === e) for (; c;) {
    		            if (c === s.element) return s;
    		            c = A(c);
    		          }
    		        }
    		        return null;
    		      },
    		      mouseOrPen: function (t) {
    		        var e,
    		          n = t.pointerId,
    		          r = t.pointerType,
    		          i = t.eventType,
    		          o = t.scope;
    		        if ("mouse" !== r && "pen" !== r) return null;
    		        for (var a = 0, s = o.interactions.list; a < s.length; a++) {
    		          var c = s[a];
    		          if (c.pointerType === r) {
    		            if (c.simulation && !Ke(c, n)) continue;
    		            if (c.interacting()) return c;
    		            e || (e = c);
    		          }
    		        }
    		        if (e) return e;
    		        for (var l = 0, u = o.interactions.list; l < u.length; l++) {
    		          var p = u[l];
    		          if (!(p.pointerType !== r || /down/i.test(i) && p.simulation)) return p;
    		        }
    		        return null;
    		      },
    		      hasPointer: function (t) {
    		        for (var e = t.pointerId, n = 0, r = t.scope.interactions.list; n < r.length; n++) {
    		          var i = r[n];
    		          if (Ke(i, e)) return i;
    		        }
    		        return null;
    		      },
    		      idle: function (t) {
    		        for (var e = t.pointerType, n = 0, r = t.scope.interactions.list; n < r.length; n++) {
    		          var i = r[n];
    		          if (1 === i.pointers.length) {
    		            var o = i.interactable;
    		            if (o && (!o.options.gesture || !o.options.gesture.enabled)) continue;
    		          } else if (i.pointers.length >= 2) continue;
    		          if (!i.interacting() && e === i.pointerType) return i;
    		        }
    		        return null;
    		      }
    		    };
    		  function Ke(t, e) {
    		    return t.pointers.some(function (t) {
    		      return t.id === e;
    		    });
    		  }
    		  var $e = He,
    		    Je = ["pointerDown", "pointerMove", "pointerUp", "updatePointer", "removePointer", "windowBlur"];
    		  function Qe(t, e) {
    		    return function (n) {
    		      var r = e.interactions.list,
    		        i = dt(n),
    		        o = ht(n),
    		        a = o[0],
    		        s = o[1],
    		        c = [];
    		      if (/^touch/.test(n.type)) {
    		        e.prevTouchTime = e.now();
    		        for (var l = 0, u = n.changedTouches; l < u.length; l++) {
    		          var p = u[l],
    		            f = {
    		              pointer: p,
    		              pointerId: at(p),
    		              pointerType: i,
    		              eventType: n.type,
    		              eventTarget: a,
    		              curEventTarget: s,
    		              scope: e
    		            },
    		            d = Ze(f);
    		          c.push([f.pointer, f.eventTarget, f.curEventTarget, d]);
    		        }
    		      } else {
    		        var h = !1;
    		        if (!I.supportsPointerEvent && /mouse/.test(n.type)) {
    		          for (var v = 0; v < r.length && !h; v++) h = "mouse" !== r[v].pointerType && r[v].pointerIsDown;
    		          h = h || e.now() - e.prevTouchTime < 500 || 0 === n.timeStamp;
    		        }
    		        if (!h) {
    		          var g = {
    		              pointer: n,
    		              pointerId: at(n),
    		              pointerType: i,
    		              eventType: n.type,
    		              curEventTarget: s,
    		              eventTarget: a,
    		              scope: e
    		            },
    		            m = Ze(g);
    		          c.push([g.pointer, g.eventTarget, g.curEventTarget, m]);
    		        }
    		      }
    		      for (var y = 0; y < c.length; y++) {
    		        var b = c[y],
    		          x = b[0],
    		          w = b[1],
    		          E = b[2];
    		        b[3][t](x, n, w, E);
    		      }
    		    };
    		  }
    		  function Ze(t) {
    		    var e = t.pointerType,
    		      n = t.scope,
    		      r = {
    		        interaction: $e.search(t),
    		        searchDetails: t
    		      };
    		    return n.fire("interactions:find", r), r.interaction || n.interactions.new({
    		      pointerType: e
    		    });
    		  }
    		  function tn(t, e) {
    		    var n = t.doc,
    		      r = t.scope,
    		      i = t.options,
    		      o = r.interactions.docEvents,
    		      a = r.events,
    		      s = a[e];
    		    for (var c in r.browser.isIOS && !i.events && (i.events = {
    		      passive: !1
    		    }), a.delegatedEvents) s(n, c, a.delegateListener), s(n, c, a.delegateUseCapture, !0);
    		    for (var l = i && i.events, u = 0; u < o.length; u++) {
    		      var p = o[u];
    		      s(n, p.type, p.listener, l);
    		    }
    		  }
    		  var en = {
    		      id: "core/interactions",
    		      install: function (t) {
    		        for (var e = {}, n = 0; n < Je.length; n++) {
    		          var i = Je[n];
    		          e[i] = Qe(i, t);
    		        }
    		        var a,
    		          c = I.pEventTypes;
    		        function l() {
    		          for (var e = 0, n = t.interactions.list; e < n.length; e++) {
    		            var r = n[e];
    		            if (r.pointerIsDown && "touch" === r.pointerType && !r._interacting) for (var i = function () {
    		                var e = a[o];
    		                t.documents.some(function (t) {
    		                  return M(t.doc, e.downTarget);
    		                }) || r.removePointer(e.pointer, e.event);
    		              }, o = 0, a = r.pointers; o < a.length; o++) i();
    		          }
    		        }
    		        (a = k.PointerEvent ? [{
    		          type: c.down,
    		          listener: l
    		        }, {
    		          type: c.down,
    		          listener: e.pointerDown
    		        }, {
    		          type: c.move,
    		          listener: e.pointerMove
    		        }, {
    		          type: c.up,
    		          listener: e.pointerUp
    		        }, {
    		          type: c.cancel,
    		          listener: e.pointerUp
    		        }] : [{
    		          type: "mousedown",
    		          listener: e.pointerDown
    		        }, {
    		          type: "mousemove",
    		          listener: e.pointerMove
    		        }, {
    		          type: "mouseup",
    		          listener: e.pointerUp
    		        }, {
    		          type: "touchstart",
    		          listener: l
    		        }, {
    		          type: "touchstart",
    		          listener: e.pointerDown
    		        }, {
    		          type: "touchmove",
    		          listener: e.pointerMove
    		        }, {
    		          type: "touchend",
    		          listener: e.pointerUp
    		        }, {
    		          type: "touchcancel",
    		          listener: e.pointerUp
    		        }]).push({
    		          type: "blur",
    		          listener: function (e) {
    		            for (var n = 0, r = t.interactions.list; n < r.length; n++) {
    		              r[n].documentBlur(e);
    		            }
    		          }
    		        }), t.prevTouchTime = 0, t.Interaction = function (e) {
    		          s(i, e);
    		          var n = p(i);
    		          function i() {
    		            return r(this, i), n.apply(this, arguments);
    		          }
    		          return o(i, [{
    		            key: "pointerMoveTolerance",
    		            get: function () {
    		              return t.interactions.pointerMoveTolerance;
    		            },
    		            set: function (e) {
    		              t.interactions.pointerMoveTolerance = e;
    		            }
    		          }, {
    		            key: "_now",
    		            value: function () {
    		              return t.now();
    		            }
    		          }]), i;
    		        }(De), t.interactions = {
    		          list: [],
    		          new: function (e) {
    		            e.scopeFire = function (e, n) {
    		              return t.fire(e, n);
    		            };
    		            var n = new t.Interaction(e);
    		            return t.interactions.list.push(n), n;
    		          },
    		          listeners: e,
    		          docEvents: a,
    		          pointerMoveTolerance: 1
    		        }, t.usePlugin(he);
    		      },
    		      listeners: {
    		        "scope:add-document": function (t) {
    		          return tn(t, "add");
    		        },
    		        "scope:remove-document": function (t) {
    		          return tn(t, "remove");
    		        },
    		        "interactable:unset": function (t, e) {
    		          for (var n = t.interactable, r = e.interactions.list.length - 1; r >= 0; r--) {
    		            var i = e.interactions.list[r];
    		            i.interactable === n && (i.stop(), e.fire("interactions:destroy", {
    		              interaction: i
    		            }), i.destroy(), e.interactions.list.length > 2 && e.interactions.list.splice(r, 1));
    		          }
    		        }
    		      },
    		      onDocSignal: tn,
    		      doOnInteractions: Qe,
    		      methodNames: Je
    		    },
    		    nn = en,
    		    rn = function (t) {
    		      return t[t.On = 0] = "On", t[t.Off = 1] = "Off", t;
    		    }(rn || {}),
    		    on = function () {
    		      function t(e, n, i, o) {
    		        r(this, t), this.target = void 0, this.options = void 0, this._actions = void 0, this.events = new Ve(), this._context = void 0, this._win = void 0, this._doc = void 0, this._scopeEvents = void 0, this._actions = n.actions, this.target = e, this._context = n.context || i, this._win = y(B(e) ? this._context : e), this._doc = this._win.document, this._scopeEvents = o, this.set(n);
    		      }
    		      return o(t, [{
    		        key: "_defaults",
    		        get: function () {
    		          return {
    		            base: {},
    		            perAction: {},
    		            actions: {}
    		          };
    		        }
    		      }, {
    		        key: "setOnEvents",
    		        value: function (t, e) {
    		          return w.func(e.onstart) && this.on("".concat(t, "start"), e.onstart), w.func(e.onmove) && this.on("".concat(t, "move"), e.onmove), w.func(e.onend) && this.on("".concat(t, "end"), e.onend), w.func(e.oninertiastart) && this.on("".concat(t, "inertiastart"), e.oninertiastart), this;
    		        }
    		      }, {
    		        key: "updatePerActionListeners",
    		        value: function (t, e, n) {
    		          var r,
    		            i = this,
    		            o = null == (r = this._actions.map[t]) ? void 0 : r.filterEventType,
    		            a = function (t) {
    		              return (null == o || o(t)) && ve(t, i._actions);
    		            };
    		          (w.array(e) || w.object(e)) && this._onOff(rn.Off, t, e, void 0, a), (w.array(n) || w.object(n)) && this._onOff(rn.On, t, n, void 0, a);
    		        }
    		      }, {
    		        key: "setPerAction",
    		        value: function (t, e) {
    		          var n = this._defaults;
    		          for (var r in e) {
    		            var i = r,
    		              o = this.options[t],
    		              a = e[i];
    		            "listeners" === i && this.updatePerActionListeners(t, o.listeners, a), w.array(a) ? o[i] = mt(a) : w.plainObject(a) ? (o[i] = V(o[i] || {}, ge(a)), w.object(n.perAction[i]) && "enabled" in n.perAction[i] && (o[i].enabled = !1 !== a.enabled)) : w.bool(a) && w.object(n.perAction[i]) ? o[i].enabled = a : o[i] = a;
    		          }
    		        }
    		      }, {
    		        key: "getRect",
    		        value: function (t) {
    		          return t = t || (w.element(this.target) ? this.target : null), w.string(this.target) && (t = t || this._context.querySelector(this.target)), L(t);
    		        }
    		      }, {
    		        key: "rectChecker",
    		        value: function (t) {
    		          var e = this;
    		          return w.func(t) ? (this.getRect = function (n) {
    		            var r = V({}, t.apply(e, n));
    		            return "width" in r || (r.width = r.right - r.left, r.height = r.bottom - r.top), r;
    		          }, this) : null === t ? (delete this.getRect, this) : this.getRect;
    		        }
    		      }, {
    		        key: "_backCompatOption",
    		        value: function (t, e) {
    		          if (B(e) || w.object(e)) {
    		            for (var n in this.options[t] = e, this._actions.map) this.options[n][t] = e;
    		            return this;
    		          }
    		          return this.options[t];
    		        }
    		      }, {
    		        key: "origin",
    		        value: function (t) {
    		          return this._backCompatOption("origin", t);
    		        }
    		      }, {
    		        key: "deltaSource",
    		        value: function (t) {
    		          return "page" === t || "client" === t ? (this.options.deltaSource = t, this) : this.options.deltaSource;
    		        }
    		      }, {
    		        key: "getAllElements",
    		        value: function () {
    		          var t = this.target;
    		          return w.string(t) ? Array.from(this._context.querySelectorAll(t)) : w.func(t) && t.getAllElements ? t.getAllElements() : w.element(t) ? [t] : [];
    		        }
    		      }, {
    		        key: "context",
    		        value: function () {
    		          return this._context;
    		        }
    		      }, {
    		        key: "inContext",
    		        value: function (t) {
    		          return this._context === t.ownerDocument || M(this._context, t);
    		        }
    		      }, {
    		        key: "testIgnoreAllow",
    		        value: function (t, e, n) {
    		          return !this.testIgnore(t.ignoreFrom, e, n) && this.testAllow(t.allowFrom, e, n);
    		        }
    		      }, {
    		        key: "testAllow",
    		        value: function (t, e, n) {
    		          return !t || !!w.element(n) && (w.string(t) ? F(n, t, e) : !!w.element(t) && M(t, n));
    		        }
    		      }, {
    		        key: "testIgnore",
    		        value: function (t, e, n) {
    		          return !(!t || !w.element(n)) && (w.string(t) ? F(n, t, e) : !!w.element(t) && M(t, n));
    		        }
    		      }, {
    		        key: "fire",
    		        value: function (t) {
    		          return this.events.fire(t), this;
    		        }
    		      }, {
    		        key: "_onOff",
    		        value: function (t, e, n, r, i) {
    		          w.object(e) && !w.array(e) && (r = n, n = null);
    		          var o = $(e, n, i);
    		          for (var a in o) {
    		            "wheel" === a && (a = I.wheelEvent);
    		            for (var s = 0, c = o[a]; s < c.length; s++) {
    		              var l = c[s];
    		              ve(a, this._actions) ? this.events[t === rn.On ? "on" : "off"](a, l) : w.string(this.target) ? this._scopeEvents[t === rn.On ? "addDelegate" : "removeDelegate"](this.target, this._context, a, l, r) : this._scopeEvents[t === rn.On ? "add" : "remove"](this.target, a, l, r);
    		            }
    		          }
    		          return this;
    		        }
    		      }, {
    		        key: "on",
    		        value: function (t, e, n) {
    		          return this._onOff(rn.On, t, e, n);
    		        }
    		      }, {
    		        key: "off",
    		        value: function (t, e, n) {
    		          return this._onOff(rn.Off, t, e, n);
    		        }
    		      }, {
    		        key: "set",
    		        value: function (t) {
    		          var e = this._defaults;
    		          for (var n in w.object(t) || (t = {}), this.options = ge(e.base), this._actions.methodDict) {
    		            var r = n,
    		              i = this._actions.methodDict[r];
    		            this.options[r] = {}, this.setPerAction(r, V(V({}, e.perAction), e.actions[r])), this[i](t[r]);
    		          }
    		          for (var o in t) "getRect" !== o ? w.func(this[o]) && this[o](t[o]) : this.rectChecker(t.getRect);
    		          return this;
    		        }
    		      }, {
    		        key: "unset",
    		        value: function () {
    		          if (w.string(this.target)) for (var t in this._scopeEvents.delegatedEvents) for (var e = this._scopeEvents.delegatedEvents[t], n = e.length - 1; n >= 0; n--) {
    		            var r = e[n],
    		              i = r.selector,
    		              o = r.context,
    		              a = r.listeners;
    		            i === this.target && o === this._context && e.splice(n, 1);
    		            for (var s = a.length - 1; s >= 0; s--) this._scopeEvents.removeDelegate(this.target, this._context, t, a[s][0], a[s][1]);
    		          } else this._scopeEvents.remove(this.target, "all");
    		        }
    		      }]), t;
    		    }(),
    		    an = function () {
    		      function t(e) {
    		        var n = this;
    		        r(this, t), this.list = [], this.selectorMap = {}, this.scope = void 0, this.scope = e, e.addListeners({
    		          "interactable:unset": function (t) {
    		            var e = t.interactable,
    		              r = e.target,
    		              i = w.string(r) ? n.selectorMap[r] : r[n.scope.id],
    		              o = yt(i, function (t) {
    		                return t === e;
    		              });
    		            i.splice(o, 1);
    		          }
    		        });
    		      }
    		      return o(t, [{
    		        key: "new",
    		        value: function (t, e) {
    		          e = V(e || {}, {
    		            actions: this.scope.actions
    		          });
    		          var n = new this.scope.Interactable(t, e, this.scope.document, this.scope.events);
    		          return this.scope.addDocument(n._doc), this.list.push(n), w.string(t) ? (this.selectorMap[t] || (this.selectorMap[t] = []), this.selectorMap[t].push(n)) : (n.target[this.scope.id] || Object.defineProperty(t, this.scope.id, {
    		            value: [],
    		            configurable: !0
    		          }), t[this.scope.id].push(n)), this.scope.fire("interactable:new", {
    		            target: t,
    		            options: e,
    		            interactable: n,
    		            win: this.scope._win
    		          }), n;
    		        }
    		      }, {
    		        key: "getExisting",
    		        value: function (t, e) {
    		          var n = e && e.context || this.scope.document,
    		            r = w.string(t),
    		            i = r ? this.selectorMap[t] : t[this.scope.id];
    		          if (i) return bt(i, function (e) {
    		            return e._context === n && (r || e.inContext(t));
    		          });
    		        }
    		      }, {
    		        key: "forEachMatch",
    		        value: function (t, e) {
    		          for (var n = 0, r = this.list; n < r.length; n++) {
    		            var i = r[n],
    		              o = void 0;
    		            if ((w.string(i.target) ? w.element(t) && R(t, i.target) : t === i.target) && i.inContext(t) && (o = e(i)), void 0 !== o) return o;
    		          }
    		        }
    		      }]), t;
    		    }();
    		  var sn = function () {
    		    function t() {
    		      var e = this;
    		      r(this, t), this.id = "__interact_scope_".concat(Math.floor(100 * Math.random())), this.isInitialized = !1, this.listenerMaps = [], this.browser = I, this.defaults = ge(Te), this.Eventable = Ve, this.actions = {
    		        map: {},
    		        phases: {
    		          start: !0,
    		          move: !0,
    		          end: !0
    		        },
    		        methodDict: {},
    		        phaselessTypes: {}
    		      }, this.interactStatic = function (t) {
    		        var e = function e(n, r) {
    		          var i = t.interactables.getExisting(n, r);
    		          return i || ((i = t.interactables.new(n, r)).events.global = e.globalEvents), i;
    		        };
    		        return e.getPointerAverage = lt, e.getTouchBBox = ut, e.getTouchDistance = pt, e.getTouchAngle = ft, e.getElementRect = L, e.getElementClientRect = Y, e.matchesSelector = R, e.closest = z, e.globalEvents = {}, e.version = "1.10.27", e.scope = t, e.use = function (t, e) {
    		          return this.scope.usePlugin(t, e), this;
    		        }, e.isSet = function (t, e) {
    		          return !!this.scope.interactables.get(t, e && e.context);
    		        }, e.on = Nt(function (t, e, n) {
    		          if (w.string(t) && -1 !== t.search(" ") && (t = t.trim().split(/ +/)), w.array(t)) {
    		            for (var r = 0, i = t; r < i.length; r++) {
    		              var o = i[r];
    		              this.on(o, e, n);
    		            }
    		            return this;
    		          }
    		          if (w.object(t)) {
    		            for (var a in t) this.on(a, t[a], e);
    		            return this;
    		          }
    		          return ve(t, this.scope.actions) ? this.globalEvents[t] ? this.globalEvents[t].push(e) : this.globalEvents[t] = [e] : this.scope.events.add(this.scope.document, t, e, {
    		            options: n
    		          }), this;
    		        }, "The interact.on() method is being deprecated"), e.off = Nt(function (t, e, n) {
    		          if (w.string(t) && -1 !== t.search(" ") && (t = t.trim().split(/ +/)), w.array(t)) {
    		            for (var r = 0, i = t; r < i.length; r++) {
    		              var o = i[r];
    		              this.off(o, e, n);
    		            }
    		            return this;
    		          }
    		          if (w.object(t)) {
    		            for (var a in t) this.off(a, t[a], e);
    		            return this;
    		          }
    		          var s;
    		          return ve(t, this.scope.actions) ? t in this.globalEvents && -1 !== (s = this.globalEvents[t].indexOf(e)) && this.globalEvents[t].splice(s, 1) : this.scope.events.remove(this.scope.document, t, e, n), this;
    		        }, "The interact.off() method is being deprecated"), e.debug = function () {
    		          return this.scope;
    		        }, e.supportsTouch = function () {
    		          return I.supportsTouch;
    		        }, e.supportsPointerEvent = function () {
    		          return I.supportsPointerEvent;
    		        }, e.stop = function () {
    		          for (var t = 0, e = this.scope.interactions.list; t < e.length; t++) e[t].stop();
    		          return this;
    		        }, e.pointerMoveTolerance = function (t) {
    		          return w.number(t) ? (this.scope.interactions.pointerMoveTolerance = t, this) : this.scope.interactions.pointerMoveTolerance;
    		        }, e.addDocument = function (t, e) {
    		          this.scope.addDocument(t, e);
    		        }, e.removeDocument = function (t) {
    		          this.scope.removeDocument(t);
    		        }, e;
    		      }(this), this.InteractEvent = Se, this.Interactable = void 0, this.interactables = new an(this), this._win = void 0, this.document = void 0, this.window = void 0, this.documents = [], this._plugins = {
    		        list: [],
    		        map: {}
    		      }, this.onWindowUnload = function (t) {
    		        return e.removeDocument(t.target);
    		      };
    		      var n = this;
    		      this.Interactable = function (t) {
    		        s(i, t);
    		        var e = p(i);
    		        function i() {
    		          return r(this, i), e.apply(this, arguments);
    		        }
    		        return o(i, [{
    		          key: "_defaults",
    		          get: function () {
    		            return n.defaults;
    		          }
    		        }, {
    		          key: "set",
    		          value: function (t) {
    		            return f(c(i.prototype), "set", this).call(this, t), n.fire("interactable:set", {
    		              options: t,
    		              interactable: this
    		            }), this;
    		          }
    		        }, {
    		          key: "unset",
    		          value: function () {
    		            f(c(i.prototype), "unset", this).call(this);
    		            var t = n.interactables.list.indexOf(this);
    		            t < 0 || (n.interactables.list.splice(t, 1), n.fire("interactable:unset", {
    		              interactable: this
    		            }));
    		          }
    		        }]), i;
    		      }(on);
    		    }
    		    return o(t, [{
    		      key: "addListeners",
    		      value: function (t, e) {
    		        this.listenerMaps.push({
    		          id: e,
    		          map: t
    		        });
    		      }
    		    }, {
    		      key: "fire",
    		      value: function (t, e) {
    		        for (var n = 0, r = this.listenerMaps; n < r.length; n++) {
    		          var i = r[n].map[t];
    		          if (i && !1 === i(e, this, t)) return !1;
    		        }
    		      }
    		    }, {
    		      key: "init",
    		      value: function (t) {
    		        return this.isInitialized ? this : function (t, e) {
    		          t.isInitialized = !0, w.window(e) && m(e);
    		          return k.init(e), I.init(e), Lt.init(e), t.window = e, t.document = e.document, t.usePlugin(nn), t.usePlugin(Ue), t;
    		        }(this, t);
    		      }
    		    }, {
    		      key: "pluginIsInstalled",
    		      value: function (t) {
    		        var e = t.id;
    		        return e ? !!this._plugins.map[e] : -1 !== this._plugins.list.indexOf(t);
    		      }
    		    }, {
    		      key: "usePlugin",
    		      value: function (t, e) {
    		        if (!this.isInitialized) return this;
    		        if (this.pluginIsInstalled(t)) return this;
    		        if (t.id && (this._plugins.map[t.id] = t), this._plugins.list.push(t), t.install && t.install(this, e), t.listeners && t.before) {
    		          for (var n = 0, r = this.listenerMaps.length, i = t.before.reduce(function (t, e) {
    		              return t[e] = !0, t[cn(e)] = !0, t;
    		            }, {}); n < r; n++) {
    		            var o = this.listenerMaps[n].id;
    		            if (o && (i[o] || i[cn(o)])) break;
    		          }
    		          this.listenerMaps.splice(n, 0, {
    		            id: t.id,
    		            map: t.listeners
    		          });
    		        } else t.listeners && this.listenerMaps.push({
    		          id: t.id,
    		          map: t.listeners
    		        });
    		        return this;
    		      }
    		    }, {
    		      key: "addDocument",
    		      value: function (t, e) {
    		        if (-1 !== this.getDocIndex(t)) return !1;
    		        var n = y(t);
    		        e = e ? V({}, e) : {}, this.documents.push({
    		          doc: t,
    		          options: e
    		        }), this.events.documents.push(t), t !== this.document && this.events.add(n, "unload", this.onWindowUnload), this.fire("scope:add-document", {
    		          doc: t,
    		          window: n,
    		          scope: this,
    		          options: e
    		        });
    		      }
    		    }, {
    		      key: "removeDocument",
    		      value: function (t) {
    		        var e = this.getDocIndex(t),
    		          n = y(t),
    		          r = this.documents[e].options;
    		        this.events.remove(n, "unload", this.onWindowUnload), this.documents.splice(e, 1), this.events.documents.splice(e, 1), this.fire("scope:remove-document", {
    		          doc: t,
    		          window: n,
    		          scope: this,
    		          options: r
    		        });
    		      }
    		    }, {
    		      key: "getDocIndex",
    		      value: function (t) {
    		        for (var e = 0; e < this.documents.length; e++) if (this.documents[e].doc === t) return e;
    		        return -1;
    		      }
    		    }, {
    		      key: "getDocOptions",
    		      value: function (t) {
    		        var e = this.getDocIndex(t);
    		        return -1 === e ? null : this.documents[e].options;
    		      }
    		    }, {
    		      key: "now",
    		      value: function () {
    		        return (this.window.Date || Date).now();
    		      }
    		    }]), t;
    		  }();
    		  function cn(t) {
    		    return t && t.replace(/\/.*$/, "");
    		  }
    		  var ln = new sn(),
    		    un = ln.interactStatic,
    		    pn = "undefined" != typeof globalThis ? globalThis : window;
    		  ln.init(pn);
    		  var fn = Object.freeze({
    		      __proto__: null,
    		      edgeTarget: function () {},
    		      elements: function () {},
    		      grid: function (t) {
    		        var e = [["x", "y"], ["left", "top"], ["right", "bottom"], ["width", "height"]].filter(function (e) {
    		            var n = e[0],
    		              r = e[1];
    		            return n in t || r in t;
    		          }),
    		          n = function (n, r) {
    		            for (var i = t.range, o = t.limits, a = void 0 === o ? {
    		                left: -1 / 0,
    		                right: 1 / 0,
    		                top: -1 / 0,
    		                bottom: 1 / 0
    		              } : o, s = t.offset, c = void 0 === s ? {
    		                x: 0,
    		                y: 0
    		              } : s, l = {
    		                range: i,
    		                grid: t,
    		                x: null,
    		                y: null
    		              }, u = 0; u < e.length; u++) {
    		              var p = e[u],
    		                f = p[0],
    		                d = p[1],
    		                h = Math.round((n - c.x) / t[f]),
    		                v = Math.round((r - c.y) / t[d]);
    		              l[f] = Math.max(a.left, Math.min(a.right, h * t[f] + c.x)), l[d] = Math.max(a.top, Math.min(a.bottom, v * t[d] + c.y));
    		            }
    		            return l;
    		          };
    		        return n.grid = t, n.coordFields = e, n;
    		      }
    		    }),
    		    dn = {
    		      id: "snappers",
    		      install: function (t) {
    		        var e = t.interactStatic;
    		        e.snappers = V(e.snappers || {}, fn), e.createSnapGrid = e.snappers.grid;
    		      }
    		    },
    		    hn = dn,
    		    vn = {
    		      start: function (t) {
    		        var n = t.state,
    		          r = t.rect,
    		          i = t.edges,
    		          o = t.pageCoords,
    		          a = n.options,
    		          s = a.ratio,
    		          c = a.enabled,
    		          l = n.options,
    		          u = l.equalDelta,
    		          p = l.modifiers;
    		        "preserve" === s && (s = r.width / r.height), n.startCoords = V({}, o), n.startRect = V({}, r), n.ratio = s, n.equalDelta = u;
    		        var f = n.linkedEdges = {
    		          top: i.top || i.left && !i.bottom,
    		          left: i.left || i.top && !i.right,
    		          bottom: i.bottom || i.right && !i.top,
    		          right: i.right || i.bottom && !i.left
    		        };
    		        if (n.xIsPrimaryAxis = !(!i.left && !i.right), n.equalDelta) {
    		          var d = (f.left ? 1 : -1) * (f.top ? 1 : -1);
    		          n.edgeSign = {
    		            x: d,
    		            y: d
    		          };
    		        } else n.edgeSign = {
    		          x: f.left ? -1 : 1,
    		          y: f.top ? -1 : 1
    		        };
    		        if (!1 !== c && V(i, f), null != p && p.length) {
    		          var h = new me(t.interaction);
    		          h.copyFrom(t.interaction.modification), h.prepareStates(p), n.subModification = h, h.startAll(e({}, t));
    		        }
    		      },
    		      set: function (t) {
    		        var n = t.state,
    		          r = t.rect,
    		          i = t.coords,
    		          o = n.linkedEdges,
    		          a = V({}, i),
    		          s = n.equalDelta ? gn : mn;
    		        if (V(t.edges, o), s(n, n.xIsPrimaryAxis, i, r), !n.subModification) return null;
    		        var c = V({}, r);
    		        H(o, c, {
    		          x: i.x - a.x,
    		          y: i.y - a.y
    		        });
    		        var l = n.subModification.setAll(e(e({}, t), {}, {
    		            rect: c,
    		            edges: o,
    		            pageCoords: i,
    		            prevCoords: i,
    		            prevRect: c
    		          })),
    		          u = l.delta;
    		        l.changed && (s(n, Math.abs(u.x) > Math.abs(u.y), l.coords, l.rect), V(i, l.coords));
    		        return l.eventProps;
    		      },
    		      defaults: {
    		        ratio: "preserve",
    		        equalDelta: !1,
    		        modifiers: [],
    		        enabled: !1
    		      }
    		    };
    		  function gn(t, e, n) {
    		    var r = t.startCoords,
    		      i = t.edgeSign;
    		    e ? n.y = r.y + (n.x - r.x) * i.y : n.x = r.x + (n.y - r.y) * i.x;
    		  }
    		  function mn(t, e, n, r) {
    		    var i = t.startRect,
    		      o = t.startCoords,
    		      a = t.ratio,
    		      s = t.edgeSign;
    		    if (e) {
    		      var c = r.width / a;
    		      n.y = o.y + (c - i.height) * s.y;
    		    } else {
    		      var l = r.height * a;
    		      n.x = o.x + (l - i.width) * s.x;
    		    }
    		  }
    		  var yn = be(vn, "aspectRatio"),
    		    bn = function () {};
    		  bn._defaults = {};
    		  var xn = bn;
    		  function wn(t, e, n) {
    		    return w.func(t) ? G(t, e.interactable, e.element, [n.x, n.y, e]) : G(t, e.interactable, e.element);
    		  }
    		  var En = {
    		      start: function (t) {
    		        var e = t.rect,
    		          n = t.startOffset,
    		          r = t.state,
    		          i = t.interaction,
    		          o = t.pageCoords,
    		          a = r.options,
    		          s = a.elementRect,
    		          c = V({
    		            left: 0,
    		            top: 0,
    		            right: 0,
    		            bottom: 0
    		          }, a.offset || {});
    		        if (e && s) {
    		          var l = wn(a.restriction, i, o);
    		          if (l) {
    		            var u = l.right - l.left - e.width,
    		              p = l.bottom - l.top - e.height;
    		            u < 0 && (c.left += u, c.right += u), p < 0 && (c.top += p, c.bottom += p);
    		          }
    		          c.left += n.left - e.width * s.left, c.top += n.top - e.height * s.top, c.right += n.right - e.width * (1 - s.right), c.bottom += n.bottom - e.height * (1 - s.bottom);
    		        }
    		        r.offset = c;
    		      },
    		      set: function (t) {
    		        var e = t.coords,
    		          n = t.interaction,
    		          r = t.state,
    		          i = r.options,
    		          o = r.offset,
    		          a = wn(i.restriction, n, e);
    		        if (a) {
    		          var s = function (t) {
    		            return !t || "left" in t && "top" in t || ((t = V({}, t)).left = t.x || 0, t.top = t.y || 0, t.right = t.right || t.left + t.width, t.bottom = t.bottom || t.top + t.height), t;
    		          }(a);
    		          e.x = Math.max(Math.min(s.right - o.right, e.x), s.left + o.left), e.y = Math.max(Math.min(s.bottom - o.bottom, e.y), s.top + o.top);
    		        }
    		      },
    		      defaults: {
    		        restriction: null,
    		        elementRect: null,
    		        offset: null,
    		        endOnly: !1,
    		        enabled: !1
    		      }
    		    },
    		    Tn = be(En, "restrict"),
    		    Sn = {
    		      top: 1 / 0,
    		      left: 1 / 0,
    		      bottom: -1 / 0,
    		      right: -1 / 0
    		    },
    		    _n = {
    		      top: -1 / 0,
    		      left: -1 / 0,
    		      bottom: 1 / 0,
    		      right: 1 / 0
    		    };
    		  function Pn(t, e) {
    		    for (var n = 0, r = ["top", "left", "bottom", "right"]; n < r.length; n++) {
    		      var i = r[n];
    		      i in t || (t[i] = e[i]);
    		    }
    		    return t;
    		  }
    		  var On = {
    		      noInner: Sn,
    		      noOuter: _n,
    		      start: function (t) {
    		        var e,
    		          n = t.interaction,
    		          r = t.startOffset,
    		          i = t.state,
    		          o = i.options;
    		        o && (e = N(wn(o.offset, n, n.coords.start.page))), e = e || {
    		          x: 0,
    		          y: 0
    		        }, i.offset = {
    		          top: e.y + r.top,
    		          left: e.x + r.left,
    		          bottom: e.y - r.bottom,
    		          right: e.x - r.right
    		        };
    		      },
    		      set: function (t) {
    		        var e = t.coords,
    		          n = t.edges,
    		          r = t.interaction,
    		          i = t.state,
    		          o = i.offset,
    		          a = i.options;
    		        if (n) {
    		          var s = V({}, e),
    		            c = wn(a.inner, r, s) || {},
    		            l = wn(a.outer, r, s) || {};
    		          Pn(c, Sn), Pn(l, _n), n.top ? e.y = Math.min(Math.max(l.top + o.top, s.y), c.top + o.top) : n.bottom && (e.y = Math.max(Math.min(l.bottom + o.bottom, s.y), c.bottom + o.bottom)), n.left ? e.x = Math.min(Math.max(l.left + o.left, s.x), c.left + o.left) : n.right && (e.x = Math.max(Math.min(l.right + o.right, s.x), c.right + o.right));
    		        }
    		      },
    		      defaults: {
    		        inner: null,
    		        outer: null,
    		        offset: null,
    		        endOnly: !1,
    		        enabled: !1
    		      }
    		    },
    		    kn = be(On, "restrictEdges"),
    		    Dn = V({
    		      get elementRect() {
    		        return {
    		          top: 0,
    		          left: 0,
    		          bottom: 1,
    		          right: 1
    		        };
    		      },
    		      set elementRect(t) {}
    		    }, En.defaults),
    		    In = be({
    		      start: En.start,
    		      set: En.set,
    		      defaults: Dn
    		    }, "restrictRect"),
    		    Mn = {
    		      width: -1 / 0,
    		      height: -1 / 0
    		    },
    		    zn = {
    		      width: 1 / 0,
    		      height: 1 / 0
    		    };
    		  var An = be({
    		    start: function (t) {
    		      return On.start(t);
    		    },
    		    set: function (t) {
    		      var e = t.interaction,
    		        n = t.state,
    		        r = t.rect,
    		        i = t.edges,
    		        o = n.options;
    		      if (i) {
    		        var a = U(wn(o.min, e, t.coords)) || Mn,
    		          s = U(wn(o.max, e, t.coords)) || zn;
    		        n.options = {
    		          endOnly: o.endOnly,
    		          inner: V({}, On.noInner),
    		          outer: V({}, On.noOuter)
    		        }, i.top ? (n.options.inner.top = r.bottom - a.height, n.options.outer.top = r.bottom - s.height) : i.bottom && (n.options.inner.bottom = r.top + a.height, n.options.outer.bottom = r.top + s.height), i.left ? (n.options.inner.left = r.right - a.width, n.options.outer.left = r.right - s.width) : i.right && (n.options.inner.right = r.left + a.width, n.options.outer.right = r.left + s.width), On.set(t), n.options = o;
    		      }
    		    },
    		    defaults: {
    		      min: null,
    		      max: null,
    		      endOnly: !1,
    		      enabled: !1
    		    }
    		  }, "restrictSize");
    		  var Rn = {
    		      start: function (t) {
    		        var e,
    		          n = t.interaction,
    		          r = t.interactable,
    		          i = t.element,
    		          o = t.rect,
    		          a = t.state,
    		          s = t.startOffset,
    		          c = a.options,
    		          l = c.offsetWithOrigin ? function (t) {
    		            var e = t.interaction.element,
    		              n = N(G(t.state.options.origin, null, null, [e])),
    		              r = n || K(t.interactable, e, t.interaction.prepared.name);
    		            return r;
    		          }(t) : {
    		            x: 0,
    		            y: 0
    		          };
    		        if ("startCoords" === c.offset) e = {
    		          x: n.coords.start.page.x,
    		          y: n.coords.start.page.y
    		        };else {
    		          var u = G(c.offset, r, i, [n]);
    		          (e = N(u) || {
    		            x: 0,
    		            y: 0
    		          }).x += l.x, e.y += l.y;
    		        }
    		        var p = c.relativePoints;
    		        a.offsets = o && p && p.length ? p.map(function (t, n) {
    		          return {
    		            index: n,
    		            relativePoint: t,
    		            x: s.left - o.width * t.x + e.x,
    		            y: s.top - o.height * t.y + e.y
    		          };
    		        }) : [{
    		          index: 0,
    		          relativePoint: null,
    		          x: e.x,
    		          y: e.y
    		        }];
    		      },
    		      set: function (t) {
    		        var e = t.interaction,
    		          n = t.coords,
    		          r = t.state,
    		          i = r.options,
    		          o = r.offsets,
    		          a = K(e.interactable, e.element, e.prepared.name),
    		          s = V({}, n),
    		          c = [];
    		        i.offsetWithOrigin || (s.x -= a.x, s.y -= a.y);
    		        for (var l = 0, u = o; l < u.length; l++) for (var p = u[l], f = s.x - p.x, d = s.y - p.y, h = 0, v = i.targets.length; h < v; h++) {
    		          var g = i.targets[h],
    		            m = void 0;
    		          (m = w.func(g) ? g(f, d, e._proxy, p, h) : g) && c.push({
    		            x: (w.number(m.x) ? m.x : f) + p.x,
    		            y: (w.number(m.y) ? m.y : d) + p.y,
    		            range: w.number(m.range) ? m.range : i.range,
    		            source: g,
    		            index: h,
    		            offset: p
    		          });
    		        }
    		        for (var y = {
    		            target: null,
    		            inRange: !1,
    		            distance: 0,
    		            range: 0,
    		            delta: {
    		              x: 0,
    		              y: 0
    		            }
    		          }, b = 0; b < c.length; b++) {
    		          var x = c[b],
    		            E = x.range,
    		            T = x.x - s.x,
    		            S = x.y - s.y,
    		            _ = Q(T, S),
    		            P = _ <= E;
    		          E === 1 / 0 && y.inRange && y.range !== 1 / 0 && (P = !1), y.target && !(P ? y.inRange && E !== 1 / 0 ? _ / E < y.distance / y.range : E === 1 / 0 && y.range !== 1 / 0 || _ < y.distance : !y.inRange && _ < y.distance) || (y.target = x, y.distance = _, y.range = E, y.inRange = P, y.delta.x = T, y.delta.y = S);
    		        }
    		        return y.inRange && (n.x = y.target.x, n.y = y.target.y), r.closest = y, y;
    		      },
    		      defaults: {
    		        range: 1 / 0,
    		        targets: null,
    		        offset: null,
    		        offsetWithOrigin: !0,
    		        origin: null,
    		        relativePoints: null,
    		        endOnly: !1,
    		        enabled: !1
    		      }
    		    },
    		    Cn = be(Rn, "snap");
    		  var jn = {
    		      start: function (t) {
    		        var e = t.state,
    		          n = t.edges,
    		          r = e.options;
    		        if (!n) return null;
    		        t.state = {
    		          options: {
    		            targets: null,
    		            relativePoints: [{
    		              x: n.left ? 0 : 1,
    		              y: n.top ? 0 : 1
    		            }],
    		            offset: r.offset || "self",
    		            origin: {
    		              x: 0,
    		              y: 0
    		            },
    		            range: r.range
    		          }
    		        }, e.targetFields = e.targetFields || [["width", "height"], ["x", "y"]], Rn.start(t), e.offsets = t.state.offsets, t.state = e;
    		      },
    		      set: function (t) {
    		        var e = t.interaction,
    		          n = t.state,
    		          r = t.coords,
    		          i = n.options,
    		          o = n.offsets,
    		          a = {
    		            x: r.x - o[0].x,
    		            y: r.y - o[0].y
    		          };
    		        n.options = V({}, i), n.options.targets = [];
    		        for (var s = 0, c = i.targets || []; s < c.length; s++) {
    		          var l = c[s],
    		            u = void 0;
    		          if (u = w.func(l) ? l(a.x, a.y, e) : l) {
    		            for (var p = 0, f = n.targetFields; p < f.length; p++) {
    		              var d = f[p],
    		                h = d[0],
    		                v = d[1];
    		              if (h in u || v in u) {
    		                u.x = u[h], u.y = u[v];
    		                break;
    		              }
    		            }
    		            n.options.targets.push(u);
    		          }
    		        }
    		        var g = Rn.set(t);
    		        return n.options = i, g;
    		      },
    		      defaults: {
    		        range: 1 / 0,
    		        targets: null,
    		        offset: null,
    		        endOnly: !1,
    		        enabled: !1
    		      }
    		    },
    		    Fn = be(jn, "snapSize");
    		  var Xn = {
    		      aspectRatio: yn,
    		      restrictEdges: kn,
    		      restrict: Tn,
    		      restrictRect: In,
    		      restrictSize: An,
    		      snapEdges: be({
    		        start: function (t) {
    		          var e = t.edges;
    		          return e ? (t.state.targetFields = t.state.targetFields || [[e.left ? "left" : "right", e.top ? "top" : "bottom"]], jn.start(t)) : null;
    		        },
    		        set: jn.set,
    		        defaults: V(ge(jn.defaults), {
    		          targets: void 0,
    		          range: void 0,
    		          offset: {
    		            x: 0,
    		            y: 0
    		          }
    		        })
    		      }, "snapEdges"),
    		      snap: Cn,
    		      snapSize: Fn,
    		      spring: xn,
    		      avoid: xn,
    		      transform: xn,
    		      rubberband: xn
    		    },
    		    Yn = {
    		      id: "modifiers",
    		      install: function (t) {
    		        var e = t.interactStatic;
    		        for (var n in t.usePlugin(Ee), t.usePlugin(hn), e.modifiers = Xn, Xn) {
    		          var r = Xn[n],
    		            i = r._defaults,
    		            o = r._methods;
    		          i._methods = o, t.defaults.perAction[n] = i;
    		        }
    		      }
    		    },
    		    Ln = Yn,
    		    qn = function (t) {
    		      s(n, t);
    		      var e = p(n);
    		      function n(t, i, o, a, s, c) {
    		        var l;
    		        if (r(this, n), tt(u(l = e.call(this, s)), o), o !== i && tt(u(l), i), l.timeStamp = c, l.originalEvent = o, l.type = t, l.pointerId = at(i), l.pointerType = dt(i), l.target = a, l.currentTarget = null, "tap" === t) {
    		          var p = s.getPointerIndex(i);
    		          l.dt = l.timeStamp - s.pointers[p].downTime;
    		          var f = l.timeStamp - s.tapTime;
    		          l.double = !!s.prevTap && "doubletap" !== s.prevTap.type && s.prevTap.target === l.target && f < 500;
    		        } else "doubletap" === t && (l.dt = i.timeStamp - s.tapTime, l.double = !0);
    		        return l;
    		      }
    		      return o(n, [{
    		        key: "_subtractOrigin",
    		        value: function (t) {
    		          var e = t.x,
    		            n = t.y;
    		          return this.pageX -= e, this.pageY -= n, this.clientX -= e, this.clientY -= n, this;
    		        }
    		      }, {
    		        key: "_addOrigin",
    		        value: function (t) {
    		          var e = t.x,
    		            n = t.y;
    		          return this.pageX += e, this.pageY += n, this.clientX += e, this.clientY += n, this;
    		        }
    		      }, {
    		        key: "preventDefault",
    		        value: function () {
    		          this.originalEvent.preventDefault();
    		        }
    		      }]), n;
    		    }(vt),
    		    Bn = {
    		      id: "pointer-events/base",
    		      before: ["inertia", "modifiers", "auto-start", "actions"],
    		      install: function (t) {
    		        t.pointerEvents = Bn, t.defaults.actions.pointerEvents = Bn.defaults, V(t.actions.phaselessTypes, Bn.types);
    		      },
    		      listeners: {
    		        "interactions:new": function (t) {
    		          var e = t.interaction;
    		          e.prevTap = null, e.tapTime = 0;
    		        },
    		        "interactions:update-pointer": function (t) {
    		          var e = t.down,
    		            n = t.pointerInfo;
    		          if (!e && n.hold) return;
    		          n.hold = {
    		            duration: 1 / 0,
    		            timeout: null
    		          };
    		        },
    		        "interactions:move": function (t, e) {
    		          var n = t.interaction,
    		            r = t.pointer,
    		            i = t.event,
    		            o = t.eventTarget;
    		          t.duplicate || n.pointerIsDown && !n.pointerWasMoved || (n.pointerIsDown && Gn(t), Vn({
    		            interaction: n,
    		            pointer: r,
    		            event: i,
    		            eventTarget: o,
    		            type: "move"
    		          }, e));
    		        },
    		        "interactions:down": function (t, e) {
    		          !function (t, e) {
    		            for (var n = t.interaction, r = t.pointer, i = t.event, o = t.eventTarget, a = t.pointerIndex, s = n.pointers[a].hold, c = q(o), l = {
    		                interaction: n,
    		                pointer: r,
    		                event: i,
    		                eventTarget: o,
    		                type: "hold",
    		                targets: [],
    		                path: c,
    		                node: null
    		              }, u = 0; u < c.length; u++) {
    		              var p = c[u];
    		              l.node = p, e.fire("pointerEvents:collect-targets", l);
    		            }
    		            if (!l.targets.length) return;
    		            for (var f = 1 / 0, d = 0, h = l.targets; d < h.length; d++) {
    		              var v = h[d].eventable.options.holdDuration;
    		              v < f && (f = v);
    		            }
    		            s.duration = f, s.timeout = setTimeout(function () {
    		              Vn({
    		                interaction: n,
    		                eventTarget: o,
    		                pointer: r,
    		                event: i,
    		                type: "hold"
    		              }, e);
    		            }, f);
    		          }(t, e), Vn(t, e);
    		        },
    		        "interactions:up": function (t, e) {
    		          Gn(t), Vn(t, e), function (t, e) {
    		            var n = t.interaction,
    		              r = t.pointer,
    		              i = t.event,
    		              o = t.eventTarget;
    		            n.pointerWasMoved || Vn({
    		              interaction: n,
    		              eventTarget: o,
    		              pointer: r,
    		              event: i,
    		              type: "tap"
    		            }, e);
    		          }(t, e);
    		        },
    		        "interactions:cancel": function (t, e) {
    		          Gn(t), Vn(t, e);
    		        }
    		      },
    		      PointerEvent: qn,
    		      fire: Vn,
    		      collectEventTargets: Wn,
    		      defaults: {
    		        holdDuration: 600,
    		        ignoreFrom: null,
    		        allowFrom: null,
    		        origin: {
    		          x: 0,
    		          y: 0
    		        }
    		      },
    		      types: {
    		        down: !0,
    		        move: !0,
    		        up: !0,
    		        cancel: !0,
    		        tap: !0,
    		        doubletap: !0,
    		        hold: !0
    		      }
    		    };
    		  function Vn(t, e) {
    		    var n = t.interaction,
    		      r = t.pointer,
    		      i = t.event,
    		      o = t.eventTarget,
    		      a = t.type,
    		      s = t.targets,
    		      c = void 0 === s ? Wn(t, e) : s,
    		      l = new qn(a, r, i, o, n, e.now());
    		    e.fire("pointerEvents:new", {
    		      pointerEvent: l
    		    });
    		    for (var u = {
    		        interaction: n,
    		        pointer: r,
    		        event: i,
    		        eventTarget: o,
    		        targets: c,
    		        type: a,
    		        pointerEvent: l
    		      }, p = 0; p < c.length; p++) {
    		      var f = c[p];
    		      for (var d in f.props || {}) l[d] = f.props[d];
    		      var h = K(f.eventable, f.node);
    		      if (l._subtractOrigin(h), l.eventable = f.eventable, l.currentTarget = f.node, f.eventable.fire(l), l._addOrigin(h), l.immediatePropagationStopped || l.propagationStopped && p + 1 < c.length && c[p + 1].node !== l.currentTarget) break;
    		    }
    		    if (e.fire("pointerEvents:fired", u), "tap" === a) {
    		      var v = l.double ? Vn({
    		        interaction: n,
    		        pointer: r,
    		        event: i,
    		        eventTarget: o,
    		        type: "doubletap"
    		      }, e) : l;
    		      n.prevTap = v, n.tapTime = v.timeStamp;
    		    }
    		    return l;
    		  }
    		  function Wn(t, e) {
    		    var n = t.interaction,
    		      r = t.pointer,
    		      i = t.event,
    		      o = t.eventTarget,
    		      a = t.type,
    		      s = n.getPointerIndex(r),
    		      c = n.pointers[s];
    		    if ("tap" === a && (n.pointerWasMoved || !c || c.downTarget !== o)) return [];
    		    for (var l = q(o), u = {
    		        interaction: n,
    		        pointer: r,
    		        event: i,
    		        eventTarget: o,
    		        type: a,
    		        path: l,
    		        targets: [],
    		        node: null
    		      }, p = 0; p < l.length; p++) {
    		      var f = l[p];
    		      u.node = f, e.fire("pointerEvents:collect-targets", u);
    		    }
    		    return "hold" === a && (u.targets = u.targets.filter(function (t) {
    		      var e, r;
    		      return t.eventable.options.holdDuration === (null == (e = n.pointers[s]) || null == (r = e.hold) ? void 0 : r.duration);
    		    })), u.targets;
    		  }
    		  function Gn(t) {
    		    var e = t.interaction,
    		      n = t.pointerIndex,
    		      r = e.pointers[n].hold;
    		    r && r.timeout && (clearTimeout(r.timeout), r.timeout = null);
    		  }
    		  var Nn = Object.freeze({
    		    __proto__: null,
    		    default: Bn
    		  });
    		  function Un(t) {
    		    var e = t.interaction;
    		    e.holdIntervalHandle && (clearInterval(e.holdIntervalHandle), e.holdIntervalHandle = null);
    		  }
    		  var Hn = {
    		      id: "pointer-events/holdRepeat",
    		      install: function (t) {
    		        t.usePlugin(Bn);
    		        var e = t.pointerEvents;
    		        e.defaults.holdRepeatInterval = 0, e.types.holdrepeat = t.actions.phaselessTypes.holdrepeat = !0;
    		      },
    		      listeners: ["move", "up", "cancel", "endall"].reduce(function (t, e) {
    		        return t["pointerEvents:".concat(e)] = Un, t;
    		      }, {
    		        "pointerEvents:new": function (t) {
    		          var e = t.pointerEvent;
    		          "hold" === e.type && (e.count = (e.count || 0) + 1);
    		        },
    		        "pointerEvents:fired": function (t, e) {
    		          var n = t.interaction,
    		            r = t.pointerEvent,
    		            i = t.eventTarget,
    		            o = t.targets;
    		          if ("hold" === r.type && o.length) {
    		            var a = o[0].eventable.options.holdRepeatInterval;
    		            a <= 0 || (n.holdIntervalHandle = setTimeout(function () {
    		              e.pointerEvents.fire({
    		                interaction: n,
    		                eventTarget: i,
    		                type: "hold",
    		                pointer: r,
    		                event: r
    		              }, e);
    		            }, a));
    		          }
    		        }
    		      })
    		    },
    		    Kn = Hn;
    		  var $n = {
    		      id: "pointer-events/interactableTargets",
    		      install: function (t) {
    		        var e = t.Interactable;
    		        e.prototype.pointerEvents = function (t) {
    		          return V(this.events.options, t), this;
    		        };
    		        var n = e.prototype._backCompatOption;
    		        e.prototype._backCompatOption = function (t, e) {
    		          var r = n.call(this, t, e);
    		          return r === this && (this.events.options[t] = e), r;
    		        };
    		      },
    		      listeners: {
    		        "pointerEvents:collect-targets": function (t, e) {
    		          var n = t.targets,
    		            r = t.node,
    		            i = t.type,
    		            o = t.eventTarget;
    		          e.interactables.forEachMatch(r, function (t) {
    		            var e = t.events,
    		              a = e.options;
    		            e.types[i] && e.types[i].length && t.testIgnoreAllow(a, r, o) && n.push({
    		              node: r,
    		              eventable: e,
    		              props: {
    		                interactable: t
    		              }
    		            });
    		          });
    		        },
    		        "interactable:new": function (t) {
    		          var e = t.interactable;
    		          e.events.getRect = function (t) {
    		            return e.getRect(t);
    		          };
    		        },
    		        "interactable:set": function (t, e) {
    		          var n = t.interactable,
    		            r = t.options;
    		          V(n.events.options, e.pointerEvents.defaults), V(n.events.options, r.pointerEvents || {});
    		        }
    		      }
    		    },
    		    Jn = $n,
    		    Qn = {
    		      id: "pointer-events",
    		      install: function (t) {
    		        t.usePlugin(Nn), t.usePlugin(Kn), t.usePlugin(Jn);
    		      }
    		    },
    		    Zn = Qn;
    		  var tr = {
    		      id: "reflow",
    		      install: function (t) {
    		        var e = t.Interactable;
    		        t.actions.phases.reflow = !0, e.prototype.reflow = function (e) {
    		          return function (t, e, n) {
    		            for (var r = t.getAllElements(), i = n.window.Promise, o = i ? [] : null, a = function () {
    		                var a = r[s],
    		                  c = t.getRect(a);
    		                if (!c) return 1;
    		                var l,
    		                  u = bt(n.interactions.list, function (n) {
    		                    return n.interacting() && n.interactable === t && n.element === a && n.prepared.name === e.name;
    		                  });
    		                if (u) u.move(), o && (l = u._reflowPromise || new i(function (t) {
    		                  u._reflowResolve = t;
    		                }));else {
    		                  var p = U(c),
    		                    f = function (t) {
    		                      return {
    		                        coords: t,
    		                        get page() {
    		                          return this.coords.page;
    		                        },
    		                        get client() {
    		                          return this.coords.client;
    		                        },
    		                        get timeStamp() {
    		                          return this.coords.timeStamp;
    		                        },
    		                        get pageX() {
    		                          return this.coords.page.x;
    		                        },
    		                        get pageY() {
    		                          return this.coords.page.y;
    		                        },
    		                        get clientX() {
    		                          return this.coords.client.x;
    		                        },
    		                        get clientY() {
    		                          return this.coords.client.y;
    		                        },
    		                        get pointerId() {
    		                          return this.coords.pointerId;
    		                        },
    		                        get target() {
    		                          return this.coords.target;
    		                        },
    		                        get type() {
    		                          return this.coords.type;
    		                        },
    		                        get pointerType() {
    		                          return this.coords.pointerType;
    		                        },
    		                        get buttons() {
    		                          return this.coords.buttons;
    		                        },
    		                        preventDefault: function () {}
    		                      };
    		                    }({
    		                      page: {
    		                        x: p.x,
    		                        y: p.y
    		                      },
    		                      client: {
    		                        x: p.x,
    		                        y: p.y
    		                      },
    		                      timeStamp: n.now()
    		                    });
    		                  l = function (t, e, n, r, i) {
    		                    var o = t.interactions.new({
    		                        pointerType: "reflow"
    		                      }),
    		                      a = {
    		                        interaction: o,
    		                        event: i,
    		                        pointer: i,
    		                        eventTarget: n,
    		                        phase: "reflow"
    		                      };
    		                    o.interactable = e, o.element = n, o.prevEvent = i, o.updatePointer(i, i, n, !0), nt(o.coords.delta), Ut(o.prepared, r), o._doPhase(a);
    		                    var s = t.window,
    		                      c = s.Promise,
    		                      l = c ? new c(function (t) {
    		                        o._reflowResolve = t;
    		                      }) : void 0;
    		                    o._reflowPromise = l, o.start(r, e, n), o._interacting ? (o.move(a), o.end(i)) : (o.stop(), o._reflowResolve());
    		                    return o.removePointer(i, i), l;
    		                  }(n, t, a, e, f);
    		                }
    		                o && o.push(l);
    		              }, s = 0; s < r.length && !a(); s++);
    		            return o && i.all(o).then(function () {
    		              return t;
    		            });
    		          }(this, e, t);
    		        };
    		      },
    		      listeners: {
    		        "interactions:stop": function (t, e) {
    		          var n = t.interaction;
    		          "reflow" === n.pointerType && (n._reflowResolve && n._reflowResolve(), function (t, e) {
    		            t.splice(t.indexOf(e), 1);
    		          }(e.interactions.list, n));
    		        }
    		      }
    		    },
    		    er = tr;
    		  if (un.use(he), un.use(Ce), un.use(Zn), un.use(qe), un.use(Ln), un.use(pe), un.use(Xt), un.use(Gt), un.use(er), un.default = un, "object" === (n(module)) && module) try {
    		    module.exports = un;
    		  } catch (t) {}
    		  return un.default = un, un;
    		}); 
    	} (interact_min$1, interact_min$1.exports));
    	return interact_min$1.exports;
    }

    function commonjsRequire(path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var moment$1 = {exports: {}};

    var moment = moment$1.exports;

    var hasRequiredMoment;

    function requireMoment () {
    	if (hasRequiredMoment) return moment$1.exports;
    	hasRequiredMoment = 1;
    	(function (module, exports) {
    		(function (global, factory) {
    		  module.exports = factory() ;
    		})(moment, function () {

    		  var hookCallback;
    		  function hooks() {
    		    return hookCallback.apply(null, arguments);
    		  }

    		  // This is done to register the method called with moment()
    		  // without creating circular dependencies.
    		  function setHookCallback(callback) {
    		    hookCallback = callback;
    		  }
    		  function isArray(input) {
    		    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    		  }
    		  function isObject(input) {
    		    // IE8 will treat undefined and null as object if it wasn't for
    		    // input != null
    		    return input != null && Object.prototype.toString.call(input) === '[object Object]';
    		  }
    		  function hasOwnProp(a, b) {
    		    return Object.prototype.hasOwnProperty.call(a, b);
    		  }
    		  function isObjectEmpty(obj) {
    		    if (Object.getOwnPropertyNames) {
    		      return Object.getOwnPropertyNames(obj).length === 0;
    		    } else {
    		      var k;
    		      for (k in obj) {
    		        if (hasOwnProp(obj, k)) {
    		          return false;
    		        }
    		      }
    		      return true;
    		    }
    		  }
    		  function isUndefined(input) {
    		    return input === void 0;
    		  }
    		  function isNumber(input) {
    		    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    		  }
    		  function isDate(input) {
    		    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    		  }
    		  function map(arr, fn) {
    		    var res = [],
    		      i,
    		      arrLen = arr.length;
    		    for (i = 0; i < arrLen; ++i) {
    		      res.push(fn(arr[i], i));
    		    }
    		    return res;
    		  }
    		  function extend(a, b) {
    		    for (var i in b) {
    		      if (hasOwnProp(b, i)) {
    		        a[i] = b[i];
    		      }
    		    }
    		    if (hasOwnProp(b, 'toString')) {
    		      a.toString = b.toString;
    		    }
    		    if (hasOwnProp(b, 'valueOf')) {
    		      a.valueOf = b.valueOf;
    		    }
    		    return a;
    		  }
    		  function createUTC(input, format, locale, strict) {
    		    return createLocalOrUTC(input, format, locale, strict, true).utc();
    		  }
    		  function defaultParsingFlags() {
    		    // We need to deep clone this object.
    		    return {
    		      empty: false,
    		      unusedTokens: [],
    		      unusedInput: [],
    		      overflow: -2,
    		      charsLeftOver: 0,
    		      nullInput: false,
    		      invalidEra: null,
    		      invalidMonth: null,
    		      invalidFormat: false,
    		      userInvalidated: false,
    		      iso: false,
    		      parsedDateParts: [],
    		      era: null,
    		      meridiem: null,
    		      rfc2822: false,
    		      weekdayMismatch: false
    		    };
    		  }
    		  function getParsingFlags(m) {
    		    if (m._pf == null) {
    		      m._pf = defaultParsingFlags();
    		    }
    		    return m._pf;
    		  }
    		  var some;
    		  if (Array.prototype.some) {
    		    some = Array.prototype.some;
    		  } else {
    		    some = function (fun) {
    		      var t = Object(this),
    		        len = t.length >>> 0,
    		        i;
    		      for (i = 0; i < len; i++) {
    		        if (i in t && fun.call(this, t[i], i, t)) {
    		          return true;
    		        }
    		      }
    		      return false;
    		    };
    		  }
    		  function isValid(m) {
    		    var flags = null,
    		      parsedParts = false,
    		      isNowValid = m._d && !isNaN(m._d.getTime());
    		    if (isNowValid) {
    		      flags = getParsingFlags(m);
    		      parsedParts = some.call(flags.parsedDateParts, function (i) {
    		        return i != null;
    		      });
    		      isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    		      if (m._strict) {
    		        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
    		      }
    		    }
    		    if (Object.isFrozen == null || !Object.isFrozen(m)) {
    		      m._isValid = isNowValid;
    		    } else {
    		      return isNowValid;
    		    }
    		    return m._isValid;
    		  }
    		  function createInvalid(flags) {
    		    var m = createUTC(NaN);
    		    if (flags != null) {
    		      extend(getParsingFlags(m), flags);
    		    } else {
    		      getParsingFlags(m).userInvalidated = true;
    		    }
    		    return m;
    		  }

    		  // Plugins that add properties should also add the key here (null value),
    		  // so we can properly clone ourselves.
    		  var momentProperties = hooks.momentProperties = [],
    		    updateInProgress = false;
    		  function copyConfig(to, from) {
    		    var i,
    		      prop,
    		      val,
    		      momentPropertiesLen = momentProperties.length;
    		    if (!isUndefined(from._isAMomentObject)) {
    		      to._isAMomentObject = from._isAMomentObject;
    		    }
    		    if (!isUndefined(from._i)) {
    		      to._i = from._i;
    		    }
    		    if (!isUndefined(from._f)) {
    		      to._f = from._f;
    		    }
    		    if (!isUndefined(from._l)) {
    		      to._l = from._l;
    		    }
    		    if (!isUndefined(from._strict)) {
    		      to._strict = from._strict;
    		    }
    		    if (!isUndefined(from._tzm)) {
    		      to._tzm = from._tzm;
    		    }
    		    if (!isUndefined(from._isUTC)) {
    		      to._isUTC = from._isUTC;
    		    }
    		    if (!isUndefined(from._offset)) {
    		      to._offset = from._offset;
    		    }
    		    if (!isUndefined(from._pf)) {
    		      to._pf = getParsingFlags(from);
    		    }
    		    if (!isUndefined(from._locale)) {
    		      to._locale = from._locale;
    		    }
    		    if (momentPropertiesLen > 0) {
    		      for (i = 0; i < momentPropertiesLen; i++) {
    		        prop = momentProperties[i];
    		        val = from[prop];
    		        if (!isUndefined(val)) {
    		          to[prop] = val;
    		        }
    		      }
    		    }
    		    return to;
    		  }

    		  // Moment prototype object
    		  function Moment(config) {
    		    copyConfig(this, config);
    		    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    		    if (!this.isValid()) {
    		      this._d = new Date(NaN);
    		    }
    		    // Prevent infinite loop in case updateOffset creates new moment
    		    // objects.
    		    if (updateInProgress === false) {
    		      updateInProgress = true;
    		      hooks.updateOffset(this);
    		      updateInProgress = false;
    		    }
    		  }
    		  function isMoment(obj) {
    		    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    		  }
    		  function warn(msg) {
    		    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
    		      console.warn('Deprecation warning: ' + msg);
    		    }
    		  }
    		  function deprecate(msg, fn) {
    		    var firstTime = true;
    		    return extend(function () {
    		      if (hooks.deprecationHandler != null) {
    		        hooks.deprecationHandler(null, msg);
    		      }
    		      if (firstTime) {
    		        var args = [],
    		          arg,
    		          i,
    		          key,
    		          argLen = arguments.length;
    		        for (i = 0; i < argLen; i++) {
    		          arg = '';
    		          if (typeof arguments[i] === 'object') {
    		            arg += '\n[' + i + '] ';
    		            for (key in arguments[0]) {
    		              if (hasOwnProp(arguments[0], key)) {
    		                arg += key + ': ' + arguments[0][key] + ', ';
    		              }
    		            }
    		            arg = arg.slice(0, -2); // Remove trailing comma and space
    		          } else {
    		            arg = arguments[i];
    		          }
    		          args.push(arg);
    		        }
    		        warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
    		        firstTime = false;
    		      }
    		      return fn.apply(this, arguments);
    		    }, fn);
    		  }
    		  var deprecations = {};
    		  function deprecateSimple(name, msg) {
    		    if (hooks.deprecationHandler != null) {
    		      hooks.deprecationHandler(name, msg);
    		    }
    		    if (!deprecations[name]) {
    		      warn(msg);
    		      deprecations[name] = true;
    		    }
    		  }
    		  hooks.suppressDeprecationWarnings = false;
    		  hooks.deprecationHandler = null;
    		  function isFunction(input) {
    		    return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    		  }
    		  function set(config) {
    		    var prop, i;
    		    for (i in config) {
    		      if (hasOwnProp(config, i)) {
    		        prop = config[i];
    		        if (isFunction(prop)) {
    		          this[i] = prop;
    		        } else {
    		          this['_' + i] = prop;
    		        }
    		      }
    		    }
    		    this._config = config;
    		    // Lenient ordinal parsing accepts just a number in addition to
    		    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    		    // TODO: Remove "ordinalParse" fallback in next major release.
    		    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    		  }
    		  function mergeConfigs(parentConfig, childConfig) {
    		    var res = extend({}, parentConfig),
    		      prop;
    		    for (prop in childConfig) {
    		      if (hasOwnProp(childConfig, prop)) {
    		        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
    		          res[prop] = {};
    		          extend(res[prop], parentConfig[prop]);
    		          extend(res[prop], childConfig[prop]);
    		        } else if (childConfig[prop] != null) {
    		          res[prop] = childConfig[prop];
    		        } else {
    		          delete res[prop];
    		        }
    		      }
    		    }
    		    for (prop in parentConfig) {
    		      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
    		        // make sure changes to properties don't modify parent config
    		        res[prop] = extend({}, res[prop]);
    		      }
    		    }
    		    return res;
    		  }
    		  function Locale(config) {
    		    if (config != null) {
    		      this.set(config);
    		    }
    		  }
    		  var keys;
    		  if (Object.keys) {
    		    keys = Object.keys;
    		  } else {
    		    keys = function (obj) {
    		      var i,
    		        res = [];
    		      for (i in obj) {
    		        if (hasOwnProp(obj, i)) {
    		          res.push(i);
    		        }
    		      }
    		      return res;
    		    };
    		  }
    		  var defaultCalendar = {
    		    sameDay: '[Today at] LT',
    		    nextDay: '[Tomorrow at] LT',
    		    nextWeek: 'dddd [at] LT',
    		    lastDay: '[Yesterday at] LT',
    		    lastWeek: '[Last] dddd [at] LT',
    		    sameElse: 'L'
    		  };
    		  function calendar(key, mom, now) {
    		    var output = this._calendar[key] || this._calendar['sameElse'];
    		    return isFunction(output) ? output.call(mom, now) : output;
    		  }
    		  function zeroFill(number, targetLength, forceSign) {
    		    var absNumber = '' + Math.abs(number),
    		      zerosToFill = targetLength - absNumber.length,
    		      sign = number >= 0;
    		    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    		  }
    		  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
    		    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
    		    formatFunctions = {},
    		    formatTokenFunctions = {};

    		  // token:    'M'
    		  // padded:   ['MM', 2]
    		  // ordinal:  'Mo'
    		  // callback: function () { this.month() + 1 }
    		  function addFormatToken(token, padded, ordinal, callback) {
    		    var func = callback;
    		    if (typeof callback === 'string') {
    		      func = function () {
    		        return this[callback]();
    		      };
    		    }
    		    if (token) {
    		      formatTokenFunctions[token] = func;
    		    }
    		    if (padded) {
    		      formatTokenFunctions[padded[0]] = function () {
    		        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    		      };
    		    }
    		    if (ordinal) {
    		      formatTokenFunctions[ordinal] = function () {
    		        return this.localeData().ordinal(func.apply(this, arguments), token);
    		      };
    		    }
    		  }
    		  function removeFormattingTokens(input) {
    		    if (input.match(/\[[\s\S]/)) {
    		      return input.replace(/^\[|\]$/g, '');
    		    }
    		    return input.replace(/\\/g, '');
    		  }
    		  function makeFormatFunction(format) {
    		    var array = format.match(formattingTokens),
    		      i,
    		      length;
    		    for (i = 0, length = array.length; i < length; i++) {
    		      if (formatTokenFunctions[array[i]]) {
    		        array[i] = formatTokenFunctions[array[i]];
    		      } else {
    		        array[i] = removeFormattingTokens(array[i]);
    		      }
    		    }
    		    return function (mom) {
    		      var output = '',
    		        i;
    		      for (i = 0; i < length; i++) {
    		        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
    		      }
    		      return output;
    		    };
    		  }

    		  // format date using native date object
    		  function formatMoment(m, format) {
    		    if (!m.isValid()) {
    		      return m.localeData().invalidDate();
    		    }
    		    format = expandFormat(format, m.localeData());
    		    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
    		    return formatFunctions[format](m);
    		  }
    		  function expandFormat(format, locale) {
    		    var i = 5;
    		    function replaceLongDateFormatTokens(input) {
    		      return locale.longDateFormat(input) || input;
    		    }
    		    localFormattingTokens.lastIndex = 0;
    		    while (i >= 0 && localFormattingTokens.test(format)) {
    		      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
    		      localFormattingTokens.lastIndex = 0;
    		      i -= 1;
    		    }
    		    return format;
    		  }
    		  var defaultLongDateFormat = {
    		    LTS: 'h:mm:ss A',
    		    LT: 'h:mm A',
    		    L: 'MM/DD/YYYY',
    		    LL: 'MMMM D, YYYY',
    		    LLL: 'MMMM D, YYYY h:mm A',
    		    LLLL: 'dddd, MMMM D, YYYY h:mm A'
    		  };
    		  function longDateFormat(key) {
    		    var format = this._longDateFormat[key],
    		      formatUpper = this._longDateFormat[key.toUpperCase()];
    		    if (format || !formatUpper) {
    		      return format;
    		    }
    		    this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
    		      if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
    		        return tok.slice(1);
    		      }
    		      return tok;
    		    }).join('');
    		    return this._longDateFormat[key];
    		  }
    		  var defaultInvalidDate = 'Invalid date';
    		  function invalidDate() {
    		    return this._invalidDate;
    		  }
    		  var defaultOrdinal = '%d',
    		    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    		  function ordinal(number) {
    		    return this._ordinal.replace('%d', number);
    		  }
    		  var defaultRelativeTime = {
    		    future: 'in %s',
    		    past: '%s ago',
    		    s: 'a few seconds',
    		    ss: '%d seconds',
    		    m: 'a minute',
    		    mm: '%d minutes',
    		    h: 'an hour',
    		    hh: '%d hours',
    		    d: 'a day',
    		    dd: '%d days',
    		    w: 'a week',
    		    ww: '%d weeks',
    		    M: 'a month',
    		    MM: '%d months',
    		    y: 'a year',
    		    yy: '%d years'
    		  };
    		  function relativeTime(number, withoutSuffix, string, isFuture) {
    		    var output = this._relativeTime[string];
    		    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    		  }
    		  function pastFuture(diff, output) {
    		    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    		    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    		  }
    		  var aliases = {
    		    D: 'date',
    		    dates: 'date',
    		    date: 'date',
    		    d: 'day',
    		    days: 'day',
    		    day: 'day',
    		    e: 'weekday',
    		    weekdays: 'weekday',
    		    weekday: 'weekday',
    		    E: 'isoWeekday',
    		    isoweekdays: 'isoWeekday',
    		    isoweekday: 'isoWeekday',
    		    DDD: 'dayOfYear',
    		    dayofyears: 'dayOfYear',
    		    dayofyear: 'dayOfYear',
    		    h: 'hour',
    		    hours: 'hour',
    		    hour: 'hour',
    		    ms: 'millisecond',
    		    milliseconds: 'millisecond',
    		    millisecond: 'millisecond',
    		    m: 'minute',
    		    minutes: 'minute',
    		    minute: 'minute',
    		    M: 'month',
    		    months: 'month',
    		    month: 'month',
    		    Q: 'quarter',
    		    quarters: 'quarter',
    		    quarter: 'quarter',
    		    s: 'second',
    		    seconds: 'second',
    		    second: 'second',
    		    gg: 'weekYear',
    		    weekyears: 'weekYear',
    		    weekyear: 'weekYear',
    		    GG: 'isoWeekYear',
    		    isoweekyears: 'isoWeekYear',
    		    isoweekyear: 'isoWeekYear',
    		    w: 'week',
    		    weeks: 'week',
    		    week: 'week',
    		    W: 'isoWeek',
    		    isoweeks: 'isoWeek',
    		    isoweek: 'isoWeek',
    		    y: 'year',
    		    years: 'year',
    		    year: 'year'
    		  };
    		  function normalizeUnits(units) {
    		    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    		  }
    		  function normalizeObjectUnits(inputObject) {
    		    var normalizedInput = {},
    		      normalizedProp,
    		      prop;
    		    for (prop in inputObject) {
    		      if (hasOwnProp(inputObject, prop)) {
    		        normalizedProp = normalizeUnits(prop);
    		        if (normalizedProp) {
    		          normalizedInput[normalizedProp] = inputObject[prop];
    		        }
    		      }
    		    }
    		    return normalizedInput;
    		  }
    		  var priorities = {
    		    date: 9,
    		    day: 11,
    		    weekday: 11,
    		    isoWeekday: 11,
    		    dayOfYear: 4,
    		    hour: 13,
    		    millisecond: 16,
    		    minute: 14,
    		    month: 8,
    		    quarter: 7,
    		    second: 15,
    		    weekYear: 1,
    		    isoWeekYear: 1,
    		    week: 5,
    		    isoWeek: 5,
    		    year: 1
    		  };
    		  function getPrioritizedUnits(unitsObj) {
    		    var units = [],
    		      u;
    		    for (u in unitsObj) {
    		      if (hasOwnProp(unitsObj, u)) {
    		        units.push({
    		          unit: u,
    		          priority: priorities[u]
    		        });
    		      }
    		    }
    		    units.sort(function (a, b) {
    		      return a.priority - b.priority;
    		    });
    		    return units;
    		  }
    		  var match1 = /\d/,
    		    //       0 - 9
    		    match2 = /\d\d/,
    		    //      00 - 99
    		    match3 = /\d{3}/,
    		    //     000 - 999
    		    match4 = /\d{4}/,
    		    //    0000 - 9999
    		    match6 = /[+-]?\d{6}/,
    		    // -999999 - 999999
    		    match1to2 = /\d\d?/,
    		    //       0 - 99
    		    match3to4 = /\d\d\d\d?/,
    		    //     999 - 9999
    		    match5to6 = /\d\d\d\d\d\d?/,
    		    //   99999 - 999999
    		    match1to3 = /\d{1,3}/,
    		    //       0 - 999
    		    match1to4 = /\d{1,4}/,
    		    //       0 - 9999
    		    match1to6 = /[+-]?\d{1,6}/,
    		    // -999999 - 999999
    		    matchUnsigned = /\d+/,
    		    //       0 - inf
    		    matchSigned = /[+-]?\d+/,
    		    //    -inf - inf
    		    matchOffset = /Z|[+-]\d\d:?\d\d/gi,
    		    // +00:00 -00:00 +0000 -0000 or Z
    		    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
    		    // +00 -00 +00:00 -00:00 +0000 -0000 or Z
    		    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
    		    // 123456789 123456789.123
    		    // any word (or two) characters or numbers including two/three word month in arabic.
    		    // includes scottish gaelic two word and hyphenated months
    		    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
    		    match1to2NoLeadingZero = /^[1-9]\d?/,
    		    //         1-99
    		    match1to2HasZero = /^([1-9]\d|\d)/,
    		    //           0-99
    		    regexes;
    		  regexes = {};
    		  function addRegexToken(token, regex, strictRegex) {
    		    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
    		      return isStrict && strictRegex ? strictRegex : regex;
    		    };
    		  }
    		  function getParseRegexForToken(token, config) {
    		    if (!hasOwnProp(regexes, token)) {
    		      return new RegExp(unescapeFormat(token));
    		    }
    		    return regexes[token](config._strict, config._locale);
    		  }

    		  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    		  function unescapeFormat(s) {
    		    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
    		      return p1 || p2 || p3 || p4;
    		    }));
    		  }
    		  function regexEscape(s) {
    		    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    		  }
    		  function absFloor(number) {
    		    if (number < 0) {
    		      // -0 -> 0
    		      return Math.ceil(number) || 0;
    		    } else {
    		      return Math.floor(number);
    		    }
    		  }
    		  function toInt(argumentForCoercion) {
    		    var coercedNumber = +argumentForCoercion,
    		      value = 0;
    		    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    		      value = absFloor(coercedNumber);
    		    }
    		    return value;
    		  }
    		  var tokens = {};
    		  function addParseToken(token, callback) {
    		    var i,
    		      func = callback,
    		      tokenLen;
    		    if (typeof token === 'string') {
    		      token = [token];
    		    }
    		    if (isNumber(callback)) {
    		      func = function (input, array) {
    		        array[callback] = toInt(input);
    		      };
    		    }
    		    tokenLen = token.length;
    		    for (i = 0; i < tokenLen; i++) {
    		      tokens[token[i]] = func;
    		    }
    		  }
    		  function addWeekParseToken(token, callback) {
    		    addParseToken(token, function (input, array, config, token) {
    		      config._w = config._w || {};
    		      callback(input, config._w, config, token);
    		    });
    		  }
    		  function addTimeToArrayFromToken(token, input, config) {
    		    if (input != null && hasOwnProp(tokens, token)) {
    		      tokens[token](input, config._a, config, token);
    		    }
    		  }
    		  function isLeapYear(year) {
    		    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    		  }
    		  var YEAR = 0,
    		    MONTH = 1,
    		    DATE = 2,
    		    HOUR = 3,
    		    MINUTE = 4,
    		    SECOND = 5,
    		    MILLISECOND = 6,
    		    WEEK = 7,
    		    WEEKDAY = 8;

    		  // FORMATTING

    		  addFormatToken('Y', 0, 0, function () {
    		    var y = this.year();
    		    return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    		  });
    		  addFormatToken(0, ['YY', 2], 0, function () {
    		    return this.year() % 100;
    		  });
    		  addFormatToken(0, ['YYYY', 4], 0, 'year');
    		  addFormatToken(0, ['YYYYY', 5], 0, 'year');
    		  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    		  // PARSING

    		  addRegexToken('Y', matchSigned);
    		  addRegexToken('YY', match1to2, match2);
    		  addRegexToken('YYYY', match1to4, match4);
    		  addRegexToken('YYYYY', match1to6, match6);
    		  addRegexToken('YYYYYY', match1to6, match6);
    		  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    		  addParseToken('YYYY', function (input, array) {
    		    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    		  });
    		  addParseToken('YY', function (input, array) {
    		    array[YEAR] = hooks.parseTwoDigitYear(input);
    		  });
    		  addParseToken('Y', function (input, array) {
    		    array[YEAR] = parseInt(input, 10);
    		  });

    		  // HELPERS

    		  function daysInYear(year) {
    		    return isLeapYear(year) ? 366 : 365;
    		  }

    		  // HOOKS

    		  hooks.parseTwoDigitYear = function (input) {
    		    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    		  };

    		  // MOMENTS

    		  var getSetYear = makeGetSet('FullYear', true);
    		  function getIsLeapYear() {
    		    return isLeapYear(this.year());
    		  }
    		  function makeGetSet(unit, keepTime) {
    		    return function (value) {
    		      if (value != null) {
    		        set$1(this, unit, value);
    		        hooks.updateOffset(this, keepTime);
    		        return this;
    		      } else {
    		        return get(this, unit);
    		      }
    		    };
    		  }
    		  function get(mom, unit) {
    		    if (!mom.isValid()) {
    		      return NaN;
    		    }
    		    var d = mom._d,
    		      isUTC = mom._isUTC;
    		    switch (unit) {
    		      case 'Milliseconds':
    		        return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
    		      case 'Seconds':
    		        return isUTC ? d.getUTCSeconds() : d.getSeconds();
    		      case 'Minutes':
    		        return isUTC ? d.getUTCMinutes() : d.getMinutes();
    		      case 'Hours':
    		        return isUTC ? d.getUTCHours() : d.getHours();
    		      case 'Date':
    		        return isUTC ? d.getUTCDate() : d.getDate();
    		      case 'Day':
    		        return isUTC ? d.getUTCDay() : d.getDay();
    		      case 'Month':
    		        return isUTC ? d.getUTCMonth() : d.getMonth();
    		      case 'FullYear':
    		        return isUTC ? d.getUTCFullYear() : d.getFullYear();
    		      default:
    		        return NaN;
    		      // Just in case
    		    }
    		  }
    		  function set$1(mom, unit, value) {
    		    var d, isUTC, year, month, date;
    		    if (!mom.isValid() || isNaN(value)) {
    		      return;
    		    }
    		    d = mom._d;
    		    isUTC = mom._isUTC;
    		    switch (unit) {
    		      case 'Milliseconds':
    		        return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
    		      case 'Seconds':
    		        return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
    		      case 'Minutes':
    		        return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
    		      case 'Hours':
    		        return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
    		      case 'Date':
    		        return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
    		      // case 'Day': // Not real
    		      //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
    		      // case 'Month': // Not used because we need to pass two variables
    		      //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
    		      case 'FullYear':
    		        break;
    		      // See below ...
    		      default:
    		        return;
    		      // Just in case
    		    }
    		    year = value;
    		    month = mom.month();
    		    date = mom.date();
    		    date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
    		    void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
    		  }

    		  // MOMENTS

    		  function stringGet(units) {
    		    units = normalizeUnits(units);
    		    if (isFunction(this[units])) {
    		      return this[units]();
    		    }
    		    return this;
    		  }
    		  function stringSet(units, value) {
    		    if (typeof units === 'object') {
    		      units = normalizeObjectUnits(units);
    		      var prioritized = getPrioritizedUnits(units),
    		        i,
    		        prioritizedLen = prioritized.length;
    		      for (i = 0; i < prioritizedLen; i++) {
    		        this[prioritized[i].unit](units[prioritized[i].unit]);
    		      }
    		    } else {
    		      units = normalizeUnits(units);
    		      if (isFunction(this[units])) {
    		        return this[units](value);
    		      }
    		    }
    		    return this;
    		  }
    		  function mod(n, x) {
    		    return (n % x + x) % x;
    		  }
    		  var indexOf;
    		  if (Array.prototype.indexOf) {
    		    indexOf = Array.prototype.indexOf;
    		  } else {
    		    indexOf = function (o) {
    		      // I know
    		      var i;
    		      for (i = 0; i < this.length; ++i) {
    		        if (this[i] === o) {
    		          return i;
    		        }
    		      }
    		      return -1;
    		    };
    		  }
    		  function daysInMonth(year, month) {
    		    if (isNaN(year) || isNaN(month)) {
    		      return NaN;
    		    }
    		    var modMonth = mod(month, 12);
    		    year += (month - modMonth) / 12;
    		    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    		  }

    		  // FORMATTING

    		  addFormatToken('M', ['MM', 2], 'Mo', function () {
    		    return this.month() + 1;
    		  });
    		  addFormatToken('MMM', 0, 0, function (format) {
    		    return this.localeData().monthsShort(this, format);
    		  });
    		  addFormatToken('MMMM', 0, 0, function (format) {
    		    return this.localeData().months(this, format);
    		  });

    		  // PARSING

    		  addRegexToken('M', match1to2, match1to2NoLeadingZero);
    		  addRegexToken('MM', match1to2, match2);
    		  addRegexToken('MMM', function (isStrict, locale) {
    		    return locale.monthsShortRegex(isStrict);
    		  });
    		  addRegexToken('MMMM', function (isStrict, locale) {
    		    return locale.monthsRegex(isStrict);
    		  });
    		  addParseToken(['M', 'MM'], function (input, array) {
    		    array[MONTH] = toInt(input) - 1;
    		  });
    		  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    		    var month = config._locale.monthsParse(input, token, config._strict);
    		    // if we didn't find a month name, mark the date as invalid.
    		    if (month != null) {
    		      array[MONTH] = month;
    		    } else {
    		      getParsingFlags(config).invalidMonth = input;
    		    }
    		  });

    		  // LOCALES

    		  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    		    defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    		    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
    		    defaultMonthsShortRegex = matchWord,
    		    defaultMonthsRegex = matchWord;
    		  function localeMonths(m, format) {
    		    if (!m) {
    		      return isArray(this._months) ? this._months : this._months['standalone'];
    		    }
    		    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    		  }
    		  function localeMonthsShort(m, format) {
    		    if (!m) {
    		      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
    		    }
    		    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    		  }
    		  function handleStrictParse(monthName, format, strict) {
    		    var i,
    		      ii,
    		      mom,
    		      llc = monthName.toLocaleLowerCase();
    		    if (!this._monthsParse) {
    		      // this is not used
    		      this._monthsParse = [];
    		      this._longMonthsParse = [];
    		      this._shortMonthsParse = [];
    		      for (i = 0; i < 12; ++i) {
    		        mom = createUTC([2000, i]);
    		        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
    		        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
    		      }
    		    }
    		    if (strict) {
    		      if (format === 'MMM') {
    		        ii = indexOf.call(this._shortMonthsParse, llc);
    		        return ii !== -1 ? ii : null;
    		      } else {
    		        ii = indexOf.call(this._longMonthsParse, llc);
    		        return ii !== -1 ? ii : null;
    		      }
    		    } else {
    		      if (format === 'MMM') {
    		        ii = indexOf.call(this._shortMonthsParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._longMonthsParse, llc);
    		        return ii !== -1 ? ii : null;
    		      } else {
    		        ii = indexOf.call(this._longMonthsParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._shortMonthsParse, llc);
    		        return ii !== -1 ? ii : null;
    		      }
    		    }
    		  }
    		  function localeMonthsParse(monthName, format, strict) {
    		    var i, mom, regex;
    		    if (this._monthsParseExact) {
    		      return handleStrictParse.call(this, monthName, format, strict);
    		    }
    		    if (!this._monthsParse) {
    		      this._monthsParse = [];
    		      this._longMonthsParse = [];
    		      this._shortMonthsParse = [];
    		    }

    		    // TODO: add sorting
    		    // Sorting makes sure if one month (or abbr) is a prefix of another
    		    // see sorting in computeMonthsParse
    		    for (i = 0; i < 12; i++) {
    		      // make the regex if we don't have it already
    		      mom = createUTC([2000, i]);
    		      if (strict && !this._longMonthsParse[i]) {
    		        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
    		        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
    		      }
    		      if (!strict && !this._monthsParse[i]) {
    		        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
    		        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
    		      }
    		      // test the regex
    		      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
    		        return i;
    		      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
    		        return i;
    		      } else if (!strict && this._monthsParse[i].test(monthName)) {
    		        return i;
    		      }
    		    }
    		  }

    		  // MOMENTS

    		  function setMonth(mom, value) {
    		    if (!mom.isValid()) {
    		      // No op
    		      return mom;
    		    }
    		    if (typeof value === 'string') {
    		      if (/^\d+$/.test(value)) {
    		        value = toInt(value);
    		      } else {
    		        value = mom.localeData().monthsParse(value);
    		        // TODO: Another silent failure?
    		        if (!isNumber(value)) {
    		          return mom;
    		        }
    		      }
    		    }
    		    var month = value,
    		      date = mom.date();
    		    date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
    		    void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
    		    return mom;
    		  }
    		  function getSetMonth(value) {
    		    if (value != null) {
    		      setMonth(this, value);
    		      hooks.updateOffset(this, true);
    		      return this;
    		    } else {
    		      return get(this, 'Month');
    		    }
    		  }
    		  function getDaysInMonth() {
    		    return daysInMonth(this.year(), this.month());
    		  }
    		  function monthsShortRegex(isStrict) {
    		    if (this._monthsParseExact) {
    		      if (!hasOwnProp(this, '_monthsRegex')) {
    		        computeMonthsParse.call(this);
    		      }
    		      if (isStrict) {
    		        return this._monthsShortStrictRegex;
    		      } else {
    		        return this._monthsShortRegex;
    		      }
    		    } else {
    		      if (!hasOwnProp(this, '_monthsShortRegex')) {
    		        this._monthsShortRegex = defaultMonthsShortRegex;
    		      }
    		      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
    		    }
    		  }
    		  function monthsRegex(isStrict) {
    		    if (this._monthsParseExact) {
    		      if (!hasOwnProp(this, '_monthsRegex')) {
    		        computeMonthsParse.call(this);
    		      }
    		      if (isStrict) {
    		        return this._monthsStrictRegex;
    		      } else {
    		        return this._monthsRegex;
    		      }
    		    } else {
    		      if (!hasOwnProp(this, '_monthsRegex')) {
    		        this._monthsRegex = defaultMonthsRegex;
    		      }
    		      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
    		    }
    		  }
    		  function computeMonthsParse() {
    		    function cmpLenRev(a, b) {
    		      return b.length - a.length;
    		    }
    		    var shortPieces = [],
    		      longPieces = [],
    		      mixedPieces = [],
    		      i,
    		      mom,
    		      shortP,
    		      longP;
    		    for (i = 0; i < 12; i++) {
    		      // make the regex if we don't have it already
    		      mom = createUTC([2000, i]);
    		      shortP = regexEscape(this.monthsShort(mom, ''));
    		      longP = regexEscape(this.months(mom, ''));
    		      shortPieces.push(shortP);
    		      longPieces.push(longP);
    		      mixedPieces.push(longP);
    		      mixedPieces.push(shortP);
    		    }
    		    // Sorting makes sure if one month (or abbr) is a prefix of another it
    		    // will match the longer piece.
    		    shortPieces.sort(cmpLenRev);
    		    longPieces.sort(cmpLenRev);
    		    mixedPieces.sort(cmpLenRev);
    		    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    		    this._monthsShortRegex = this._monthsRegex;
    		    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    		    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    		  }
    		  function createDate(y, m, d, h, M, s, ms) {
    		    // can't just apply() to create a date:
    		    // https://stackoverflow.com/q/181348
    		    var date;
    		    // the date constructor remaps years 0-99 to 1900-1999
    		    if (y < 100 && y >= 0) {
    		      // preserve leap years using a full 400 year cycle, then reset
    		      date = new Date(y + 400, m, d, h, M, s, ms);
    		      if (isFinite(date.getFullYear())) {
    		        date.setFullYear(y);
    		      }
    		    } else {
    		      date = new Date(y, m, d, h, M, s, ms);
    		    }
    		    return date;
    		  }
    		  function createUTCDate(y) {
    		    var date, args;
    		    // the Date.UTC function remaps years 0-99 to 1900-1999
    		    if (y < 100 && y >= 0) {
    		      args = Array.prototype.slice.call(arguments);
    		      // preserve leap years using a full 400 year cycle, then reset
    		      args[0] = y + 400;
    		      date = new Date(Date.UTC.apply(null, args));
    		      if (isFinite(date.getUTCFullYear())) {
    		        date.setUTCFullYear(y);
    		      }
    		    } else {
    		      date = new Date(Date.UTC.apply(null, arguments));
    		    }
    		    return date;
    		  }

    		  // start-of-first-week - start-of-year
    		  function firstWeekOffset(year, dow, doy) {
    		    var
    		      // first-week day -- which january is always in the first week (4 for iso, 1 for other)
    		      fwd = 7 + dow - doy,
    		      // first-week day local weekday -- which local weekday is fwd
    		      fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    		    return -fwdlw + fwd - 1;
    		  }

    		  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    		  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    		    var localWeekday = (7 + weekday - dow) % 7,
    		      weekOffset = firstWeekOffset(year, dow, doy),
    		      dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
    		      resYear,
    		      resDayOfYear;
    		    if (dayOfYear <= 0) {
    		      resYear = year - 1;
    		      resDayOfYear = daysInYear(resYear) + dayOfYear;
    		    } else if (dayOfYear > daysInYear(year)) {
    		      resYear = year + 1;
    		      resDayOfYear = dayOfYear - daysInYear(year);
    		    } else {
    		      resYear = year;
    		      resDayOfYear = dayOfYear;
    		    }
    		    return {
    		      year: resYear,
    		      dayOfYear: resDayOfYear
    		    };
    		  }
    		  function weekOfYear(mom, dow, doy) {
    		    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
    		      week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
    		      resWeek,
    		      resYear;
    		    if (week < 1) {
    		      resYear = mom.year() - 1;
    		      resWeek = week + weeksInYear(resYear, dow, doy);
    		    } else if (week > weeksInYear(mom.year(), dow, doy)) {
    		      resWeek = week - weeksInYear(mom.year(), dow, doy);
    		      resYear = mom.year() + 1;
    		    } else {
    		      resYear = mom.year();
    		      resWeek = week;
    		    }
    		    return {
    		      week: resWeek,
    		      year: resYear
    		    };
    		  }
    		  function weeksInYear(year, dow, doy) {
    		    var weekOffset = firstWeekOffset(year, dow, doy),
    		      weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    		    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    		  }

    		  // FORMATTING

    		  addFormatToken('w', ['ww', 2], 'wo', 'week');
    		  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    		  // PARSING

    		  addRegexToken('w', match1to2, match1to2NoLeadingZero);
    		  addRegexToken('ww', match1to2, match2);
    		  addRegexToken('W', match1to2, match1to2NoLeadingZero);
    		  addRegexToken('WW', match1to2, match2);
    		  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    		    week[token.substr(0, 1)] = toInt(input);
    		  });

    		  // HELPERS

    		  // LOCALES

    		  function localeWeek(mom) {
    		    return weekOfYear(mom, this._week.dow, this._week.doy).week;
    		  }
    		  var defaultLocaleWeek = {
    		    dow: 0,
    		    // Sunday is the first day of the week.
    		    doy: 6 // The week that contains Jan 6th is the first week of the year.
    		  };
    		  function localeFirstDayOfWeek() {
    		    return this._week.dow;
    		  }
    		  function localeFirstDayOfYear() {
    		    return this._week.doy;
    		  }

    		  // MOMENTS

    		  function getSetWeek(input) {
    		    var week = this.localeData().week(this);
    		    return input == null ? week : this.add((input - week) * 7, 'd');
    		  }
    		  function getSetISOWeek(input) {
    		    var week = weekOfYear(this, 1, 4).week;
    		    return input == null ? week : this.add((input - week) * 7, 'd');
    		  }

    		  // FORMATTING

    		  addFormatToken('d', 0, 'do', 'day');
    		  addFormatToken('dd', 0, 0, function (format) {
    		    return this.localeData().weekdaysMin(this, format);
    		  });
    		  addFormatToken('ddd', 0, 0, function (format) {
    		    return this.localeData().weekdaysShort(this, format);
    		  });
    		  addFormatToken('dddd', 0, 0, function (format) {
    		    return this.localeData().weekdays(this, format);
    		  });
    		  addFormatToken('e', 0, 0, 'weekday');
    		  addFormatToken('E', 0, 0, 'isoWeekday');

    		  // PARSING

    		  addRegexToken('d', match1to2);
    		  addRegexToken('e', match1to2);
    		  addRegexToken('E', match1to2);
    		  addRegexToken('dd', function (isStrict, locale) {
    		    return locale.weekdaysMinRegex(isStrict);
    		  });
    		  addRegexToken('ddd', function (isStrict, locale) {
    		    return locale.weekdaysShortRegex(isStrict);
    		  });
    		  addRegexToken('dddd', function (isStrict, locale) {
    		    return locale.weekdaysRegex(isStrict);
    		  });
    		  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    		    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    		    // if we didn't get a weekday name, mark the date as invalid
    		    if (weekday != null) {
    		      week.d = weekday;
    		    } else {
    		      getParsingFlags(config).invalidWeekday = input;
    		    }
    		  });
    		  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    		    week[token] = toInt(input);
    		  });

    		  // HELPERS

    		  function parseWeekday(input, locale) {
    		    if (typeof input !== 'string') {
    		      return input;
    		    }
    		    if (!isNaN(input)) {
    		      return parseInt(input, 10);
    		    }
    		    input = locale.weekdaysParse(input);
    		    if (typeof input === 'number') {
    		      return input;
    		    }
    		    return null;
    		  }
    		  function parseIsoWeekday(input, locale) {
    		    if (typeof input === 'string') {
    		      return locale.weekdaysParse(input) % 7 || 7;
    		    }
    		    return isNaN(input) ? null : input;
    		  }

    		  // LOCALES
    		  function shiftWeekdays(ws, n) {
    		    return ws.slice(n, 7).concat(ws.slice(0, n));
    		  }
    		  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    		    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    		    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    		    defaultWeekdaysRegex = matchWord,
    		    defaultWeekdaysShortRegex = matchWord,
    		    defaultWeekdaysMinRegex = matchWord;
    		  function localeWeekdays(m, format) {
    		    var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
    		    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    		  }
    		  function localeWeekdaysShort(m) {
    		    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    		  }
    		  function localeWeekdaysMin(m) {
    		    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    		  }
    		  function handleStrictParse$1(weekdayName, format, strict) {
    		    var i,
    		      ii,
    		      mom,
    		      llc = weekdayName.toLocaleLowerCase();
    		    if (!this._weekdaysParse) {
    		      this._weekdaysParse = [];
    		      this._shortWeekdaysParse = [];
    		      this._minWeekdaysParse = [];
    		      for (i = 0; i < 7; ++i) {
    		        mom = createUTC([2000, 1]).day(i);
    		        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
    		        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
    		        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
    		      }
    		    }
    		    if (strict) {
    		      if (format === 'dddd') {
    		        ii = indexOf.call(this._weekdaysParse, llc);
    		        return ii !== -1 ? ii : null;
    		      } else if (format === 'ddd') {
    		        ii = indexOf.call(this._shortWeekdaysParse, llc);
    		        return ii !== -1 ? ii : null;
    		      } else {
    		        ii = indexOf.call(this._minWeekdaysParse, llc);
    		        return ii !== -1 ? ii : null;
    		      }
    		    } else {
    		      if (format === 'dddd') {
    		        ii = indexOf.call(this._weekdaysParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._shortWeekdaysParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._minWeekdaysParse, llc);
    		        return ii !== -1 ? ii : null;
    		      } else if (format === 'ddd') {
    		        ii = indexOf.call(this._shortWeekdaysParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._weekdaysParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._minWeekdaysParse, llc);
    		        return ii !== -1 ? ii : null;
    		      } else {
    		        ii = indexOf.call(this._minWeekdaysParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._weekdaysParse, llc);
    		        if (ii !== -1) {
    		          return ii;
    		        }
    		        ii = indexOf.call(this._shortWeekdaysParse, llc);
    		        return ii !== -1 ? ii : null;
    		      }
    		    }
    		  }
    		  function localeWeekdaysParse(weekdayName, format, strict) {
    		    var i, mom, regex;
    		    if (this._weekdaysParseExact) {
    		      return handleStrictParse$1.call(this, weekdayName, format, strict);
    		    }
    		    if (!this._weekdaysParse) {
    		      this._weekdaysParse = [];
    		      this._minWeekdaysParse = [];
    		      this._shortWeekdaysParse = [];
    		      this._fullWeekdaysParse = [];
    		    }
    		    for (i = 0; i < 7; i++) {
    		      // make the regex if we don't have it already

    		      mom = createUTC([2000, 1]).day(i);
    		      if (strict && !this._fullWeekdaysParse[i]) {
    		        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
    		        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
    		        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
    		      }
    		      if (!this._weekdaysParse[i]) {
    		        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
    		        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
    		      }
    		      // test the regex
    		      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
    		        return i;
    		      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
    		        return i;
    		      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
    		        return i;
    		      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
    		        return i;
    		      }
    		    }
    		  }

    		  // MOMENTS

    		  function getSetDayOfWeek(input) {
    		    if (!this.isValid()) {
    		      return input != null ? this : NaN;
    		    }
    		    var day = get(this, 'Day');
    		    if (input != null) {
    		      input = parseWeekday(input, this.localeData());
    		      return this.add(input - day, 'd');
    		    } else {
    		      return day;
    		    }
    		  }
    		  function getSetLocaleDayOfWeek(input) {
    		    if (!this.isValid()) {
    		      return input != null ? this : NaN;
    		    }
    		    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    		    return input == null ? weekday : this.add(input - weekday, 'd');
    		  }
    		  function getSetISODayOfWeek(input) {
    		    if (!this.isValid()) {
    		      return input != null ? this : NaN;
    		    }

    		    // behaves the same as moment#day except
    		    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    		    // as a setter, sunday should belong to the previous week.

    		    if (input != null) {
    		      var weekday = parseIsoWeekday(input, this.localeData());
    		      return this.day(this.day() % 7 ? weekday : weekday - 7);
    		    } else {
    		      return this.day() || 7;
    		    }
    		  }
    		  function weekdaysRegex(isStrict) {
    		    if (this._weekdaysParseExact) {
    		      if (!hasOwnProp(this, '_weekdaysRegex')) {
    		        computeWeekdaysParse.call(this);
    		      }
    		      if (isStrict) {
    		        return this._weekdaysStrictRegex;
    		      } else {
    		        return this._weekdaysRegex;
    		      }
    		    } else {
    		      if (!hasOwnProp(this, '_weekdaysRegex')) {
    		        this._weekdaysRegex = defaultWeekdaysRegex;
    		      }
    		      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
    		    }
    		  }
    		  function weekdaysShortRegex(isStrict) {
    		    if (this._weekdaysParseExact) {
    		      if (!hasOwnProp(this, '_weekdaysRegex')) {
    		        computeWeekdaysParse.call(this);
    		      }
    		      if (isStrict) {
    		        return this._weekdaysShortStrictRegex;
    		      } else {
    		        return this._weekdaysShortRegex;
    		      }
    		    } else {
    		      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
    		        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    		      }
    		      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    		    }
    		  }
    		  function weekdaysMinRegex(isStrict) {
    		    if (this._weekdaysParseExact) {
    		      if (!hasOwnProp(this, '_weekdaysRegex')) {
    		        computeWeekdaysParse.call(this);
    		      }
    		      if (isStrict) {
    		        return this._weekdaysMinStrictRegex;
    		      } else {
    		        return this._weekdaysMinRegex;
    		      }
    		    } else {
    		      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
    		        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    		      }
    		      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    		    }
    		  }
    		  function computeWeekdaysParse() {
    		    function cmpLenRev(a, b) {
    		      return b.length - a.length;
    		    }
    		    var minPieces = [],
    		      shortPieces = [],
    		      longPieces = [],
    		      mixedPieces = [],
    		      i,
    		      mom,
    		      minp,
    		      shortp,
    		      longp;
    		    for (i = 0; i < 7; i++) {
    		      // make the regex if we don't have it already
    		      mom = createUTC([2000, 1]).day(i);
    		      minp = regexEscape(this.weekdaysMin(mom, ''));
    		      shortp = regexEscape(this.weekdaysShort(mom, ''));
    		      longp = regexEscape(this.weekdays(mom, ''));
    		      minPieces.push(minp);
    		      shortPieces.push(shortp);
    		      longPieces.push(longp);
    		      mixedPieces.push(minp);
    		      mixedPieces.push(shortp);
    		      mixedPieces.push(longp);
    		    }
    		    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    		    // will match the longer piece.
    		    minPieces.sort(cmpLenRev);
    		    shortPieces.sort(cmpLenRev);
    		    longPieces.sort(cmpLenRev);
    		    mixedPieces.sort(cmpLenRev);
    		    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    		    this._weekdaysShortRegex = this._weekdaysRegex;
    		    this._weekdaysMinRegex = this._weekdaysRegex;
    		    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    		    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    		    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    		  }

    		  // FORMATTING

    		  function hFormat() {
    		    return this.hours() % 12 || 12;
    		  }
    		  function kFormat() {
    		    return this.hours() || 24;
    		  }
    		  addFormatToken('H', ['HH', 2], 0, 'hour');
    		  addFormatToken('h', ['hh', 2], 0, hFormat);
    		  addFormatToken('k', ['kk', 2], 0, kFormat);
    		  addFormatToken('hmm', 0, 0, function () {
    		    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    		  });
    		  addFormatToken('hmmss', 0, 0, function () {
    		    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    		  });
    		  addFormatToken('Hmm', 0, 0, function () {
    		    return '' + this.hours() + zeroFill(this.minutes(), 2);
    		  });
    		  addFormatToken('Hmmss', 0, 0, function () {
    		    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    		  });
    		  function meridiem(token, lowercase) {
    		    addFormatToken(token, 0, 0, function () {
    		      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    		    });
    		  }
    		  meridiem('a', true);
    		  meridiem('A', false);

    		  // PARSING

    		  function matchMeridiem(isStrict, locale) {
    		    return locale._meridiemParse;
    		  }
    		  addRegexToken('a', matchMeridiem);
    		  addRegexToken('A', matchMeridiem);
    		  addRegexToken('H', match1to2, match1to2HasZero);
    		  addRegexToken('h', match1to2, match1to2NoLeadingZero);
    		  addRegexToken('k', match1to2, match1to2NoLeadingZero);
    		  addRegexToken('HH', match1to2, match2);
    		  addRegexToken('hh', match1to2, match2);
    		  addRegexToken('kk', match1to2, match2);
    		  addRegexToken('hmm', match3to4);
    		  addRegexToken('hmmss', match5to6);
    		  addRegexToken('Hmm', match3to4);
    		  addRegexToken('Hmmss', match5to6);
    		  addParseToken(['H', 'HH'], HOUR);
    		  addParseToken(['k', 'kk'], function (input, array, config) {
    		    var kInput = toInt(input);
    		    array[HOUR] = kInput === 24 ? 0 : kInput;
    		  });
    		  addParseToken(['a', 'A'], function (input, array, config) {
    		    config._isPm = config._locale.isPM(input);
    		    config._meridiem = input;
    		  });
    		  addParseToken(['h', 'hh'], function (input, array, config) {
    		    array[HOUR] = toInt(input);
    		    getParsingFlags(config).bigHour = true;
    		  });
    		  addParseToken('hmm', function (input, array, config) {
    		    var pos = input.length - 2;
    		    array[HOUR] = toInt(input.substr(0, pos));
    		    array[MINUTE] = toInt(input.substr(pos));
    		    getParsingFlags(config).bigHour = true;
    		  });
    		  addParseToken('hmmss', function (input, array, config) {
    		    var pos1 = input.length - 4,
    		      pos2 = input.length - 2;
    		    array[HOUR] = toInt(input.substr(0, pos1));
    		    array[MINUTE] = toInt(input.substr(pos1, 2));
    		    array[SECOND] = toInt(input.substr(pos2));
    		    getParsingFlags(config).bigHour = true;
    		  });
    		  addParseToken('Hmm', function (input, array, config) {
    		    var pos = input.length - 2;
    		    array[HOUR] = toInt(input.substr(0, pos));
    		    array[MINUTE] = toInt(input.substr(pos));
    		  });
    		  addParseToken('Hmmss', function (input, array, config) {
    		    var pos1 = input.length - 4,
    		      pos2 = input.length - 2;
    		    array[HOUR] = toInt(input.substr(0, pos1));
    		    array[MINUTE] = toInt(input.substr(pos1, 2));
    		    array[SECOND] = toInt(input.substr(pos2));
    		  });

    		  // LOCALES

    		  function localeIsPM(input) {
    		    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    		    // Using charAt should be more compatible.
    		    return (input + '').toLowerCase().charAt(0) === 'p';
    		  }
    		  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
    		    // Setting the hour should keep the time, because the user explicitly
    		    // specified which hour they want. So trying to maintain the same hour (in
    		    // a new timezone) makes sense. Adding/subtracting hours does not follow
    		    // this rule.
    		    getSetHour = makeGetSet('Hours', true);
    		  function localeMeridiem(hours, minutes, isLower) {
    		    if (hours > 11) {
    		      return isLower ? 'pm' : 'PM';
    		    } else {
    		      return isLower ? 'am' : 'AM';
    		    }
    		  }
    		  var baseConfig = {
    		    calendar: defaultCalendar,
    		    longDateFormat: defaultLongDateFormat,
    		    invalidDate: defaultInvalidDate,
    		    ordinal: defaultOrdinal,
    		    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    		    relativeTime: defaultRelativeTime,
    		    months: defaultLocaleMonths,
    		    monthsShort: defaultLocaleMonthsShort,
    		    week: defaultLocaleWeek,
    		    weekdays: defaultLocaleWeekdays,
    		    weekdaysMin: defaultLocaleWeekdaysMin,
    		    weekdaysShort: defaultLocaleWeekdaysShort,
    		    meridiemParse: defaultLocaleMeridiemParse
    		  };

    		  // internal storage for locale config files
    		  var locales = {},
    		    localeFamilies = {},
    		    globalLocale;
    		  function commonPrefix(arr1, arr2) {
    		    var i,
    		      minl = Math.min(arr1.length, arr2.length);
    		    for (i = 0; i < minl; i += 1) {
    		      if (arr1[i] !== arr2[i]) {
    		        return i;
    		      }
    		    }
    		    return minl;
    		  }
    		  function normalizeLocale(key) {
    		    return key ? key.toLowerCase().replace('_', '-') : key;
    		  }

    		  // pick the locale from the array
    		  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    		  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    		  function chooseLocale(names) {
    		    var i = 0,
    		      j,
    		      next,
    		      locale,
    		      split;
    		    while (i < names.length) {
    		      split = normalizeLocale(names[i]).split('-');
    		      j = split.length;
    		      next = normalizeLocale(names[i + 1]);
    		      next = next ? next.split('-') : null;
    		      while (j > 0) {
    		        locale = loadLocale(split.slice(0, j).join('-'));
    		        if (locale) {
    		          return locale;
    		        }
    		        if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
    		          //the next array item is better than a shallower substring of this one
    		          break;
    		        }
    		        j--;
    		      }
    		      i++;
    		    }
    		    return globalLocale;
    		  }
    		  function isLocaleNameSane(name) {
    		    // Prevent names that look like filesystem paths, i.e contain '/' or '\'
    		    // Ensure name is available and function returns boolean
    		    return !!(name && name.match('^[^/\\\\]*$'));
    		  }
    		  function loadLocale(name) {
    		    var oldLocale = null,
    		      aliasedRequire;
    		    // TODO: Find a better way to register and load all the locales in Node
    		    if (locales[name] === undefined && 'object' !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
    		      try {
    		        oldLocale = globalLocale._abbr;
    		        aliasedRequire = commonjsRequire;
    		        aliasedRequire('./locale/' + name);
    		        getSetGlobalLocale(oldLocale);
    		      } catch (e) {
    		        // mark as not found to avoid repeating expensive file require call causing high CPU
    		        // when trying to find en-US, en_US, en-us for every format call
    		        locales[name] = null; // null means not found
    		      }
    		    }
    		    return locales[name];
    		  }

    		  // This function will load locale and then set the global locale.  If
    		  // no arguments are passed in, it will simply return the current global
    		  // locale key.
    		  function getSetGlobalLocale(key, values) {
    		    var data;
    		    if (key) {
    		      if (isUndefined(values)) {
    		        data = getLocale(key);
    		      } else {
    		        data = defineLocale(key, values);
    		      }
    		      if (data) {
    		        // moment.duration._locale = moment._locale = data;
    		        globalLocale = data;
    		      } else {
    		        if (typeof console !== 'undefined' && console.warn) {
    		          //warn user if arguments are passed but the locale could not be set
    		          console.warn('Locale ' + key + ' not found. Did you forget to load it?');
    		        }
    		      }
    		    }
    		    return globalLocale._abbr;
    		  }
    		  function defineLocale(name, config) {
    		    if (config !== null) {
    		      var locale,
    		        parentConfig = baseConfig;
    		      config.abbr = name;
    		      if (locales[name] != null) {
    		        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
    		        parentConfig = locales[name]._config;
    		      } else if (config.parentLocale != null) {
    		        if (locales[config.parentLocale] != null) {
    		          parentConfig = locales[config.parentLocale]._config;
    		        } else {
    		          locale = loadLocale(config.parentLocale);
    		          if (locale != null) {
    		            parentConfig = locale._config;
    		          } else {
    		            if (!localeFamilies[config.parentLocale]) {
    		              localeFamilies[config.parentLocale] = [];
    		            }
    		            localeFamilies[config.parentLocale].push({
    		              name: name,
    		              config: config
    		            });
    		            return null;
    		          }
    		        }
    		      }
    		      locales[name] = new Locale(mergeConfigs(parentConfig, config));
    		      if (localeFamilies[name]) {
    		        localeFamilies[name].forEach(function (x) {
    		          defineLocale(x.name, x.config);
    		        });
    		      }

    		      // backwards compat for now: also set the locale
    		      // make sure we set the locale AFTER all child locales have been
    		      // created, so we won't end up with the child locale set.
    		      getSetGlobalLocale(name);
    		      return locales[name];
    		    } else {
    		      // useful for testing
    		      delete locales[name];
    		      return null;
    		    }
    		  }
    		  function updateLocale(name, config) {
    		    if (config != null) {
    		      var locale,
    		        tmpLocale,
    		        parentConfig = baseConfig;
    		      if (locales[name] != null && locales[name].parentLocale != null) {
    		        // Update existing child locale in-place to avoid memory-leaks
    		        locales[name].set(mergeConfigs(locales[name]._config, config));
    		      } else {
    		        // MERGE
    		        tmpLocale = loadLocale(name);
    		        if (tmpLocale != null) {
    		          parentConfig = tmpLocale._config;
    		        }
    		        config = mergeConfigs(parentConfig, config);
    		        if (tmpLocale == null) {
    		          // updateLocale is called for creating a new locale
    		          // Set abbr so it will have a name (getters return
    		          // undefined otherwise).
    		          config.abbr = name;
    		        }
    		        locale = new Locale(config);
    		        locale.parentLocale = locales[name];
    		        locales[name] = locale;
    		      }

    		      // backwards compat for now: also set the locale
    		      getSetGlobalLocale(name);
    		    } else {
    		      // pass null for config to unupdate, useful for tests
    		      if (locales[name] != null) {
    		        if (locales[name].parentLocale != null) {
    		          locales[name] = locales[name].parentLocale;
    		          if (name === getSetGlobalLocale()) {
    		            getSetGlobalLocale(name);
    		          }
    		        } else if (locales[name] != null) {
    		          delete locales[name];
    		        }
    		      }
    		    }
    		    return locales[name];
    		  }

    		  // returns locale data
    		  function getLocale(key) {
    		    var locale;
    		    if (key && key._locale && key._locale._abbr) {
    		      key = key._locale._abbr;
    		    }
    		    if (!key) {
    		      return globalLocale;
    		    }
    		    if (!isArray(key)) {
    		      //short-circuit everything else
    		      locale = loadLocale(key);
    		      if (locale) {
    		        return locale;
    		      }
    		      key = [key];
    		    }
    		    return chooseLocale(key);
    		  }
    		  function listLocales() {
    		    return keys(locales);
    		  }
    		  function checkOverflow(m) {
    		    var overflow,
    		      a = m._a;
    		    if (a && getParsingFlags(m).overflow === -2) {
    		      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    		      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
    		        overflow = DATE;
    		      }
    		      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
    		        overflow = WEEK;
    		      }
    		      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
    		        overflow = WEEKDAY;
    		      }
    		      getParsingFlags(m).overflow = overflow;
    		    }
    		    return m;
    		  }

    		  // iso 8601 regex
    		  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    		  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
    		    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
    		    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
    		    isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
    		    // iso time formats and regexes
    		    isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
    		    aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
    		    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    		    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
    		    obsOffsets = {
    		      UT: 0,
    		      GMT: 0,
    		      EDT: -4 * 60,
    		      EST: -5 * 60,
    		      CDT: -5 * 60,
    		      CST: -6 * 60,
    		      MDT: -6 * 60,
    		      MST: -7 * 60,
    		      PDT: -7 * 60,
    		      PST: -8 * 60
    		    };

    		  // date from iso format
    		  function configFromISO(config) {
    		    var i,
    		      l,
    		      string = config._i,
    		      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
    		      allowTime,
    		      dateFormat,
    		      timeFormat,
    		      tzFormat,
    		      isoDatesLen = isoDates.length,
    		      isoTimesLen = isoTimes.length;
    		    if (match) {
    		      getParsingFlags(config).iso = true;
    		      for (i = 0, l = isoDatesLen; i < l; i++) {
    		        if (isoDates[i][1].exec(match[1])) {
    		          dateFormat = isoDates[i][0];
    		          allowTime = isoDates[i][2] !== false;
    		          break;
    		        }
    		      }
    		      if (dateFormat == null) {
    		        config._isValid = false;
    		        return;
    		      }
    		      if (match[3]) {
    		        for (i = 0, l = isoTimesLen; i < l; i++) {
    		          if (isoTimes[i][1].exec(match[3])) {
    		            // match[2] should be 'T' or space
    		            timeFormat = (match[2] || ' ') + isoTimes[i][0];
    		            break;
    		          }
    		        }
    		        if (timeFormat == null) {
    		          config._isValid = false;
    		          return;
    		        }
    		      }
    		      if (!allowTime && timeFormat != null) {
    		        config._isValid = false;
    		        return;
    		      }
    		      if (match[4]) {
    		        if (tzRegex.exec(match[4])) {
    		          tzFormat = 'Z';
    		        } else {
    		          config._isValid = false;
    		          return;
    		        }
    		      }
    		      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
    		      configFromStringAndFormat(config);
    		    } else {
    		      config._isValid = false;
    		    }
    		  }
    		  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    		    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
    		    if (secondStr) {
    		      result.push(parseInt(secondStr, 10));
    		    }
    		    return result;
    		  }
    		  function untruncateYear(yearStr) {
    		    var year = parseInt(yearStr, 10);
    		    if (year <= 49) {
    		      return 2000 + year;
    		    } else if (year <= 999) {
    		      return 1900 + year;
    		    }
    		    return year;
    		  }
    		  function preprocessRFC2822(s) {
    		    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    		    return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    		  }
    		  function checkWeekday(weekdayStr, parsedInput, config) {
    		    if (weekdayStr) {
    		      // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
    		      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
    		        weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
    		      if (weekdayProvided !== weekdayActual) {
    		        getParsingFlags(config).weekdayMismatch = true;
    		        config._isValid = false;
    		        return false;
    		      }
    		    }
    		    return true;
    		  }
    		  function calculateOffset(obsOffset, militaryOffset, numOffset) {
    		    if (obsOffset) {
    		      return obsOffsets[obsOffset];
    		    } else if (militaryOffset) {
    		      // the only allowed military tz is Z
    		      return 0;
    		    } else {
    		      var hm = parseInt(numOffset, 10),
    		        m = hm % 100,
    		        h = (hm - m) / 100;
    		      return h * 60 + m;
    		    }
    		  }

    		  // date and time from ref 2822 format
    		  function configFromRFC2822(config) {
    		    var match = rfc2822.exec(preprocessRFC2822(config._i)),
    		      parsedArray;
    		    if (match) {
    		      parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
    		      if (!checkWeekday(match[1], parsedArray, config)) {
    		        return;
    		      }
    		      config._a = parsedArray;
    		      config._tzm = calculateOffset(match[8], match[9], match[10]);
    		      config._d = createUTCDate.apply(null, config._a);
    		      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    		      getParsingFlags(config).rfc2822 = true;
    		    } else {
    		      config._isValid = false;
    		    }
    		  }

    		  // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    		  function configFromString(config) {
    		    var matched = aspNetJsonRegex.exec(config._i);
    		    if (matched !== null) {
    		      config._d = new Date(+matched[1]);
    		      return;
    		    }
    		    configFromISO(config);
    		    if (config._isValid === false) {
    		      delete config._isValid;
    		    } else {
    		      return;
    		    }
    		    configFromRFC2822(config);
    		    if (config._isValid === false) {
    		      delete config._isValid;
    		    } else {
    		      return;
    		    }
    		    if (config._strict) {
    		      config._isValid = false;
    		    } else {
    		      // Final attempt, use Input Fallback
    		      hooks.createFromInputFallback(config);
    		    }
    		  }
    		  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
    		    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    		  });

    		  // Pick the first defined of two or three arguments.
    		  function defaults(a, b, c) {
    		    if (a != null) {
    		      return a;
    		    }
    		    if (b != null) {
    		      return b;
    		    }
    		    return c;
    		  }
    		  function currentDateArray(config) {
    		    // hooks is actually the exported moment object
    		    var nowValue = new Date(hooks.now());
    		    if (config._useUTC) {
    		      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    		    }
    		    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    		  }

    		  // convert an array to a date.
    		  // the array should mirror the parameters below
    		  // note: all values past the year are optional and will default to the lowest possible value.
    		  // [year, month, day , hour, minute, second, millisecond]
    		  function configFromArray(config) {
    		    var i,
    		      date,
    		      input = [],
    		      currentDate,
    		      expectedWeekday,
    		      yearToUse;
    		    if (config._d) {
    		      return;
    		    }
    		    currentDate = currentDateArray(config);

    		    //compute day of the year from weeks and weekdays
    		    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    		      dayOfYearFromWeekInfo(config);
    		    }

    		    //if the day of the year is set, figure out what it is
    		    if (config._dayOfYear != null) {
    		      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    		      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
    		        getParsingFlags(config)._overflowDayOfYear = true;
    		      }
    		      date = createUTCDate(yearToUse, 0, config._dayOfYear);
    		      config._a[MONTH] = date.getUTCMonth();
    		      config._a[DATE] = date.getUTCDate();
    		    }

    		    // Default to current date.
    		    // * if no year, month, day of month are given, default to today
    		    // * if day of month is given, default month and year
    		    // * if month is given, default only year
    		    // * if year is given, don't default anything
    		    for (i = 0; i < 3 && config._a[i] == null; ++i) {
    		      config._a[i] = input[i] = currentDate[i];
    		    }

    		    // Zero out whatever was not defaulted, including time
    		    for (; i < 7; i++) {
    		      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
    		    }

    		    // Check for 24:00:00.000
    		    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    		      config._nextDay = true;
    		      config._a[HOUR] = 0;
    		    }
    		    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    		    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

    		    // Apply timezone offset from input. The actual utcOffset can be changed
    		    // with parseZone.
    		    if (config._tzm != null) {
    		      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    		    }
    		    if (config._nextDay) {
    		      config._a[HOUR] = 24;
    		    }

    		    // check for mismatching day of week
    		    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
    		      getParsingFlags(config).weekdayMismatch = true;
    		    }
    		  }
    		  function dayOfYearFromWeekInfo(config) {
    		    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
    		    w = config._w;
    		    if (w.GG != null || w.W != null || w.E != null) {
    		      dow = 1;
    		      doy = 4;

    		      // TODO: We need to take the current isoWeekYear, but that depends on
    		      // how we interpret now (local, utc, fixed offset). So create
    		      // a now version of current config (take local/utc/offset flags, and
    		      // create now).
    		      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
    		      week = defaults(w.W, 1);
    		      weekday = defaults(w.E, 1);
    		      if (weekday < 1 || weekday > 7) {
    		        weekdayOverflow = true;
    		      }
    		    } else {
    		      dow = config._locale._week.dow;
    		      doy = config._locale._week.doy;
    		      curWeek = weekOfYear(createLocal(), dow, doy);
    		      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

    		      // Default to current week.
    		      week = defaults(w.w, curWeek.week);
    		      if (w.d != null) {
    		        // weekday -- low day numbers are considered next week
    		        weekday = w.d;
    		        if (weekday < 0 || weekday > 6) {
    		          weekdayOverflow = true;
    		        }
    		      } else if (w.e != null) {
    		        // local weekday -- counting starts from beginning of week
    		        weekday = w.e + dow;
    		        if (w.e < 0 || w.e > 6) {
    		          weekdayOverflow = true;
    		        }
    		      } else {
    		        // default to beginning of week
    		        weekday = dow;
    		      }
    		    }
    		    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    		      getParsingFlags(config)._overflowWeeks = true;
    		    } else if (weekdayOverflow != null) {
    		      getParsingFlags(config)._overflowWeekday = true;
    		    } else {
    		      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    		      config._a[YEAR] = temp.year;
    		      config._dayOfYear = temp.dayOfYear;
    		    }
    		  }

    		  // constant that refers to the ISO standard
    		  hooks.ISO_8601 = function () {};

    		  // constant that refers to the RFC 2822 form
    		  hooks.RFC_2822 = function () {};

    		  // date from string and format string
    		  function configFromStringAndFormat(config) {
    		    // TODO: Move this to another part of the creation flow to prevent circular deps
    		    if (config._f === hooks.ISO_8601) {
    		      configFromISO(config);
    		      return;
    		    }
    		    if (config._f === hooks.RFC_2822) {
    		      configFromRFC2822(config);
    		      return;
    		    }
    		    config._a = [];
    		    getParsingFlags(config).empty = true;

    		    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    		    var string = '' + config._i,
    		      i,
    		      parsedInput,
    		      tokens,
    		      token,
    		      skipped,
    		      stringLength = string.length,
    		      totalParsedInputLength = 0,
    		      era,
    		      tokenLen;
    		    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
    		    tokenLen = tokens.length;
    		    for (i = 0; i < tokenLen; i++) {
    		      token = tokens[i];
    		      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
    		      if (parsedInput) {
    		        skipped = string.substr(0, string.indexOf(parsedInput));
    		        if (skipped.length > 0) {
    		          getParsingFlags(config).unusedInput.push(skipped);
    		        }
    		        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
    		        totalParsedInputLength += parsedInput.length;
    		      }
    		      // don't parse if it's not a known token
    		      if (formatTokenFunctions[token]) {
    		        if (parsedInput) {
    		          getParsingFlags(config).empty = false;
    		        } else {
    		          getParsingFlags(config).unusedTokens.push(token);
    		        }
    		        addTimeToArrayFromToken(token, parsedInput, config);
    		      } else if (config._strict && !parsedInput) {
    		        getParsingFlags(config).unusedTokens.push(token);
    		      }
    		    }

    		    // add remaining unparsed input length to the string
    		    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    		    if (string.length > 0) {
    		      getParsingFlags(config).unusedInput.push(string);
    		    }

    		    // clear _12h flag if hour is <= 12
    		    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    		      getParsingFlags(config).bigHour = undefined;
    		    }
    		    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    		    getParsingFlags(config).meridiem = config._meridiem;
    		    // handle meridiem
    		    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    		    // handle era
    		    era = getParsingFlags(config).era;
    		    if (era !== null) {
    		      config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
    		    }
    		    configFromArray(config);
    		    checkOverflow(config);
    		  }
    		  function meridiemFixWrap(locale, hour, meridiem) {
    		    var isPm;
    		    if (meridiem == null) {
    		      // nothing to do
    		      return hour;
    		    }
    		    if (locale.meridiemHour != null) {
    		      return locale.meridiemHour(hour, meridiem);
    		    } else if (locale.isPM != null) {
    		      // Fallback
    		      isPm = locale.isPM(meridiem);
    		      if (isPm && hour < 12) {
    		        hour += 12;
    		      }
    		      if (!isPm && hour === 12) {
    		        hour = 0;
    		      }
    		      return hour;
    		    } else {
    		      // this is not supposed to happen
    		      return hour;
    		    }
    		  }

    		  // date from string and array of format strings
    		  function configFromStringAndArray(config) {
    		    var tempConfig,
    		      bestMoment,
    		      scoreToBeat,
    		      i,
    		      currentScore,
    		      validFormatFound,
    		      bestFormatIsValid = false,
    		      configfLen = config._f.length;
    		    if (configfLen === 0) {
    		      getParsingFlags(config).invalidFormat = true;
    		      config._d = new Date(NaN);
    		      return;
    		    }
    		    for (i = 0; i < configfLen; i++) {
    		      currentScore = 0;
    		      validFormatFound = false;
    		      tempConfig = copyConfig({}, config);
    		      if (config._useUTC != null) {
    		        tempConfig._useUTC = config._useUTC;
    		      }
    		      tempConfig._f = config._f[i];
    		      configFromStringAndFormat(tempConfig);
    		      if (isValid(tempConfig)) {
    		        validFormatFound = true;
    		      }

    		      // if there is any input that was not parsed add a penalty for that format
    		      currentScore += getParsingFlags(tempConfig).charsLeftOver;

    		      //or tokens
    		      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    		      getParsingFlags(tempConfig).score = currentScore;
    		      if (!bestFormatIsValid) {
    		        if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
    		          scoreToBeat = currentScore;
    		          bestMoment = tempConfig;
    		          if (validFormatFound) {
    		            bestFormatIsValid = true;
    		          }
    		        }
    		      } else {
    		        if (currentScore < scoreToBeat) {
    		          scoreToBeat = currentScore;
    		          bestMoment = tempConfig;
    		        }
    		      }
    		    }
    		    extend(config, bestMoment || tempConfig);
    		  }
    		  function configFromObject(config) {
    		    if (config._d) {
    		      return;
    		    }
    		    var i = normalizeObjectUnits(config._i),
    		      dayOrDate = i.day === undefined ? i.date : i.day;
    		    config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
    		      return obj && parseInt(obj, 10);
    		    });
    		    configFromArray(config);
    		  }
    		  function createFromConfig(config) {
    		    var res = new Moment(checkOverflow(prepareConfig(config)));
    		    if (res._nextDay) {
    		      // Adding is smart enough around DST
    		      res.add(1, 'd');
    		      res._nextDay = undefined;
    		    }
    		    return res;
    		  }
    		  function prepareConfig(config) {
    		    var input = config._i,
    		      format = config._f;
    		    config._locale = config._locale || getLocale(config._l);
    		    if (input === null || format === undefined && input === '') {
    		      return createInvalid({
    		        nullInput: true
    		      });
    		    }
    		    if (typeof input === 'string') {
    		      config._i = input = config._locale.preparse(input);
    		    }
    		    if (isMoment(input)) {
    		      return new Moment(checkOverflow(input));
    		    } else if (isDate(input)) {
    		      config._d = input;
    		    } else if (isArray(format)) {
    		      configFromStringAndArray(config);
    		    } else if (format) {
    		      configFromStringAndFormat(config);
    		    } else {
    		      configFromInput(config);
    		    }
    		    if (!isValid(config)) {
    		      config._d = null;
    		    }
    		    return config;
    		  }
    		  function configFromInput(config) {
    		    var input = config._i;
    		    if (isUndefined(input)) {
    		      config._d = new Date(hooks.now());
    		    } else if (isDate(input)) {
    		      config._d = new Date(input.valueOf());
    		    } else if (typeof input === 'string') {
    		      configFromString(config);
    		    } else if (isArray(input)) {
    		      config._a = map(input.slice(0), function (obj) {
    		        return parseInt(obj, 10);
    		      });
    		      configFromArray(config);
    		    } else if (isObject(input)) {
    		      configFromObject(config);
    		    } else if (isNumber(input)) {
    		      // from milliseconds
    		      config._d = new Date(input);
    		    } else {
    		      hooks.createFromInputFallback(config);
    		    }
    		  }
    		  function createLocalOrUTC(input, format, locale, strict, isUTC) {
    		    var c = {};
    		    if (format === true || format === false) {
    		      strict = format;
    		      format = undefined;
    		    }
    		    if (locale === true || locale === false) {
    		      strict = locale;
    		      locale = undefined;
    		    }
    		    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    		      input = undefined;
    		    }
    		    // object construction must be done this way.
    		    // https://github.com/moment/moment/issues/1423
    		    c._isAMomentObject = true;
    		    c._useUTC = c._isUTC = isUTC;
    		    c._l = locale;
    		    c._i = input;
    		    c._f = format;
    		    c._strict = strict;
    		    return createFromConfig(c);
    		  }
    		  function createLocal(input, format, locale, strict) {
    		    return createLocalOrUTC(input, format, locale, strict, false);
    		  }
    		  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
    		      var other = createLocal.apply(null, arguments);
    		      if (this.isValid() && other.isValid()) {
    		        return other < this ? this : other;
    		      } else {
    		        return createInvalid();
    		      }
    		    }),
    		    prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
    		      var other = createLocal.apply(null, arguments);
    		      if (this.isValid() && other.isValid()) {
    		        return other > this ? this : other;
    		      } else {
    		        return createInvalid();
    		      }
    		    });

    		  // Pick a moment m from moments so that m[fn](other) is true for all
    		  // other. This relies on the function fn to be transitive.
    		  //
    		  // moments should either be an array of moment objects or an array, whose
    		  // first element is an array of moment objects.
    		  function pickBy(fn, moments) {
    		    var res, i;
    		    if (moments.length === 1 && isArray(moments[0])) {
    		      moments = moments[0];
    		    }
    		    if (!moments.length) {
    		      return createLocal();
    		    }
    		    res = moments[0];
    		    for (i = 1; i < moments.length; ++i) {
    		      if (!moments[i].isValid() || moments[i][fn](res)) {
    		        res = moments[i];
    		      }
    		    }
    		    return res;
    		  }

    		  // TODO: Use [].sort instead?
    		  function min() {
    		    var args = [].slice.call(arguments, 0);
    		    return pickBy('isBefore', args);
    		  }
    		  function max() {
    		    var args = [].slice.call(arguments, 0);
    		    return pickBy('isAfter', args);
    		  }
    		  var now = function () {
    		    return Date.now ? Date.now() : +new Date();
    		  };
    		  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
    		  function isDurationValid(m) {
    		    var key,
    		      unitHasDecimal = false,
    		      i,
    		      orderLen = ordering.length;
    		    for (key in m) {
    		      if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
    		        return false;
    		      }
    		    }
    		    for (i = 0; i < orderLen; ++i) {
    		      if (m[ordering[i]]) {
    		        if (unitHasDecimal) {
    		          return false; // only allow non-integers for smallest unit
    		        }
    		        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
    		          unitHasDecimal = true;
    		        }
    		      }
    		    }
    		    return true;
    		  }
    		  function isValid$1() {
    		    return this._isValid;
    		  }
    		  function createInvalid$1() {
    		    return createDuration(NaN);
    		  }
    		  function Duration(duration) {
    		    var normalizedInput = normalizeObjectUnits(duration),
    		      years = normalizedInput.year || 0,
    		      quarters = normalizedInput.quarter || 0,
    		      months = normalizedInput.month || 0,
    		      weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
    		      days = normalizedInput.day || 0,
    		      hours = normalizedInput.hour || 0,
    		      minutes = normalizedInput.minute || 0,
    		      seconds = normalizedInput.second || 0,
    		      milliseconds = normalizedInput.millisecond || 0;
    		    this._isValid = isDurationValid(normalizedInput);

    		    // representation for dateAddRemove
    		    this._milliseconds = +milliseconds + seconds * 1e3 +
    		    // 1000
    		    minutes * 6e4 +
    		    // 1000 * 60
    		    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    		    // Because of dateAddRemove treats 24 hours as different from a
    		    // day when working around DST, we need to store them separately
    		    this._days = +days + weeks * 7;
    		    // It is impossible to translate months into days without knowing
    		    // which months you are are talking about, so we have to store
    		    // it separately.
    		    this._months = +months + quarters * 3 + years * 12;
    		    this._data = {};
    		    this._locale = getLocale();
    		    this._bubble();
    		  }
    		  function isDuration(obj) {
    		    return obj instanceof Duration;
    		  }
    		  function absRound(number) {
    		    if (number < 0) {
    		      return Math.round(-1 * number) * -1;
    		    } else {
    		      return Math.round(number);
    		    }
    		  }

    		  // compare two arrays, return the number of differences
    		  function compareArrays(array1, array2, dontConvert) {
    		    var len = Math.min(array1.length, array2.length),
    		      lengthDiff = Math.abs(array1.length - array2.length),
    		      diffs = 0,
    		      i;
    		    for (i = 0; i < len; i++) {
    		      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
    		        diffs++;
    		      }
    		    }
    		    return diffs + lengthDiff;
    		  }

    		  // FORMATTING

    		  function offset(token, separator) {
    		    addFormatToken(token, 0, 0, function () {
    		      var offset = this.utcOffset(),
    		        sign = '+';
    		      if (offset < 0) {
    		        offset = -offset;
    		        sign = '-';
    		      }
    		      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
    		    });
    		  }
    		  offset('Z', ':');
    		  offset('ZZ', '');

    		  // PARSING

    		  addRegexToken('Z', matchShortOffset);
    		  addRegexToken('ZZ', matchShortOffset);
    		  addParseToken(['Z', 'ZZ'], function (input, array, config) {
    		    config._useUTC = true;
    		    config._tzm = offsetFromString(matchShortOffset, input);
    		  });

    		  // HELPERS

    		  // timezone chunker
    		  // '+10:00' > ['10',  '00']
    		  // '-1530'  > ['-15', '30']
    		  var chunkOffset = /([\+\-]|\d\d)/gi;
    		  function offsetFromString(matcher, string) {
    		    var matches = (string || '').match(matcher),
    		      chunk,
    		      parts,
    		      minutes;
    		    if (matches === null) {
    		      return null;
    		    }
    		    chunk = matches[matches.length - 1] || [];
    		    parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    		    minutes = +(parts[1] * 60) + toInt(parts[2]);
    		    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    		  }

    		  // Return a moment from input, that is local/utc/zone equivalent to model.
    		  function cloneWithOffset(input, model) {
    		    var res, diff;
    		    if (model._isUTC) {
    		      res = model.clone();
    		      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    		      // Use low-level api, because this fn is low-level api.
    		      res._d.setTime(res._d.valueOf() + diff);
    		      hooks.updateOffset(res, false);
    		      return res;
    		    } else {
    		      return createLocal(input).local();
    		    }
    		  }
    		  function getDateOffset(m) {
    		    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    		    // https://github.com/moment/moment/pull/1871
    		    return -Math.round(m._d.getTimezoneOffset());
    		  }

    		  // HOOKS

    		  // This function will be called whenever a moment is mutated.
    		  // It is intended to keep the offset in sync with the timezone.
    		  hooks.updateOffset = function () {};

    		  // MOMENTS

    		  // keepLocalTime = true means only change the timezone, without
    		  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    		  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    		  // +0200, so we adjust the time as needed, to be valid.
    		  //
    		  // Keeping the time actually adds/subtracts (one hour)
    		  // from the actual represented time. That is why we call updateOffset
    		  // a second time. In case it wants us to change the offset again
    		  // _changeInProgress == true case, then we have to adjust, because
    		  // there is no such time in the given timezone.
    		  function getSetOffset(input, keepLocalTime, keepMinutes) {
    		    var offset = this._offset || 0,
    		      localAdjust;
    		    if (!this.isValid()) {
    		      return input != null ? this : NaN;
    		    }
    		    if (input != null) {
    		      if (typeof input === 'string') {
    		        input = offsetFromString(matchShortOffset, input);
    		        if (input === null) {
    		          return this;
    		        }
    		      } else if (Math.abs(input) < 16 && !keepMinutes) {
    		        input = input * 60;
    		      }
    		      if (!this._isUTC && keepLocalTime) {
    		        localAdjust = getDateOffset(this);
    		      }
    		      this._offset = input;
    		      this._isUTC = true;
    		      if (localAdjust != null) {
    		        this.add(localAdjust, 'm');
    		      }
    		      if (offset !== input) {
    		        if (!keepLocalTime || this._changeInProgress) {
    		          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
    		        } else if (!this._changeInProgress) {
    		          this._changeInProgress = true;
    		          hooks.updateOffset(this, true);
    		          this._changeInProgress = null;
    		        }
    		      }
    		      return this;
    		    } else {
    		      return this._isUTC ? offset : getDateOffset(this);
    		    }
    		  }
    		  function getSetZone(input, keepLocalTime) {
    		    if (input != null) {
    		      if (typeof input !== 'string') {
    		        input = -input;
    		      }
    		      this.utcOffset(input, keepLocalTime);
    		      return this;
    		    } else {
    		      return -this.utcOffset();
    		    }
    		  }
    		  function setOffsetToUTC(keepLocalTime) {
    		    return this.utcOffset(0, keepLocalTime);
    		  }
    		  function setOffsetToLocal(keepLocalTime) {
    		    if (this._isUTC) {
    		      this.utcOffset(0, keepLocalTime);
    		      this._isUTC = false;
    		      if (keepLocalTime) {
    		        this.subtract(getDateOffset(this), 'm');
    		      }
    		    }
    		    return this;
    		  }
    		  function setOffsetToParsedOffset() {
    		    if (this._tzm != null) {
    		      this.utcOffset(this._tzm, false, true);
    		    } else if (typeof this._i === 'string') {
    		      var tZone = offsetFromString(matchOffset, this._i);
    		      if (tZone != null) {
    		        this.utcOffset(tZone);
    		      } else {
    		        this.utcOffset(0, true);
    		      }
    		    }
    		    return this;
    		  }
    		  function hasAlignedHourOffset(input) {
    		    if (!this.isValid()) {
    		      return false;
    		    }
    		    input = input ? createLocal(input).utcOffset() : 0;
    		    return (this.utcOffset() - input) % 60 === 0;
    		  }
    		  function isDaylightSavingTime() {
    		    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    		  }
    		  function isDaylightSavingTimeShifted() {
    		    if (!isUndefined(this._isDSTShifted)) {
    		      return this._isDSTShifted;
    		    }
    		    var c = {},
    		      other;
    		    copyConfig(c, this);
    		    c = prepareConfig(c);
    		    if (c._a) {
    		      other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    		      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    		    } else {
    		      this._isDSTShifted = false;
    		    }
    		    return this._isDSTShifted;
    		  }
    		  function isLocal() {
    		    return this.isValid() ? !this._isUTC : false;
    		  }
    		  function isUtcOffset() {
    		    return this.isValid() ? this._isUTC : false;
    		  }
    		  function isUtc() {
    		    return this.isValid() ? this._isUTC && this._offset === 0 : false;
    		  }

    		  // ASP.NET json date format regex
    		  var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
    		    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    		    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    		    // and further modified to allow for strings containing both week and day
    		    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    		  function createDuration(input, key) {
    		    var duration = input,
    		      // matching against regexp is expensive, do it on demand
    		      match = null,
    		      sign,
    		      ret,
    		      diffRes;
    		    if (isDuration(input)) {
    		      duration = {
    		        ms: input._milliseconds,
    		        d: input._days,
    		        M: input._months
    		      };
    		    } else if (isNumber(input) || !isNaN(+input)) {
    		      duration = {};
    		      if (key) {
    		        duration[key] = +input;
    		      } else {
    		        duration.milliseconds = +input;
    		      }
    		    } else if (match = aspNetRegex.exec(input)) {
    		      sign = match[1] === '-' ? -1 : 1;
    		      duration = {
    		        y: 0,
    		        d: toInt(match[DATE]) * sign,
    		        h: toInt(match[HOUR]) * sign,
    		        m: toInt(match[MINUTE]) * sign,
    		        s: toInt(match[SECOND]) * sign,
    		        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
    		      };
    		    } else if (match = isoRegex.exec(input)) {
    		      sign = match[1] === '-' ? -1 : 1;
    		      duration = {
    		        y: parseIso(match[2], sign),
    		        M: parseIso(match[3], sign),
    		        w: parseIso(match[4], sign),
    		        d: parseIso(match[5], sign),
    		        h: parseIso(match[6], sign),
    		        m: parseIso(match[7], sign),
    		        s: parseIso(match[8], sign)
    		      };
    		    } else if (duration == null) {
    		      // checks for null or undefined
    		      duration = {};
    		    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
    		      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
    		      duration = {};
    		      duration.ms = diffRes.milliseconds;
    		      duration.M = diffRes.months;
    		    }
    		    ret = new Duration(duration);
    		    if (isDuration(input) && hasOwnProp(input, '_locale')) {
    		      ret._locale = input._locale;
    		    }
    		    if (isDuration(input) && hasOwnProp(input, '_isValid')) {
    		      ret._isValid = input._isValid;
    		    }
    		    return ret;
    		  }
    		  createDuration.fn = Duration.prototype;
    		  createDuration.invalid = createInvalid$1;
    		  function parseIso(inp, sign) {
    		    // We'd normally use ~~inp for this, but unfortunately it also
    		    // converts floats to ints.
    		    // inp may be undefined, so careful calling replace on it.
    		    var res = inp && parseFloat(inp.replace(',', '.'));
    		    // apply sign while we're at it
    		    return (isNaN(res) ? 0 : res) * sign;
    		  }
    		  function positiveMomentsDifference(base, other) {
    		    var res = {};
    		    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
    		    if (base.clone().add(res.months, 'M').isAfter(other)) {
    		      --res.months;
    		    }
    		    res.milliseconds = +other - +base.clone().add(res.months, 'M');
    		    return res;
    		  }
    		  function momentsDifference(base, other) {
    		    var res;
    		    if (!(base.isValid() && other.isValid())) {
    		      return {
    		        milliseconds: 0,
    		        months: 0
    		      };
    		    }
    		    other = cloneWithOffset(other, base);
    		    if (base.isBefore(other)) {
    		      res = positiveMomentsDifference(base, other);
    		    } else {
    		      res = positiveMomentsDifference(other, base);
    		      res.milliseconds = -res.milliseconds;
    		      res.months = -res.months;
    		    }
    		    return res;
    		  }

    		  // TODO: remove 'name' arg after deprecation is removed
    		  function createAdder(direction, name) {
    		    return function (val, period) {
    		      var dur, tmp;
    		      //invert the arguments, but complain about it
    		      if (period !== null && !isNaN(+period)) {
    		        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
    		        tmp = val;
    		        val = period;
    		        period = tmp;
    		      }
    		      dur = createDuration(val, period);
    		      addSubtract(this, dur, direction);
    		      return this;
    		    };
    		  }
    		  function addSubtract(mom, duration, isAdding, updateOffset) {
    		    var milliseconds = duration._milliseconds,
    		      days = absRound(duration._days),
    		      months = absRound(duration._months);
    		    if (!mom.isValid()) {
    		      // No op
    		      return;
    		    }
    		    updateOffset = updateOffset == null ? true : updateOffset;
    		    if (months) {
    		      setMonth(mom, get(mom, 'Month') + months * isAdding);
    		    }
    		    if (days) {
    		      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    		    }
    		    if (milliseconds) {
    		      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    		    }
    		    if (updateOffset) {
    		      hooks.updateOffset(mom, days || months);
    		    }
    		  }
    		  var add = createAdder(1, 'add'),
    		    subtract = createAdder(-1, 'subtract');
    		  function isString(input) {
    		    return typeof input === 'string' || input instanceof String;
    		  }

    		  // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    		  function isMomentInput(input) {
    		    return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    		  }
    		  function isMomentInputObject(input) {
    		    var objectTest = isObject(input) && !isObjectEmpty(input),
    		      propertyTest = false,
    		      properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
    		      i,
    		      property,
    		      propertyLen = properties.length;
    		    for (i = 0; i < propertyLen; i += 1) {
    		      property = properties[i];
    		      propertyTest = propertyTest || hasOwnProp(input, property);
    		    }
    		    return objectTest && propertyTest;
    		  }
    		  function isNumberOrStringArray(input) {
    		    var arrayTest = isArray(input),
    		      dataTypeTest = false;
    		    if (arrayTest) {
    		      dataTypeTest = input.filter(function (item) {
    		        return !isNumber(item) && isString(input);
    		      }).length === 0;
    		    }
    		    return arrayTest && dataTypeTest;
    		  }
    		  function isCalendarSpec(input) {
    		    var objectTest = isObject(input) && !isObjectEmpty(input),
    		      propertyTest = false,
    		      properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
    		      i,
    		      property;
    		    for (i = 0; i < properties.length; i += 1) {
    		      property = properties[i];
    		      propertyTest = propertyTest || hasOwnProp(input, property);
    		    }
    		    return objectTest && propertyTest;
    		  }
    		  function getCalendarFormat(myMoment, now) {
    		    var diff = myMoment.diff(now, 'days', true);
    		    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    		  }
    		  function calendar$1(time, formats) {
    		    // Support for single parameter, formats only overload to the calendar function
    		    if (arguments.length === 1) {
    		      if (!arguments[0]) {
    		        time = undefined;
    		        formats = undefined;
    		      } else if (isMomentInput(arguments[0])) {
    		        time = arguments[0];
    		        formats = undefined;
    		      } else if (isCalendarSpec(arguments[0])) {
    		        formats = arguments[0];
    		        time = undefined;
    		      }
    		    }
    		    // We want to compare the start of today, vs this.
    		    // Getting start-of-today depends on whether we're local/utc/offset or not.
    		    var now = time || createLocal(),
    		      sod = cloneWithOffset(now, this).startOf('day'),
    		      format = hooks.calendarFormat(this, sod) || 'sameElse',
    		      output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
    		    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    		  }
    		  function clone() {
    		    return new Moment(this);
    		  }
    		  function isAfter(input, units) {
    		    var localInput = isMoment(input) ? input : createLocal(input);
    		    if (!(this.isValid() && localInput.isValid())) {
    		      return false;
    		    }
    		    units = normalizeUnits(units) || 'millisecond';
    		    if (units === 'millisecond') {
    		      return this.valueOf() > localInput.valueOf();
    		    } else {
    		      return localInput.valueOf() < this.clone().startOf(units).valueOf();
    		    }
    		  }
    		  function isBefore(input, units) {
    		    var localInput = isMoment(input) ? input : createLocal(input);
    		    if (!(this.isValid() && localInput.isValid())) {
    		      return false;
    		    }
    		    units = normalizeUnits(units) || 'millisecond';
    		    if (units === 'millisecond') {
    		      return this.valueOf() < localInput.valueOf();
    		    } else {
    		      return this.clone().endOf(units).valueOf() < localInput.valueOf();
    		    }
    		  }
    		  function isBetween(from, to, units, inclusivity) {
    		    var localFrom = isMoment(from) ? from : createLocal(from),
    		      localTo = isMoment(to) ? to : createLocal(to);
    		    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    		      return false;
    		    }
    		    inclusivity = inclusivity || '()';
    		    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    		  }
    		  function isSame(input, units) {
    		    var localInput = isMoment(input) ? input : createLocal(input),
    		      inputMs;
    		    if (!(this.isValid() && localInput.isValid())) {
    		      return false;
    		    }
    		    units = normalizeUnits(units) || 'millisecond';
    		    if (units === 'millisecond') {
    		      return this.valueOf() === localInput.valueOf();
    		    } else {
    		      inputMs = localInput.valueOf();
    		      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    		    }
    		  }
    		  function isSameOrAfter(input, units) {
    		    return this.isSame(input, units) || this.isAfter(input, units);
    		  }
    		  function isSameOrBefore(input, units) {
    		    return this.isSame(input, units) || this.isBefore(input, units);
    		  }
    		  function diff(input, units, asFloat) {
    		    var that, zoneDelta, output;
    		    if (!this.isValid()) {
    		      return NaN;
    		    }
    		    that = cloneWithOffset(input, this);
    		    if (!that.isValid()) {
    		      return NaN;
    		    }
    		    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    		    units = normalizeUnits(units);
    		    switch (units) {
    		      case 'year':
    		        output = monthDiff(this, that) / 12;
    		        break;
    		      case 'month':
    		        output = monthDiff(this, that);
    		        break;
    		      case 'quarter':
    		        output = monthDiff(this, that) / 3;
    		        break;
    		      case 'second':
    		        output = (this - that) / 1e3;
    		        break;
    		      // 1000
    		      case 'minute':
    		        output = (this - that) / 6e4;
    		        break;
    		      // 1000 * 60
    		      case 'hour':
    		        output = (this - that) / 36e5;
    		        break;
    		      // 1000 * 60 * 60
    		      case 'day':
    		        output = (this - that - zoneDelta) / 864e5;
    		        break;
    		      // 1000 * 60 * 60 * 24, negate dst
    		      case 'week':
    		        output = (this - that - zoneDelta) / 6048e5;
    		        break;
    		      // 1000 * 60 * 60 * 24 * 7, negate dst
    		      default:
    		        output = this - that;
    		    }
    		    return asFloat ? output : absFloor(output);
    		  }
    		  function monthDiff(a, b) {
    		    if (a.date() < b.date()) {
    		      // end-of-month calculations work correct when the start month has more
    		      // days than the end month.
    		      return -monthDiff(b, a);
    		    }
    		    // difference in months
    		    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
    		      // b is in (anchor - 1 month, anchor + 1 month)
    		      anchor = a.clone().add(wholeMonthDiff, 'months'),
    		      anchor2,
    		      adjust;
    		    if (b - anchor < 0) {
    		      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
    		      // linear across the month
    		      adjust = (b - anchor) / (anchor - anchor2);
    		    } else {
    		      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
    		      // linear across the month
    		      adjust = (b - anchor) / (anchor2 - anchor);
    		    }

    		    //check for negative zero, return zero if negative zero
    		    return -(wholeMonthDiff + adjust) || 0;
    		  }
    		  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    		  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    		  function toString() {
    		    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    		  }
    		  function toISOString(keepOffset) {
    		    if (!this.isValid()) {
    		      return null;
    		    }
    		    var utc = keepOffset !== true,
    		      m = utc ? this.clone().utc() : this;
    		    if (m.year() < 0 || m.year() > 9999) {
    		      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
    		    }
    		    if (isFunction(Date.prototype.toISOString)) {
    		      // native implementation is ~50x faster, use it when we can
    		      if (utc) {
    		        return this.toDate().toISOString();
    		      } else {
    		        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
    		      }
    		    }
    		    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    		  }

    		  /**
    		   * Return a human readable representation of a moment that can
    		   * also be evaluated to get a new moment which is the same
    		   *
    		   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
    		   */
    		  function inspect() {
    		    if (!this.isValid()) {
    		      return 'moment.invalid(/* ' + this._i + ' */)';
    		    }
    		    var func = 'moment',
    		      zone = '',
    		      prefix,
    		      year,
    		      datetime,
    		      suffix;
    		    if (!this.isLocal()) {
    		      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
    		      zone = 'Z';
    		    }
    		    prefix = '[' + func + '("]';
    		    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
    		    datetime = '-MM-DD[T]HH:mm:ss.SSS';
    		    suffix = zone + '[")]';
    		    return this.format(prefix + year + datetime + suffix);
    		  }
    		  function format(inputString) {
    		    if (!inputString) {
    		      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    		    }
    		    var output = formatMoment(this, inputString);
    		    return this.localeData().postformat(output);
    		  }
    		  function from(time, withoutSuffix) {
    		    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    		      return createDuration({
    		        to: this,
    		        from: time
    		      }).locale(this.locale()).humanize(!withoutSuffix);
    		    } else {
    		      return this.localeData().invalidDate();
    		    }
    		  }
    		  function fromNow(withoutSuffix) {
    		    return this.from(createLocal(), withoutSuffix);
    		  }
    		  function to(time, withoutSuffix) {
    		    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    		      return createDuration({
    		        from: this,
    		        to: time
    		      }).locale(this.locale()).humanize(!withoutSuffix);
    		    } else {
    		      return this.localeData().invalidDate();
    		    }
    		  }
    		  function toNow(withoutSuffix) {
    		    return this.to(createLocal(), withoutSuffix);
    		  }

    		  // If passed a locale key, it will set the locale for this
    		  // instance.  Otherwise, it will return the locale configuration
    		  // variables for this instance.
    		  function locale(key) {
    		    var newLocaleData;
    		    if (key === undefined) {
    		      return this._locale._abbr;
    		    } else {
    		      newLocaleData = getLocale(key);
    		      if (newLocaleData != null) {
    		        this._locale = newLocaleData;
    		      }
    		      return this;
    		    }
    		  }
    		  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
    		    if (key === undefined) {
    		      return this.localeData();
    		    } else {
    		      return this.locale(key);
    		    }
    		  });
    		  function localeData() {
    		    return this._locale;
    		  }
    		  var MS_PER_SECOND = 1000,
    		    MS_PER_MINUTE = 60 * MS_PER_SECOND,
    		    MS_PER_HOUR = 60 * MS_PER_MINUTE,
    		    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    		  // actual modulo - handles negative numbers (for dates before 1970):
    		  function mod$1(dividend, divisor) {
    		    return (dividend % divisor + divisor) % divisor;
    		  }
    		  function localStartOfDate(y, m, d) {
    		    // the date constructor remaps years 0-99 to 1900-1999
    		    if (y < 100 && y >= 0) {
    		      // preserve leap years using a full 400 year cycle, then reset
    		      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
    		    } else {
    		      return new Date(y, m, d).valueOf();
    		    }
    		  }
    		  function utcStartOfDate(y, m, d) {
    		    // Date.UTC remaps years 0-99 to 1900-1999
    		    if (y < 100 && y >= 0) {
    		      // preserve leap years using a full 400 year cycle, then reset
    		      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
    		    } else {
    		      return Date.UTC(y, m, d);
    		    }
    		  }
    		  function startOf(units) {
    		    var time, startOfDate;
    		    units = normalizeUnits(units);
    		    if (units === undefined || units === 'millisecond' || !this.isValid()) {
    		      return this;
    		    }
    		    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
    		    switch (units) {
    		      case 'year':
    		        time = startOfDate(this.year(), 0, 1);
    		        break;
    		      case 'quarter':
    		        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
    		        break;
    		      case 'month':
    		        time = startOfDate(this.year(), this.month(), 1);
    		        break;
    		      case 'week':
    		        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
    		        break;
    		      case 'isoWeek':
    		        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
    		        break;
    		      case 'day':
    		      case 'date':
    		        time = startOfDate(this.year(), this.month(), this.date());
    		        break;
    		      case 'hour':
    		        time = this._d.valueOf();
    		        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
    		        break;
    		      case 'minute':
    		        time = this._d.valueOf();
    		        time -= mod$1(time, MS_PER_MINUTE);
    		        break;
    		      case 'second':
    		        time = this._d.valueOf();
    		        time -= mod$1(time, MS_PER_SECOND);
    		        break;
    		    }
    		    this._d.setTime(time);
    		    hooks.updateOffset(this, true);
    		    return this;
    		  }
    		  function endOf(units) {
    		    var time, startOfDate;
    		    units = normalizeUnits(units);
    		    if (units === undefined || units === 'millisecond' || !this.isValid()) {
    		      return this;
    		    }
    		    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
    		    switch (units) {
    		      case 'year':
    		        time = startOfDate(this.year() + 1, 0, 1) - 1;
    		        break;
    		      case 'quarter':
    		        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
    		        break;
    		      case 'month':
    		        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
    		        break;
    		      case 'week':
    		        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
    		        break;
    		      case 'isoWeek':
    		        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
    		        break;
    		      case 'day':
    		      case 'date':
    		        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
    		        break;
    		      case 'hour':
    		        time = this._d.valueOf();
    		        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
    		        break;
    		      case 'minute':
    		        time = this._d.valueOf();
    		        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
    		        break;
    		      case 'second':
    		        time = this._d.valueOf();
    		        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
    		        break;
    		    }
    		    this._d.setTime(time);
    		    hooks.updateOffset(this, true);
    		    return this;
    		  }
    		  function valueOf() {
    		    return this._d.valueOf() - (this._offset || 0) * 60000;
    		  }
    		  function unix() {
    		    return Math.floor(this.valueOf() / 1000);
    		  }
    		  function toDate() {
    		    return new Date(this.valueOf());
    		  }
    		  function toArray() {
    		    var m = this;
    		    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    		  }
    		  function toObject() {
    		    var m = this;
    		    return {
    		      years: m.year(),
    		      months: m.month(),
    		      date: m.date(),
    		      hours: m.hours(),
    		      minutes: m.minutes(),
    		      seconds: m.seconds(),
    		      milliseconds: m.milliseconds()
    		    };
    		  }
    		  function toJSON() {
    		    // new Date(NaN).toJSON() === null
    		    return this.isValid() ? this.toISOString() : null;
    		  }
    		  function isValid$2() {
    		    return isValid(this);
    		  }
    		  function parsingFlags() {
    		    return extend({}, getParsingFlags(this));
    		  }
    		  function invalidAt() {
    		    return getParsingFlags(this).overflow;
    		  }
    		  function creationData() {
    		    return {
    		      input: this._i,
    		      format: this._f,
    		      locale: this._locale,
    		      isUTC: this._isUTC,
    		      strict: this._strict
    		    };
    		  }
    		  addFormatToken('N', 0, 0, 'eraAbbr');
    		  addFormatToken('NN', 0, 0, 'eraAbbr');
    		  addFormatToken('NNN', 0, 0, 'eraAbbr');
    		  addFormatToken('NNNN', 0, 0, 'eraName');
    		  addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    		  addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    		  addFormatToken('y', ['yy', 2], 0, 'eraYear');
    		  addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    		  addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
    		  addRegexToken('N', matchEraAbbr);
    		  addRegexToken('NN', matchEraAbbr);
    		  addRegexToken('NNN', matchEraAbbr);
    		  addRegexToken('NNNN', matchEraName);
    		  addRegexToken('NNNNN', matchEraNarrow);
    		  addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
    		    var era = config._locale.erasParse(input, token, config._strict);
    		    if (era) {
    		      getParsingFlags(config).era = era;
    		    } else {
    		      getParsingFlags(config).invalidEra = input;
    		    }
    		  });
    		  addRegexToken('y', matchUnsigned);
    		  addRegexToken('yy', matchUnsigned);
    		  addRegexToken('yyy', matchUnsigned);
    		  addRegexToken('yyyy', matchUnsigned);
    		  addRegexToken('yo', matchEraYearOrdinal);
    		  addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    		  addParseToken(['yo'], function (input, array, config, token) {
    		    var match;
    		    if (config._locale._eraYearOrdinalRegex) {
    		      match = input.match(config._locale._eraYearOrdinalRegex);
    		    }
    		    if (config._locale.eraYearOrdinalParse) {
    		      array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
    		    } else {
    		      array[YEAR] = parseInt(input, 10);
    		    }
    		  });
    		  function localeEras(m, format) {
    		    var i,
    		      l,
    		      date,
    		      eras = this._eras || getLocale('en')._eras;
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      switch (typeof eras[i].since) {
    		        case 'string':
    		          // truncate time
    		          date = hooks(eras[i].since).startOf('day');
    		          eras[i].since = date.valueOf();
    		          break;
    		      }
    		      switch (typeof eras[i].until) {
    		        case 'undefined':
    		          eras[i].until = +Infinity;
    		          break;
    		        case 'string':
    		          // truncate time
    		          date = hooks(eras[i].until).startOf('day').valueOf();
    		          eras[i].until = date.valueOf();
    		          break;
    		      }
    		    }
    		    return eras;
    		  }
    		  function localeErasParse(eraName, format, strict) {
    		    var i,
    		      l,
    		      eras = this.eras(),
    		      name,
    		      abbr,
    		      narrow;
    		    eraName = eraName.toUpperCase();
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      name = eras[i].name.toUpperCase();
    		      abbr = eras[i].abbr.toUpperCase();
    		      narrow = eras[i].narrow.toUpperCase();
    		      if (strict) {
    		        switch (format) {
    		          case 'N':
    		          case 'NN':
    		          case 'NNN':
    		            if (abbr === eraName) {
    		              return eras[i];
    		            }
    		            break;
    		          case 'NNNN':
    		            if (name === eraName) {
    		              return eras[i];
    		            }
    		            break;
    		          case 'NNNNN':
    		            if (narrow === eraName) {
    		              return eras[i];
    		            }
    		            break;
    		        }
    		      } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
    		        return eras[i];
    		      }
    		    }
    		  }
    		  function localeErasConvertYear(era, year) {
    		    var dir = era.since <= era.until ? +1 : -1;
    		    if (year === undefined) {
    		      return hooks(era.since).year();
    		    } else {
    		      return hooks(era.since).year() + (year - era.offset) * dir;
    		    }
    		  }
    		  function getEraName() {
    		    var i,
    		      l,
    		      val,
    		      eras = this.localeData().eras();
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      // truncate time
    		      val = this.clone().startOf('day').valueOf();
    		      if (eras[i].since <= val && val <= eras[i].until) {
    		        return eras[i].name;
    		      }
    		      if (eras[i].until <= val && val <= eras[i].since) {
    		        return eras[i].name;
    		      }
    		    }
    		    return '';
    		  }
    		  function getEraNarrow() {
    		    var i,
    		      l,
    		      val,
    		      eras = this.localeData().eras();
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      // truncate time
    		      val = this.clone().startOf('day').valueOf();
    		      if (eras[i].since <= val && val <= eras[i].until) {
    		        return eras[i].narrow;
    		      }
    		      if (eras[i].until <= val && val <= eras[i].since) {
    		        return eras[i].narrow;
    		      }
    		    }
    		    return '';
    		  }
    		  function getEraAbbr() {
    		    var i,
    		      l,
    		      val,
    		      eras = this.localeData().eras();
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      // truncate time
    		      val = this.clone().startOf('day').valueOf();
    		      if (eras[i].since <= val && val <= eras[i].until) {
    		        return eras[i].abbr;
    		      }
    		      if (eras[i].until <= val && val <= eras[i].since) {
    		        return eras[i].abbr;
    		      }
    		    }
    		    return '';
    		  }
    		  function getEraYear() {
    		    var i,
    		      l,
    		      dir,
    		      val,
    		      eras = this.localeData().eras();
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      dir = eras[i].since <= eras[i].until ? +1 : -1;

    		      // truncate time
    		      val = this.clone().startOf('day').valueOf();
    		      if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
    		        return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    		      }
    		    }
    		    return this.year();
    		  }
    		  function erasNameRegex(isStrict) {
    		    if (!hasOwnProp(this, '_erasNameRegex')) {
    		      computeErasParse.call(this);
    		    }
    		    return isStrict ? this._erasNameRegex : this._erasRegex;
    		  }
    		  function erasAbbrRegex(isStrict) {
    		    if (!hasOwnProp(this, '_erasAbbrRegex')) {
    		      computeErasParse.call(this);
    		    }
    		    return isStrict ? this._erasAbbrRegex : this._erasRegex;
    		  }
    		  function erasNarrowRegex(isStrict) {
    		    if (!hasOwnProp(this, '_erasNarrowRegex')) {
    		      computeErasParse.call(this);
    		    }
    		    return isStrict ? this._erasNarrowRegex : this._erasRegex;
    		  }
    		  function matchEraAbbr(isStrict, locale) {
    		    return locale.erasAbbrRegex(isStrict);
    		  }
    		  function matchEraName(isStrict, locale) {
    		    return locale.erasNameRegex(isStrict);
    		  }
    		  function matchEraNarrow(isStrict, locale) {
    		    return locale.erasNarrowRegex(isStrict);
    		  }
    		  function matchEraYearOrdinal(isStrict, locale) {
    		    return locale._eraYearOrdinalRegex || matchUnsigned;
    		  }
    		  function computeErasParse() {
    		    var abbrPieces = [],
    		      namePieces = [],
    		      narrowPieces = [],
    		      mixedPieces = [],
    		      i,
    		      l,
    		      erasName,
    		      erasAbbr,
    		      erasNarrow,
    		      eras = this.eras();
    		    for (i = 0, l = eras.length; i < l; ++i) {
    		      erasName = regexEscape(eras[i].name);
    		      erasAbbr = regexEscape(eras[i].abbr);
    		      erasNarrow = regexEscape(eras[i].narrow);
    		      namePieces.push(erasName);
    		      abbrPieces.push(erasAbbr);
    		      narrowPieces.push(erasNarrow);
    		      mixedPieces.push(erasName);
    		      mixedPieces.push(erasAbbr);
    		      mixedPieces.push(erasNarrow);
    		    }
    		    this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    		    this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
    		    this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
    		    this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
    		  }

    		  // FORMATTING

    		  addFormatToken(0, ['gg', 2], 0, function () {
    		    return this.weekYear() % 100;
    		  });
    		  addFormatToken(0, ['GG', 2], 0, function () {
    		    return this.isoWeekYear() % 100;
    		  });
    		  function addWeekYearFormatToken(token, getter) {
    		    addFormatToken(0, [token, token.length], 0, getter);
    		  }
    		  addWeekYearFormatToken('gggg', 'weekYear');
    		  addWeekYearFormatToken('ggggg', 'weekYear');
    		  addWeekYearFormatToken('GGGG', 'isoWeekYear');
    		  addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    		  // ALIASES

    		  // PARSING

    		  addRegexToken('G', matchSigned);
    		  addRegexToken('g', matchSigned);
    		  addRegexToken('GG', match1to2, match2);
    		  addRegexToken('gg', match1to2, match2);
    		  addRegexToken('GGGG', match1to4, match4);
    		  addRegexToken('gggg', match1to4, match4);
    		  addRegexToken('GGGGG', match1to6, match6);
    		  addRegexToken('ggggg', match1to6, match6);
    		  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    		    week[token.substr(0, 2)] = toInt(input);
    		  });
    		  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    		    week[token] = hooks.parseTwoDigitYear(input);
    		  });

    		  // MOMENTS

    		  function getSetWeekYear(input) {
    		    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
    		  }
    		  function getSetISOWeekYear(input) {
    		    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    		  }
    		  function getISOWeeksInYear() {
    		    return weeksInYear(this.year(), 1, 4);
    		  }
    		  function getISOWeeksInISOWeekYear() {
    		    return weeksInYear(this.isoWeekYear(), 1, 4);
    		  }
    		  function getWeeksInYear() {
    		    var weekInfo = this.localeData()._week;
    		    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    		  }
    		  function getWeeksInWeekYear() {
    		    var weekInfo = this.localeData()._week;
    		    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    		  }
    		  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    		    var weeksTarget;
    		    if (input == null) {
    		      return weekOfYear(this, dow, doy).year;
    		    } else {
    		      weeksTarget = weeksInYear(input, dow, doy);
    		      if (week > weeksTarget) {
    		        week = weeksTarget;
    		      }
    		      return setWeekAll.call(this, input, week, weekday, dow, doy);
    		    }
    		  }
    		  function setWeekAll(weekYear, week, weekday, dow, doy) {
    		    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
    		      date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    		    this.year(date.getUTCFullYear());
    		    this.month(date.getUTCMonth());
    		    this.date(date.getUTCDate());
    		    return this;
    		  }

    		  // FORMATTING

    		  addFormatToken('Q', 0, 'Qo', 'quarter');

    		  // PARSING

    		  addRegexToken('Q', match1);
    		  addParseToken('Q', function (input, array) {
    		    array[MONTH] = (toInt(input) - 1) * 3;
    		  });

    		  // MOMENTS

    		  function getSetQuarter(input) {
    		    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    		  }

    		  // FORMATTING

    		  addFormatToken('D', ['DD', 2], 'Do', 'date');

    		  // PARSING

    		  addRegexToken('D', match1to2, match1to2NoLeadingZero);
    		  addRegexToken('DD', match1to2, match2);
    		  addRegexToken('Do', function (isStrict, locale) {
    		    // TODO: Remove "ordinalParse" fallback in next major release.
    		    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    		  });
    		  addParseToken(['D', 'DD'], DATE);
    		  addParseToken('Do', function (input, array) {
    		    array[DATE] = toInt(input.match(match1to2)[0]);
    		  });

    		  // MOMENTS

    		  var getSetDayOfMonth = makeGetSet('Date', true);

    		  // FORMATTING

    		  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    		  // PARSING

    		  addRegexToken('DDD', match1to3);
    		  addRegexToken('DDDD', match3);
    		  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    		    config._dayOfYear = toInt(input);
    		  });

    		  // HELPERS

    		  // MOMENTS

    		  function getSetDayOfYear(input) {
    		    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    		    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    		  }

    		  // FORMATTING

    		  addFormatToken('m', ['mm', 2], 0, 'minute');

    		  // PARSING

    		  addRegexToken('m', match1to2, match1to2HasZero);
    		  addRegexToken('mm', match1to2, match2);
    		  addParseToken(['m', 'mm'], MINUTE);

    		  // MOMENTS

    		  var getSetMinute = makeGetSet('Minutes', false);

    		  // FORMATTING

    		  addFormatToken('s', ['ss', 2], 0, 'second');

    		  // PARSING

    		  addRegexToken('s', match1to2, match1to2HasZero);
    		  addRegexToken('ss', match1to2, match2);
    		  addParseToken(['s', 'ss'], SECOND);

    		  // MOMENTS

    		  var getSetSecond = makeGetSet('Seconds', false);

    		  // FORMATTING

    		  addFormatToken('S', 0, 0, function () {
    		    return ~~(this.millisecond() / 100);
    		  });
    		  addFormatToken(0, ['SS', 2], 0, function () {
    		    return ~~(this.millisecond() / 10);
    		  });
    		  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    		  addFormatToken(0, ['SSSS', 4], 0, function () {
    		    return this.millisecond() * 10;
    		  });
    		  addFormatToken(0, ['SSSSS', 5], 0, function () {
    		    return this.millisecond() * 100;
    		  });
    		  addFormatToken(0, ['SSSSSS', 6], 0, function () {
    		    return this.millisecond() * 1000;
    		  });
    		  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    		    return this.millisecond() * 10000;
    		  });
    		  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    		    return this.millisecond() * 100000;
    		  });
    		  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    		    return this.millisecond() * 1000000;
    		  });

    		  // PARSING

    		  addRegexToken('S', match1to3, match1);
    		  addRegexToken('SS', match1to3, match2);
    		  addRegexToken('SSS', match1to3, match3);
    		  var token, getSetMillisecond;
    		  for (token = 'SSSS'; token.length <= 9; token += 'S') {
    		    addRegexToken(token, matchUnsigned);
    		  }
    		  function parseMs(input, array) {
    		    array[MILLISECOND] = toInt(('0.' + input) * 1000);
    		  }
    		  for (token = 'S'; token.length <= 9; token += 'S') {
    		    addParseToken(token, parseMs);
    		  }
    		  getSetMillisecond = makeGetSet('Milliseconds', false);

    		  // FORMATTING

    		  addFormatToken('z', 0, 0, 'zoneAbbr');
    		  addFormatToken('zz', 0, 0, 'zoneName');

    		  // MOMENTS

    		  function getZoneAbbr() {
    		    return this._isUTC ? 'UTC' : '';
    		  }
    		  function getZoneName() {
    		    return this._isUTC ? 'Coordinated Universal Time' : '';
    		  }
    		  var proto = Moment.prototype;
    		  proto.add = add;
    		  proto.calendar = calendar$1;
    		  proto.clone = clone;
    		  proto.diff = diff;
    		  proto.endOf = endOf;
    		  proto.format = format;
    		  proto.from = from;
    		  proto.fromNow = fromNow;
    		  proto.to = to;
    		  proto.toNow = toNow;
    		  proto.get = stringGet;
    		  proto.invalidAt = invalidAt;
    		  proto.isAfter = isAfter;
    		  proto.isBefore = isBefore;
    		  proto.isBetween = isBetween;
    		  proto.isSame = isSame;
    		  proto.isSameOrAfter = isSameOrAfter;
    		  proto.isSameOrBefore = isSameOrBefore;
    		  proto.isValid = isValid$2;
    		  proto.lang = lang;
    		  proto.locale = locale;
    		  proto.localeData = localeData;
    		  proto.max = prototypeMax;
    		  proto.min = prototypeMin;
    		  proto.parsingFlags = parsingFlags;
    		  proto.set = stringSet;
    		  proto.startOf = startOf;
    		  proto.subtract = subtract;
    		  proto.toArray = toArray;
    		  proto.toObject = toObject;
    		  proto.toDate = toDate;
    		  proto.toISOString = toISOString;
    		  proto.inspect = inspect;
    		  if (typeof Symbol !== 'undefined' && Symbol.for != null) {
    		    proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
    		      return 'Moment<' + this.format() + '>';
    		    };
    		  }
    		  proto.toJSON = toJSON;
    		  proto.toString = toString;
    		  proto.unix = unix;
    		  proto.valueOf = valueOf;
    		  proto.creationData = creationData;
    		  proto.eraName = getEraName;
    		  proto.eraNarrow = getEraNarrow;
    		  proto.eraAbbr = getEraAbbr;
    		  proto.eraYear = getEraYear;
    		  proto.year = getSetYear;
    		  proto.isLeapYear = getIsLeapYear;
    		  proto.weekYear = getSetWeekYear;
    		  proto.isoWeekYear = getSetISOWeekYear;
    		  proto.quarter = proto.quarters = getSetQuarter;
    		  proto.month = getSetMonth;
    		  proto.daysInMonth = getDaysInMonth;
    		  proto.week = proto.weeks = getSetWeek;
    		  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    		  proto.weeksInYear = getWeeksInYear;
    		  proto.weeksInWeekYear = getWeeksInWeekYear;
    		  proto.isoWeeksInYear = getISOWeeksInYear;
    		  proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    		  proto.date = getSetDayOfMonth;
    		  proto.day = proto.days = getSetDayOfWeek;
    		  proto.weekday = getSetLocaleDayOfWeek;
    		  proto.isoWeekday = getSetISODayOfWeek;
    		  proto.dayOfYear = getSetDayOfYear;
    		  proto.hour = proto.hours = getSetHour;
    		  proto.minute = proto.minutes = getSetMinute;
    		  proto.second = proto.seconds = getSetSecond;
    		  proto.millisecond = proto.milliseconds = getSetMillisecond;
    		  proto.utcOffset = getSetOffset;
    		  proto.utc = setOffsetToUTC;
    		  proto.local = setOffsetToLocal;
    		  proto.parseZone = setOffsetToParsedOffset;
    		  proto.hasAlignedHourOffset = hasAlignedHourOffset;
    		  proto.isDST = isDaylightSavingTime;
    		  proto.isLocal = isLocal;
    		  proto.isUtcOffset = isUtcOffset;
    		  proto.isUtc = isUtc;
    		  proto.isUTC = isUtc;
    		  proto.zoneAbbr = getZoneAbbr;
    		  proto.zoneName = getZoneName;
    		  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    		  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    		  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    		  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    		  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    		  function createUnix(input) {
    		    return createLocal(input * 1000);
    		  }
    		  function createInZone() {
    		    return createLocal.apply(null, arguments).parseZone();
    		  }
    		  function preParsePostFormat(string) {
    		    return string;
    		  }
    		  var proto$1 = Locale.prototype;
    		  proto$1.calendar = calendar;
    		  proto$1.longDateFormat = longDateFormat;
    		  proto$1.invalidDate = invalidDate;
    		  proto$1.ordinal = ordinal;
    		  proto$1.preparse = preParsePostFormat;
    		  proto$1.postformat = preParsePostFormat;
    		  proto$1.relativeTime = relativeTime;
    		  proto$1.pastFuture = pastFuture;
    		  proto$1.set = set;
    		  proto$1.eras = localeEras;
    		  proto$1.erasParse = localeErasParse;
    		  proto$1.erasConvertYear = localeErasConvertYear;
    		  proto$1.erasAbbrRegex = erasAbbrRegex;
    		  proto$1.erasNameRegex = erasNameRegex;
    		  proto$1.erasNarrowRegex = erasNarrowRegex;
    		  proto$1.months = localeMonths;
    		  proto$1.monthsShort = localeMonthsShort;
    		  proto$1.monthsParse = localeMonthsParse;
    		  proto$1.monthsRegex = monthsRegex;
    		  proto$1.monthsShortRegex = monthsShortRegex;
    		  proto$1.week = localeWeek;
    		  proto$1.firstDayOfYear = localeFirstDayOfYear;
    		  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    		  proto$1.weekdays = localeWeekdays;
    		  proto$1.weekdaysMin = localeWeekdaysMin;
    		  proto$1.weekdaysShort = localeWeekdaysShort;
    		  proto$1.weekdaysParse = localeWeekdaysParse;
    		  proto$1.weekdaysRegex = weekdaysRegex;
    		  proto$1.weekdaysShortRegex = weekdaysShortRegex;
    		  proto$1.weekdaysMinRegex = weekdaysMinRegex;
    		  proto$1.isPM = localeIsPM;
    		  proto$1.meridiem = localeMeridiem;
    		  function get$1(format, index, field, setter) {
    		    var locale = getLocale(),
    		      utc = createUTC().set(setter, index);
    		    return locale[field](utc, format);
    		  }
    		  function listMonthsImpl(format, index, field) {
    		    if (isNumber(format)) {
    		      index = format;
    		      format = undefined;
    		    }
    		    format = format || '';
    		    if (index != null) {
    		      return get$1(format, index, field, 'month');
    		    }
    		    var i,
    		      out = [];
    		    for (i = 0; i < 12; i++) {
    		      out[i] = get$1(format, i, field, 'month');
    		    }
    		    return out;
    		  }

    		  // ()
    		  // (5)
    		  // (fmt, 5)
    		  // (fmt)
    		  // (true)
    		  // (true, 5)
    		  // (true, fmt, 5)
    		  // (true, fmt)
    		  function listWeekdaysImpl(localeSorted, format, index, field) {
    		    if (typeof localeSorted === 'boolean') {
    		      if (isNumber(format)) {
    		        index = format;
    		        format = undefined;
    		      }
    		      format = format || '';
    		    } else {
    		      format = localeSorted;
    		      index = format;
    		      localeSorted = false;
    		      if (isNumber(format)) {
    		        index = format;
    		        format = undefined;
    		      }
    		      format = format || '';
    		    }
    		    var locale = getLocale(),
    		      shift = localeSorted ? locale._week.dow : 0,
    		      i,
    		      out = [];
    		    if (index != null) {
    		      return get$1(format, (index + shift) % 7, field, 'day');
    		    }
    		    for (i = 0; i < 7; i++) {
    		      out[i] = get$1(format, (i + shift) % 7, field, 'day');
    		    }
    		    return out;
    		  }
    		  function listMonths(format, index) {
    		    return listMonthsImpl(format, index, 'months');
    		  }
    		  function listMonthsShort(format, index) {
    		    return listMonthsImpl(format, index, 'monthsShort');
    		  }
    		  function listWeekdays(localeSorted, format, index) {
    		    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    		  }
    		  function listWeekdaysShort(localeSorted, format, index) {
    		    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    		  }
    		  function listWeekdaysMin(localeSorted, format, index) {
    		    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    		  }
    		  getSetGlobalLocale('en', {
    		    eras: [{
    		      since: '0001-01-01',
    		      until: +Infinity,
    		      offset: 1,
    		      name: 'Anno Domini',
    		      narrow: 'AD',
    		      abbr: 'AD'
    		    }, {
    		      since: '0000-12-31',
    		      until: -Infinity,
    		      offset: 1,
    		      name: 'Before Christ',
    		      narrow: 'BC',
    		      abbr: 'BC'
    		    }],
    		    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    		    ordinal: function (number) {
    		      var b = number % 10,
    		        output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
    		      return number + output;
    		    }
    		  });

    		  // Side effect imports

    		  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    		  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    		  var mathAbs = Math.abs;
    		  function abs() {
    		    var data = this._data;
    		    this._milliseconds = mathAbs(this._milliseconds);
    		    this._days = mathAbs(this._days);
    		    this._months = mathAbs(this._months);
    		    data.milliseconds = mathAbs(data.milliseconds);
    		    data.seconds = mathAbs(data.seconds);
    		    data.minutes = mathAbs(data.minutes);
    		    data.hours = mathAbs(data.hours);
    		    data.months = mathAbs(data.months);
    		    data.years = mathAbs(data.years);
    		    return this;
    		  }
    		  function addSubtract$1(duration, input, value, direction) {
    		    var other = createDuration(input, value);
    		    duration._milliseconds += direction * other._milliseconds;
    		    duration._days += direction * other._days;
    		    duration._months += direction * other._months;
    		    return duration._bubble();
    		  }

    		  // supports only 2.0-style add(1, 's') or add(duration)
    		  function add$1(input, value) {
    		    return addSubtract$1(this, input, value, 1);
    		  }

    		  // supports only 2.0-style subtract(1, 's') or subtract(duration)
    		  function subtract$1(input, value) {
    		    return addSubtract$1(this, input, value, -1);
    		  }
    		  function absCeil(number) {
    		    if (number < 0) {
    		      return Math.floor(number);
    		    } else {
    		      return Math.ceil(number);
    		    }
    		  }
    		  function bubble() {
    		    var milliseconds = this._milliseconds,
    		      days = this._days,
    		      months = this._months,
    		      data = this._data,
    		      seconds,
    		      minutes,
    		      hours,
    		      years,
    		      monthsFromDays;

    		    // if we have a mix of positive and negative values, bubble down first
    		    // check: https://github.com/moment/moment/issues/2166
    		    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
    		      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
    		      days = 0;
    		      months = 0;
    		    }

    		    // The following code bubbles up values, see the tests for
    		    // examples of what that means.
    		    data.milliseconds = milliseconds % 1000;
    		    seconds = absFloor(milliseconds / 1000);
    		    data.seconds = seconds % 60;
    		    minutes = absFloor(seconds / 60);
    		    data.minutes = minutes % 60;
    		    hours = absFloor(minutes / 60);
    		    data.hours = hours % 24;
    		    days += absFloor(hours / 24);

    		    // convert days to months
    		    monthsFromDays = absFloor(daysToMonths(days));
    		    months += monthsFromDays;
    		    days -= absCeil(monthsToDays(monthsFromDays));

    		    // 12 months -> 1 year
    		    years = absFloor(months / 12);
    		    months %= 12;
    		    data.days = days;
    		    data.months = months;
    		    data.years = years;
    		    return this;
    		  }
    		  function daysToMonths(days) {
    		    // 400 years have 146097 days (taking into account leap year rules)
    		    // 400 years have 12 months === 4800
    		    return days * 4800 / 146097;
    		  }
    		  function monthsToDays(months) {
    		    // the reverse of daysToMonths
    		    return months * 146097 / 4800;
    		  }
    		  function as(units) {
    		    if (!this.isValid()) {
    		      return NaN;
    		    }
    		    var days,
    		      months,
    		      milliseconds = this._milliseconds;
    		    units = normalizeUnits(units);
    		    if (units === 'month' || units === 'quarter' || units === 'year') {
    		      days = this._days + milliseconds / 864e5;
    		      months = this._months + daysToMonths(days);
    		      switch (units) {
    		        case 'month':
    		          return months;
    		        case 'quarter':
    		          return months / 3;
    		        case 'year':
    		          return months / 12;
    		      }
    		    } else {
    		      // handle milliseconds separately because of floating point math errors (issue #1867)
    		      days = this._days + Math.round(monthsToDays(this._months));
    		      switch (units) {
    		        case 'week':
    		          return days / 7 + milliseconds / 6048e5;
    		        case 'day':
    		          return days + milliseconds / 864e5;
    		        case 'hour':
    		          return days * 24 + milliseconds / 36e5;
    		        case 'minute':
    		          return days * 1440 + milliseconds / 6e4;
    		        case 'second':
    		          return days * 86400 + milliseconds / 1000;
    		        // Math.floor prevents floating point math errors here
    		        case 'millisecond':
    		          return Math.floor(days * 864e5) + milliseconds;
    		        default:
    		          throw new Error('Unknown unit ' + units);
    		      }
    		    }
    		  }
    		  function makeAs(alias) {
    		    return function () {
    		      return this.as(alias);
    		    };
    		  }
    		  var asMilliseconds = makeAs('ms'),
    		    asSeconds = makeAs('s'),
    		    asMinutes = makeAs('m'),
    		    asHours = makeAs('h'),
    		    asDays = makeAs('d'),
    		    asWeeks = makeAs('w'),
    		    asMonths = makeAs('M'),
    		    asQuarters = makeAs('Q'),
    		    asYears = makeAs('y'),
    		    valueOf$1 = asMilliseconds;
    		  function clone$1() {
    		    return createDuration(this);
    		  }
    		  function get$2(units) {
    		    units = normalizeUnits(units);
    		    return this.isValid() ? this[units + 's']() : NaN;
    		  }
    		  function makeGetter(name) {
    		    return function () {
    		      return this.isValid() ? this._data[name] : NaN;
    		    };
    		  }
    		  var milliseconds = makeGetter('milliseconds'),
    		    seconds = makeGetter('seconds'),
    		    minutes = makeGetter('minutes'),
    		    hours = makeGetter('hours'),
    		    days = makeGetter('days'),
    		    months = makeGetter('months'),
    		    years = makeGetter('years');
    		  function weeks() {
    		    return absFloor(this.days() / 7);
    		  }
    		  var round = Math.round,
    		    thresholds = {
    		      ss: 44,
    		      // a few seconds to seconds
    		      s: 45,
    		      // seconds to minute
    		      m: 45,
    		      // minutes to hour
    		      h: 22,
    		      // hours to day
    		      d: 26,
    		      // days to month/week
    		      w: null,
    		      // weeks to month
    		      M: 11 // months to year
    		    };

    		  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    		  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    		    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    		  }
    		  function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
    		    var duration = createDuration(posNegDuration).abs(),
    		      seconds = round(duration.as('s')),
    		      minutes = round(duration.as('m')),
    		      hours = round(duration.as('h')),
    		      days = round(duration.as('d')),
    		      months = round(duration.as('M')),
    		      weeks = round(duration.as('w')),
    		      years = round(duration.as('y')),
    		      a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
    		    if (thresholds.w != null) {
    		      a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
    		    }
    		    a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
    		    a[2] = withoutSuffix;
    		    a[3] = +posNegDuration > 0;
    		    a[4] = locale;
    		    return substituteTimeAgo.apply(null, a);
    		  }

    		  // This function allows you to set the rounding function for relative time strings
    		  function getSetRelativeTimeRounding(roundingFunction) {
    		    if (roundingFunction === undefined) {
    		      return round;
    		    }
    		    if (typeof roundingFunction === 'function') {
    		      round = roundingFunction;
    		      return true;
    		    }
    		    return false;
    		  }

    		  // This function allows you to set a threshold for relative time strings
    		  function getSetRelativeTimeThreshold(threshold, limit) {
    		    if (thresholds[threshold] === undefined) {
    		      return false;
    		    }
    		    if (limit === undefined) {
    		      return thresholds[threshold];
    		    }
    		    thresholds[threshold] = limit;
    		    if (threshold === 's') {
    		      thresholds.ss = limit - 1;
    		    }
    		    return true;
    		  }
    		  function humanize(argWithSuffix, argThresholds) {
    		    if (!this.isValid()) {
    		      return this.localeData().invalidDate();
    		    }
    		    var withSuffix = false,
    		      th = thresholds,
    		      locale,
    		      output;
    		    if (typeof argWithSuffix === 'object') {
    		      argThresholds = argWithSuffix;
    		      argWithSuffix = false;
    		    }
    		    if (typeof argWithSuffix === 'boolean') {
    		      withSuffix = argWithSuffix;
    		    }
    		    if (typeof argThresholds === 'object') {
    		      th = Object.assign({}, thresholds, argThresholds);
    		      if (argThresholds.s != null && argThresholds.ss == null) {
    		        th.ss = argThresholds.s - 1;
    		      }
    		    }
    		    locale = this.localeData();
    		    output = relativeTime$1(this, !withSuffix, th, locale);
    		    if (withSuffix) {
    		      output = locale.pastFuture(+this, output);
    		    }
    		    return locale.postformat(output);
    		  }
    		  var abs$1 = Math.abs;
    		  function sign(x) {
    		    return (x > 0) - (x < 0) || +x;
    		  }
    		  function toISOString$1() {
    		    // for ISO strings we do not use the normal bubbling rules:
    		    //  * milliseconds bubble up until they become hours
    		    //  * days do not bubble at all
    		    //  * months bubble up until they become years
    		    // This is because there is no context-free conversion between hours and days
    		    // (think of clock changes)
    		    // and also not between days and months (28-31 days per month)
    		    if (!this.isValid()) {
    		      return this.localeData().invalidDate();
    		    }
    		    var seconds = abs$1(this._milliseconds) / 1000,
    		      days = abs$1(this._days),
    		      months = abs$1(this._months),
    		      minutes,
    		      hours,
    		      years,
    		      s,
    		      total = this.asSeconds(),
    		      totalSign,
    		      ymSign,
    		      daysSign,
    		      hmsSign;
    		    if (!total) {
    		      // this is the same as C#'s (Noda) and python (isodate)...
    		      // but not other JS (goog.date)
    		      return 'P0D';
    		    }

    		    // 3600 seconds -> 60 minutes -> 1 hour
    		    minutes = absFloor(seconds / 60);
    		    hours = absFloor(minutes / 60);
    		    seconds %= 60;
    		    minutes %= 60;

    		    // 12 months -> 1 year
    		    years = absFloor(months / 12);
    		    months %= 12;

    		    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    		    s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    		    totalSign = total < 0 ? '-' : '';
    		    ymSign = sign(this._months) !== sign(total) ? '-' : '';
    		    daysSign = sign(this._days) !== sign(total) ? '-' : '';
    		    hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
    		    return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
    		  }
    		  var proto$2 = Duration.prototype;
    		  proto$2.isValid = isValid$1;
    		  proto$2.abs = abs;
    		  proto$2.add = add$1;
    		  proto$2.subtract = subtract$1;
    		  proto$2.as = as;
    		  proto$2.asMilliseconds = asMilliseconds;
    		  proto$2.asSeconds = asSeconds;
    		  proto$2.asMinutes = asMinutes;
    		  proto$2.asHours = asHours;
    		  proto$2.asDays = asDays;
    		  proto$2.asWeeks = asWeeks;
    		  proto$2.asMonths = asMonths;
    		  proto$2.asQuarters = asQuarters;
    		  proto$2.asYears = asYears;
    		  proto$2.valueOf = valueOf$1;
    		  proto$2._bubble = bubble;
    		  proto$2.clone = clone$1;
    		  proto$2.get = get$2;
    		  proto$2.milliseconds = milliseconds;
    		  proto$2.seconds = seconds;
    		  proto$2.minutes = minutes;
    		  proto$2.hours = hours;
    		  proto$2.days = days;
    		  proto$2.weeks = weeks;
    		  proto$2.months = months;
    		  proto$2.years = years;
    		  proto$2.humanize = humanize;
    		  proto$2.toISOString = toISOString$1;
    		  proto$2.toString = toISOString$1;
    		  proto$2.toJSON = toISOString$1;
    		  proto$2.locale = locale;
    		  proto$2.localeData = localeData;
    		  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    		  proto$2.lang = lang;

    		  // FORMATTING

    		  addFormatToken('X', 0, 0, 'unix');
    		  addFormatToken('x', 0, 0, 'valueOf');

    		  // PARSING

    		  addRegexToken('x', matchSigned);
    		  addRegexToken('X', matchTimestamp);
    		  addParseToken('X', function (input, array, config) {
    		    config._d = new Date(parseFloat(input) * 1000);
    		  });
    		  addParseToken('x', function (input, array, config) {
    		    config._d = new Date(toInt(input));
    		  });

    		  //! moment.js

    		  hooks.version = '2.30.1';
    		  setHookCallback(createLocal);
    		  hooks.fn = proto;
    		  hooks.min = min;
    		  hooks.max = max;
    		  hooks.now = now;
    		  hooks.utc = createUTC;
    		  hooks.unix = createUnix;
    		  hooks.months = listMonths;
    		  hooks.isDate = isDate;
    		  hooks.locale = getSetGlobalLocale;
    		  hooks.invalid = createInvalid;
    		  hooks.duration = createDuration;
    		  hooks.isMoment = isMoment;
    		  hooks.weekdays = listWeekdays;
    		  hooks.parseZone = createInZone;
    		  hooks.localeData = getLocale;
    		  hooks.isDuration = isDuration;
    		  hooks.monthsShort = listMonthsShort;
    		  hooks.weekdaysMin = listWeekdaysMin;
    		  hooks.defineLocale = defineLocale;
    		  hooks.updateLocale = updateLocale;
    		  hooks.locales = listLocales;
    		  hooks.weekdaysShort = listWeekdaysShort;
    		  hooks.normalizeUnits = normalizeUnits;
    		  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    		  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    		  hooks.calendarFormat = getCalendarFormat;
    		  hooks.prototype = proto;

    		  // currently HTML5 input type only supports 24-hour formats
    		  hooks.HTML5_FMT = {
    		    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
    		    // <input type="datetime-local" />
    		    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
    		    // <input type="datetime-local" step="1" />
    		    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
    		    // <input type="datetime-local" step="0.001" />
    		    DATE: 'YYYY-MM-DD',
    		    // <input type="date" />
    		    TIME: 'HH:mm',
    		    // <input type="time" />
    		    TIME_SECONDS: 'HH:mm:ss',
    		    // <input type="time" step="1" />
    		    TIME_MS: 'HH:mm:ss.SSS',
    		    // <input type="time" step="0.001" />
    		    WEEK: 'GGGG-[W]WW',
    		    // <input type="week" />
    		    MONTH: 'YYYY-MM' // <input type="month" />
    		  };
    		  return hooks;
    		}); 
    	} (moment$1));
    	return moment$1.exports;
    }

    var generic = {};

    var lodash_isequal = {exports: {}};

    /**
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright JS Foundation and other contributors <https://js.foundation/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    lodash_isequal.exports;

    var hasRequiredLodash_isequal;

    function requireLodash_isequal () {
    	if (hasRequiredLodash_isequal) return lodash_isequal.exports;
    	hasRequiredLodash_isequal = 1;
    	(function (module, exports) {
    		/** Used as the size to enable large array optimizations. */
    		var LARGE_ARRAY_SIZE = 200;

    		/** Used to stand-in for `undefined` hash values. */
    		var HASH_UNDEFINED = '__lodash_hash_undefined__';

    		/** Used to compose bitmasks for value comparisons. */
    		var COMPARE_PARTIAL_FLAG = 1,
    		  COMPARE_UNORDERED_FLAG = 2;

    		/** Used as references for various `Number` constants. */
    		var MAX_SAFE_INTEGER = 9007199254740991;

    		/** `Object#toString` result references. */
    		var argsTag = '[object Arguments]',
    		  arrayTag = '[object Array]',
    		  asyncTag = '[object AsyncFunction]',
    		  boolTag = '[object Boolean]',
    		  dateTag = '[object Date]',
    		  errorTag = '[object Error]',
    		  funcTag = '[object Function]',
    		  genTag = '[object GeneratorFunction]',
    		  mapTag = '[object Map]',
    		  numberTag = '[object Number]',
    		  nullTag = '[object Null]',
    		  objectTag = '[object Object]',
    		  promiseTag = '[object Promise]',
    		  proxyTag = '[object Proxy]',
    		  regexpTag = '[object RegExp]',
    		  setTag = '[object Set]',
    		  stringTag = '[object String]',
    		  symbolTag = '[object Symbol]',
    		  undefinedTag = '[object Undefined]',
    		  weakMapTag = '[object WeakMap]';
    		var arrayBufferTag = '[object ArrayBuffer]',
    		  dataViewTag = '[object DataView]',
    		  float32Tag = '[object Float32Array]',
    		  float64Tag = '[object Float64Array]',
    		  int8Tag = '[object Int8Array]',
    		  int16Tag = '[object Int16Array]',
    		  int32Tag = '[object Int32Array]',
    		  uint8Tag = '[object Uint8Array]',
    		  uint8ClampedTag = '[object Uint8ClampedArray]',
    		  uint16Tag = '[object Uint16Array]',
    		  uint32Tag = '[object Uint32Array]';

    		/**
    		 * Used to match `RegExp`
    		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    		 */
    		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    		/** Used to detect host constructors (Safari). */
    		var reIsHostCtor = /^\[object .+?Constructor\]$/;

    		/** Used to detect unsigned integer values. */
    		var reIsUint = /^(?:0|[1-9]\d*)$/;

    		/** Used to identify `toStringTag` values of typed arrays. */
    		var typedArrayTags = {};
    		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    		typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    		/** Detect free variable `global` from Node.js. */
    		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    		/** Detect free variable `self`. */
    		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    		/** Used as a reference to the global object. */
    		var root = freeGlobal || freeSelf || Function('return this')();

    		/** Detect free variable `exports`. */
    		var freeExports = exports && !exports.nodeType && exports;

    		/** Detect free variable `module`. */
    		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    		/** Detect the popular CommonJS extension `module.exports`. */
    		var moduleExports = freeModule && freeModule.exports === freeExports;

    		/** Detect free variable `process` from Node.js. */
    		var freeProcess = moduleExports && freeGlobal.process;

    		/** Used to access faster Node.js helpers. */
    		var nodeUtil = function () {
    		  try {
    		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
    		  } catch (e) {}
    		}();

    		/* Node.js helper references. */
    		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    		/**
    		 * A specialized version of `_.filter` for arrays without support for
    		 * iteratee shorthands.
    		 *
    		 * @private
    		 * @param {Array} [array] The array to iterate over.
    		 * @param {Function} predicate The function invoked per iteration.
    		 * @returns {Array} Returns the new filtered array.
    		 */
    		function arrayFilter(array, predicate) {
    		  var index = -1,
    		    length = array == null ? 0 : array.length,
    		    resIndex = 0,
    		    result = [];
    		  while (++index < length) {
    		    var value = array[index];
    		    if (predicate(value, index, array)) {
    		      result[resIndex++] = value;
    		    }
    		  }
    		  return result;
    		}

    		/**
    		 * Appends the elements of `values` to `array`.
    		 *
    		 * @private
    		 * @param {Array} array The array to modify.
    		 * @param {Array} values The values to append.
    		 * @returns {Array} Returns `array`.
    		 */
    		function arrayPush(array, values) {
    		  var index = -1,
    		    length = values.length,
    		    offset = array.length;
    		  while (++index < length) {
    		    array[offset + index] = values[index];
    		  }
    		  return array;
    		}

    		/**
    		 * A specialized version of `_.some` for arrays without support for iteratee
    		 * shorthands.
    		 *
    		 * @private
    		 * @param {Array} [array] The array to iterate over.
    		 * @param {Function} predicate The function invoked per iteration.
    		 * @returns {boolean} Returns `true` if any element passes the predicate check,
    		 *  else `false`.
    		 */
    		function arraySome(array, predicate) {
    		  var index = -1,
    		    length = array == null ? 0 : array.length;
    		  while (++index < length) {
    		    if (predicate(array[index], index, array)) {
    		      return true;
    		    }
    		  }
    		  return false;
    		}

    		/**
    		 * The base implementation of `_.times` without support for iteratee shorthands
    		 * or max array length checks.
    		 *
    		 * @private
    		 * @param {number} n The number of times to invoke `iteratee`.
    		 * @param {Function} iteratee The function invoked per iteration.
    		 * @returns {Array} Returns the array of results.
    		 */
    		function baseTimes(n, iteratee) {
    		  var index = -1,
    		    result = Array(n);
    		  while (++index < n) {
    		    result[index] = iteratee(index);
    		  }
    		  return result;
    		}

    		/**
    		 * The base implementation of `_.unary` without support for storing metadata.
    		 *
    		 * @private
    		 * @param {Function} func The function to cap arguments for.
    		 * @returns {Function} Returns the new capped function.
    		 */
    		function baseUnary(func) {
    		  return function (value) {
    		    return func(value);
    		  };
    		}

    		/**
    		 * Checks if a `cache` value for `key` exists.
    		 *
    		 * @private
    		 * @param {Object} cache The cache to query.
    		 * @param {string} key The key of the entry to check.
    		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    		 */
    		function cacheHas(cache, key) {
    		  return cache.has(key);
    		}

    		/**
    		 * Gets the value at `key` of `object`.
    		 *
    		 * @private
    		 * @param {Object} [object] The object to query.
    		 * @param {string} key The key of the property to get.
    		 * @returns {*} Returns the property value.
    		 */
    		function getValue(object, key) {
    		  return object == null ? undefined : object[key];
    		}

    		/**
    		 * Converts `map` to its key-value pairs.
    		 *
    		 * @private
    		 * @param {Object} map The map to convert.
    		 * @returns {Array} Returns the key-value pairs.
    		 */
    		function mapToArray(map) {
    		  var index = -1,
    		    result = Array(map.size);
    		  map.forEach(function (value, key) {
    		    result[++index] = [key, value];
    		  });
    		  return result;
    		}

    		/**
    		 * Creates a unary function that invokes `func` with its argument transformed.
    		 *
    		 * @private
    		 * @param {Function} func The function to wrap.
    		 * @param {Function} transform The argument transform.
    		 * @returns {Function} Returns the new function.
    		 */
    		function overArg(func, transform) {
    		  return function (arg) {
    		    return func(transform(arg));
    		  };
    		}

    		/**
    		 * Converts `set` to an array of its values.
    		 *
    		 * @private
    		 * @param {Object} set The set to convert.
    		 * @returns {Array} Returns the values.
    		 */
    		function setToArray(set) {
    		  var index = -1,
    		    result = Array(set.size);
    		  set.forEach(function (value) {
    		    result[++index] = value;
    		  });
    		  return result;
    		}

    		/** Used for built-in method references. */
    		var arrayProto = Array.prototype,
    		  funcProto = Function.prototype,
    		  objectProto = Object.prototype;

    		/** Used to detect overreaching core-js shims. */
    		var coreJsData = root['__core-js_shared__'];

    		/** Used to resolve the decompiled source of functions. */
    		var funcToString = funcProto.toString;

    		/** Used to check objects for own properties. */
    		var hasOwnProperty = objectProto.hasOwnProperty;

    		/** Used to detect methods masquerading as native. */
    		var maskSrcKey = function () {
    		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    		  return uid ? 'Symbol(src)_1.' + uid : '';
    		}();

    		/**
    		 * Used to resolve the
    		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    		 * of values.
    		 */
    		var nativeObjectToString = objectProto.toString;

    		/** Used to detect if a method is native. */
    		var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

    		/** Built-in value references. */
    		var Buffer = moduleExports ? root.Buffer : undefined,
    		  Symbol = root.Symbol,
    		  Uint8Array = root.Uint8Array,
    		  propertyIsEnumerable = objectProto.propertyIsEnumerable,
    		  splice = arrayProto.splice,
    		  symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    		/* Built-in method references for those with the same name as other `lodash` methods. */
    		var nativeGetSymbols = Object.getOwnPropertySymbols,
    		  nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    		  nativeKeys = overArg(Object.keys, Object);

    		/* Built-in method references that are verified to be native. */
    		var DataView = getNative(root, 'DataView'),
    		  Map = getNative(root, 'Map'),
    		  Promise = getNative(root, 'Promise'),
    		  Set = getNative(root, 'Set'),
    		  WeakMap = getNative(root, 'WeakMap'),
    		  nativeCreate = getNative(Object, 'create');

    		/** Used to detect maps, sets, and weakmaps. */
    		var dataViewCtorString = toSource(DataView),
    		  mapCtorString = toSource(Map),
    		  promiseCtorString = toSource(Promise),
    		  setCtorString = toSource(Set),
    		  weakMapCtorString = toSource(WeakMap);

    		/** Used to convert symbols to primitives and strings. */
    		var symbolProto = Symbol ? Symbol.prototype : undefined,
    		  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    		/**
    		 * Creates a hash object.
    		 *
    		 * @private
    		 * @constructor
    		 * @param {Array} [entries] The key-value pairs to cache.
    		 */
    		function Hash(entries) {
    		  var index = -1,
    		    length = entries == null ? 0 : entries.length;
    		  this.clear();
    		  while (++index < length) {
    		    var entry = entries[index];
    		    this.set(entry[0], entry[1]);
    		  }
    		}

    		/**
    		 * Removes all key-value entries from the hash.
    		 *
    		 * @private
    		 * @name clear
    		 * @memberOf Hash
    		 */
    		function hashClear() {
    		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
    		  this.size = 0;
    		}

    		/**
    		 * Removes `key` and its value from the hash.
    		 *
    		 * @private
    		 * @name delete
    		 * @memberOf Hash
    		 * @param {Object} hash The hash to modify.
    		 * @param {string} key The key of the value to remove.
    		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    		 */
    		function hashDelete(key) {
    		  var result = this.has(key) && delete this.__data__[key];
    		  this.size -= result ? 1 : 0;
    		  return result;
    		}

    		/**
    		 * Gets the hash value for `key`.
    		 *
    		 * @private
    		 * @name get
    		 * @memberOf Hash
    		 * @param {string} key The key of the value to get.
    		 * @returns {*} Returns the entry value.
    		 */
    		function hashGet(key) {
    		  var data = this.__data__;
    		  if (nativeCreate) {
    		    var result = data[key];
    		    return result === HASH_UNDEFINED ? undefined : result;
    		  }
    		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
    		}

    		/**
    		 * Checks if a hash value for `key` exists.
    		 *
    		 * @private
    		 * @name has
    		 * @memberOf Hash
    		 * @param {string} key The key of the entry to check.
    		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    		 */
    		function hashHas(key) {
    		  var data = this.__data__;
    		  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    		}

    		/**
    		 * Sets the hash `key` to `value`.
    		 *
    		 * @private
    		 * @name set
    		 * @memberOf Hash
    		 * @param {string} key The key of the value to set.
    		 * @param {*} value The value to set.
    		 * @returns {Object} Returns the hash instance.
    		 */
    		function hashSet(key, value) {
    		  var data = this.__data__;
    		  this.size += this.has(key) ? 0 : 1;
    		  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    		  return this;
    		}

    		// Add methods to `Hash`.
    		Hash.prototype.clear = hashClear;
    		Hash.prototype['delete'] = hashDelete;
    		Hash.prototype.get = hashGet;
    		Hash.prototype.has = hashHas;
    		Hash.prototype.set = hashSet;

    		/**
    		 * Creates an list cache object.
    		 *
    		 * @private
    		 * @constructor
    		 * @param {Array} [entries] The key-value pairs to cache.
    		 */
    		function ListCache(entries) {
    		  var index = -1,
    		    length = entries == null ? 0 : entries.length;
    		  this.clear();
    		  while (++index < length) {
    		    var entry = entries[index];
    		    this.set(entry[0], entry[1]);
    		  }
    		}

    		/**
    		 * Removes all key-value entries from the list cache.
    		 *
    		 * @private
    		 * @name clear
    		 * @memberOf ListCache
    		 */
    		function listCacheClear() {
    		  this.__data__ = [];
    		  this.size = 0;
    		}

    		/**
    		 * Removes `key` and its value from the list cache.
    		 *
    		 * @private
    		 * @name delete
    		 * @memberOf ListCache
    		 * @param {string} key The key of the value to remove.
    		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    		 */
    		function listCacheDelete(key) {
    		  var data = this.__data__,
    		    index = assocIndexOf(data, key);
    		  if (index < 0) {
    		    return false;
    		  }
    		  var lastIndex = data.length - 1;
    		  if (index == lastIndex) {
    		    data.pop();
    		  } else {
    		    splice.call(data, index, 1);
    		  }
    		  --this.size;
    		  return true;
    		}

    		/**
    		 * Gets the list cache value for `key`.
    		 *
    		 * @private
    		 * @name get
    		 * @memberOf ListCache
    		 * @param {string} key The key of the value to get.
    		 * @returns {*} Returns the entry value.
    		 */
    		function listCacheGet(key) {
    		  var data = this.__data__,
    		    index = assocIndexOf(data, key);
    		  return index < 0 ? undefined : data[index][1];
    		}

    		/**
    		 * Checks if a list cache value for `key` exists.
    		 *
    		 * @private
    		 * @name has
    		 * @memberOf ListCache
    		 * @param {string} key The key of the entry to check.
    		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    		 */
    		function listCacheHas(key) {
    		  return assocIndexOf(this.__data__, key) > -1;
    		}

    		/**
    		 * Sets the list cache `key` to `value`.
    		 *
    		 * @private
    		 * @name set
    		 * @memberOf ListCache
    		 * @param {string} key The key of the value to set.
    		 * @param {*} value The value to set.
    		 * @returns {Object} Returns the list cache instance.
    		 */
    		function listCacheSet(key, value) {
    		  var data = this.__data__,
    		    index = assocIndexOf(data, key);
    		  if (index < 0) {
    		    ++this.size;
    		    data.push([key, value]);
    		  } else {
    		    data[index][1] = value;
    		  }
    		  return this;
    		}

    		// Add methods to `ListCache`.
    		ListCache.prototype.clear = listCacheClear;
    		ListCache.prototype['delete'] = listCacheDelete;
    		ListCache.prototype.get = listCacheGet;
    		ListCache.prototype.has = listCacheHas;
    		ListCache.prototype.set = listCacheSet;

    		/**
    		 * Creates a map cache object to store key-value pairs.
    		 *
    		 * @private
    		 * @constructor
    		 * @param {Array} [entries] The key-value pairs to cache.
    		 */
    		function MapCache(entries) {
    		  var index = -1,
    		    length = entries == null ? 0 : entries.length;
    		  this.clear();
    		  while (++index < length) {
    		    var entry = entries[index];
    		    this.set(entry[0], entry[1]);
    		  }
    		}

    		/**
    		 * Removes all key-value entries from the map.
    		 *
    		 * @private
    		 * @name clear
    		 * @memberOf MapCache
    		 */
    		function mapCacheClear() {
    		  this.size = 0;
    		  this.__data__ = {
    		    'hash': new Hash(),
    		    'map': new (Map || ListCache)(),
    		    'string': new Hash()
    		  };
    		}

    		/**
    		 * Removes `key` and its value from the map.
    		 *
    		 * @private
    		 * @name delete
    		 * @memberOf MapCache
    		 * @param {string} key The key of the value to remove.
    		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    		 */
    		function mapCacheDelete(key) {
    		  var result = getMapData(this, key)['delete'](key);
    		  this.size -= result ? 1 : 0;
    		  return result;
    		}

    		/**
    		 * Gets the map value for `key`.
    		 *
    		 * @private
    		 * @name get
    		 * @memberOf MapCache
    		 * @param {string} key The key of the value to get.
    		 * @returns {*} Returns the entry value.
    		 */
    		function mapCacheGet(key) {
    		  return getMapData(this, key).get(key);
    		}

    		/**
    		 * Checks if a map value for `key` exists.
    		 *
    		 * @private
    		 * @name has
    		 * @memberOf MapCache
    		 * @param {string} key The key of the entry to check.
    		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    		 */
    		function mapCacheHas(key) {
    		  return getMapData(this, key).has(key);
    		}

    		/**
    		 * Sets the map `key` to `value`.
    		 *
    		 * @private
    		 * @name set
    		 * @memberOf MapCache
    		 * @param {string} key The key of the value to set.
    		 * @param {*} value The value to set.
    		 * @returns {Object} Returns the map cache instance.
    		 */
    		function mapCacheSet(key, value) {
    		  var data = getMapData(this, key),
    		    size = data.size;
    		  data.set(key, value);
    		  this.size += data.size == size ? 0 : 1;
    		  return this;
    		}

    		// Add methods to `MapCache`.
    		MapCache.prototype.clear = mapCacheClear;
    		MapCache.prototype['delete'] = mapCacheDelete;
    		MapCache.prototype.get = mapCacheGet;
    		MapCache.prototype.has = mapCacheHas;
    		MapCache.prototype.set = mapCacheSet;

    		/**
    		 *
    		 * Creates an array cache object to store unique values.
    		 *
    		 * @private
    		 * @constructor
    		 * @param {Array} [values] The values to cache.
    		 */
    		function SetCache(values) {
    		  var index = -1,
    		    length = values == null ? 0 : values.length;
    		  this.__data__ = new MapCache();
    		  while (++index < length) {
    		    this.add(values[index]);
    		  }
    		}

    		/**
    		 * Adds `value` to the array cache.
    		 *
    		 * @private
    		 * @name add
    		 * @memberOf SetCache
    		 * @alias push
    		 * @param {*} value The value to cache.
    		 * @returns {Object} Returns the cache instance.
    		 */
    		function setCacheAdd(value) {
    		  this.__data__.set(value, HASH_UNDEFINED);
    		  return this;
    		}

    		/**
    		 * Checks if `value` is in the array cache.
    		 *
    		 * @private
    		 * @name has
    		 * @memberOf SetCache
    		 * @param {*} value The value to search for.
    		 * @returns {number} Returns `true` if `value` is found, else `false`.
    		 */
    		function setCacheHas(value) {
    		  return this.__data__.has(value);
    		}

    		// Add methods to `SetCache`.
    		SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    		SetCache.prototype.has = setCacheHas;

    		/**
    		 * Creates a stack cache object to store key-value pairs.
    		 *
    		 * @private
    		 * @constructor
    		 * @param {Array} [entries] The key-value pairs to cache.
    		 */
    		function Stack(entries) {
    		  var data = this.__data__ = new ListCache(entries);
    		  this.size = data.size;
    		}

    		/**
    		 * Removes all key-value entries from the stack.
    		 *
    		 * @private
    		 * @name clear
    		 * @memberOf Stack
    		 */
    		function stackClear() {
    		  this.__data__ = new ListCache();
    		  this.size = 0;
    		}

    		/**
    		 * Removes `key` and its value from the stack.
    		 *
    		 * @private
    		 * @name delete
    		 * @memberOf Stack
    		 * @param {string} key The key of the value to remove.
    		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    		 */
    		function stackDelete(key) {
    		  var data = this.__data__,
    		    result = data['delete'](key);
    		  this.size = data.size;
    		  return result;
    		}

    		/**
    		 * Gets the stack value for `key`.
    		 *
    		 * @private
    		 * @name get
    		 * @memberOf Stack
    		 * @param {string} key The key of the value to get.
    		 * @returns {*} Returns the entry value.
    		 */
    		function stackGet(key) {
    		  return this.__data__.get(key);
    		}

    		/**
    		 * Checks if a stack value for `key` exists.
    		 *
    		 * @private
    		 * @name has
    		 * @memberOf Stack
    		 * @param {string} key The key of the entry to check.
    		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    		 */
    		function stackHas(key) {
    		  return this.__data__.has(key);
    		}

    		/**
    		 * Sets the stack `key` to `value`.
    		 *
    		 * @private
    		 * @name set
    		 * @memberOf Stack
    		 * @param {string} key The key of the value to set.
    		 * @param {*} value The value to set.
    		 * @returns {Object} Returns the stack cache instance.
    		 */
    		function stackSet(key, value) {
    		  var data = this.__data__;
    		  if (data instanceof ListCache) {
    		    var pairs = data.__data__;
    		    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
    		      pairs.push([key, value]);
    		      this.size = ++data.size;
    		      return this;
    		    }
    		    data = this.__data__ = new MapCache(pairs);
    		  }
    		  data.set(key, value);
    		  this.size = data.size;
    		  return this;
    		}

    		// Add methods to `Stack`.
    		Stack.prototype.clear = stackClear;
    		Stack.prototype['delete'] = stackDelete;
    		Stack.prototype.get = stackGet;
    		Stack.prototype.has = stackHas;
    		Stack.prototype.set = stackSet;

    		/**
    		 * Creates an array of the enumerable property names of the array-like `value`.
    		 *
    		 * @private
    		 * @param {*} value The value to query.
    		 * @param {boolean} inherited Specify returning inherited property names.
    		 * @returns {Array} Returns the array of property names.
    		 */
    		function arrayLikeKeys(value, inherited) {
    		  var isArr = isArray(value),
    		    isArg = !isArr && isArguments(value),
    		    isBuff = !isArr && !isArg && isBuffer(value),
    		    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    		    skipIndexes = isArr || isArg || isBuff || isType,
    		    result = skipIndexes ? baseTimes(value.length, String) : [],
    		    length = result.length;
    		  for (var key in value) {
    		    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    		    // Safari 9 has enumerable `arguments.length` in strict mode.
    		    key == 'length' ||
    		    // Node.js 0.10 has enumerable non-index properties on buffers.
    		    isBuff && (key == 'offset' || key == 'parent') ||
    		    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    		    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    		    // Skip index properties.
    		    isIndex(key, length)))) {
    		      result.push(key);
    		    }
    		  }
    		  return result;
    		}

    		/**
    		 * Gets the index at which the `key` is found in `array` of key-value pairs.
    		 *
    		 * @private
    		 * @param {Array} array The array to inspect.
    		 * @param {*} key The key to search for.
    		 * @returns {number} Returns the index of the matched value, else `-1`.
    		 */
    		function assocIndexOf(array, key) {
    		  var length = array.length;
    		  while (length--) {
    		    if (eq(array[length][0], key)) {
    		      return length;
    		    }
    		  }
    		  return -1;
    		}

    		/**
    		 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    		 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    		 * symbols of `object`.
    		 *
    		 * @private
    		 * @param {Object} object The object to query.
    		 * @param {Function} keysFunc The function to get the keys of `object`.
    		 * @param {Function} symbolsFunc The function to get the symbols of `object`.
    		 * @returns {Array} Returns the array of property names and symbols.
    		 */
    		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    		  var result = keysFunc(object);
    		  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    		}

    		/**
    		 * The base implementation of `getTag` without fallbacks for buggy environments.
    		 *
    		 * @private
    		 * @param {*} value The value to query.
    		 * @returns {string} Returns the `toStringTag`.
    		 */
    		function baseGetTag(value) {
    		  if (value == null) {
    		    return value === undefined ? undefinedTag : nullTag;
    		  }
    		  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    		}

    		/**
    		 * The base implementation of `_.isArguments`.
    		 *
    		 * @private
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    		 */
    		function baseIsArguments(value) {
    		  return isObjectLike(value) && baseGetTag(value) == argsTag;
    		}

    		/**
    		 * The base implementation of `_.isEqual` which supports partial comparisons
    		 * and tracks traversed objects.
    		 *
    		 * @private
    		 * @param {*} value The value to compare.
    		 * @param {*} other The other value to compare.
    		 * @param {boolean} bitmask The bitmask flags.
    		 *  1 - Unordered comparison
    		 *  2 - Partial comparison
    		 * @param {Function} [customizer] The function to customize comparisons.
    		 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    		 */
    		function baseIsEqual(value, other, bitmask, customizer, stack) {
    		  if (value === other) {
    		    return true;
    		  }
    		  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    		    return value !== value && other !== other;
    		  }
    		  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    		}

    		/**
    		 * A specialized version of `baseIsEqual` for arrays and objects which performs
    		 * deep comparisons and tracks traversed objects enabling objects with circular
    		 * references to be compared.
    		 *
    		 * @private
    		 * @param {Object} object The object to compare.
    		 * @param {Object} other The other object to compare.
    		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    		 * @param {Function} customizer The function to customize comparisons.
    		 * @param {Function} equalFunc The function to determine equivalents of values.
    		 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    		 */
    		function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    		  var objIsArr = isArray(object),
    		    othIsArr = isArray(other),
    		    objTag = objIsArr ? arrayTag : getTag(object),
    		    othTag = othIsArr ? arrayTag : getTag(other);
    		  objTag = objTag == argsTag ? objectTag : objTag;
    		  othTag = othTag == argsTag ? objectTag : othTag;
    		  var objIsObj = objTag == objectTag,
    		    othIsObj = othTag == objectTag,
    		    isSameTag = objTag == othTag;
    		  if (isSameTag && isBuffer(object)) {
    		    if (!isBuffer(other)) {
    		      return false;
    		    }
    		    objIsArr = true;
    		    objIsObj = false;
    		  }
    		  if (isSameTag && !objIsObj) {
    		    stack || (stack = new Stack());
    		    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    		  }
    		  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    		    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    		      othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
    		    if (objIsWrapped || othIsWrapped) {
    		      var objUnwrapped = objIsWrapped ? object.value() : object,
    		        othUnwrapped = othIsWrapped ? other.value() : other;
    		      stack || (stack = new Stack());
    		      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    		    }
    		  }
    		  if (!isSameTag) {
    		    return false;
    		  }
    		  stack || (stack = new Stack());
    		  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    		}

    		/**
    		 * The base implementation of `_.isNative` without bad shim checks.
    		 *
    		 * @private
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a native function,
    		 *  else `false`.
    		 */
    		function baseIsNative(value) {
    		  if (!isObject(value) || isMasked(value)) {
    		    return false;
    		  }
    		  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    		  return pattern.test(toSource(value));
    		}

    		/**
    		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
    		 *
    		 * @private
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    		 */
    		function baseIsTypedArray(value) {
    		  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    		}

    		/**
    		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    		 *
    		 * @private
    		 * @param {Object} object The object to query.
    		 * @returns {Array} Returns the array of property names.
    		 */
    		function baseKeys(object) {
    		  if (!isPrototype(object)) {
    		    return nativeKeys(object);
    		  }
    		  var result = [];
    		  for (var key in Object(object)) {
    		    if (hasOwnProperty.call(object, key) && key != 'constructor') {
    		      result.push(key);
    		    }
    		  }
    		  return result;
    		}

    		/**
    		 * A specialized version of `baseIsEqualDeep` for arrays with support for
    		 * partial deep comparisons.
    		 *
    		 * @private
    		 * @param {Array} array The array to compare.
    		 * @param {Array} other The other array to compare.
    		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    		 * @param {Function} customizer The function to customize comparisons.
    		 * @param {Function} equalFunc The function to determine equivalents of values.
    		 * @param {Object} stack Tracks traversed `array` and `other` objects.
    		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    		 */
    		function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    		  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    		    arrLength = array.length,
    		    othLength = other.length;
    		  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    		    return false;
    		  }
    		  // Assume cyclic values are equal.
    		  var stacked = stack.get(array);
    		  if (stacked && stack.get(other)) {
    		    return stacked == other;
    		  }
    		  var index = -1,
    		    result = true,
    		    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    		  stack.set(array, other);
    		  stack.set(other, array);

    		  // Ignore non-index properties.
    		  while (++index < arrLength) {
    		    var arrValue = array[index],
    		      othValue = other[index];
    		    if (customizer) {
    		      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    		    }
    		    if (compared !== undefined) {
    		      if (compared) {
    		        continue;
    		      }
    		      result = false;
    		      break;
    		    }
    		    // Recursively compare arrays (susceptible to call stack limits).
    		    if (seen) {
    		      if (!arraySome(other, function (othValue, othIndex) {
    		        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
    		          return seen.push(othIndex);
    		        }
    		      })) {
    		        result = false;
    		        break;
    		      }
    		    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
    		      result = false;
    		      break;
    		    }
    		  }
    		  stack['delete'](array);
    		  stack['delete'](other);
    		  return result;
    		}

    		/**
    		 * A specialized version of `baseIsEqualDeep` for comparing objects of
    		 * the same `toStringTag`.
    		 *
    		 * **Note:** This function only supports comparing values with tags of
    		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    		 *
    		 * @private
    		 * @param {Object} object The object to compare.
    		 * @param {Object} other The other object to compare.
    		 * @param {string} tag The `toStringTag` of the objects to compare.
    		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    		 * @param {Function} customizer The function to customize comparisons.
    		 * @param {Function} equalFunc The function to determine equivalents of values.
    		 * @param {Object} stack Tracks traversed `object` and `other` objects.
    		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    		 */
    		function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    		  switch (tag) {
    		    case dataViewTag:
    		      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
    		        return false;
    		      }
    		      object = object.buffer;
    		      other = other.buffer;
    		    case arrayBufferTag:
    		      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    		        return false;
    		      }
    		      return true;
    		    case boolTag:
    		    case dateTag:
    		    case numberTag:
    		      // Coerce booleans to `1` or `0` and dates to milliseconds.
    		      // Invalid dates are coerced to `NaN`.
    		      return eq(+object, +other);
    		    case errorTag:
    		      return object.name == other.name && object.message == other.message;
    		    case regexpTag:
    		    case stringTag:
    		      // Coerce regexes to strings and treat strings, primitives and objects,
    		      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
    		      // for more details.
    		      return object == other + '';
    		    case mapTag:
    		      var convert = mapToArray;
    		    case setTag:
    		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
    		      convert || (convert = setToArray);
    		      if (object.size != other.size && !isPartial) {
    		        return false;
    		      }
    		      // Assume cyclic values are equal.
    		      var stacked = stack.get(object);
    		      if (stacked) {
    		        return stacked == other;
    		      }
    		      bitmask |= COMPARE_UNORDERED_FLAG;

    		      // Recursively compare objects (susceptible to call stack limits).
    		      stack.set(object, other);
    		      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
    		      stack['delete'](object);
    		      return result;
    		    case symbolTag:
    		      if (symbolValueOf) {
    		        return symbolValueOf.call(object) == symbolValueOf.call(other);
    		      }
    		  }
    		  return false;
    		}

    		/**
    		 * A specialized version of `baseIsEqualDeep` for objects with support for
    		 * partial deep comparisons.
    		 *
    		 * @private
    		 * @param {Object} object The object to compare.
    		 * @param {Object} other The other object to compare.
    		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    		 * @param {Function} customizer The function to customize comparisons.
    		 * @param {Function} equalFunc The function to determine equivalents of values.
    		 * @param {Object} stack Tracks traversed `object` and `other` objects.
    		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    		 */
    		function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    		  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    		    objProps = getAllKeys(object),
    		    objLength = objProps.length,
    		    othProps = getAllKeys(other),
    		    othLength = othProps.length;
    		  if (objLength != othLength && !isPartial) {
    		    return false;
    		  }
    		  var index = objLength;
    		  while (index--) {
    		    var key = objProps[index];
    		    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
    		      return false;
    		    }
    		  }
    		  // Assume cyclic values are equal.
    		  var stacked = stack.get(object);
    		  if (stacked && stack.get(other)) {
    		    return stacked == other;
    		  }
    		  var result = true;
    		  stack.set(object, other);
    		  stack.set(other, object);
    		  var skipCtor = isPartial;
    		  while (++index < objLength) {
    		    key = objProps[index];
    		    var objValue = object[key],
    		      othValue = other[key];
    		    if (customizer) {
    		      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    		    }
    		    // Recursively compare objects (susceptible to call stack limits).
    		    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
    		      result = false;
    		      break;
    		    }
    		    skipCtor || (skipCtor = key == 'constructor');
    		  }
    		  if (result && !skipCtor) {
    		    var objCtor = object.constructor,
    		      othCtor = other.constructor;

    		    // Non `Object` object instances with different constructors are not equal.
    		    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    		      result = false;
    		    }
    		  }
    		  stack['delete'](object);
    		  stack['delete'](other);
    		  return result;
    		}

    		/**
    		 * Creates an array of own enumerable property names and symbols of `object`.
    		 *
    		 * @private
    		 * @param {Object} object The object to query.
    		 * @returns {Array} Returns the array of property names and symbols.
    		 */
    		function getAllKeys(object) {
    		  return baseGetAllKeys(object, keys, getSymbols);
    		}

    		/**
    		 * Gets the data for `map`.
    		 *
    		 * @private
    		 * @param {Object} map The map to query.
    		 * @param {string} key The reference key.
    		 * @returns {*} Returns the map data.
    		 */
    		function getMapData(map, key) {
    		  var data = map.__data__;
    		  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    		}

    		/**
    		 * Gets the native function at `key` of `object`.
    		 *
    		 * @private
    		 * @param {Object} object The object to query.
    		 * @param {string} key The key of the method to get.
    		 * @returns {*} Returns the function if it's native, else `undefined`.
    		 */
    		function getNative(object, key) {
    		  var value = getValue(object, key);
    		  return baseIsNative(value) ? value : undefined;
    		}

    		/**
    		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
    		 *
    		 * @private
    		 * @param {*} value The value to query.
    		 * @returns {string} Returns the raw `toStringTag`.
    		 */
    		function getRawTag(value) {
    		  var isOwn = hasOwnProperty.call(value, symToStringTag),
    		    tag = value[symToStringTag];
    		  try {
    		    value[symToStringTag] = undefined;
    		    var unmasked = true;
    		  } catch (e) {}
    		  var result = nativeObjectToString.call(value);
    		  if (unmasked) {
    		    if (isOwn) {
    		      value[symToStringTag] = tag;
    		    } else {
    		      delete value[symToStringTag];
    		    }
    		  }
    		  return result;
    		}

    		/**
    		 * Creates an array of the own enumerable symbols of `object`.
    		 *
    		 * @private
    		 * @param {Object} object The object to query.
    		 * @returns {Array} Returns the array of symbols.
    		 */
    		var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    		  if (object == null) {
    		    return [];
    		  }
    		  object = Object(object);
    		  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    		    return propertyIsEnumerable.call(object, symbol);
    		  });
    		};

    		/**
    		 * Gets the `toStringTag` of `value`.
    		 *
    		 * @private
    		 * @param {*} value The value to query.
    		 * @returns {string} Returns the `toStringTag`.
    		 */
    		var getTag = baseGetTag;

    		// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    		if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    		  getTag = function (value) {
    		    var result = baseGetTag(value),
    		      Ctor = result == objectTag ? value.constructor : undefined,
    		      ctorString = Ctor ? toSource(Ctor) : '';
    		    if (ctorString) {
    		      switch (ctorString) {
    		        case dataViewCtorString:
    		          return dataViewTag;
    		        case mapCtorString:
    		          return mapTag;
    		        case promiseCtorString:
    		          return promiseTag;
    		        case setCtorString:
    		          return setTag;
    		        case weakMapCtorString:
    		          return weakMapTag;
    		      }
    		    }
    		    return result;
    		  };
    		}

    		/**
    		 * Checks if `value` is a valid array-like index.
    		 *
    		 * @private
    		 * @param {*} value The value to check.
    		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    		 */
    		function isIndex(value, length) {
    		  length = length == null ? MAX_SAFE_INTEGER : length;
    		  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    		}

    		/**
    		 * Checks if `value` is suitable for use as unique object key.
    		 *
    		 * @private
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    		 */
    		function isKeyable(value) {
    		  var type = typeof value;
    		  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    		}

    		/**
    		 * Checks if `func` has its source masked.
    		 *
    		 * @private
    		 * @param {Function} func The function to check.
    		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    		 */
    		function isMasked(func) {
    		  return !!maskSrcKey && maskSrcKey in func;
    		}

    		/**
    		 * Checks if `value` is likely a prototype object.
    		 *
    		 * @private
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    		 */
    		function isPrototype(value) {
    		  var Ctor = value && value.constructor,
    		    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    		  return value === proto;
    		}

    		/**
    		 * Converts `value` to a string using `Object.prototype.toString`.
    		 *
    		 * @private
    		 * @param {*} value The value to convert.
    		 * @returns {string} Returns the converted string.
    		 */
    		function objectToString(value) {
    		  return nativeObjectToString.call(value);
    		}

    		/**
    		 * Converts `func` to its source code.
    		 *
    		 * @private
    		 * @param {Function} func The function to convert.
    		 * @returns {string} Returns the source code.
    		 */
    		function toSource(func) {
    		  if (func != null) {
    		    try {
    		      return funcToString.call(func);
    		    } catch (e) {}
    		    try {
    		      return func + '';
    		    } catch (e) {}
    		  }
    		  return '';
    		}

    		/**
    		 * Performs a
    		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    		 * comparison between two values to determine if they are equivalent.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.0.0
    		 * @category Lang
    		 * @param {*} value The value to compare.
    		 * @param {*} other The other value to compare.
    		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    		 * @example
    		 *
    		 * var object = { 'a': 1 };
    		 * var other = { 'a': 1 };
    		 *
    		 * _.eq(object, object);
    		 * // => true
    		 *
    		 * _.eq(object, other);
    		 * // => false
    		 *
    		 * _.eq('a', 'a');
    		 * // => true
    		 *
    		 * _.eq('a', Object('a'));
    		 * // => false
    		 *
    		 * _.eq(NaN, NaN);
    		 * // => true
    		 */
    		function eq(value, other) {
    		  return value === other || value !== value && other !== other;
    		}

    		/**
    		 * Checks if `value` is likely an `arguments` object.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 0.1.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    		 *  else `false`.
    		 * @example
    		 *
    		 * _.isArguments(function() { return arguments; }());
    		 * // => true
    		 *
    		 * _.isArguments([1, 2, 3]);
    		 * // => false
    		 */
    		var isArguments = baseIsArguments(function () {
    		  return arguments;
    		}()) ? baseIsArguments : function (value) {
    		  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    		};

    		/**
    		 * Checks if `value` is classified as an `Array` object.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 0.1.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    		 * @example
    		 *
    		 * _.isArray([1, 2, 3]);
    		 * // => true
    		 *
    		 * _.isArray(document.body.children);
    		 * // => false
    		 *
    		 * _.isArray('abc');
    		 * // => false
    		 *
    		 * _.isArray(_.noop);
    		 * // => false
    		 */
    		var isArray = Array.isArray;

    		/**
    		 * Checks if `value` is array-like. A value is considered array-like if it's
    		 * not a function and has a `value.length` that's an integer greater than or
    		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.0.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    		 * @example
    		 *
    		 * _.isArrayLike([1, 2, 3]);
    		 * // => true
    		 *
    		 * _.isArrayLike(document.body.children);
    		 * // => true
    		 *
    		 * _.isArrayLike('abc');
    		 * // => true
    		 *
    		 * _.isArrayLike(_.noop);
    		 * // => false
    		 */
    		function isArrayLike(value) {
    		  return value != null && isLength(value.length) && !isFunction(value);
    		}

    		/**
    		 * Checks if `value` is a buffer.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.3.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    		 * @example
    		 *
    		 * _.isBuffer(new Buffer(2));
    		 * // => true
    		 *
    		 * _.isBuffer(new Uint8Array(2));
    		 * // => false
    		 */
    		var isBuffer = nativeIsBuffer || stubFalse;

    		/**
    		 * Performs a deep comparison between two values to determine if they are
    		 * equivalent.
    		 *
    		 * **Note:** This method supports comparing arrays, array buffers, booleans,
    		 * date objects, error objects, maps, numbers, `Object` objects, regexes,
    		 * sets, strings, symbols, and typed arrays. `Object` objects are compared
    		 * by their own, not inherited, enumerable properties. Functions and DOM
    		 * nodes are compared by strict equality, i.e. `===`.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 0.1.0
    		 * @category Lang
    		 * @param {*} value The value to compare.
    		 * @param {*} other The other value to compare.
    		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    		 * @example
    		 *
    		 * var object = { 'a': 1 };
    		 * var other = { 'a': 1 };
    		 *
    		 * _.isEqual(object, other);
    		 * // => true
    		 *
    		 * object === other;
    		 * // => false
    		 */
    		function isEqual(value, other) {
    		  return baseIsEqual(value, other);
    		}

    		/**
    		 * Checks if `value` is classified as a `Function` object.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 0.1.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    		 * @example
    		 *
    		 * _.isFunction(_);
    		 * // => true
    		 *
    		 * _.isFunction(/abc/);
    		 * // => false
    		 */
    		function isFunction(value) {
    		  if (!isObject(value)) {
    		    return false;
    		  }
    		  // The use of `Object#toString` avoids issues with the `typeof` operator
    		  // in Safari 9 which returns 'object' for typed arrays and other constructors.
    		  var tag = baseGetTag(value);
    		  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    		}

    		/**
    		 * Checks if `value` is a valid array-like length.
    		 *
    		 * **Note:** This method is loosely based on
    		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.0.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    		 * @example
    		 *
    		 * _.isLength(3);
    		 * // => true
    		 *
    		 * _.isLength(Number.MIN_VALUE);
    		 * // => false
    		 *
    		 * _.isLength(Infinity);
    		 * // => false
    		 *
    		 * _.isLength('3');
    		 * // => false
    		 */
    		function isLength(value) {
    		  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    		}

    		/**
    		 * Checks if `value` is the
    		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 0.1.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    		 * @example
    		 *
    		 * _.isObject({});
    		 * // => true
    		 *
    		 * _.isObject([1, 2, 3]);
    		 * // => true
    		 *
    		 * _.isObject(_.noop);
    		 * // => true
    		 *
    		 * _.isObject(null);
    		 * // => false
    		 */
    		function isObject(value) {
    		  var type = typeof value;
    		  return value != null && (type == 'object' || type == 'function');
    		}

    		/**
    		 * Checks if `value` is object-like. A value is object-like if it's not `null`
    		 * and has a `typeof` result of "object".
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.0.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    		 * @example
    		 *
    		 * _.isObjectLike({});
    		 * // => true
    		 *
    		 * _.isObjectLike([1, 2, 3]);
    		 * // => true
    		 *
    		 * _.isObjectLike(_.noop);
    		 * // => false
    		 *
    		 * _.isObjectLike(null);
    		 * // => false
    		 */
    		function isObjectLike(value) {
    		  return value != null && typeof value == 'object';
    		}

    		/**
    		 * Checks if `value` is classified as a typed array.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 3.0.0
    		 * @category Lang
    		 * @param {*} value The value to check.
    		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    		 * @example
    		 *
    		 * _.isTypedArray(new Uint8Array);
    		 * // => true
    		 *
    		 * _.isTypedArray([]);
    		 * // => false
    		 */
    		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    		/**
    		 * Creates an array of the own enumerable property names of `object`.
    		 *
    		 * **Note:** Non-object values are coerced to objects. See the
    		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    		 * for more details.
    		 *
    		 * @static
    		 * @since 0.1.0
    		 * @memberOf _
    		 * @category Object
    		 * @param {Object} object The object to query.
    		 * @returns {Array} Returns the array of property names.
    		 * @example
    		 *
    		 * function Foo() {
    		 *   this.a = 1;
    		 *   this.b = 2;
    		 * }
    		 *
    		 * Foo.prototype.c = 3;
    		 *
    		 * _.keys(new Foo);
    		 * // => ['a', 'b'] (iteration order is not guaranteed)
    		 *
    		 * _.keys('hi');
    		 * // => ['0', '1']
    		 */
    		function keys(object) {
    		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    		}

    		/**
    		 * This method returns a new empty array.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.13.0
    		 * @category Util
    		 * @returns {Array} Returns the new empty array.
    		 * @example
    		 *
    		 * var arrays = _.times(2, _.stubArray);
    		 *
    		 * console.log(arrays);
    		 * // => [[], []]
    		 *
    		 * console.log(arrays[0] === arrays[1]);
    		 * // => false
    		 */
    		function stubArray() {
    		  return [];
    		}

    		/**
    		 * This method returns `false`.
    		 *
    		 * @static
    		 * @memberOf _
    		 * @since 4.13.0
    		 * @category Util
    		 * @returns {boolean} Returns `false`.
    		 * @example
    		 *
    		 * _.times(2, _.stubFalse);
    		 * // => [false, false]
    		 */
    		function stubFalse() {
    		  return false;
    		}
    		module.exports = isEqual; 
    	} (lodash_isequal, lodash_isequal.exports));
    	return lodash_isequal.exports;
    }

    var hasRequiredGeneric;

    function requireGeneric () {
    	if (hasRequiredGeneric) return generic;
    	hasRequiredGeneric = 1;

    	Object.defineProperty(generic, "__esModule", {
    	  value: true
    	});
    	generic._get = _get;
    	generic._length = _length;
    	generic.arraysEqual = arraysEqual;
    	generic.deepObjectCompare = deepObjectCompare;
    	generic.keyBy = keyBy;
    	generic.noop = noop;
    	var _lodash = _interopRequireDefault(requireLodash_isequal());
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}

    	// so we could use both immutable.js objects and regular objects
    	function _get(object, key) {
    	  return typeof object.get === 'function' ? object.get(key) : object[key];
    	}
    	function _length(object) {
    	  return typeof object.count === 'function' ? object.count() : object.length;
    	}
    	function arraysEqual(array1, array2) {
    	  return _length(array1) === _length(array2) && array1.every(function (element, index) {
    	    return element === _get(array2, index);
    	  });
    	}
    	function deepObjectCompare(obj1, obj2) {
    	  return (0, _lodash["default"])(obj1, obj2);
    	}
    	function keyBy(value, key) {
    	  var obj = {};
    	  value.forEach(function (element) {
    	    obj[element[key]] = element;
    	  });
    	  return obj;
    	}
    	function noop() {}
    	return generic;
    }

    var events = {};

    var hasRequiredEvents;

    function requireEvents () {
    	if (hasRequiredEvents) return events;
    	hasRequiredEvents = 1;

    	Object.defineProperty(events, "__esModule", {
    	  value: true
    	});
    	events.composeEvents = composeEvents;
    	function composeEvents() {
    	  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    	    fns[_key] = arguments[_key];
    	  }
    	  return function (event) {
    	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    	      args[_key2 - 1] = arguments[_key2];
    	    }
    	    event.preventDefault();
    	    fns.forEach(function (fn) {
    	      return fn && fn.apply(void 0, [event].concat(args));
    	    });
    	  };
    	}
    	return events;
    }

    var defaultItemRenderer = {};

    var hasRequiredDefaultItemRenderer;

    function requireDefaultItemRenderer () {
    	if (hasRequiredDefaultItemRenderer) return defaultItemRenderer;
    	hasRequiredDefaultItemRenderer = 1;

    	Object.defineProperty(defaultItemRenderer, "__esModule", {
    	  value: true
    	});
    	defaultItemRenderer.defaultItemRenderer = void 0;
    	var _react = _interopRequireDefault(require("react"));
    	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	var defaultItemRenderer$1 = function defaultItemRenderer(_ref) {
    	  var item = _ref.item,
    	    itemContext = _ref.itemContext,
    	    getItemProps = _ref.getItemProps,
    	    getResizeProps = _ref.getResizeProps;
    	  var _getResizeProps = getResizeProps(),
    	    leftResizeProps = _getResizeProps.left,
    	    rightResizeProps = _getResizeProps.right;
    	  return _react["default"].createElement("div", getItemProps(item.itemProps), itemContext.useResizeHandle ? _react["default"].createElement("div", leftResizeProps) : '', _react["default"].createElement("div", {
    	    className: "rct-item-content",
    	    style: {
    	      maxHeight: "".concat(itemContext.dimensions.height)
    	    }
    	  }, itemContext.title), itemContext.useResizeHandle ? _react["default"].createElement("div", rightResizeProps) : '');
    	}; // TODO: update this to actual prop types. Too much to change before release
    	// future me, forgive me.

    	defaultItemRenderer.defaultItemRenderer = defaultItemRenderer$1;
    	defaultItemRenderer$1.propTypes = {
    	  item: _propTypes["default"].any,
    	  itemContext: _propTypes["default"].any,
    	  getItemProps: _propTypes["default"].any,
    	  getResizeProps: _propTypes["default"].any
    	};
    	return defaultItemRenderer;
    }

    var calendar = {};

    var hasRequiredCalendar;

    function requireCalendar () {
    	if (hasRequiredCalendar) return calendar;
    	hasRequiredCalendar = 1;

    	Object.defineProperty(calendar, "__esModule", {
    	  value: true
    	});
    	calendar.coordinateToTimeRatio = coordinateToTimeRatio;
    	calendar.calculateXPositionForTime = calculateXPositionForTime;
    	calendar.calculateTimeForXPosition = calculateTimeForXPosition;
    	calendar.iterateTimes = iterateTimes;
    	calendar.getMinUnit = getMinUnit;
    	calendar.getNextUnit = getNextUnit;
    	calendar.calculateInteractionNewTimes = calculateInteractionNewTimes;
    	calendar.calculateDimensions = calculateDimensions;
    	calendar.getGroupOrders = getGroupOrders;
    	calendar.getGroupedItems = getGroupedItems;
    	calendar.getVisibleItems = getVisibleItems;
    	calendar.collision = collision;
    	calendar.groupStack = groupStack;
    	calendar.groupNoStack = groupNoStack;
    	calendar.stackAll = stackAll;
    	calendar.stackGroup = stackGroup;
    	calendar.stackTimelineItems = stackTimelineItems;
    	calendar.getCanvasWidth = getCanvasWidth;
    	calendar.getItemDimensions = getItemDimensions;
    	calendar.getItemWithInteractions = getItemWithInteractions;
    	calendar.getCanvasBoundariesFromVisibleTime = getCanvasBoundariesFromVisibleTime;
    	calendar.calculateScrollCanvas = calculateScrollCanvas;
    	calendar.minCellWidth = void 0;
    	var _moment = _interopRequireDefault(requireMoment());
    	var _generic = requireGeneric();
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	function _objectSpread(target) {
    	  for (var i = 1; i < arguments.length; i++) {
    	    if (i % 2) {
    	      var source = arguments[i] != null ? arguments[i] : {};
    	      var ownKeys = Object.keys(source);
    	      if (typeof Object.getOwnPropertySymbols === 'function') {
    	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    	        }));
    	      }
    	      ownKeys.forEach(function (key) {
    	        _defineProperty(target, key, source[key]);
    	      });
    	    } else {
    	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    	    }
    	  }
    	  return target;
    	}
    	function _defineProperty(obj, key, value) {
    	  if (key in obj) {
    	    Object.defineProperty(obj, key, {
    	      value: value,
    	      enumerable: true,
    	      configurable: true,
    	      writable: true
    	    });
    	  } else {
    	    obj[key] = value;
    	  }
    	  return obj;
    	}
    	function _slicedToArray(arr, i) {
    	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    	}
    	function _nonIterableRest() {
    	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
    	}
    	function _iterableToArrayLimit(arr, i) {
    	  var _arr = [];
    	  var _n = true;
    	  var _d = false;
    	  var _e = undefined;
    	  try {
    	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
    	      _arr.push(_s.value);
    	      if (i && _arr.length === i) break;
    	    }
    	  } catch (err) {
    	    _d = true;
    	    _e = err;
    	  } finally {
    	    try {
    	      if (!_n && _i["return"] != null) _i["return"]();
    	    } finally {
    	      if (_d) throw _e;
    	    }
    	  }
    	  return _arr;
    	}
    	function _arrayWithHoles(arr) {
    	  if (Array.isArray(arr)) return arr;
    	}

    	/**
    	 * Calculate the ms / pixel ratio of the timeline state
    	 * @param {number} canvasTimeStart
    	 * @param {number} canvasTimeEnd
    	 * @param {number} canvasWidth
    	 * @returns {number}
    	 */
    	function coordinateToTimeRatio(canvasTimeStart, canvasTimeEnd, canvasWidth) {
    	  return (canvasTimeEnd - canvasTimeStart) / canvasWidth;
    	}
    	/**
    	 * For a given time, calculate the pixel position given timeline state
    	 * (timeline width in px, canvas time range)
    	 * @param {number} canvasTimeStart
    	 * @param {number} canvasTimeEnd
    	 * @param {number} canvasWidth
    	 * @param {number} time
    	 * @returns {number}
    	 */

    	function calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, time) {
    	  var widthToZoomRatio = canvasWidth / (canvasTimeEnd - canvasTimeStart);
    	  var timeOffset = time - canvasTimeStart;
    	  return timeOffset * widthToZoomRatio;
    	}
    	/**
    	 * For a given x position (leftOffset) in pixels, calculate time based on
    	 * timeline state (timeline width in px, canvas time range)
    	 * @param {number} canvasTimeStart
    	 * @param {number} canvasTimeEnd
    	 * @param {number} canvasWidth
    	 * @param {number} leftOffset
    	 * @returns {number}
    	 */

    	function calculateTimeForXPosition(canvasTimeStart, canvasTimeEnd, canvasWidth, leftOffset) {
    	  var timeToPxRatio = (canvasTimeEnd - canvasTimeStart) / canvasWidth;
    	  var timeFromCanvasTimeStart = timeToPxRatio * leftOffset;
    	  return timeFromCanvasTimeStart + canvasTimeStart;
    	}
    	function iterateTimes(start, end, unit, timeSteps, callback) {
    	  var time = (0, _moment["default"])(start).startOf(unit);
    	  if (timeSteps[unit] && timeSteps[unit] > 1) {
    	    var value = time.get(unit);
    	    time.set(unit, value - value % timeSteps[unit]);
    	  }
    	  while (time.valueOf() < end) {
    	    var nextTime = (0, _moment["default"])(time).add(timeSteps[unit] || 1, "".concat(unit, "s"));
    	    callback(time, nextTime);
    	    time = nextTime;
    	  }
    	} // this function is VERY HOT as its used in Timeline.js render function
    	// TODO: check if there are performance implications here
    	// when "weeks" feature is implemented, this function will be modified heavily

    	/** determine the current rendered time unit based on timeline time span
    	 *
    	 * zoom: (in milliseconds) difference between time start and time end of timeline canvas
    	 * width: (in pixels) pixel width of timeline canvas
    	 * timeSteps: map of timeDividers with number to indicate step of each divider
    	 */
    	// the smallest cell we want to render is 17px
    	// this can be manipulated to make the breakpoints change more/less
    	// i.e. on zoom how often do we switch to the next unit of time
    	// i think this is the distance between cell lines

    	var minCellWidth = 17;
    	calendar.minCellWidth = minCellWidth;
    	function getMinUnit(zoom, width, timeSteps) {
    	  // for supporting weeks, its important to remember that each of these
    	  // units has a natural progression to the other. i.e. a year is 12 months
    	  // a month is 24 days, a day is 24 hours.
    	  // with weeks this isnt the case so weeks needs to be handled specially
    	  var timeDividers = {
    	    second: 1000,
    	    minute: 60,
    	    hour: 60,
    	    day: 24,
    	    month: 30,
    	    year: 12
    	  };
    	  var minUnit = 'year'; // this timespan is in ms initially

    	  var nextTimeSpanInUnitContext = zoom;
    	  Object.keys(timeDividers).some(function (unit) {
    	    // converts previous time span to current unit
    	    // (e.g. milliseconds to seconds, seconds to minutes, etc)
    	    nextTimeSpanInUnitContext = nextTimeSpanInUnitContext / timeDividers[unit]; // timeSteps is "
    	    // With what step to display different units. E.g. 15 for minute means only minutes 0, 15, 30 and 45 will be shown."
    	    // how many cells would be rendered given this time span, for this unit?
    	    // e.g. for time span of 60 minutes, and time step of 1, we would render 60 cells

    	    var cellsToBeRenderedForCurrentUnit = nextTimeSpanInUnitContext / timeSteps[unit]; // what is happening here? why 3 if time steps are greater than 1??

    	    var cellWidthToUse = timeSteps[unit] && timeSteps[unit] > 1 ? 3 * minCellWidth : minCellWidth; // for the minWidth of a cell, how many cells would be rendered given
    	    // the current pixel width
    	    // i.e. f

    	    var minimumCellsToRenderUnit = width / cellWidthToUse;
    	    if (cellsToBeRenderedForCurrentUnit < minimumCellsToRenderUnit) {
    	      // for the current zoom, the number of cells we'd need to render all parts of this unit
    	      // is less than the minimum number of cells needed at minimum cell width
    	      minUnit = unit;
    	      return true;
    	    }
    	  });
    	  return minUnit;
    	}
    	function getNextUnit(unit) {
    	  var nextUnits = {
    	    second: 'minute',
    	    minute: 'hour',
    	    hour: 'day',
    	    day: 'month',
    	    month: 'year',
    	    year: 'year'
    	  };
    	  if (!nextUnits[unit]) {
    	    throw new Error("unit ".concat(unit, " in not acceptable"));
    	  }
    	  return nextUnits[unit];
    	}
    	/**
    	 * get the new start and new end time of item that is being
    	 * dragged or resized
    	 * @param {*} itemTimeStart original item time in milliseconds
    	 * @param {*} itemTimeEnd original item time in milliseconds
    	 * @param {*} dragTime new start time if item is dragged in milliseconds
    	 * @param {*} isDragging is item being dragged
    	 * @param {*} isResizing is item being resized
    	 * @param {`right` or `left`} resizingEdge resize edge
    	 * @param {*} resizeTime new resize time in milliseconds
    	 */

    	function calculateInteractionNewTimes(_ref) {
    	  var itemTimeStart = _ref.itemTimeStart,
    	    itemTimeEnd = _ref.itemTimeEnd,
    	    dragTime = _ref.dragTime,
    	    isDragging = _ref.isDragging,
    	    isResizing = _ref.isResizing,
    	    resizingEdge = _ref.resizingEdge,
    	    resizeTime = _ref.resizeTime;
    	  var originalItemRange = itemTimeEnd - itemTimeStart;
    	  var itemStart = isResizing && resizingEdge === 'left' ? resizeTime : itemTimeStart;
    	  var itemEnd = isResizing && resizingEdge === 'right' ? resizeTime : itemTimeEnd;
    	  return [isDragging ? dragTime : itemStart, isDragging ? dragTime + originalItemRange : itemEnd];
    	}
    	function calculateDimensions(_ref2) {
    	  var itemTimeStart = _ref2.itemTimeStart,
    	    itemTimeEnd = _ref2.itemTimeEnd,
    	    canvasTimeStart = _ref2.canvasTimeStart,
    	    canvasTimeEnd = _ref2.canvasTimeEnd,
    	    canvasWidth = _ref2.canvasWidth;
    	  var itemTimeRange = itemTimeEnd - itemTimeStart; // restrict startTime and endTime to be bounded by canvasTimeStart and canvasTimeEnd

    	  var effectiveStartTime = Math.max(itemTimeStart, canvasTimeStart);
    	  var effectiveEndTime = Math.min(itemTimeEnd, canvasTimeEnd);
    	  var left = calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, effectiveStartTime);
    	  var right = calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, effectiveEndTime);
    	  var itemWidth = right - left;
    	  var dimensions = {
    	    left: left,
    	    width: Math.max(itemWidth, 3),
    	    collisionLeft: itemTimeStart,
    	    collisionWidth: itemTimeRange
    	  };
    	  return dimensions;
    	}
    	/**
    	 * Get the order of groups based on their keys
    	 * @param {*} groups array of groups
    	 * @param {*} keys the keys object
    	 * @returns Ordered hash of objects with their array index and group
    	 */

    	function getGroupOrders(groups, keys) {
    	  var groupIdKey = keys.groupIdKey;
    	  var groupOrders = {};
    	  for (var i = 0; i < groups.length; i++) {
    	    groupOrders[(0, _generic._get)(groups[i], groupIdKey)] = {
    	      index: i,
    	      group: groups[i]
    	    };
    	  }
    	  return groupOrders;
    	}
    	/**
    	 * Adds items relevant to each group to the result of getGroupOrders
    	 * @param {*} items list of all items
    	 * @param {*} groupOrders the result of getGroupOrders
    	 */

    	function getGroupedItems(items, groupOrders) {
    	  var groupedItems = {};
    	  var keys = Object.keys(groupOrders); // Initialize with result object for each group

    	  for (var i = 0; i < keys.length; i++) {
    	    var groupOrder = groupOrders[keys[i]];
    	    groupedItems[i] = {
    	      index: groupOrder.index,
    	      group: groupOrder.group,
    	      items: []
    	    };
    	  } // Populate groups

    	  for (var _i = 0; _i < items.length; _i++) {
    	    if (items[_i].dimensions.order !== undefined) {
    	      var groupItem = groupedItems[items[_i].dimensions.order.index];
    	      if (groupItem) {
    	        groupItem.items.push(items[_i]);
    	      }
    	    }
    	  }
    	  return groupedItems;
    	}
    	function getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys) {
    	  var itemTimeStartKey = keys.itemTimeStartKey,
    	    itemTimeEndKey = keys.itemTimeEndKey;
    	  return items.filter(function (item) {
    	    return (0, _generic._get)(item, itemTimeStartKey) <= canvasTimeEnd && (0, _generic._get)(item, itemTimeEndKey) >= canvasTimeStart;
    	  });
    	}
    	var EPSILON = 0.001;
    	function collision(a, b, lineHeight) {
    	  var collisionPadding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EPSILON;
    	  // 2d collisions detection - https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection
    	  var verticalMargin = 0;
    	  return a.collisionLeft + collisionPadding < b.collisionLeft + b.collisionWidth && a.collisionLeft + a.collisionWidth - collisionPadding > b.collisionLeft && a.top - verticalMargin + collisionPadding < b.top + b.height && a.top + a.height + verticalMargin - collisionPadding > b.top;
    	}
    	/**
    	 * Calculate the position of a given item for a group that
    	 * is being stacked
    	 */

    	function groupStack(lineHeight, item, group, groupHeight, groupTop, itemIndex) {
    	  // calculate non-overlapping positions
    	  var curHeight = groupHeight;
    	  var verticalMargin = (lineHeight - item.dimensions.height) / 2;
    	  if (item.dimensions.stack && item.dimensions.top === null) {
    	    item.dimensions.top = groupTop + verticalMargin;
    	    curHeight = Math.max(curHeight, lineHeight);
    	    do {
    	      var collidingItem = null; //Items are placed from i=0 onwards, only check items with index < i

    	      for (var j = itemIndex - 1, jj = 0; j >= jj; j--) {
    	        var other = group[j];
    	        if (other.dimensions.top !== null && other.dimensions.stack && collision(item.dimensions, other.dimensions, lineHeight)) {
    	          collidingItem = other;
    	          break;
    	        }
    	      }
    	      if (collidingItem != null) {
    	        // There is a collision. Reposition the items above the colliding element
    	        item.dimensions.top = collidingItem.dimensions.top + lineHeight;
    	        curHeight = Math.max(curHeight, item.dimensions.top + item.dimensions.height + verticalMargin - groupTop);
    	      }
    	    } while (collidingItem);
    	  }
    	  return {
    	    groupHeight: curHeight,
    	    verticalMargin: verticalMargin,
    	    itemTop: item.dimensions.top
    	  };
    	} // Calculate the position of this item for a group that is not being stacked

    	function groupNoStack(lineHeight, item, groupHeight, groupTop) {
    	  var verticalMargin = (lineHeight - item.dimensions.height) / 2;
    	  if (item.dimensions.top === null) {
    	    item.dimensions.top = groupTop + verticalMargin;
    	    groupHeight = Math.max(groupHeight, lineHeight);
    	  }
    	  return {
    	    groupHeight: groupHeight,
    	    verticalMargin: 0,
    	    itemTop: item.dimensions.top
    	  };
    	}
    	function sum() {
    	  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    	  return arr.reduce(function (acc, i) {
    	    return acc + i;
    	  }, 0);
    	}
    	/**
    	 * Stack all groups
    	 * @param {*} items items to be stacked
    	 * @param {*} groupOrders the groupOrders object
    	 * @param {*} lineHeight
    	 * @param {*} stackItems should items be stacked?
    	 */

    	function stackAll(itemsDimensions, groupOrders, lineHeight, stackItems) {
    	  var groupHeights = [];
    	  var groupTops = [];
    	  var groupedItems = getGroupedItems(itemsDimensions, groupOrders);
    	  for (var index in groupedItems) {
    	    var groupItems = groupedItems[index];
    	    var _itemsDimensions = groupItems.items,
    	      group = groupItems.group;
    	    var groupTop = sum(groupHeights); // Is group being stacked?

    	    var isGroupStacked = group.stackItems !== undefined ? group.stackItems : stackItems;
    	    var _stackGroup = stackGroup(_itemsDimensions, isGroupStacked, lineHeight, groupTop),
    	      groupHeight = _stackGroup.groupHeight; // If group height is overridden, push new height
    	    // Do this late as item position still needs to be calculated

    	    groupTops.push(groupTop);
    	    if (group.height) {
    	      groupHeights.push(group.height);
    	    } else {
    	      groupHeights.push(Math.max(groupHeight, lineHeight));
    	    }
    	  }
    	  return {
    	    height: sum(groupHeights),
    	    groupHeights: groupHeights,
    	    groupTops: groupTops
    	  };
    	}
    	/**
    	 * 
    	 * @param {*} itemsDimensions 
    	 * @param {*} isGroupStacked 
    	 * @param {*} lineHeight 
    	 * @param {*} groupTop 
    	 */

    	function stackGroup(itemsDimensions, isGroupStacked, lineHeight, groupTop) {
    	  var groupHeight = 0;
    	  var verticalMargin = 0; // Find positions for each item in group

    	  for (var itemIndex = 0; itemIndex < itemsDimensions.length; itemIndex++) {
    	    var r = {};
    	    if (isGroupStacked) {
    	      r = groupStack(lineHeight, itemsDimensions[itemIndex], itemsDimensions, groupHeight, groupTop, itemIndex);
    	    } else {
    	      r = groupNoStack(lineHeight, itemsDimensions[itemIndex], groupHeight, groupTop);
    	    }
    	    groupHeight = r.groupHeight;
    	    verticalMargin = r.verticalMargin;
    	  }
    	  return {
    	    groupHeight: groupHeight,
    	    verticalMargin: verticalMargin
    	  };
    	}
    	/**
    	 * Stack the items that will be visible
    	 * within the canvas area
    	 * @param {item[]} items
    	 * @param {group[]} groups
    	 * @param {number} canvasWidth
    	 * @param {number} canvasTimeStart
    	 * @param {number} canvasTimeEnd
    	 * @param {*} keys
    	 * @param {number} lineHeight
    	 * @param {number} itemHeightRatio
    	 * @param {boolean} stackItems
    	 * @param {*} draggingItem
    	 * @param {*} resizingItem
    	 * @param {number} dragTime
    	 * @param {left or right} resizingEdge
    	 * @param {number} resizeTime
    	 * @param {number} newGroupOrder
    	 */

    	function stackTimelineItems(items, groups, canvasWidth, canvasTimeStart, canvasTimeEnd, keys, lineHeight, itemHeightRatio, stackItems, draggingItem, resizingItem, dragTime, resizingEdge, resizeTime, newGroupOrder) {
    	  var visibleItems = getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys);
    	  var visibleItemsWithInteraction = visibleItems.map(function (item) {
    	    return getItemWithInteractions({
    	      item: item,
    	      keys: keys,
    	      draggingItem: draggingItem,
    	      resizingItem: resizingItem,
    	      dragTime: dragTime,
    	      resizingEdge: resizingEdge,
    	      resizeTime: resizeTime,
    	      groups: groups,
    	      newGroupOrder: newGroupOrder
    	    });
    	  }); // if there are no groups return an empty array of dimensions

    	  if (groups.length === 0) {
    	    return {
    	      dimensionItems: [],
    	      height: 0,
    	      groupHeights: [],
    	      groupTops: []
    	    };
    	  } // Get the order of groups based on their id key

    	  var groupOrders = getGroupOrders(groups, keys);
    	  var dimensionItems = visibleItemsWithInteraction.map(function (item) {
    	    return getItemDimensions({
    	      item: item,
    	      keys: keys,
    	      canvasTimeStart: canvasTimeStart,
    	      canvasTimeEnd: canvasTimeEnd,
    	      canvasWidth: canvasWidth,
    	      groupOrders: groupOrders,
    	      lineHeight: lineHeight,
    	      itemHeightRatio: itemHeightRatio
    	    });
    	  }).filter(function (item) {
    	    return !!item;
    	  }); // Get a new array of groupOrders holding the stacked items

    	  var _stackAll = stackAll(dimensionItems, groupOrders, lineHeight, stackItems),
    	    height = _stackAll.height,
    	    groupHeights = _stackAll.groupHeights,
    	    groupTops = _stackAll.groupTops;
    	  return {
    	    dimensionItems: dimensionItems,
    	    height: height,
    	    groupHeights: groupHeights,
    	    groupTops: groupTops
    	  };
    	}
    	/**
    	 * get canvas width from visible width
    	 * @param {*} width
    	 * @param {*} buffer
    	 */

    	function getCanvasWidth(width, buffer) {
    	  return width * buffer;
    	}
    	/**
    	 * get item's position, dimensions and collisions
    	 * @param {*} item
    	 * @param {*} keys
    	 * @param {*} canvasTimeStart
    	 * @param {*} canvasTimeEnd
    	 * @param {*} canvasWidth
    	 * @param {*} groupOrders
    	 * @param {*} lineHeight
    	 * @param {*} itemHeightRatio
    	 */

    	function getItemDimensions(_ref3) {
    	  var item = _ref3.item,
    	    keys = _ref3.keys,
    	    canvasTimeStart = _ref3.canvasTimeStart,
    	    canvasTimeEnd = _ref3.canvasTimeEnd,
    	    canvasWidth = _ref3.canvasWidth,
    	    groupOrders = _ref3.groupOrders,
    	    lineHeight = _ref3.lineHeight,
    	    itemHeightRatio = _ref3.itemHeightRatio;
    	  var itemId = (0, _generic._get)(item, keys.itemIdKey);
    	  var dimension = calculateDimensions({
    	    itemTimeStart: (0, _generic._get)(item, keys.itemTimeStartKey),
    	    itemTimeEnd: (0, _generic._get)(item, keys.itemTimeEndKey),
    	    canvasTimeStart: canvasTimeStart,
    	    canvasTimeEnd: canvasTimeEnd,
    	    canvasWidth: canvasWidth
    	  });
    	  if (dimension) {
    	    dimension.top = null;
    	    dimension.order = groupOrders[(0, _generic._get)(item, keys.itemGroupKey)];
    	    dimension.stack = !item.isOverlay;
    	    dimension.height = lineHeight * itemHeightRatio;
    	    return {
    	      id: itemId,
    	      dimensions: dimension
    	    };
    	  }
    	}
    	/**
    	 * get new item with changed  `itemTimeStart` , `itemTimeEnd` and `itemGroupKey` according to user interaction
    	 * user interaction is dragging an item and resize left and right
    	 * @param {*} item
    	 * @param {*} keys
    	 * @param {*} draggingItem
    	 * @param {*} resizingItem
    	 * @param {*} dragTime
    	 * @param {*} resizingEdge
    	 * @param {*} resizeTime
    	 * @param {*} groups
    	 * @param {*} newGroupOrder
    	 */

    	function getItemWithInteractions(_ref4) {
    	  var _objectSpread2;
    	  var item = _ref4.item,
    	    keys = _ref4.keys,
    	    draggingItem = _ref4.draggingItem,
    	    resizingItem = _ref4.resizingItem,
    	    dragTime = _ref4.dragTime,
    	    resizingEdge = _ref4.resizingEdge,
    	    resizeTime = _ref4.resizeTime,
    	    groups = _ref4.groups,
    	    newGroupOrder = _ref4.newGroupOrder;
    	  if (!resizingItem && !draggingItem) return item;
    	  var itemId = (0, _generic._get)(item, keys.itemIdKey);
    	  var isDragging = itemId === draggingItem;
    	  var isResizing = itemId === resizingItem;
    	  var _calculateInteraction = calculateInteractionNewTimes({
    	      itemTimeStart: (0, _generic._get)(item, keys.itemTimeStartKey),
    	      itemTimeEnd: (0, _generic._get)(item, keys.itemTimeEndKey),
    	      isDragging: isDragging,
    	      isResizing: isResizing,
    	      dragTime: dragTime,
    	      resizingEdge: resizingEdge,
    	      resizeTime: resizeTime
    	    }),
    	    _calculateInteraction2 = _slicedToArray(_calculateInteraction, 2),
    	    itemTimeStart = _calculateInteraction2[0],
    	    itemTimeEnd = _calculateInteraction2[1];
    	  var newItem = _objectSpread({}, item, (_objectSpread2 = {}, _defineProperty(_objectSpread2, keys.itemTimeStartKey, itemTimeStart), _defineProperty(_objectSpread2, keys.itemTimeEndKey, itemTimeEnd), _defineProperty(_objectSpread2, keys.itemGroupKey, isDragging ? (0, _generic._get)(groups[newGroupOrder], keys.groupIdKey) : (0, _generic._get)(item, keys.itemGroupKey)), _objectSpread2));
    	  return newItem;
    	}
    	/**
    	 * get canvas start and end time from visible start and end time
    	 * @param {number} visibleTimeStart
    	 * @param {number} visibleTimeEnd
    	 */

    	function getCanvasBoundariesFromVisibleTime(visibleTimeStart, visibleTimeEnd, buffer) {
    	  var zoom = visibleTimeEnd - visibleTimeStart; // buffer - 1 (1 is visible area) divided by 2 (2 is the buffer split on the right and left of the timeline)

    	  var canvasTimeStart = visibleTimeStart - zoom * (buffer - 1) / 2;
    	  var canvasTimeEnd = canvasTimeStart + zoom * buffer;
    	  return [canvasTimeStart, canvasTimeEnd];
    	}
    	/**
    	 * Get the the canvas area for a given visible time
    	 * Will shift the start/end of the canvas if the visible time
    	 * does not fit within the existing
    	 * @param {number} visibleTimeStart
    	 * @param {number} visibleTimeEnd
    	 * @param {boolean} forceUpdateDimensions
    	 * @param {*} items
    	 * @param {*} groups
    	 * @param {*} props
    	 * @param {*} state
    	 */

    	function calculateScrollCanvas(visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, items, groups, props, state) {
    	  var buffer = props.buffer;
    	  var oldCanvasTimeStart = state.canvasTimeStart;
    	  var oldCanvasTimeEnd = state.canvasTimeEnd;
    	  var oldZoom = state.visibleTimeEnd - state.visibleTimeStart;
    	  var newZoom = visibleTimeEnd - visibleTimeStart;
    	  var newState = {
    	    visibleTimeStart: visibleTimeStart,
    	    visibleTimeEnd: visibleTimeEnd // Check if the current canvas covers the new times
    	  };
    	  var canKeepCanvas = newZoom === oldZoom && visibleTimeStart >= oldCanvasTimeStart + oldZoom * 0.5 && visibleTimeStart <= oldCanvasTimeEnd - oldZoom * 1.5 && visibleTimeEnd >= oldCanvasTimeStart + oldZoom * 1.5 && visibleTimeEnd <= oldCanvasTimeEnd - oldZoom * 0.5;
    	  if (!canKeepCanvas || forceUpdateDimensions) {
    	    var _getCanvasBoundariesF = getCanvasBoundariesFromVisibleTime(visibleTimeStart, visibleTimeEnd, buffer),
    	      _getCanvasBoundariesF2 = _slicedToArray(_getCanvasBoundariesF, 2),
    	      canvasTimeStart = _getCanvasBoundariesF2[0],
    	      canvasTimeEnd = _getCanvasBoundariesF2[1];
    	    newState.canvasTimeStart = canvasTimeStart;
    	    newState.canvasTimeEnd = canvasTimeEnd;
    	    var mergedState = _objectSpread({}, state, {}, newState);
    	    var canvasWidth = getCanvasWidth(mergedState.width, props.buffer); // The canvas cannot be kept, so calculate the new items position

    	    Object.assign(newState, stackTimelineItems(items, groups, canvasWidth, mergedState.canvasTimeStart, mergedState.canvasTimeEnd, props.keys, props.lineHeight, props.itemHeightRatio, props.stackItems, mergedState.draggingItem, mergedState.resizingItem, mergedState.dragTime, mergedState.resizingEdge, mergedState.resizeTime, mergedState.newGroupOrder));
    	  }
    	  return newState;
    	}
    	return calendar;
    }

    var domHelpers = {};

    var hasRequiredDomHelpers;

    function requireDomHelpers () {
    	if (hasRequiredDomHelpers) return domHelpers;
    	hasRequiredDomHelpers = 1;

    	Object.defineProperty(domHelpers, "__esModule", {
    	  value: true
    	});
    	domHelpers.getParentPosition = getParentPosition;
    	domHelpers.getSumScroll = getSumScroll;
    	domHelpers.getSumOffset = getSumOffset;

    	// TODO: can we use getBoundingClientRect instead??
    	// last place this is used is in "handleWheel" in ScrollElement
    	function getParentPosition(element) {
    	  var xPosition = 0;
    	  var yPosition = 0;
    	  var first = true;
    	  while (element) {
    	    if (!element.offsetParent && element.tagName === 'BODY' && element.scrollLeft === 0 && element.scrollTop === 0) {
    	      element = document.scrollingElement || element;
    	    }
    	    xPosition += element.offsetLeft - (first ? 0 : element.scrollLeft) + element.clientLeft;
    	    yPosition += element.offsetTop - (first ? 0 : element.scrollTop) + element.clientTop;
    	    element = element.offsetParent;
    	    first = false;
    	  }
    	  return {
    	    x: xPosition,
    	    y: yPosition
    	  };
    	}
    	function getSumScroll(node) {
    	  if (node === document.body) {
    	    return {
    	      scrollLeft: 0,
    	      scrollTop: 0
    	    };
    	  } else {
    	    var parent = getSumScroll(node.parentNode);
    	    return {
    	      scrollLeft: node.scrollLeft + parent.scrollLeft,
    	      scrollTop: node.scrollTop + parent.scrollTop
    	    };
    	  }
    	}
    	function getSumOffset(node) {
    	  if (node === document.body || !node.offsetParent) {
    	    return {
    	      offsetLeft: 0,
    	      offsetTop: 0
    	    };
    	  } else {
    	    var parent = getSumOffset(node.offsetParent);
    	    return {
    	      offsetLeft: node.offsetLeft + parent.offsetLeft,
    	      offsetTop: node.offsetTop + parent.offsetTop
    	    };
    	  }
    	}
    	return domHelpers;
    }

    var styles = {};

    var hasRequiredStyles;

    function requireStyles () {
    	if (hasRequiredStyles) return styles;
    	hasRequiredStyles = 1;

    	Object.defineProperty(styles, "__esModule", {
    	  value: true
    	});
    	styles.rightResizeStyle = styles.leftResizeStyle = styles.selectedAndCanResizeRightAndDragRight = styles.selectedAndCanResizeRight = styles.selectedAndCanResizeLeftAndDragLeft = styles.selectedAndCanResizeLeft = styles.selectedAndCanMove = styles.selectedStyle = styles.overridableStyles = void 0;
    	var overridableStyles = {
    	  fontSize: 12,
    	  color: 'white',
    	  cursor: 'pointer',
    	  background: '#2196f3',
    	  border: '1px solid #1a6fb3',
    	  zIndex: 80
    	};
    	styles.overridableStyles = overridableStyles;
    	var selectedStyle = {
    	  background: '#ffc107',
    	  border: '1px solid #ff9800',
    	  zIndex: 82
    	};
    	styles.selectedStyle = selectedStyle;
    	var selectedAndCanMove = {
    	  cursor: 'move'
    	};
    	styles.selectedAndCanMove = selectedAndCanMove;
    	var selectedAndCanResizeLeft = {
    	  borderLeftWidth: 3
    	};
    	styles.selectedAndCanResizeLeft = selectedAndCanResizeLeft;
    	var selectedAndCanResizeLeftAndDragLeft = {
    	  cursor: 'w-resize'
    	};
    	styles.selectedAndCanResizeLeftAndDragLeft = selectedAndCanResizeLeftAndDragLeft;
    	var selectedAndCanResizeRight = {
    	  borderRightWidth: 3
    	};
    	styles.selectedAndCanResizeRight = selectedAndCanResizeRight;
    	var selectedAndCanResizeRightAndDragRight = {
    	  cursor: 'e-resize'
    	};
    	styles.selectedAndCanResizeRightAndDragRight = selectedAndCanResizeRightAndDragRight;
    	var leftResizeStyle = {
    	  position: "absolute",
    	  width: 24,
    	  maxWidth: "20%",
    	  minWidth: 2,
    	  height: "100%",
    	  top: 0,
    	  left: 0,
    	  cursor: "pointer",
    	  zIndex: 88
    	};
    	styles.leftResizeStyle = leftResizeStyle;
    	var rightResizeStyle = {
    	  position: "absolute",
    	  width: 24,
    	  maxWidth: "20%",
    	  minWidth: 2,
    	  height: "100%",
    	  top: 0,
    	  right: 0,
    	  cursor: "pointer",
    	  zIndex: 88
    	};
    	styles.rightResizeStyle = rightResizeStyle;
    	return styles;
    }

    var hasRequiredItem;

    function requireItem () {
    	if (hasRequiredItem) return Item;
    	hasRequiredItem = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = require("react");
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _interactjs = _interopRequireDefault(/*@__PURE__*/ requireInteract_min());
    		var _moment = _interopRequireDefault(requireMoment());
    		var _generic = requireGeneric();
    		var _events = requireEvents();
    		var _defaultItemRenderer = requireDefaultItemRenderer();
    		var _calendar = requireCalendar();
    		var _domHelpers = requireDomHelpers();
    		var _styles = requireStyles();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var Item = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(Item, _Component);

    		  // removed prop type check for SPEED!
    		  // they are coming from a trusted component anyway
    		  // (this complicates performance debugging otherwise)
    		  function Item(_props) {
    		    var _this;
    		    _classCallCheck(this, Item);
    		    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this, _props));
    		    _defineProperty(_assertThisInitialized(_this), "onMouseDown", function (e) {
    		      if (!_this.state.interactMounted) {
    		        e.preventDefault();
    		        _this.startedClicking = true;
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
    		      if (!_this.state.interactMounted && _this.startedClicking) {
    		        _this.startedClicking = false;
    		        _this.actualClick(e, 'click');
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "onTouchStart", function (e) {
    		      if (!_this.state.interactMounted) {
    		        e.preventDefault();
    		        _this.startedTouching = true;
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function (e) {
    		      if (!_this.state.interactMounted && _this.startedTouching) {
    		        _this.startedTouching = false;
    		        _this.actualClick(e, 'touch');
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleDoubleClick", function (e) {
    		      e.stopPropagation();
    		      if (_this.props.onItemDoubleClick) {
    		        _this.props.onItemDoubleClick(_this.itemId, e);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleContextMenu", function (e) {
    		      if (_this.props.onContextMenu) {
    		        e.preventDefault();
    		        e.stopPropagation();
    		        _this.props.onContextMenu(_this.itemId, e);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getItemRef", function (el) {
    		      return _this.item = el;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getDragLeftRef", function (el) {
    		      return _this.dragLeft = el;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getDragRightRef", function (el) {
    		      return _this.dragRight = el;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getItemProps", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    		      //TODO: maybe shouldnt include all of these classes
    		      var classNames = 'rct-item' + (_this.props.item.className ? " ".concat(_this.props.item.className) : '');
    		      return {
    		        key: _this.itemId,
    		        ref: _this.getItemRef,
    		        title: _this.itemDivTitle,
    		        className: classNames + " ".concat(props.className ? props.className : ''),
    		        onMouseDown: (0, _events.composeEvents)(_this.onMouseDown, props.onMouseDown),
    		        onMouseUp: (0, _events.composeEvents)(_this.onMouseUp, props.onMouseUp),
    		        onTouchStart: (0, _events.composeEvents)(_this.onTouchStart, props.onTouchStart),
    		        onTouchEnd: (0, _events.composeEvents)(_this.onTouchEnd, props.onTouchEnd),
    		        onDoubleClick: (0, _events.composeEvents)(_this.handleDoubleClick, props.onDoubleClick),
    		        onContextMenu: (0, _events.composeEvents)(_this.handleContextMenu, props.onContextMenu),
    		        style: Object.assign({}, _this.getItemStyle(props))
    		      };
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getResizeProps", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    		      var leftName = "rct-item-handler rct-item-handler-left rct-item-handler-resize-left";
    		      if (props.leftClassName) {
    		        leftName += " ".concat(props.leftClassName);
    		      }
    		      var rightName = "rct-item-handler rct-item-handler-right rct-item-handler-resize-right";
    		      if (props.rightClassName) {
    		        rightName += " ".concat(props.rightClassName);
    		      }
    		      return {
    		        left: {
    		          ref: _this.getDragLeftRef,
    		          className: leftName,
    		          style: Object.assign({}, _styles.leftResizeStyle, props.leftStyle)
    		        },
    		        right: {
    		          ref: _this.getDragRightRef,
    		          className: rightName,
    		          style: Object.assign({}, _styles.rightResizeStyle, props.rightStyle)
    		        }
    		      };
    		    });
    		    _this.cacheDataFromProps(_props);
    		    _this.state = {
    		      interactMounted: false,
    		      dragging: null,
    		      dragStart: null,
    		      preDragPosition: null,
    		      dragTime: null,
    		      dragGroupDelta: null,
    		      resizing: null,
    		      resizeEdge: null,
    		      resizeStart: null,
    		      resizeTime: null
    		    };
    		    return _this;
    		  }
    		  _createClass(Item, [{
    		    key: "shouldComponentUpdate",
    		    value: function shouldComponentUpdate(nextProps, nextState) {
    		      var shouldUpdate = nextState.dragging !== this.state.dragging || nextState.dragTime !== this.state.dragTime || nextState.dragGroupDelta !== this.state.dragGroupDelta || nextState.resizing !== this.state.resizing || nextState.resizeTime !== this.state.resizeTime || nextProps.keys !== this.props.keys || !(0, _generic.deepObjectCompare)(nextProps.itemProps, this.props.itemProps) || nextProps.selected !== this.props.selected || nextProps.item !== this.props.item || nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || (nextProps.order ? nextProps.order.index : undefined) !== (this.props.order ? this.props.order.index : undefined) || nextProps.dragSnap !== this.props.dragSnap || nextProps.minResizeWidth !== this.props.minResizeWidth || nextProps.canChangeGroup !== this.props.canChangeGroup || nextProps.canSelect !== this.props.canSelect || nextProps.canMove !== this.props.canMove || nextProps.canResizeLeft !== this.props.canResizeLeft || nextProps.canResizeRight !== this.props.canResizeRight || nextProps.dimensions !== this.props.dimensions;
    		      return shouldUpdate;
    		    }
    		  }, {
    		    key: "cacheDataFromProps",
    		    value: function cacheDataFromProps(props) {
    		      this.itemId = (0, _generic._get)(props.item, props.keys.itemIdKey);
    		      this.itemTitle = (0, _generic._get)(props.item, props.keys.itemTitleKey);
    		      this.itemDivTitle = props.keys.itemDivTitleKey ? (0, _generic._get)(props.item, props.keys.itemDivTitleKey) : this.itemTitle;
    		      this.itemTimeStart = (0, _generic._get)(props.item, props.keys.itemTimeStartKey);
    		      this.itemTimeEnd = (0, _generic._get)(props.item, props.keys.itemTimeEndKey);
    		    }
    		  }, {
    		    key: "getTimeRatio",
    		    value: function getTimeRatio() {
    		      var _this$props = this.props,
    		        canvasTimeStart = _this$props.canvasTimeStart,
    		        canvasTimeEnd = _this$props.canvasTimeEnd,
    		        canvasWidth = _this$props.canvasWidth;
    		      return (0, _calendar.coordinateToTimeRatio)(canvasTimeStart, canvasTimeEnd, canvasWidth);
    		    }
    		  }, {
    		    key: "dragTimeSnap",
    		    value: function dragTimeSnap(dragTime, considerOffset) {
    		      var dragSnap = this.props.dragSnap;
    		      if (dragSnap) {
    		        var offset = considerOffset ? (0, _moment["default"])().utcOffset() * 60 * 1000 : 0;
    		        return Math.round(dragTime / dragSnap) * dragSnap - offset % dragSnap;
    		      } else {
    		        return dragTime;
    		      }
    		    }
    		  }, {
    		    key: "resizeTimeSnap",
    		    value: function resizeTimeSnap(dragTime) {
    		      var dragSnap = this.props.dragSnap;
    		      if (dragSnap) {
    		        var endTime = this.itemTimeEnd % dragSnap;
    		        return Math.round((dragTime - endTime) / dragSnap) * dragSnap + endTime;
    		      } else {
    		        return dragTime;
    		      }
    		    }
    		  }, {
    		    key: "dragTime",
    		    value: function dragTime(e) {
    		      var startTime = (0, _moment["default"])(this.itemTimeStart);
    		      if (this.state.dragging) {
    		        return this.dragTimeSnap(this.timeFor(e) + this.state.dragStart.offset, true);
    		      } else {
    		        return startTime;
    		      }
    		    }
    		  }, {
    		    key: "timeFor",
    		    value: function timeFor(e) {
    		      var ratio = (0, _calendar.coordinateToTimeRatio)(this.props.canvasTimeStart, this.props.canvasTimeEnd, this.props.canvasWidth);
    		      var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetLeft;
    		      var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);
    		      return (e.pageX - offset + scrolls.scrollLeft) * ratio + this.props.canvasTimeStart;
    		    }
    		  }, {
    		    key: "dragGroupDelta",
    		    value: function dragGroupDelta(e) {
    		      var _this$props2 = this.props,
    		        groupTops = _this$props2.groupTops,
    		        order = _this$props2.order;
    		      if (this.state.dragging) {
    		        if (!this.props.canChangeGroup) {
    		          return 0;
    		        }
    		        var groupDelta = 0;
    		        var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetTop;
    		        var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);
    		        for (var _i = 0, _Object$keys = Object.keys(groupTops); _i < _Object$keys.length; _i++) {
    		          var key = _Object$keys[_i];
    		          var groupTop = groupTops[key];
    		          if (e.pageY - offset + scrolls.scrollTop > groupTop) {
    		            groupDelta = parseInt(key, 10) - order.index;
    		          } else {
    		            break;
    		          }
    		        }
    		        if (this.props.order.index + groupDelta < 0) {
    		          return 0 - this.props.order.index;
    		        } else {
    		          return groupDelta;
    		        }
    		      } else {
    		        return 0;
    		      }
    		    }
    		  }, {
    		    key: "resizeTimeDelta",
    		    value: function resizeTimeDelta(e, resizeEdge) {
    		      var length = this.itemTimeEnd - this.itemTimeStart;
    		      var timeDelta = this.dragTimeSnap((e.pageX - this.state.resizeStart) * this.getTimeRatio());
    		      if (length + (resizeEdge === 'left' ? -timeDelta : timeDelta) < (this.props.dragSnap || 1000)) {
    		        if (resizeEdge === 'left') {
    		          return length - (this.props.dragSnap || 1000);
    		        } else {
    		          return (this.props.dragSnap || 1000) - length;
    		        }
    		      } else {
    		        return timeDelta;
    		      }
    		    }
    		  }, {
    		    key: "mountInteract",
    		    value: function mountInteract() {
    		      var _this2 = this;
    		      var leftResize = this.props.useResizeHandle ? ".rct-item-handler-resize-left" : true;
    		      var rightResize = this.props.useResizeHandle ? ".rct-item-handler-resize-right" : true;
    		      (0, _interactjs["default"])(this.item).resizable({
    		        edges: {
    		          left: this.canResizeLeft() && leftResize,
    		          right: this.canResizeRight() && rightResize,
    		          top: false,
    		          bottom: false
    		        },
    		        enabled: this.props.selected && (this.canResizeLeft() || this.canResizeRight())
    		      }).draggable({
    		        enabled: this.props.selected && this.canMove()
    		      }).styleCursor(false).on('dragstart', function (e) {
    		        if (_this2.props.selected) {
    		          var clickTime = _this2.timeFor(e);
    		          _this2.setState({
    		            dragging: true,
    		            dragStart: {
    		              x: e.pageX,
    		              y: e.pageY,
    		              offset: _this2.itemTimeStart - clickTime
    		            },
    		            preDragPosition: {
    		              x: e.target.offsetLeft,
    		              y: e.target.offsetTop
    		            },
    		            dragTime: _this2.itemTimeStart,
    		            dragGroupDelta: 0
    		          });
    		        } else {
    		          return false;
    		        }
    		      }).on('dragmove', function (e) {
    		        if (_this2.state.dragging) {
    		          var dragTime = _this2.dragTime(e);
    		          var dragGroupDelta = _this2.dragGroupDelta(e);
    		          if (_this2.props.moveResizeValidator) {
    		            dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);
    		          }
    		          if (_this2.props.onDrag) {
    		            _this2.props.onDrag(_this2.itemId, dragTime, _this2.props.order.index + dragGroupDelta);
    		          }
    		          _this2.setState({
    		            dragTime: dragTime,
    		            dragGroupDelta: dragGroupDelta
    		          });
    		        }
    		      }).on('dragend', function (e) {
    		        if (_this2.state.dragging) {
    		          if (_this2.props.onDrop) {
    		            var dragTime = _this2.dragTime(e);
    		            if (_this2.props.moveResizeValidator) {
    		              dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);
    		            }
    		            _this2.props.onDrop(_this2.itemId, dragTime, _this2.props.order.index + _this2.dragGroupDelta(e));
    		          }
    		          _this2.setState({
    		            dragging: false,
    		            dragStart: null,
    		            preDragPosition: null,
    		            dragTime: null,
    		            dragGroupDelta: null
    		          });
    		        }
    		      }).on('resizestart', function (e) {
    		        if (_this2.props.selected) {
    		          _this2.setState({
    		            resizing: true,
    		            resizeEdge: null,
    		            // we don't know yet
    		            resizeStart: e.pageX,
    		            resizeTime: 0
    		          });
    		        } else {
    		          return false;
    		        }
    		      }).on('resizemove', function (e) {
    		        if (_this2.state.resizing) {
    		          var resizeEdge = _this2.state.resizeEdge;
    		          if (!resizeEdge) {
    		            resizeEdge = e.deltaRect.left !== 0 ? 'left' : 'right';
    		            _this2.setState({
    		              resizeEdge: resizeEdge
    		            });
    		          }
    		          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));
    		          if (_this2.props.moveResizeValidator) {
    		            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);
    		          }
    		          if (_this2.props.onResizing) {
    		            _this2.props.onResizing(_this2.itemId, resizeTime, resizeEdge);
    		          }
    		          _this2.setState({
    		            resizeTime: resizeTime
    		          });
    		        }
    		      }).on('resizeend', function (e) {
    		        if (_this2.state.resizing) {
    		          var resizeEdge = _this2.state.resizeEdge;
    		          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));
    		          if (_this2.props.moveResizeValidator) {
    		            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);
    		          }
    		          if (_this2.props.onResized) {
    		            _this2.props.onResized(_this2.itemId, resizeTime, resizeEdge, _this2.resizeTimeDelta(e, resizeEdge));
    		          }
    		          _this2.setState({
    		            resizing: null,
    		            resizeStart: null,
    		            resizeEdge: null,
    		            resizeTime: null
    		          });
    		        }
    		      }).on('tap', function (e) {
    		        _this2.actualClick(e, e.pointerType === 'mouse' ? 'click' : 'touch');
    		      });
    		      this.setState({
    		        interactMounted: true
    		      });
    		    }
    		  }, {
    		    key: "canResizeLeft",
    		    value: function canResizeLeft() {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    		      if (!props.canResizeLeft) {
    		        return false;
    		      }
    		      var width = parseInt(props.dimensions.width, 10);
    		      return width >= props.minResizeWidth;
    		    }
    		  }, {
    		    key: "canResizeRight",
    		    value: function canResizeRight() {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    		      if (!props.canResizeRight) {
    		        return false;
    		      }
    		      var width = parseInt(props.dimensions.width, 10);
    		      return width >= props.minResizeWidth;
    		    }
    		  }, {
    		    key: "canMove",
    		    value: function canMove() {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    		      return !!props.canMove;
    		    }
    		  }, {
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps) {
    		      this.cacheDataFromProps(this.props);
    		      var interactMounted = this.state.interactMounted;
    		      var couldDrag = prevProps.selected && this.canMove(prevProps);
    		      var couldResizeLeft = prevProps.selected && this.canResizeLeft(prevProps);
    		      var couldResizeRight = prevProps.selected && this.canResizeRight(prevProps);
    		      var willBeAbleToDrag = this.props.selected && this.canMove(this.props);
    		      var willBeAbleToResizeLeft = this.props.selected && this.canResizeLeft(this.props);
    		      var willBeAbleToResizeRight = this.props.selected && this.canResizeRight(this.props);
    		      if (!!this.item) {
    		        if (this.props.selected && !interactMounted) {
    		          this.mountInteract();
    		          interactMounted = true;
    		        }
    		        if (interactMounted && (couldResizeLeft !== willBeAbleToResizeLeft || couldResizeRight !== willBeAbleToResizeRight)) {
    		          var leftResize = this.props.useResizeHandle ? this.dragLeft : true;
    		          var rightResize = this.props.useResizeHandle ? this.dragRight : true;
    		          (0, _interactjs["default"])(this.item).resizable({
    		            enabled: willBeAbleToResizeLeft || willBeAbleToResizeRight,
    		            edges: {
    		              top: false,
    		              bottom: false,
    		              left: willBeAbleToResizeLeft && leftResize,
    		              right: willBeAbleToResizeRight && rightResize
    		            }
    		          });
    		        }
    		        if (interactMounted && couldDrag !== willBeAbleToDrag) {
    		          (0, _interactjs["default"])(this.item).draggable({
    		            enabled: willBeAbleToDrag
    		          });
    		        }
    		      } else {
    		        interactMounted = false;
    		      }
    		      this.setState({
    		        interactMounted: interactMounted
    		      });
    		    }
    		  }, {
    		    key: "actualClick",
    		    value: function actualClick(e, clickType) {
    		      if (this.props.canSelect && this.props.onSelect) {
    		        this.props.onSelect(this.itemId, clickType, e);
    		      }
    		    }
    		  }, {
    		    key: "getItemStyle",
    		    value: function getItemStyle(props) {
    		      var dimensions = this.props.dimensions;
    		      var baseStyles = {
    		        position: 'absolute',
    		        boxSizing: 'border-box',
    		        left: "".concat(dimensions.left, "px"),
    		        top: "".concat(dimensions.top, "px"),
    		        width: "".concat(dimensions.width, "px"),
    		        height: "".concat(dimensions.height, "px"),
    		        lineHeight: "".concat(dimensions.height, "px")
    		      };
    		      var finalStyle = Object.assign({}, _styles.overridableStyles, this.props.selected ? _styles.selectedStyle : {}, this.props.selected & this.canMove(this.props) ? _styles.selectedAndCanMove : {}, this.props.selected & this.canResizeLeft(this.props) ? _styles.selectedAndCanResizeLeft : {}, this.props.selected & this.canResizeLeft(this.props) & this.state.dragging ? _styles.selectedAndCanResizeLeftAndDragLeft : {}, this.props.selected & this.canResizeRight(this.props) ? _styles.selectedAndCanResizeRight : {}, this.props.selected & this.canResizeRight(this.props) & this.state.dragging ? _styles.selectedAndCanResizeRightAndDragRight : {}, props.style, baseStyles);
    		      return finalStyle;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      if (typeof this.props.order === 'undefined' || this.props.order === null) {
    		        return null;
    		      }
    		      var timelineContext = this.context.getTimelineContext();
    		      var itemContext = {
    		        dimensions: this.props.dimensions,
    		        useResizeHandle: this.props.useResizeHandle,
    		        title: this.itemTitle,
    		        canMove: this.canMove(this.props),
    		        canResizeLeft: this.canResizeLeft(this.props),
    		        canResizeRight: this.canResizeRight(this.props),
    		        selected: this.props.selected,
    		        dragging: this.state.dragging,
    		        dragStart: this.state.dragStart,
    		        dragTime: this.state.dragTime,
    		        dragGroupDelta: this.state.dragGroupDelta,
    		        resizing: this.state.resizing,
    		        resizeEdge: this.state.resizeEdge,
    		        resizeStart: this.state.resizeStart,
    		        resizeTime: this.state.resizeTime,
    		        width: this.props.dimensions.width
    		      };
    		      return this.props.itemRenderer({
    		        item: this.props.item,
    		        timelineContext: timelineContext,
    		        itemContext: itemContext,
    		        getItemProps: this.getItemProps,
    		        getResizeProps: this.getResizeProps
    		      });
    		    }
    		  }]);
    		  return Item;
    		}(_react.Component);
    		exports["default"] = Item;
    		_defineProperty(Item, "propTypes", {
    		  canvasTimeStart: _propTypes["default"].number.isRequired,
    		  canvasTimeEnd: _propTypes["default"].number.isRequired,
    		  canvasWidth: _propTypes["default"].number.isRequired,
    		  order: _propTypes["default"].object,
    		  dragSnap: _propTypes["default"].number,
    		  minResizeWidth: _propTypes["default"].number,
    		  selected: _propTypes["default"].bool,
    		  canChangeGroup: _propTypes["default"].bool.isRequired,
    		  canMove: _propTypes["default"].bool.isRequired,
    		  canResizeLeft: _propTypes["default"].bool.isRequired,
    		  canResizeRight: _propTypes["default"].bool.isRequired,
    		  keys: _propTypes["default"].object.isRequired,
    		  item: _propTypes["default"].object.isRequired,
    		  onSelect: _propTypes["default"].func,
    		  onDrag: _propTypes["default"].func,
    		  onDrop: _propTypes["default"].func,
    		  onResizing: _propTypes["default"].func,
    		  onResized: _propTypes["default"].func,
    		  onContextMenu: _propTypes["default"].func,
    		  itemRenderer: _propTypes["default"].func,
    		  itemProps: _propTypes["default"].object,
    		  canSelect: _propTypes["default"].bool,
    		  dimensions: _propTypes["default"].object,
    		  groupTops: _propTypes["default"].array,
    		  useResizeHandle: _propTypes["default"].bool,
    		  moveResizeValidator: _propTypes["default"].func,
    		  onItemDoubleClick: _propTypes["default"].func,
    		  scrollRef: _propTypes["default"].object
    		});
    		_defineProperty(Item, "defaultProps", {
    		  selected: false,
    		  itemRenderer: _defaultItemRenderer.defaultItemRenderer
    		});
    		_defineProperty(Item, "contextTypes", {
    		  getTimelineContext: _propTypes["default"].func
    		}); 
    	} (Item));
    	return Item;
    }

    var hasRequiredItems;

    function requireItems () {
    	if (hasRequiredItems) return Items;
    	hasRequiredItems = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _react = _interopRequireWildcard(require("react"));
    		var _Item = _interopRequireDefault(requireItem());
    		var _generic = requireGeneric();
    		var _calendar = requireCalendar();
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var canResizeLeft = function canResizeLeft(item, canResize) {
    		  var value = (0, _generic._get)(item, 'canResize') !== undefined ? (0, _generic._get)(item, 'canResize') : canResize;
    		  return value === 'left' || value === 'both';
    		};
    		var canResizeRight = function canResizeRight(item, canResize) {
    		  var value = (0, _generic._get)(item, 'canResize') !== undefined ? (0, _generic._get)(item, 'canResize') : canResize;
    		  return value === 'right' || value === 'both' || value === true;
    		};
    		var Items = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(Items, _Component);
    		  function Items() {
    		    _classCallCheck(this, Items);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(Items).apply(this, arguments));
    		  }
    		  _createClass(Items, [{
    		    key: "shouldComponentUpdate",
    		    value: function shouldComponentUpdate(nextProps) {
    		      return !((0, _generic.arraysEqual)(nextProps.groups, this.props.groups) && (0, _generic.arraysEqual)(nextProps.items, this.props.items) && (0, _generic.arraysEqual)(nextProps.dimensionItems, this.props.dimensionItems) && nextProps.keys === this.props.keys && nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.selectedItem === this.props.selectedItem && nextProps.selected === this.props.selected && nextProps.dragSnap === this.props.dragSnap && nextProps.minResizeWidth === this.props.minResizeWidth && nextProps.canChangeGroup === this.props.canChangeGroup && nextProps.canMove === this.props.canMove && nextProps.canResize === this.props.canResize && nextProps.canSelect === this.props.canSelect);
    		    }
    		  }, {
    		    key: "isSelected",
    		    value: function isSelected(item, itemIdKey) {
    		      if (!this.props.selected) {
    		        return this.props.selectedItem === (0, _generic._get)(item, itemIdKey);
    		      } else {
    		        var target = (0, _generic._get)(item, itemIdKey);
    		        return this.props.selected.includes(target);
    		      }
    		    }
    		  }, {
    		    key: "getVisibleItems",
    		    value: function getVisibleItems(canvasTimeStart, canvasTimeEnd) {
    		      var _this$props = this.props,
    		        keys = _this$props.keys,
    		        items = _this$props.items;
    		      return (0, _calendar.getVisibleItems)(items, canvasTimeStart, canvasTimeEnd, keys);
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this = this;
    		      var _this$props2 = this.props,
    		        canvasTimeStart = _this$props2.canvasTimeStart,
    		        canvasTimeEnd = _this$props2.canvasTimeEnd,
    		        dimensionItems = _this$props2.dimensionItems,
    		        keys = _this$props2.keys,
    		        groups = _this$props2.groups;
    		      var itemIdKey = keys.itemIdKey,
    		        itemGroupKey = keys.itemGroupKey;
    		      var groupOrders = (0, _calendar.getGroupOrders)(groups, keys);
    		      var visibleItems = this.getVisibleItems(canvasTimeStart, canvasTimeEnd, groupOrders);
    		      var sortedDimensionItems = (0, _generic.keyBy)(dimensionItems, 'id');
    		      return _react["default"].createElement("div", {
    		        className: "rct-items"
    		      }, visibleItems.filter(function (item) {
    		        return sortedDimensionItems[(0, _generic._get)(item, itemIdKey)];
    		      }).map(function (item) {
    		        return _react["default"].createElement(_Item["default"], {
    		          key: (0, _generic._get)(item, itemIdKey),
    		          item: item,
    		          keys: _this.props.keys,
    		          order: groupOrders[(0, _generic._get)(item, itemGroupKey)],
    		          dimensions: sortedDimensionItems[(0, _generic._get)(item, itemIdKey)].dimensions,
    		          selected: _this.isSelected(item, itemIdKey),
    		          canChangeGroup: (0, _generic._get)(item, 'canChangeGroup') !== undefined ? (0, _generic._get)(item, 'canChangeGroup') : _this.props.canChangeGroup,
    		          canMove: (0, _generic._get)(item, 'canMove') !== undefined ? (0, _generic._get)(item, 'canMove') : _this.props.canMove,
    		          canResizeLeft: canResizeLeft(item, _this.props.canResize),
    		          canResizeRight: canResizeRight(item, _this.props.canResize),
    		          canSelect: (0, _generic._get)(item, 'canSelect') !== undefined ? (0, _generic._get)(item, 'canSelect') : _this.props.canSelect,
    		          useResizeHandle: _this.props.useResizeHandle,
    		          groupTops: _this.props.groupTops,
    		          canvasTimeStart: _this.props.canvasTimeStart,
    		          canvasTimeEnd: _this.props.canvasTimeEnd,
    		          canvasWidth: _this.props.canvasWidth,
    		          dragSnap: _this.props.dragSnap,
    		          minResizeWidth: _this.props.minResizeWidth,
    		          onResizing: _this.props.itemResizing,
    		          onResized: _this.props.itemResized,
    		          moveResizeValidator: _this.props.moveResizeValidator,
    		          onDrag: _this.props.itemDrag,
    		          onDrop: _this.props.itemDrop,
    		          onItemDoubleClick: _this.props.onItemDoubleClick,
    		          onContextMenu: _this.props.onItemContextMenu,
    		          onSelect: _this.props.itemSelect,
    		          itemRenderer: _this.props.itemRenderer,
    		          scrollRef: _this.props.scrollRef
    		        });
    		      }));
    		    }
    		  }]);
    		  return Items;
    		}(_react.Component);
    		exports["default"] = Items;
    		_defineProperty(Items, "propTypes", {
    		  groups: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
    		  items: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
    		  canvasTimeStart: _propTypes["default"].number.isRequired,
    		  canvasTimeEnd: _propTypes["default"].number.isRequired,
    		  canvasWidth: _propTypes["default"].number.isRequired,
    		  dragSnap: _propTypes["default"].number,
    		  minResizeWidth: _propTypes["default"].number,
    		  selectedItem: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
    		  canChangeGroup: _propTypes["default"].bool.isRequired,
    		  canMove: _propTypes["default"].bool.isRequired,
    		  canResize: _propTypes["default"].oneOf([true, false, 'left', 'right', 'both']),
    		  canSelect: _propTypes["default"].bool,
    		  keys: _propTypes["default"].object.isRequired,
    		  moveResizeValidator: _propTypes["default"].func,
    		  itemSelect: _propTypes["default"].func,
    		  itemDrag: _propTypes["default"].func,
    		  itemDrop: _propTypes["default"].func,
    		  itemResizing: _propTypes["default"].func,
    		  itemResized: _propTypes["default"].func,
    		  onItemDoubleClick: _propTypes["default"].func,
    		  onItemContextMenu: _propTypes["default"].func,
    		  itemRenderer: _propTypes["default"].func,
    		  selected: _propTypes["default"].array,
    		  dimensionItems: _propTypes["default"].array,
    		  groupTops: _propTypes["default"].array,
    		  useResizeHandle: _propTypes["default"].bool,
    		  scrollRef: _propTypes["default"].object
    		});
    		_defineProperty(Items, "defaultProps", {
    		  selected: []
    		}); 
    	} (Items));
    	return Items;
    }

    var Sidebar = {};

    var hasRequiredSidebar;

    function requireSidebar () {
    	if (hasRequiredSidebar) return Sidebar;
    	hasRequiredSidebar = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _react = _interopRequireWildcard(require("react"));
    		var _generic = requireGeneric();
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var Sidebar = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(Sidebar, _Component);
    		  function Sidebar() {
    		    _classCallCheck(this, Sidebar);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).apply(this, arguments));
    		  }
    		  _createClass(Sidebar, [{
    		    key: "shouldComponentUpdate",
    		    value: function shouldComponentUpdate(nextProps) {
    		      return !(nextProps.keys === this.props.keys && nextProps.width === this.props.width && nextProps.height === this.props.height && (0, _generic.arraysEqual)(nextProps.groups, this.props.groups) && (0, _generic.arraysEqual)(nextProps.groupHeights, this.props.groupHeights));
    		    }
    		  }, {
    		    key: "renderGroupContent",
    		    value: function renderGroupContent(group, isRightSidebar, groupTitleKey, groupRightTitleKey) {
    		      if (this.props.groupRenderer) {
    		        return _react["default"].createElement(this.props.groupRenderer, {
    		          group: group,
    		          isRightSidebar: isRightSidebar
    		        });
    		      } else {
    		        return (0, _generic._get)(group, isRightSidebar ? groupRightTitleKey : groupTitleKey);
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this = this;
    		      var _this$props = this.props,
    		        width = _this$props.width,
    		        groupHeights = _this$props.groupHeights,
    		        height = _this$props.height,
    		        isRightSidebar = _this$props.isRightSidebar;
    		      var _this$props$keys = this.props.keys,
    		        groupIdKey = _this$props$keys.groupIdKey,
    		        groupTitleKey = _this$props$keys.groupTitleKey,
    		        groupRightTitleKey = _this$props$keys.groupRightTitleKey;
    		      var sidebarStyle = {
    		        width: "".concat(width, "px"),
    		        height: "".concat(height, "px")
    		      };
    		      var groupsStyle = {
    		        width: "".concat(width, "px")
    		      };
    		      var groupLines = this.props.groups.map(function (group, index) {
    		        var elementStyle = {
    		          height: "".concat(groupHeights[index], "px"),
    		          lineHeight: "".concat(groupHeights[index], "px")
    		        };
    		        return _react["default"].createElement("div", {
    		          key: (0, _generic._get)(group, groupIdKey),
    		          className: 'rct-sidebar-row rct-sidebar-row-' + (index % 2 === 0 ? 'even' : 'odd'),
    		          style: elementStyle
    		        }, _this.renderGroupContent(group, isRightSidebar, groupTitleKey, groupRightTitleKey));
    		      });
    		      return _react["default"].createElement("div", {
    		        className: 'rct-sidebar' + (isRightSidebar ? ' rct-sidebar-right' : ''),
    		        style: sidebarStyle
    		      }, _react["default"].createElement("div", {
    		        style: groupsStyle
    		      }, groupLines));
    		    }
    		  }]);
    		  return Sidebar;
    		}(_react.Component);
    		exports["default"] = Sidebar;
    		_defineProperty(Sidebar, "propTypes", {
    		  groups: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
    		  width: _propTypes["default"].number.isRequired,
    		  height: _propTypes["default"].number.isRequired,
    		  groupHeights: _propTypes["default"].array.isRequired,
    		  keys: _propTypes["default"].object.isRequired,
    		  groupRenderer: _propTypes["default"].func,
    		  isRightSidebar: _propTypes["default"].bool
    		}); 
    	} (Sidebar));
    	return Sidebar;
    }

    var Columns = {};

    var TimelineStateContext = {};

    var lib = {exports: {}};

    var implementation = {exports: {}};

    var gud;
    var hasRequiredGud;

    function requireGud () {
    	if (hasRequiredGud) return gud;
    	hasRequiredGud = 1;

    	var key = '__global_unique_id__';
    	gud = function () {
    	  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
    	};
    	return gud;
    }

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var warning_1;
    var hasRequiredWarning;

    function requireWarning () {
    	if (hasRequiredWarning) return warning_1;
    	hasRequiredWarning = 1;
    	var warning = function () {};
    	{
    	  var printWarning = function printWarning(format, args) {
    	    var len = arguments.length;
    	    args = new Array(len > 1 ? len - 1 : 0);
    	    for (var key = 1; key < len; key++) {
    	      args[key - 1] = arguments[key];
    	    }
    	    var argIndex = 0;
    	    var message = 'Warning: ' + format.replace(/%s/g, function () {
    	      return args[argIndex++];
    	    });
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {}
    	  };
    	  warning = function (condition, format, args) {
    	    var len = arguments.length;
    	    args = new Array(len > 2 ? len - 2 : 0);
    	    for (var key = 2; key < len; key++) {
    	      args[key - 2] = arguments[key];
    	    }
    	    if (format === undefined) {
    	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    	    }
    	    if (!condition) {
    	      printWarning.apply(null, [format].concat(args));
    	    }
    	  };
    	}
    	warning_1 = warning;
    	return warning_1;
    }

    var hasRequiredImplementation;

    function requireImplementation () {
    	if (hasRequiredImplementation) return implementation.exports;
    	hasRequiredImplementation = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		var _react = require('react');
    		_interopRequireDefault(_react);
    		var _propTypes = /*@__PURE__*/ requirePropTypes();
    		var _propTypes2 = _interopRequireDefault(_propTypes);
    		var _gud = requireGud();
    		var _gud2 = _interopRequireDefault(_gud);
    		var _warning = requireWarning();
    		var _warning2 = _interopRequireDefault(_warning);
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (!self) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return call && (typeof call === "object" || typeof call === "function") ? call : self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      enumerable: false,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    		}
    		var MAX_SIGNED_31_BIT_INT = 1073741823;

    		// Inlined Object.is polyfill.
    		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    		function objectIs(x, y) {
    		  if (x === y) {
    		    return x !== 0 || 1 / x === 1 / y;
    		  } else {
    		    return x !== x && y !== y;
    		  }
    		}
    		function createEventEmitter(value) {
    		  var handlers = [];
    		  return {
    		    on: function on(handler) {
    		      handlers.push(handler);
    		    },
    		    off: function off(handler) {
    		      handlers = handlers.filter(function (h) {
    		        return h !== handler;
    		      });
    		    },
    		    get: function get() {
    		      return value;
    		    },
    		    set: function set(newValue, changedBits) {
    		      value = newValue;
    		      handlers.forEach(function (handler) {
    		        return handler(value, changedBits);
    		      });
    		    }
    		  };
    		}
    		function onlyChild(children) {
    		  return Array.isArray(children) ? children[0] : children;
    		}
    		function createReactContext(defaultValue, calculateChangedBits) {
    		  var _Provider$childContex, _Consumer$contextType;
    		  var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';
    		  var Provider = function (_Component) {
    		    _inherits(Provider, _Component);
    		    function Provider() {
    		      var _temp, _this, _ret;
    		      _classCallCheck(this, Provider);
    		      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    		        args[_key] = arguments[_key];
    		      }
    		      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
    		    }
    		    Provider.prototype.getChildContext = function getChildContext() {
    		      var _ref;
    		      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    		    };
    		    Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    		      if (this.props.value !== nextProps.value) {
    		        var oldValue = this.props.value;
    		        var newValue = nextProps.value;
    		        var changedBits = void 0;
    		        if (objectIs(oldValue, newValue)) {
    		          changedBits = 0; // No change
    		        } else {
    		          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
    		          {
    		            (0, _warning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
    		          }
    		          changedBits |= 0;
    		          if (changedBits !== 0) {
    		            this.emitter.set(nextProps.value, changedBits);
    		          }
    		        }
    		      }
    		    };
    		    Provider.prototype.render = function render() {
    		      return this.props.children;
    		    };
    		    return Provider;
    		  }(_react.Component);
    		  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);
    		  var Consumer = function (_Component2) {
    		    _inherits(Consumer, _Component2);
    		    function Consumer() {
    		      var _temp2, _this2, _ret2;
    		      _classCallCheck(this, Consumer);
    		      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    		        args[_key2] = arguments[_key2];
    		      }
    		      return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
    		        value: _this2.getValue()
    		      }, _this2.onUpdate = function (newValue, changedBits) {
    		        var observedBits = _this2.observedBits | 0;
    		        if ((observedBits & changedBits) !== 0) {
    		          _this2.setState({
    		            value: _this2.getValue()
    		          });
    		        }
    		      }, _temp2), _possibleConstructorReturn(_this2, _ret2);
    		    }
    		    Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    		      var observedBits = nextProps.observedBits;
    		      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
    		      : observedBits;
    		    };
    		    Consumer.prototype.componentDidMount = function componentDidMount() {
    		      if (this.context[contextProp]) {
    		        this.context[contextProp].on(this.onUpdate);
    		      }
    		      var observedBits = this.props.observedBits;
    		      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
    		      : observedBits;
    		    };
    		    Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
    		      if (this.context[contextProp]) {
    		        this.context[contextProp].off(this.onUpdate);
    		      }
    		    };
    		    Consumer.prototype.getValue = function getValue() {
    		      if (this.context[contextProp]) {
    		        return this.context[contextProp].get();
    		      } else {
    		        return defaultValue;
    		      }
    		    };
    		    Consumer.prototype.render = function render() {
    		      return onlyChild(this.props.children)(this.state.value);
    		    };
    		    return Consumer;
    		  }(_react.Component);
    		  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
    		  return {
    		    Provider: Provider,
    		    Consumer: Consumer
    		  };
    		}
    		exports.default = createReactContext;
    		module.exports = exports['default']; 
    	} (implementation, implementation.exports));
    	return implementation.exports;
    }

    var hasRequiredLib$1;

    function requireLib$1 () {
    	if (hasRequiredLib$1) return lib.exports;
    	hasRequiredLib$1 = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		var _react = require('react');
    		var _react2 = _interopRequireDefault(_react);
    		var _implementation = requireImplementation();
    		var _implementation2 = _interopRequireDefault(_implementation);
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		exports.default = _react2.default.createContext || _implementation2.default;
    		module.exports = exports['default']; 
    	} (lib, lib.exports));
    	return lib.exports;
    }

    var hasRequiredTimelineStateContext;

    function requireTimelineStateContext () {
    	if (hasRequiredTimelineStateContext) return TimelineStateContext;
    	hasRequiredTimelineStateContext = 1;

    	Object.defineProperty(TimelineStateContext, "__esModule", {
    	  value: true
    	});
    	TimelineStateContext.TimelineStateConsumer = TimelineStateContext.TimelineStateProvider = void 0;
    	var _react = _interopRequireDefault(require("react"));
    	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    	var _createReactContext2 = _interopRequireDefault(requireLib$1());
    	var _calendar = requireCalendar();
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	function _typeof(obj) {
    	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    	    _typeof = function _typeof(obj) {
    	      return typeof obj;
    	    };
    	  } else {
    	    _typeof = function _typeof(obj) {
    	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    	    };
    	  }
    	  return _typeof(obj);
    	}
    	function _classCallCheck(instance, Constructor) {
    	  if (!(instance instanceof Constructor)) {
    	    throw new TypeError("Cannot call a class as a function");
    	  }
    	}
    	function _defineProperties(target, props) {
    	  for (var i = 0; i < props.length; i++) {
    	    var descriptor = props[i];
    	    descriptor.enumerable = descriptor.enumerable || false;
    	    descriptor.configurable = true;
    	    if ("value" in descriptor) descriptor.writable = true;
    	    Object.defineProperty(target, descriptor.key, descriptor);
    	  }
    	}
    	function _createClass(Constructor, protoProps, staticProps) {
    	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    	  if (staticProps) _defineProperties(Constructor, staticProps);
    	  return Constructor;
    	}
    	function _possibleConstructorReturn(self, call) {
    	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    	    return call;
    	  }
    	  return _assertThisInitialized(self);
    	}
    	function _getPrototypeOf(o) {
    	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    	    return o.__proto__ || Object.getPrototypeOf(o);
    	  };
    	  return _getPrototypeOf(o);
    	}
    	function _assertThisInitialized(self) {
    	  if (self === void 0) {
    	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    	  }
    	  return self;
    	}
    	function _inherits(subClass, superClass) {
    	  if (typeof superClass !== "function" && superClass !== null) {
    	    throw new TypeError("Super expression must either be null or a function");
    	  }
    	  subClass.prototype = Object.create(superClass && superClass.prototype, {
    	    constructor: {
    	      value: subClass,
    	      writable: true,
    	      configurable: true
    	    }
    	  });
    	  if (superClass) _setPrototypeOf(subClass, superClass);
    	}
    	function _setPrototypeOf(o, p) {
    	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    	    o.__proto__ = p;
    	    return o;
    	  };
    	  return _setPrototypeOf(o, p);
    	}
    	function _defineProperty(obj, key, value) {
    	  if (key in obj) {
    	    Object.defineProperty(obj, key, {
    	      value: value,
    	      enumerable: true,
    	      configurable: true,
    	      writable: true
    	    });
    	  } else {
    	    obj[key] = value;
    	  }
    	  return obj;
    	}

    	/* this context will hold all information regarding timeline state:
    	  1. timeline width
    	  2. visible time start and end
    	  3. canvas time start and end
    	  4. helpers for calculating left offset of items (and really...anything)
    	*/

    	/* eslint-disable no-console */
    	var defaultContextState = {
    	  getTimelineState: function getTimelineState() {
    	    console.warn('"getTimelineState" default func is being used');
    	  },
    	  getLeftOffsetFromDate: function getLeftOffsetFromDate() {
    	    console.warn('"getLeftOffsetFromDate" default func is being used');
    	  },
    	  getDateFromLeftOffsetPosition: function getDateFromLeftOffsetPosition() {
    	    console.warn('"getDateFromLeftOffsetPosition" default func is being used');
    	  },
    	  showPeriod: function showPeriod() {
    	    console.warn('"showPeriod" default func is being used');
    	  }
    	  /* eslint-enable */
    	};
    	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
    	  Consumer = _createReactContext.Consumer,
    	  Provider = _createReactContext.Provider;
    	var TimelineStateProvider = /*#__PURE__*/
    	function (_React$Component) {
    	  _inherits(TimelineStateProvider, _React$Component);

    	  /* eslint-disable react/no-unused-prop-types */
    	  function TimelineStateProvider(props) {
    	    var _this;
    	    _classCallCheck(this, TimelineStateProvider);
    	    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimelineStateProvider).call(this, props));
    	    _defineProperty(_assertThisInitialized(_this), "getTimelineState", function () {
    	      var _this$props = _this.props,
    	        visibleTimeStart = _this$props.visibleTimeStart,
    	        visibleTimeEnd = _this$props.visibleTimeEnd,
    	        canvasTimeStart = _this$props.canvasTimeStart,
    	        canvasTimeEnd = _this$props.canvasTimeEnd,
    	        canvasWidth = _this$props.canvasWidth,
    	        timelineUnit = _this$props.timelineUnit,
    	        timelineWidth = _this$props.timelineWidth;
    	      return {
    	        visibleTimeStart: visibleTimeStart,
    	        visibleTimeEnd: visibleTimeEnd,
    	        canvasTimeStart: canvasTimeStart,
    	        canvasTimeEnd: canvasTimeEnd,
    	        canvasWidth: canvasWidth,
    	        timelineUnit: timelineUnit,
    	        timelineWidth: timelineWidth // REVIEW,
    	      };
    	    });
    	    _defineProperty(_assertThisInitialized(_this), "getLeftOffsetFromDate", function (date) {
    	      var _this$props2 = _this.props,
    	        canvasTimeStart = _this$props2.canvasTimeStart,
    	        canvasTimeEnd = _this$props2.canvasTimeEnd,
    	        canvasWidth = _this$props2.canvasWidth;
    	      return (0, _calendar.calculateXPositionForTime)(canvasTimeStart, canvasTimeEnd, canvasWidth, date);
    	    });
    	    _defineProperty(_assertThisInitialized(_this), "getDateFromLeftOffsetPosition", function (leftOffset) {
    	      var _this$props3 = _this.props,
    	        canvasTimeStart = _this$props3.canvasTimeStart,
    	        canvasTimeEnd = _this$props3.canvasTimeEnd,
    	        canvasWidth = _this$props3.canvasWidth;
    	      return (0, _calendar.calculateTimeForXPosition)(canvasTimeStart, canvasTimeEnd, canvasWidth, leftOffset);
    	    });
    	    _this.state = {
    	      timelineContext: {
    	        getTimelineState: _this.getTimelineState,
    	        getLeftOffsetFromDate: _this.getLeftOffsetFromDate,
    	        getDateFromLeftOffsetPosition: _this.getDateFromLeftOffsetPosition,
    	        showPeriod: _this.props.showPeriod
    	      }
    	    };
    	    return _this;
    	  }
    	  _createClass(TimelineStateProvider, [{
    	    key: "render",
    	    value: function render() {
    	      return _react["default"].createElement(Provider, {
    	        value: this.state.timelineContext
    	      }, this.props.children);
    	    }
    	  }]);
    	  return TimelineStateProvider;
    	}(_react["default"].Component);
    	TimelineStateContext.TimelineStateProvider = TimelineStateProvider;
    	_defineProperty(TimelineStateProvider, "propTypes", {
    	  children: _propTypes["default"].element.isRequired,
    	  visibleTimeStart: _propTypes["default"].number.isRequired,
    	  visibleTimeEnd: _propTypes["default"].number.isRequired,
    	  canvasTimeStart: _propTypes["default"].number.isRequired,
    	  canvasTimeEnd: _propTypes["default"].number.isRequired,
    	  canvasWidth: _propTypes["default"].number.isRequired,
    	  showPeriod: _propTypes["default"].func.isRequired,
    	  timelineUnit: _propTypes["default"].string.isRequired,
    	  timelineWidth: _propTypes["default"].number.isRequired
    	});
    	var TimelineStateConsumer = Consumer;
    	TimelineStateContext.TimelineStateConsumer = TimelineStateConsumer;
    	return TimelineStateContext;
    }

    var hasRequiredColumns;

    function requireColumns () {
    	if (hasRequiredColumns) return Columns;
    	hasRequiredColumns = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _react = _interopRequireWildcard(require("react"));
    		var _calendar = requireCalendar();
    		var _TimelineStateContext = requireTimelineStateContext();
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var passThroughPropTypes = {
    		  canvasTimeStart: _propTypes["default"].number.isRequired,
    		  canvasTimeEnd: _propTypes["default"].number.isRequired,
    		  canvasWidth: _propTypes["default"].number.isRequired,
    		  lineCount: _propTypes["default"].number.isRequired,
    		  minUnit: _propTypes["default"].string.isRequired,
    		  timeSteps: _propTypes["default"].object.isRequired,
    		  height: _propTypes["default"].number.isRequired,
    		  verticalLineClassNamesForTime: _propTypes["default"].func
    		};
    		var Columns = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(Columns, _Component);
    		  function Columns() {
    		    _classCallCheck(this, Columns);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(Columns).apply(this, arguments));
    		  }
    		  _createClass(Columns, [{
    		    key: "shouldComponentUpdate",
    		    value: function shouldComponentUpdate(nextProps) {
    		      return !(nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.lineCount === this.props.lineCount && nextProps.minUnit === this.props.minUnit && nextProps.timeSteps === this.props.timeSteps && nextProps.height === this.props.height && nextProps.verticalLineClassNamesForTime === this.props.verticalLineClassNamesForTime);
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$props = this.props,
    		        canvasTimeStart = _this$props.canvasTimeStart,
    		        canvasTimeEnd = _this$props.canvasTimeEnd;
    		        _this$props.canvasWidth;
    		        var minUnit = _this$props.minUnit,
    		        timeSteps = _this$props.timeSteps,
    		        height = _this$props.height,
    		        verticalLineClassNamesForTime = _this$props.verticalLineClassNamesForTime,
    		        getLeftOffsetFromDate = _this$props.getLeftOffsetFromDate;
    		      var lines = [];
    		      (0, _calendar.iterateTimes)(canvasTimeStart, canvasTimeEnd, minUnit, timeSteps, function (time, nextTime) {
    		        var minUnitValue = time.get(minUnit === 'day' ? 'date' : minUnit);
    		        var firstOfType = minUnitValue === (minUnit === 'day' ? 1 : 0);
    		        var classNamesForTime = [];
    		        if (verticalLineClassNamesForTime) {
    		          classNamesForTime = verticalLineClassNamesForTime(time.unix() * 1000,
    		          // turn into ms, which is what verticalLineClassNamesForTime expects
    		          nextTime.unix() * 1000 - 1);
    		        } // TODO: rename or remove class that has reference to vertical-line

    		        var classNames = 'rct-vl' + (firstOfType ? ' rct-vl-first' : '') + (minUnit === 'day' || minUnit === 'hour' || minUnit === 'minute' ? " rct-day-".concat(time.day(), " ") : ' ') + classNamesForTime.join(' ');
    		        var left = getLeftOffsetFromDate(time.valueOf());
    		        var right = getLeftOffsetFromDate(nextTime.valueOf());
    		        lines.push(_react["default"].createElement("div", {
    		          key: "line-".concat(time.valueOf()),
    		          className: classNames,
    		          style: {
    		            pointerEvents: 'none',
    		            top: '0px',
    		            left: "".concat(left, "px"),
    		            width: "".concat(right - left, "px"),
    		            height: "".concat(height, "px")
    		          }
    		        }));
    		      });
    		      return _react["default"].createElement("div", {
    		        className: "rct-vertical-lines"
    		      }, lines);
    		    }
    		  }]);
    		  return Columns;
    		}(_react.Component);
    		_defineProperty(Columns, "propTypes", _objectSpread({}, passThroughPropTypes, {
    		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired
    		}));
    		var ColumnsWrapper = function ColumnsWrapper(_ref) {
    		  var props = _extends({}, _ref);
    		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref2) {
    		    var getLeftOffsetFromDate = _ref2.getLeftOffsetFromDate;
    		    return _react["default"].createElement(Columns, _extends({
    		      getLeftOffsetFromDate: getLeftOffsetFromDate
    		    }, props));
    		  });
    		};
    		ColumnsWrapper.defaultProps = _objectSpread({}, passThroughPropTypes);
    		var _default = ColumnsWrapper;
    		exports["default"] = _default; 
    	} (Columns));
    	return Columns;
    }

    var GroupRows = {};

    var GroupRow = {};

    var PreventClickOnDrag = {};

    var hasRequiredPreventClickOnDrag;

    function requirePreventClickOnDrag () {
    	if (hasRequiredPreventClickOnDrag) return PreventClickOnDrag;
    	hasRequiredPreventClickOnDrag = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireWildcard(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var PreventClickOnDrag = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(PreventClickOnDrag, _Component);
    		  function PreventClickOnDrag() {
    		    var _getPrototypeOf2;
    		    var _this;
    		    _classCallCheck(this, PreventClickOnDrag);
    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }
    		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PreventClickOnDrag)).call.apply(_getPrototypeOf2, [this].concat(args)));
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function (evt) {
    		      _this.originClickX = evt.clientX;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function (evt) {
    		      if (Math.abs(_this.originClickX - evt.clientX) > _this.props.clickTolerance) {
    		        _this.cancelClick = true;
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleClick", function (evt) {
    		      if (!_this.cancelClick) {
    		        _this.props.onClick(evt);
    		      }
    		      _this.cancelClick = false;
    		      _this.originClickX = null;
    		    });
    		    return _this;
    		  }
    		  _createClass(PreventClickOnDrag, [{
    		    key: "render",
    		    value: function render() {
    		      var childElement = _react["default"].Children.only(this.props.children);
    		      return _react["default"].cloneElement(childElement, {
    		        onMouseDown: this.handleMouseDown,
    		        onMouseUp: this.handleMouseUp,
    		        onClick: this.handleClick
    		      });
    		    }
    		  }]);
    		  return PreventClickOnDrag;
    		}(_react.Component);
    		_defineProperty(PreventClickOnDrag, "propTypes", {
    		  children: _propTypes["default"].element.isRequired,
    		  onClick: _propTypes["default"].func.isRequired,
    		  clickTolerance: _propTypes["default"].number.isRequired
    		});
    		var _default = PreventClickOnDrag;
    		exports["default"] = _default; 
    	} (PreventClickOnDrag));
    	return PreventClickOnDrag;
    }

    var hasRequiredGroupRow;

    function requireGroupRow () {
    	if (hasRequiredGroupRow) return GroupRow;
    	hasRequiredGroupRow = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireWildcard(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _PreventClickOnDrag = _interopRequireDefault(requirePreventClickOnDrag());
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var GroupRow = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(GroupRow, _Component);
    		  function GroupRow() {
    		    _classCallCheck(this, GroupRow);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(GroupRow).apply(this, arguments));
    		  }
    		  _createClass(GroupRow, [{
    		    key: "render",
    		    value: function render() {
    		      var _this$props = this.props,
    		        onContextMenu = _this$props.onContextMenu,
    		        onDoubleClick = _this$props.onDoubleClick,
    		        isEvenRow = _this$props.isEvenRow,
    		        style = _this$props.style,
    		        onClick = _this$props.onClick,
    		        clickTolerance = _this$props.clickTolerance,
    		        horizontalLineClassNamesForGroup = _this$props.horizontalLineClassNamesForGroup,
    		        group = _this$props.group;
    		      var classNamesForGroup = [];
    		      if (horizontalLineClassNamesForGroup) {
    		        classNamesForGroup = horizontalLineClassNamesForGroup(group);
    		      }
    		      return _react["default"].createElement(_PreventClickOnDrag["default"], {
    		        clickTolerance: clickTolerance,
    		        onClick: onClick
    		      }, _react["default"].createElement("div", {
    		        onContextMenu: onContextMenu,
    		        onDoubleClick: onDoubleClick,
    		        className: (isEvenRow ? 'rct-hl-even ' : 'rct-hl-odd ') + (classNamesForGroup ? classNamesForGroup.join(' ') : ''),
    		        style: style
    		      }));
    		    }
    		  }]);
    		  return GroupRow;
    		}(_react.Component);
    		_defineProperty(GroupRow, "propTypes", {
    		  onClick: _propTypes["default"].func.isRequired,
    		  onDoubleClick: _propTypes["default"].func.isRequired,
    		  onContextMenu: _propTypes["default"].func.isRequired,
    		  isEvenRow: _propTypes["default"].bool.isRequired,
    		  style: _propTypes["default"].object.isRequired,
    		  clickTolerance: _propTypes["default"].number.isRequired,
    		  group: _propTypes["default"].object.isRequired,
    		  horizontalLineClassNamesForGroup: _propTypes["default"].func
    		});
    		var _default = GroupRow;
    		exports["default"] = _default; 
    	} (GroupRow));
    	return GroupRow;
    }

    var hasRequiredGroupRows;

    function requireGroupRows () {
    	if (hasRequiredGroupRows) return GroupRows;
    	hasRequiredGroupRows = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _react = _interopRequireWildcard(require("react"));
    		var _GroupRow = _interopRequireDefault(requireGroupRow());
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var GroupRows = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(GroupRows, _Component);
    		  function GroupRows() {
    		    _classCallCheck(this, GroupRows);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(GroupRows).apply(this, arguments));
    		  }
    		  _createClass(GroupRows, [{
    		    key: "shouldComponentUpdate",
    		    value: function shouldComponentUpdate(nextProps) {
    		      return !(nextProps.canvasWidth === this.props.canvasWidth && nextProps.lineCount === this.props.lineCount && nextProps.groupHeights === this.props.groupHeights && nextProps.groups === this.props.groups);
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$props = this.props,
    		        canvasWidth = _this$props.canvasWidth,
    		        lineCount = _this$props.lineCount,
    		        groupHeights = _this$props.groupHeights,
    		        onRowClick = _this$props.onRowClick,
    		        onRowDoubleClick = _this$props.onRowDoubleClick,
    		        clickTolerance = _this$props.clickTolerance,
    		        groups = _this$props.groups,
    		        horizontalLineClassNamesForGroup = _this$props.horizontalLineClassNamesForGroup,
    		        onRowContextClick = _this$props.onRowContextClick;
    		      var lines = [];
    		      var _loop = function _loop(i) {
    		        lines.push(_react["default"].createElement(_GroupRow["default"], {
    		          clickTolerance: clickTolerance,
    		          onContextMenu: function onContextMenu(evt) {
    		            return onRowContextClick(evt, i);
    		          },
    		          onClick: function onClick(evt) {
    		            return onRowClick(evt, i);
    		          },
    		          onDoubleClick: function onDoubleClick(evt) {
    		            return onRowDoubleClick(evt, i);
    		          },
    		          key: "horizontal-line-".concat(i),
    		          isEvenRow: i % 2 === 0,
    		          group: groups[i],
    		          horizontalLineClassNamesForGroup: horizontalLineClassNamesForGroup,
    		          style: {
    		            width: "".concat(canvasWidth, "px"),
    		            height: "".concat(groupHeights[i], "px")
    		          }
    		        }));
    		      };
    		      for (var i = 0; i < lineCount; i++) {
    		        _loop(i);
    		      }
    		      return _react["default"].createElement("div", {
    		        className: "rct-horizontal-lines"
    		      }, lines);
    		    }
    		  }]);
    		  return GroupRows;
    		}(_react.Component);
    		exports["default"] = GroupRows;
    		_defineProperty(GroupRows, "propTypes", {
    		  canvasWidth: _propTypes["default"].number.isRequired,
    		  lineCount: _propTypes["default"].number.isRequired,
    		  groupHeights: _propTypes["default"].array.isRequired,
    		  onRowClick: _propTypes["default"].func.isRequired,
    		  onRowDoubleClick: _propTypes["default"].func.isRequired,
    		  clickTolerance: _propTypes["default"].number.isRequired,
    		  groups: _propTypes["default"].array.isRequired,
    		  horizontalLineClassNamesForGroup: _propTypes["default"].func,
    		  onRowContextClick: _propTypes["default"].func.isRequired
    		}); 
    	} (GroupRows));
    	return GroupRows;
    }

    var ScrollElement = {};

    var hasRequiredScrollElement;

    function requireScrollElement () {
    	if (hasRequiredScrollElement) return ScrollElement;
    	hasRequiredScrollElement = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireWildcard(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _domHelpers = requireDomHelpers();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var ScrollElement = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(ScrollElement, _Component);
    		  function ScrollElement() {
    		    var _this;
    		    _classCallCheck(this, ScrollElement);
    		    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollElement).call(this));
    		    _defineProperty(_assertThisInitialized(_this), "handleScroll", function () {
    		      var scrollX = _this.scrollComponent.scrollLeft;
    		      _this.props.onScroll(scrollX);
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "refHandler", function (el) {
    		      _this.scrollComponent = el;
    		      _this.props.scrollRef(el);
    		      if (el) {
    		        el.addEventListener('wheel', _this.handleWheel, {
    		          passive: false
    		        });
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleWheel", function (e) {
    		      _this.props.traditionalZoom; // zoom in the time dimension

    		      if (e.ctrlKey || e.metaKey || e.altKey) {
    		        e.preventDefault();
    		        var parentPosition = (0, _domHelpers.getParentPosition)(e.currentTarget);
    		        var xPosition = e.clientX - parentPosition.x;
    		        var speed = e.ctrlKey ? 10 : e.metaKey ? 3 : 1; // convert vertical zoom to horiziontal

    		        _this.props.onWheelZoom(speed, xPosition, e.deltaY);
    		      } else if (e.shiftKey) {
    		        e.preventDefault(); // shift+scroll event from a touchpad has deltaY property populated; shift+scroll event from a mouse has deltaX

    		        _this.props.onScroll(_this.scrollComponent.scrollLeft + (e.deltaY || e.deltaX)); // no modifier pressed? we prevented the default event, so scroll or zoom as needed
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function (e) {
    		      if (e.button === 0) {
    		        _this.dragStartPosition = e.pageX;
    		        _this.dragLastPosition = e.pageX;
    		        _this.setState({
    		          isDragging: true
    		        });
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (e) {
    		      // this.props.onMouseMove(e)
    		      //why is interacting with item important?
    		      if (_this.state.isDragging && !_this.props.isInteractingWithItem) {
    		        _this.props.onScroll(_this.scrollComponent.scrollLeft + _this.dragLastPosition - e.pageX);
    		        _this.dragLastPosition = e.pageX;
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function () {
    		      _this.dragStartPosition = null;
    		      _this.dragLastPosition = null;
    		      _this.setState({
    		        isDragging: false
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function () {
    		      // this.props.onMouseLeave(e)
    		      _this.dragStartPosition = null;
    		      _this.dragLastPosition = null;
    		      _this.setState({
    		        isDragging: false
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleTouchStart", function (e) {
    		      if (e.touches.length === 2) {
    		        e.preventDefault();
    		        _this.lastTouchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX);
    		        _this.singleTouchStart = null;
    		        _this.lastSingleTouch = null;
    		      } else if (e.touches.length === 1) {
    		        e.preventDefault();
    		        var x = e.touches[0].clientX;
    		        var y = e.touches[0].clientY;
    		        _this.lastTouchDistance = null;
    		        _this.singleTouchStart = {
    		          x: x,
    		          y: y,
    		          screenY: window.pageYOffset
    		        };
    		        _this.lastSingleTouch = {
    		          x: x,
    		          y: y,
    		          screenY: window.pageYOffset
    		        };
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleTouchMove", function (e) {
    		      var _this$props = _this.props,
    		        isInteractingWithItem = _this$props.isInteractingWithItem,
    		        width = _this$props.width,
    		        onZoom = _this$props.onZoom;
    		      if (isInteractingWithItem) {
    		        e.preventDefault();
    		        return;
    		      }
    		      if (_this.lastTouchDistance && e.touches.length === 2) {
    		        e.preventDefault();
    		        var touchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX);
    		        var parentPosition = (0, _domHelpers.getParentPosition)(e.currentTarget);
    		        var xPosition = (e.touches[0].screenX + e.touches[1].screenX) / 2 - parentPosition.x;
    		        if (touchDistance !== 0 && _this.lastTouchDistance !== 0) {
    		          onZoom(_this.lastTouchDistance / touchDistance, xPosition / width);
    		          _this.lastTouchDistance = touchDistance;
    		        }
    		      } else if (_this.lastSingleTouch && e.touches.length === 1) {
    		        e.preventDefault();
    		        var x = e.touches[0].clientX;
    		        var y = e.touches[0].clientY;
    		        var deltaX = x - _this.lastSingleTouch.x;
    		        var deltaX0 = x - _this.singleTouchStart.x;
    		        var deltaY0 = y - _this.singleTouchStart.y;
    		        _this.lastSingleTouch = {
    		          x: x,
    		          y: y
    		        };
    		        var moveX = Math.abs(deltaX0) * 3 > Math.abs(deltaY0);
    		        var moveY = Math.abs(deltaY0) * 3 > Math.abs(deltaX0);
    		        if (deltaX !== 0 && moveX) {
    		          _this.props.onScroll(_this.scrollComponent.scrollLeft - deltaX);
    		        }
    		        if (moveY) {
    		          window.scrollTo(window.pageXOffset, _this.singleTouchStart.screenY - deltaY0);
    		        }
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleTouchEnd", function () {
    		      if (_this.lastTouchDistance) {
    		        _this.lastTouchDistance = null;
    		      }
    		      if (_this.lastSingleTouch) {
    		        _this.lastSingleTouch = null;
    		        _this.singleTouchStart = null;
    		      }
    		    });
    		    _this.state = {
    		      isDragging: false
    		    };
    		    return _this;
    		  }
    		  /**
    		   * needed to handle scrolling with trackpad
    		   */

    		  _createClass(ScrollElement, [{
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      if (this.scrollComponent) {
    		        this.scrollComponent.removeEventListener('wheel', this.handleWheel);
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$props2 = this.props,
    		        width = _this$props2.width,
    		        height = _this$props2.height,
    		        children = _this$props2.children;
    		      var isDragging = this.state.isDragging;
    		      var scrollComponentStyle = {
    		        width: "".concat(width, "px"),
    		        height: "".concat(height + 20, "px"),
    		        //20px to push the scroll element down off screen...?
    		        cursor: isDragging ? 'move' : 'default',
    		        position: 'relative'
    		      };
    		      return _react["default"].createElement("div", {
    		        ref: this.refHandler,
    		        className: "rct-scroll",
    		        style: scrollComponentStyle,
    		        onMouseDown: this.handleMouseDown,
    		        onMouseMove: this.handleMouseMove,
    		        onMouseUp: this.handleMouseUp,
    		        onMouseLeave: this.handleMouseLeave,
    		        onTouchStart: this.handleTouchStart,
    		        onTouchMove: this.handleTouchMove,
    		        onTouchEnd: this.handleTouchEnd,
    		        onScroll: this.handleScroll
    		      }, children);
    		    }
    		  }]);
    		  return ScrollElement;
    		}(_react.Component);
    		_defineProperty(ScrollElement, "propTypes", {
    		  children: _propTypes["default"].element.isRequired,
    		  width: _propTypes["default"].number.isRequired,
    		  height: _propTypes["default"].number.isRequired,
    		  traditionalZoom: _propTypes["default"].bool.isRequired,
    		  scrollRef: _propTypes["default"].func.isRequired,
    		  isInteractingWithItem: _propTypes["default"].bool.isRequired,
    		  onZoom: _propTypes["default"].func.isRequired,
    		  onWheelZoom: _propTypes["default"].func.isRequired,
    		  onScroll: _propTypes["default"].func.isRequired
    		});
    		var _default = ScrollElement;
    		exports["default"] = _default; 
    	} (ScrollElement));
    	return ScrollElement;
    }

    var MarkerCanvas = {};

    var MarkerCanvasContext = {};

    var hasRequiredMarkerCanvasContext;

    function requireMarkerCanvasContext () {
    	if (hasRequiredMarkerCanvasContext) return MarkerCanvasContext;
    	hasRequiredMarkerCanvasContext = 1;

    	Object.defineProperty(MarkerCanvasContext, "__esModule", {
    	  value: true
    	});
    	MarkerCanvasContext.MarkerCanvasConsumer = MarkerCanvasContext.MarkerCanvasProvider = void 0;
    	var _createReactContext2 = _interopRequireDefault(requireLib$1());
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}

    	/* eslint-disable no-console */
    	var defaultContextState = {
    	  subscribeToMouseOver: function subscribeToMouseOver() {
    	    console.warn('"subscribeToMouseOver" default func is being used');
    	  }
    	  /* eslint-enable */
    	};
    	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
    	  Consumer = _createReactContext.Consumer,
    	  Provider = _createReactContext.Provider;
    	var MarkerCanvasProvider = Provider;
    	MarkerCanvasContext.MarkerCanvasProvider = MarkerCanvasProvider;
    	var MarkerCanvasConsumer = Consumer;
    	MarkerCanvasContext.MarkerCanvasConsumer = MarkerCanvasConsumer;
    	return MarkerCanvasContext;
    }

    var TimelineMarkersRenderer = {};

    var TimelineMarkersContext = {};

    var hasRequiredTimelineMarkersContext;

    function requireTimelineMarkersContext () {
    	if (hasRequiredTimelineMarkersContext) return TimelineMarkersContext;
    	hasRequiredTimelineMarkersContext = 1;

    	Object.defineProperty(TimelineMarkersContext, "__esModule", {
    	  value: true
    	});
    	TimelineMarkersContext.TimelineMarkersConsumer = TimelineMarkersContext.TimelineMarkersProvider = void 0;
    	var _react = _interopRequireDefault(require("react"));
    	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    	var _createReactContext2 = _interopRequireDefault(requireLib$1());
    	var _generic = requireGeneric();
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	function _typeof(obj) {
    	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    	    _typeof = function _typeof(obj) {
    	      return typeof obj;
    	    };
    	  } else {
    	    _typeof = function _typeof(obj) {
    	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    	    };
    	  }
    	  return _typeof(obj);
    	}
    	function _toConsumableArray(arr) {
    	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    	}
    	function _nonIterableSpread() {
    	  throw new TypeError("Invalid attempt to spread non-iterable instance");
    	}
    	function _iterableToArray(iter) {
    	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    	}
    	function _arrayWithoutHoles(arr) {
    	  if (Array.isArray(arr)) {
    	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
    	      arr2[i] = arr[i];
    	    }
    	    return arr2;
    	  }
    	}
    	function _objectSpread(target) {
    	  for (var i = 1; i < arguments.length; i++) {
    	    if (i % 2) {
    	      var source = arguments[i] != null ? arguments[i] : {};
    	      var ownKeys = Object.keys(source);
    	      if (typeof Object.getOwnPropertySymbols === 'function') {
    	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    	        }));
    	      }
    	      ownKeys.forEach(function (key) {
    	        _defineProperty(target, key, source[key]);
    	      });
    	    } else {
    	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    	    }
    	  }
    	  return target;
    	}
    	function _classCallCheck(instance, Constructor) {
    	  if (!(instance instanceof Constructor)) {
    	    throw new TypeError("Cannot call a class as a function");
    	  }
    	}
    	function _defineProperties(target, props) {
    	  for (var i = 0; i < props.length; i++) {
    	    var descriptor = props[i];
    	    descriptor.enumerable = descriptor.enumerable || false;
    	    descriptor.configurable = true;
    	    if ("value" in descriptor) descriptor.writable = true;
    	    Object.defineProperty(target, descriptor.key, descriptor);
    	  }
    	}
    	function _createClass(Constructor, protoProps, staticProps) {
    	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    	  if (staticProps) _defineProperties(Constructor, staticProps);
    	  return Constructor;
    	}
    	function _possibleConstructorReturn(self, call) {
    	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    	    return call;
    	  }
    	  return _assertThisInitialized(self);
    	}
    	function _getPrototypeOf(o) {
    	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    	    return o.__proto__ || Object.getPrototypeOf(o);
    	  };
    	  return _getPrototypeOf(o);
    	}
    	function _assertThisInitialized(self) {
    	  if (self === void 0) {
    	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    	  }
    	  return self;
    	}
    	function _inherits(subClass, superClass) {
    	  if (typeof superClass !== "function" && superClass !== null) {
    	    throw new TypeError("Super expression must either be null or a function");
    	  }
    	  subClass.prototype = Object.create(superClass && superClass.prototype, {
    	    constructor: {
    	      value: subClass,
    	      writable: true,
    	      configurable: true
    	    }
    	  });
    	  if (superClass) _setPrototypeOf(subClass, superClass);
    	}
    	function _setPrototypeOf(o, p) {
    	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    	    o.__proto__ = p;
    	    return o;
    	  };
    	  return _setPrototypeOf(o, p);
    	}
    	function _defineProperty(obj, key, value) {
    	  if (key in obj) {
    	    Object.defineProperty(obj, key, {
    	      value: value,
    	      enumerable: true,
    	      configurable: true,
    	      writable: true
    	    });
    	  } else {
    	    obj[key] = value;
    	  }
    	  return obj;
    	}
    	var defaultContextState = {
    	  markers: [],
    	  subscribeMarker: function subscribeMarker() {
    	    // eslint-disable-next-line
    	    console.warn('default subscribe marker used');
    	    return _generic.noop;
    	  }
    	};
    	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
    	  Consumer = _createReactContext.Consumer,
    	  Provider = _createReactContext.Provider; // REVIEW: is this the best way to manage ids?

    	var _id = 0;
    	var createId = function createId() {
    	  _id += 1;
    	  return _id + 1;
    	};
    	var TimelineMarkersProvider = /*#__PURE__*/
    	function (_React$Component) {
    	  _inherits(TimelineMarkersProvider, _React$Component);
    	  function TimelineMarkersProvider() {
    	    var _getPrototypeOf2;
    	    var _this;
    	    _classCallCheck(this, TimelineMarkersProvider);
    	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    	      args[_key] = arguments[_key];
    	    }
    	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimelineMarkersProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));
    	    _defineProperty(_assertThisInitialized(_this), "handleSubscribeToMarker", function (newMarker) {
    	      newMarker = _objectSpread({}, newMarker, {
    	        // REVIEW: in the event that we accept id to be passed to the Marker components, this line would override those
    	        id: createId()
    	      });
    	      _this.setState(function (state) {
    	        return {
    	          markers: [].concat(_toConsumableArray(state.markers), [newMarker])
    	        };
    	      });
    	      return {
    	        unsubscribe: function unsubscribe() {
    	          _this.setState(function (state) {
    	            return {
    	              markers: state.markers.filter(function (marker) {
    	                return marker.id !== newMarker.id;
    	              })
    	            };
    	          });
    	        },
    	        getMarker: function getMarker() {
    	          return newMarker;
    	        }
    	      };
    	    });
    	    _defineProperty(_assertThisInitialized(_this), "handleUpdateMarker", function (updateMarker) {
    	      var markerIndex = _this.state.markers.findIndex(function (marker) {
    	        return marker.id === updateMarker.id;
    	      });
    	      if (markerIndex < 0) return;
    	      _this.setState(function (state) {
    	        return {
    	          markers: [].concat(_toConsumableArray(state.markers.slice(0, markerIndex)), [updateMarker], _toConsumableArray(state.markers.slice(markerIndex + 1)))
    	        };
    	      });
    	    });
    	    _defineProperty(_assertThisInitialized(_this), "state", {
    	      markers: [],
    	      subscribeMarker: _this.handleSubscribeToMarker,
    	      updateMarker: _this.handleUpdateMarker
    	    });
    	    return _this;
    	  }
    	  _createClass(TimelineMarkersProvider, [{
    	    key: "render",
    	    value: function render() {
    	      return _react["default"].createElement(Provider, {
    	        value: this.state
    	      }, this.props.children);
    	    }
    	  }]);
    	  return TimelineMarkersProvider;
    	}(_react["default"].Component);
    	TimelineMarkersContext.TimelineMarkersProvider = TimelineMarkersProvider;
    	_defineProperty(TimelineMarkersProvider, "propTypes", {
    	  children: _propTypes["default"].element.isRequired
    	});
    	var TimelineMarkersConsumer = Consumer;
    	TimelineMarkersContext.TimelineMarkersConsumer = TimelineMarkersConsumer;
    	return TimelineMarkersContext;
    }

    var markerType = {};

    var hasRequiredMarkerType;

    function requireMarkerType () {
    	if (hasRequiredMarkerType) return markerType;
    	hasRequiredMarkerType = 1;

    	Object.defineProperty(markerType, "__esModule", {
    	  value: true
    	});
    	markerType.TimelineMarkerType = void 0;
    	var TimelineMarkerType = {
    	  Today: 'Today',
    	  Custom: 'Custom',
    	  Cursor: 'Cursor'
    	};
    	markerType.TimelineMarkerType = TimelineMarkerType;
    	return markerType;
    }

    var TodayMarker$1 = {};

    var shared = {};

    var hasRequiredShared;

    function requireShared () {
    	if (hasRequiredShared) return shared;
    	hasRequiredShared = 1;

    	Object.defineProperty(shared, "__esModule", {
    	  value: true
    	});
    	shared.createDefaultRenderer = shared.createMarkerStylesWithLeftOffset = void 0;
    	var _react = _interopRequireDefault(require("react"));
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	function _objectSpread(target) {
    	  for (var i = 1; i < arguments.length; i++) {
    	    if (i % 2) {
    	      var source = arguments[i] != null ? arguments[i] : {};
    	      var ownKeys = Object.keys(source);
    	      if (typeof Object.getOwnPropertySymbols === 'function') {
    	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    	        }));
    	      }
    	      ownKeys.forEach(function (key) {
    	        _defineProperty(target, key, source[key]);
    	      });
    	    } else {
    	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    	    }
    	  }
    	  return target;
    	}
    	function _defineProperty(obj, key, value) {
    	  if (key in obj) {
    	    Object.defineProperty(obj, key, {
    	      value: value,
    	      enumerable: true,
    	      configurable: true,
    	      writable: true
    	    });
    	  } else {
    	    obj[key] = value;
    	  }
    	  return obj;
    	}

    	/**
    	 * Baseline styles to get the marker to render correctly
    	 */
    	var criticalStyles = {
    	  position: 'absolute',
    	  top: 0,
    	  bottom: 0,
    	  width: '2px',
    	  backgroundColor: 'black',
    	  // by default, pointer events (specifically click) will
    	  // "pass through".  This is added so that CursorMarker
    	  // will not get in the way of canvas click
    	  pointerEvents: 'none' // FIXME: this creates a new object each time in render
    	  // might want to memoize this?
    	};
    	var createMarkerStylesWithLeftOffset = function createMarkerStylesWithLeftOffset(leftOffset) {
    	  return _objectSpread({}, criticalStyles, {
    	    left: leftOffset
    	  });
    	};
    	shared.createMarkerStylesWithLeftOffset = createMarkerStylesWithLeftOffset;
    	var createDefaultRenderer = function createDefaultRenderer(dataTestidValue) {
    	  // eslint-disable-next-line
    	  return function DefaultMarkerRenderer(_ref) {
    	    var styles = _ref.styles;
    	    return _react["default"].createElement("div", {
    	      style: styles
    	    });
    	  };
    	};
    	shared.createDefaultRenderer = createDefaultRenderer;
    	return shared;
    }

    var hasRequiredTodayMarker$1;

    function requireTodayMarker$1 () {
    	if (hasRequiredTodayMarker$1) return TodayMarker$1;
    	hasRequiredTodayMarker$1 = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _shared = requireShared();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var defaultRenderer = (0, _shared.createDefaultRenderer)('default-today-line');
    		/** Marker that is placed based on current date.  This component updates itself on
    		 * a set interval, dictated by the 'interval' prop.
    		 */

    		var TodayMarker = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(TodayMarker, _React$Component);
    		  function TodayMarker() {
    		    var _getPrototypeOf2;
    		    var _this;
    		    _classCallCheck(this, TodayMarker);
    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }
    		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TodayMarker)).call.apply(_getPrototypeOf2, [this].concat(args)));
    		    _defineProperty(_assertThisInitialized(_this), "state", {
    		      date: Date.now()
    		    });
    		    return _this;
    		  }
    		  _createClass(TodayMarker, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.intervalToken = this.createIntervalUpdater(this.props.interval);
    		    }
    		  }, {
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps) {
    		      if (prevProps.interval !== this.props.interval) {
    		        clearInterval(this.intervalToken);
    		        this.intervalToken = this.createIntervalUpdater(this.props.interval);
    		      }
    		    }
    		  }, {
    		    key: "createIntervalUpdater",
    		    value: function createIntervalUpdater(interval) {
    		      var _this2 = this;
    		      return setInterval(function () {
    		        _this2.setState({
    		          date: Date.now() // FIXME: use date utils pass in as props
    		        });
    		      }, interval);
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      clearInterval(this.intervalToken);
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var date = this.state.date;
    		      var leftOffset = this.props.getLeftOffsetFromDate(date);
    		      var styles = (0, _shared.createMarkerStylesWithLeftOffset)(leftOffset);
    		      return this.props.renderer({
    		        styles: styles,
    		        date: date
    		      });
    		    }
    		  }]);
    		  return TodayMarker;
    		}(_react["default"].Component);
    		_defineProperty(TodayMarker, "propTypes", {
    		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired,
    		  renderer: _propTypes["default"].func,
    		  interval: _propTypes["default"].number.isRequired
    		});
    		_defineProperty(TodayMarker, "defaultProps", {
    		  renderer: defaultRenderer
    		});
    		var _default = TodayMarker;
    		exports["default"] = _default; 
    	} (TodayMarker$1));
    	return TodayMarker$1;
    }

    var CustomMarker$1 = {};

    var hasRequiredCustomMarker$1;

    function requireCustomMarker$1 () {
    	if (hasRequiredCustomMarker$1) return CustomMarker$1;
    	hasRequiredCustomMarker$1 = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _shared = requireShared();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var defaultCustomMarkerRenderer = (0, _shared.createDefaultRenderer)('default-customer-marker-id');
    		/**
    		 * CustomMarker that is placed based on passed in date prop
    		 */

    		var CustomMarker = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(CustomMarker, _React$Component);
    		  function CustomMarker() {
    		    _classCallCheck(this, CustomMarker);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(CustomMarker).apply(this, arguments));
    		  }
    		  _createClass(CustomMarker, [{
    		    key: "render",
    		    value: function render() {
    		      var date = this.props.date;
    		      var leftOffset = this.props.getLeftOffsetFromDate(date);
    		      var styles = (0, _shared.createMarkerStylesWithLeftOffset)(leftOffset);
    		      return this.props.renderer({
    		        styles: styles,
    		        date: date
    		      });
    		    }
    		  }]);
    		  return CustomMarker;
    		}(_react["default"].Component);
    		_defineProperty(CustomMarker, "propTypes", {
    		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired,
    		  renderer: _propTypes["default"].func,
    		  date: _propTypes["default"].number.isRequired
    		});
    		_defineProperty(CustomMarker, "defaultProps", {
    		  renderer: defaultCustomMarkerRenderer
    		});
    		var _default = CustomMarker;
    		exports["default"] = _default; 
    	} (CustomMarker$1));
    	return CustomMarker$1;
    }

    var CursorMarker$1 = {};

    var hasRequiredCursorMarker$1;

    function requireCursorMarker$1 () {
    	if (hasRequiredCursorMarker$1) return CursorMarker$1;
    	hasRequiredCursorMarker$1 = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _shared = requireShared();
    		var _MarkerCanvasContext = requireMarkerCanvasContext();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var defaultRenderer = (0, _shared.createDefaultRenderer)('default-cursor-marker');
    		/**
    		 * CursorMarker implementation subscribes to 'subscribeToCanvasMouseOver' on mount.
    		 * This subscription is passed in via MarkerCanvasConsumer, which is wired up to
    		 * MarkerCanvasProvider in the MarkerCanvas component. When the user mouses over MarkerCanvas,
    		 * the callback registered in CursorMarker (this component) is passed:
    		 *  leftOffset - pixels from left edge of canvas, used to position this element
    		 *  date - the date the cursor pertains to
    		 *  isCursorOverCanvas - whether the user cursor is over the canvas. This is set to 'false'
    		 *  when the user mouseleaves the element
    		 */

    		var CursorMarker = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(CursorMarker, _React$Component);
    		  function CursorMarker() {
    		    var _this;
    		    _classCallCheck(this, CursorMarker);
    		    _this = _possibleConstructorReturn(this, _getPrototypeOf(CursorMarker).call(this));
    		    _defineProperty(_assertThisInitialized(_this), "handleCanvasMouseOver", function (_ref) {
    		      var leftOffset = _ref.leftOffset,
    		        date = _ref.date,
    		        isCursorOverCanvas = _ref.isCursorOverCanvas;
    		      _this.setState({
    		        leftOffset: leftOffset,
    		        date: date,
    		        isShowingCursor: isCursorOverCanvas
    		      });
    		    });
    		    _this.state = {
    		      leftOffset: 0,
    		      date: 0,
    		      isShowingCursor: false
    		    };
    		    return _this;
    		  }
    		  _createClass(CursorMarker, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.unsubscribe = this.props.subscribeToCanvasMouseOver(this.handleCanvasMouseOver);
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      if (this.unsubscribe != null) {
    		        this.unsubscribe();
    		        this.unsubscribe = null;
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$state = this.state,
    		        isShowingCursor = _this$state.isShowingCursor,
    		        leftOffset = _this$state.leftOffset,
    		        date = _this$state.date;
    		      if (!isShowingCursor) return null;
    		      var styles = (0, _shared.createMarkerStylesWithLeftOffset)(leftOffset);
    		      return this.props.renderer({
    		        styles: styles,
    		        date: date
    		      });
    		    }
    		  }]);
    		  return CursorMarker;
    		}(_react["default"].Component); // TODO: turn into HOC?

    		_defineProperty(CursorMarker, "propTypes", {
    		  subscribeToCanvasMouseOver: _propTypes["default"].func.isRequired,
    		  renderer: _propTypes["default"].func
    		});
    		_defineProperty(CursorMarker, "defaultProps", {
    		  renderer: defaultRenderer
    		});
    		var CursorMarkerWrapper = function CursorMarkerWrapper(props) {
    		  return _react["default"].createElement(_MarkerCanvasContext.MarkerCanvasConsumer, null, function (_ref2) {
    		    var subscribeToMouseOver = _ref2.subscribeToMouseOver;
    		    return _react["default"].createElement(CursorMarker, _extends({
    		      subscribeToCanvasMouseOver: subscribeToMouseOver
    		    }, props));
    		  });
    		};
    		CursorMarkerWrapper.displayName = 'CursorMarkerWrapper';
    		var _default = CursorMarkerWrapper;
    		exports["default"] = _default; 
    	} (CursorMarker$1));
    	return CursorMarker$1;
    }

    var hasRequiredTimelineMarkersRenderer;

    function requireTimelineMarkersRenderer () {
    	if (hasRequiredTimelineMarkersRenderer) return TimelineMarkersRenderer;
    	hasRequiredTimelineMarkersRenderer = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _TimelineMarkersContext = requireTimelineMarkersContext();
    		var _markerType = requireMarkerType();
    		var _TodayMarker = _interopRequireDefault(requireTodayMarker$1());
    		var _CustomMarker = _interopRequireDefault(requireCustomMarker$1());
    		var _TimelineStateContext = requireTimelineStateContext();
    		var _CursorMarker = _interopRequireDefault(requireCursorMarker$1());
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}

    		/** Internal component used in timeline to render markers registered */
    		var TimelineMarkersRenderer = function TimelineMarkersRenderer() {
    		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref) {
    		    var getLeftOffsetFromDate = _ref.getLeftOffsetFromDate,
    		      getTimelineState = _ref.getTimelineState;
    		    return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref2) {
    		      var markers = _ref2.markers;
    		      var timelineState = getTimelineState();
    		      return markers.map(function (marker) {
    		        switch (marker.type) {
    		          case _markerType.TimelineMarkerType.Today:
    		            if (!(new Date().valueOf() >= timelineState.canvasTimeStart && new Date().valueOf() <= timelineState.canvasTimeEnd)) return null;
    		            return _react["default"].createElement(_TodayMarker["default"], {
    		              key: marker.id,
    		              getLeftOffsetFromDate: getLeftOffsetFromDate,
    		              renderer: marker.renderer,
    		              interval: marker.interval
    		            });
    		          case _markerType.TimelineMarkerType.Custom:
    		            //filter out cursors outside canvas start/end
    		            if (!(marker.date >= timelineState.canvasTimeStart && marker.date <= timelineState.canvasTimeEnd)) return null;
    		            return _react["default"].createElement(_CustomMarker["default"], {
    		              key: marker.id,
    		              renderer: marker.renderer,
    		              date: marker.date,
    		              getLeftOffsetFromDate: getLeftOffsetFromDate
    		            });
    		          case _markerType.TimelineMarkerType.Cursor:
    		            return _react["default"].createElement(_CursorMarker["default"], {
    		              key: marker.id,
    		              renderer: marker.renderer,
    		              getLeftOffsetFromDate: getLeftOffsetFromDate
    		            });
    		          default:
    		            return null;
    		        }
    		      });
    		    });
    		  });
    		};
    		var _default = TimelineMarkersRenderer;
    		exports["default"] = _default; 
    	} (TimelineMarkersRenderer));
    	return TimelineMarkersRenderer;
    }

    var hasRequiredMarkerCanvas;

    function requireMarkerCanvas () {
    	if (hasRequiredMarkerCanvas) return MarkerCanvas;
    	hasRequiredMarkerCanvas = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _MarkerCanvasContext = requireMarkerCanvasContext();
    		var _TimelineMarkersRenderer = _interopRequireDefault(requireTimelineMarkersRenderer());
    		var _TimelineStateContext = requireTimelineStateContext();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}

    		// expand to fill entire parent container (ScrollElement)
    		var staticStyles = {
    		  position: 'absolute',
    		  left: 0,
    		  right: 0,
    		  top: 0,
    		  bottom: 0
    		  /**
    		   * Renders registered markers and exposes a mouse over listener for
    		   * CursorMarkers to subscribe to
    		   */
    		};
    		var MarkerCanvas = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(MarkerCanvas, _React$Component);
    		  function MarkerCanvas() {
    		    var _getPrototypeOf2;
    		    var _this;
    		    _classCallCheck(this, MarkerCanvas);
    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }
    		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MarkerCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (evt) {
    		      if (_this.subscription != null) {
    		        var pageX = evt.pageX; // FIXME: dont use getBoundingClientRect. Use passed in scroll amount

    		        var _this$containerEl$get = _this.containerEl.getBoundingClientRect(),
    		          containerLeft = _this$containerEl$get.left; // number of pixels from left we are on canvas
    		        // we do this calculation as pageX is based on x from viewport whereas
    		        // our canvas can be scrolled left and right and is generally outside
    		        // of the viewport.  This calculation is to get how many pixels the cursor
    		        // is from left of this element

    		        var canvasX = pageX - containerLeft;
    		        var date = _this.props.getDateFromLeftOffsetPosition(canvasX);
    		        _this.subscription({
    		          leftOffset: canvasX,
    		          date: date,
    		          isCursorOverCanvas: true
    		        });
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function () {
    		      if (_this.subscription != null) {
    		        // tell subscriber that we're not on canvas
    		        _this.subscription({
    		          leftOffset: 0,
    		          date: 0,
    		          isCursorOverCanvas: false
    		        });
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleMouseMoveSubscribe", function (sub) {
    		      _this.subscription = sub;
    		      return function () {
    		        _this.subscription = null;
    		      };
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "state", {
    		      subscribeToMouseOver: _this.handleMouseMoveSubscribe
    		    });
    		    return _this;
    		  }
    		  _createClass(MarkerCanvas, [{
    		    key: "render",
    		    value: function render() {
    		      var _this2 = this;
    		      return _react["default"].createElement(_MarkerCanvasContext.MarkerCanvasProvider, {
    		        value: this.state
    		      }, _react["default"].createElement("div", {
    		        style: staticStyles,
    		        onMouseMove: this.handleMouseMove,
    		        onMouseLeave: this.handleMouseLeave,
    		        ref: function ref(el) {
    		          return _this2.containerEl = el;
    		        }
    		      }, _react["default"].createElement(_TimelineMarkersRenderer["default"], null), this.props.children));
    		    }
    		  }]);
    		  return MarkerCanvas;
    		}(_react["default"].Component);
    		_defineProperty(MarkerCanvas, "propTypes", {
    		  getDateFromLeftOffsetPosition: _propTypes["default"].func.isRequired,
    		  children: _propTypes["default"].node
    		});
    		var MarkerCanvasWrapper = function MarkerCanvasWrapper(props) {
    		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref) {
    		    var getDateFromLeftOffsetPosition = _ref.getDateFromLeftOffsetPosition;
    		    return _react["default"].createElement(MarkerCanvas, _extends({
    		      getDateFromLeftOffsetPosition: getDateFromLeftOffsetPosition
    		    }, props));
    		  });
    		};
    		var _default = MarkerCanvasWrapper;
    		exports["default"] = _default; 
    	} (MarkerCanvas));
    	return MarkerCanvas;
    }

    var window$1 = {};

    var hasRequiredWindow;

    function requireWindow () {
    	if (hasRequiredWindow) return window$1;
    	hasRequiredWindow = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		function addListener(component) {
    		  component._resizeEventListener = {
    		    handleEvent: function handleEvent() {
    		      component.resize();
    		    }
    		  };
    		  window.addEventListener('resize', component._resizeEventListener);
    		}
    		function removeListener(component) {
    		  window.removeEventListener('resize', component._resizeEventListener);
    		}
    		var _default = {
    		  addListener: addListener,
    		  removeListener: removeListener
    		};
    		exports["default"] = _default; 
    	} (window$1));
    	return window$1;
    }

    var defaultConfig = {};

    var hasRequiredDefaultConfig;

    function requireDefaultConfig () {
    	if (hasRequiredDefaultConfig) return defaultConfig;
    	hasRequiredDefaultConfig = 1;

    	Object.defineProperty(defaultConfig, "__esModule", {
    	  value: true
    	});
    	defaultConfig.defaultHeaderFormats = defaultConfig.defaultTimeSteps = defaultConfig.defaultKeys = void 0;
    	var defaultKeys = {
    	  groupIdKey: 'id',
    	  groupTitleKey: 'title',
    	  groupRightTitleKey: 'rightTitle',
    	  groupLabelKey: 'title',
    	  itemIdKey: 'id',
    	  itemTitleKey: 'title',
    	  itemDivTitleKey: 'title',
    	  itemGroupKey: 'group',
    	  itemTimeStartKey: 'start_time',
    	  itemTimeEndKey: 'end_time'
    	};
    	defaultConfig.defaultKeys = defaultKeys;
    	var defaultTimeSteps = {
    	  second: 1,
    	  minute: 1,
    	  hour: 1,
    	  day: 1,
    	  month: 1,
    	  year: 1
    	};
    	defaultConfig.defaultTimeSteps = defaultTimeSteps;
    	var defaultHeaderFormats = {
    	  year: {
    	    "long": 'YYYY',
    	    mediumLong: 'YYYY',
    	    medium: 'YYYY',
    	    "short": 'YY'
    	  },
    	  month: {
    	    "long": 'MMMM YYYY',
    	    mediumLong: 'MMMM',
    	    medium: 'MMMM',
    	    "short": 'MM/YY'
    	  },
    	  week: {
    	    "long": 'w',
    	    mediumLong: 'w',
    	    medium: 'w',
    	    "short": 'w'
    	  },
    	  day: {
    	    "long": 'dddd, LL',
    	    mediumLong: 'dddd, LL',
    	    medium: 'dd D',
    	    "short": 'D'
    	  },
    	  hour: {
    	    "long": 'dddd, LL, HH:00',
    	    mediumLong: 'L, HH:00',
    	    medium: 'HH:00',
    	    "short": 'HH'
    	  },
    	  minute: {
    	    "long": 'HH:mm',
    	    mediumLong: 'HH:mm',
    	    medium: 'HH:mm',
    	    "short": 'mm'
    	  },
    	  second: {
    	    "long": 'mm:ss',
    	    mediumLong: 'mm:ss',
    	    medium: 'mm:ss',
    	    "short": 'ss'
    	  }
    	};
    	defaultConfig.defaultHeaderFormats = defaultHeaderFormats;
    	return defaultConfig;
    }

    var HeadersContext = {};

    var hasRequiredHeadersContext;

    function requireHeadersContext () {
    	if (hasRequiredHeadersContext) return HeadersContext;
    	hasRequiredHeadersContext = 1;

    	Object.defineProperty(HeadersContext, "__esModule", {
    	  value: true
    	});
    	HeadersContext.TimelineHeadersConsumer = HeadersContext.TimelineHeadersProvider = void 0;
    	var _react = _interopRequireDefault(require("react"));
    	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    	var _createReactContext2 = _interopRequireDefault(requireLib$1());
    	var _generic = requireGeneric();
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	function _typeof(obj) {
    	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    	    _typeof = function _typeof(obj) {
    	      return typeof obj;
    	    };
    	  } else {
    	    _typeof = function _typeof(obj) {
    	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    	    };
    	  }
    	  return _typeof(obj);
    	}
    	function _classCallCheck(instance, Constructor) {
    	  if (!(instance instanceof Constructor)) {
    	    throw new TypeError("Cannot call a class as a function");
    	  }
    	}
    	function _defineProperties(target, props) {
    	  for (var i = 0; i < props.length; i++) {
    	    var descriptor = props[i];
    	    descriptor.enumerable = descriptor.enumerable || false;
    	    descriptor.configurable = true;
    	    if ("value" in descriptor) descriptor.writable = true;
    	    Object.defineProperty(target, descriptor.key, descriptor);
    	  }
    	}
    	function _createClass(Constructor, protoProps, staticProps) {
    	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    	  if (staticProps) _defineProperties(Constructor, staticProps);
    	  return Constructor;
    	}
    	function _possibleConstructorReturn(self, call) {
    	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    	    return call;
    	  }
    	  return _assertThisInitialized(self);
    	}
    	function _assertThisInitialized(self) {
    	  if (self === void 0) {
    	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    	  }
    	  return self;
    	}
    	function _getPrototypeOf(o) {
    	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    	    return o.__proto__ || Object.getPrototypeOf(o);
    	  };
    	  return _getPrototypeOf(o);
    	}
    	function _inherits(subClass, superClass) {
    	  if (typeof superClass !== "function" && superClass !== null) {
    	    throw new TypeError("Super expression must either be null or a function");
    	  }
    	  subClass.prototype = Object.create(superClass && superClass.prototype, {
    	    constructor: {
    	      value: subClass,
    	      writable: true,
    	      configurable: true
    	    }
    	  });
    	  if (superClass) _setPrototypeOf(subClass, superClass);
    	}
    	function _setPrototypeOf(o, p) {
    	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    	    o.__proto__ = p;
    	    return o;
    	  };
    	  return _setPrototypeOf(o, p);
    	}
    	function _defineProperty(obj, key, value) {
    	  if (key in obj) {
    	    Object.defineProperty(obj, key, {
    	      value: value,
    	      enumerable: true,
    	      configurable: true,
    	      writable: true
    	    });
    	  } else {
    	    obj[key] = value;
    	  }
    	  return obj;
    	}
    	var defaultContextState = {
    	  registerScroll: function registerScroll() {
    	    // eslint-disable-next-line
    	    console.warn('default registerScroll header used');
    	    return _generic.noop;
    	  },
    	  rightSidebarWidth: 0,
    	  leftSidebarWidth: 150,
    	  timeSteps: {}
    	};
    	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
    	  Consumer = _createReactContext.Consumer,
    	  Provider = _createReactContext.Provider;
    	var TimelineHeadersProvider = /*#__PURE__*/
    	function (_React$Component) {
    	  _inherits(TimelineHeadersProvider, _React$Component);
    	  function TimelineHeadersProvider() {
    	    _classCallCheck(this, TimelineHeadersProvider);
    	    return _possibleConstructorReturn(this, _getPrototypeOf(TimelineHeadersProvider).apply(this, arguments));
    	  }
    	  _createClass(TimelineHeadersProvider, [{
    	    key: "render",
    	    value: function render() {
    	      var contextValue = {
    	        rightSidebarWidth: this.props.rightSidebarWidth,
    	        leftSidebarWidth: this.props.leftSidebarWidth,
    	        timeSteps: this.props.timeSteps,
    	        registerScroll: this.props.registerScroll
    	      };
    	      return _react["default"].createElement(Provider, {
    	        value: contextValue
    	      }, this.props.children);
    	    }
    	  }]);
    	  return TimelineHeadersProvider;
    	}(_react["default"].Component);
    	HeadersContext.TimelineHeadersProvider = TimelineHeadersProvider;
    	_defineProperty(TimelineHeadersProvider, "propTypes", {
    	  children: _propTypes["default"].element.isRequired,
    	  rightSidebarWidth: _propTypes["default"].number,
    	  leftSidebarWidth: _propTypes["default"].number.isRequired,
    	  //TODO: maybe this should be skipped?
    	  timeSteps: _propTypes["default"].object.isRequired,
    	  registerScroll: _propTypes["default"].func.isRequired
    	});
    	var TimelineHeadersConsumer = Consumer;
    	HeadersContext.TimelineHeadersConsumer = TimelineHeadersConsumer;
    	return HeadersContext;
    }

    var TimelineHeaders = {};

    var classnames = {exports: {}};

    /*!
    	Copyright (c) 2018 Jed Watson.
    	Licensed under the MIT License (MIT), see
    	http://jedwatson.github.io/classnames
    */

    var hasRequiredClassnames;

    function requireClassnames () {
    	if (hasRequiredClassnames) return classnames.exports;
    	hasRequiredClassnames = 1;
    	(function (module) {
    		/* global define */

    		(function () {

    		  var hasOwn = {}.hasOwnProperty;
    		  function classNames() {
    		    var classes = '';
    		    for (var i = 0; i < arguments.length; i++) {
    		      var arg = arguments[i];
    		      if (arg) {
    		        classes = appendClass(classes, parseValue(arg));
    		      }
    		    }
    		    return classes;
    		  }
    		  function parseValue(arg) {
    		    if (typeof arg === 'string' || typeof arg === 'number') {
    		      return arg;
    		    }
    		    if (typeof arg !== 'object') {
    		      return '';
    		    }
    		    if (Array.isArray(arg)) {
    		      return classNames.apply(null, arg);
    		    }
    		    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
    		      return arg.toString();
    		    }
    		    var classes = '';
    		    for (var key in arg) {
    		      if (hasOwn.call(arg, key) && arg[key]) {
    		        classes = appendClass(classes, key);
    		      }
    		    }
    		    return classes;
    		  }
    		  function appendClass(value, newClass) {
    		    if (!newClass) {
    		      return value;
    		    }
    		    if (value) {
    		      return value + ' ' + newClass;
    		    }
    		    return value + newClass;
    		  }
    		  if (module.exports) {
    		    classNames.default = classNames;
    		    module.exports = classNames;
    		  } else {
    		    window.classNames = classNames;
    		  }
    		})(); 
    	} (classnames));
    	return classnames.exports;
    }

    var SidebarHeader = {};

    var constants = {};

    var hasRequiredConstants;

    function requireConstants () {
    	if (hasRequiredConstants) return constants;
    	hasRequiredConstants = 1;

    	Object.defineProperty(constants, "__esModule", {
    	  value: true
    	});
    	constants.RIGHT_VARIANT = constants.LEFT_VARIANT = void 0;
    	var LEFT_VARIANT = 'left';
    	constants.LEFT_VARIANT = LEFT_VARIANT;
    	var RIGHT_VARIANT = 'right';
    	constants.RIGHT_VARIANT = RIGHT_VARIANT;
    	return constants;
    }

    var hasRequiredSidebarHeader;

    function requireSidebarHeader () {
    	if (hasRequiredSidebarHeader) return SidebarHeader;
    	hasRequiredSidebarHeader = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _HeadersContext = requireHeadersContext();
    		var _constants = requireConstants();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var SidebarHeader = /*#__PURE__*/
    		function (_React$PureComponent) {
    		  _inherits(SidebarHeader, _React$PureComponent);
    		  function SidebarHeader() {
    		    var _getPrototypeOf2;
    		    var _this;
    		    _classCallCheck(this, SidebarHeader);
    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }
    		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SidebarHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
    		    _defineProperty(_assertThisInitialized(_this), "getRootProps", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    		      var style = props.style;
    		      var width = _this.props.variant === _constants.RIGHT_VARIANT ? _this.props.rightSidebarWidth : _this.props.leftSidebarWidth;
    		      return {
    		        style: _objectSpread({}, style, {
    		          width: width
    		        })
    		      };
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getStateAndHelpers", function () {
    		      return {
    		        getRootProps: _this.getRootProps,
    		        data: _this.props.headerData
    		      };
    		    });
    		    return _this;
    		  }
    		  _createClass(SidebarHeader, [{
    		    key: "render",
    		    value: function render() {
    		      var props = this.getStateAndHelpers();
    		      var Renderer = this.props.children;
    		      return _react["default"].createElement(Renderer, props);
    		    }
    		  }]);
    		  return SidebarHeader;
    		}(_react["default"].PureComponent);
    		_defineProperty(SidebarHeader, "propTypes", {
    		  children: _propTypes["default"].func.isRequired,
    		  rightSidebarWidth: _propTypes["default"].number,
    		  leftSidebarWidth: _propTypes["default"].number.isRequired,
    		  variant: _propTypes["default"].string,
    		  headerData: _propTypes["default"].object
    		});
    		var SidebarWrapper = function SidebarWrapper(_ref) {
    		  var children = _ref.children,
    		    variant = _ref.variant,
    		    headerData = _ref.headerData;
    		  return _react["default"].createElement(_HeadersContext.TimelineHeadersConsumer, null, function (_ref2) {
    		    var leftSidebarWidth = _ref2.leftSidebarWidth,
    		      rightSidebarWidth = _ref2.rightSidebarWidth;
    		    return _react["default"].createElement(SidebarHeader, {
    		      leftSidebarWidth: leftSidebarWidth,
    		      rightSidebarWidth: rightSidebarWidth,
    		      children: children,
    		      variant: variant,
    		      headerData: headerData
    		    });
    		  });
    		};
    		SidebarWrapper.propTypes = {
    		  children: _propTypes["default"].func.isRequired,
    		  variant: _propTypes["default"].string,
    		  headerData: _propTypes["default"].object
    		};
    		SidebarWrapper.defaultProps = {
    		  variant: _constants.LEFT_VARIANT,
    		  children: function children(_ref3) {
    		    var getRootProps = _ref3.getRootProps;
    		    return _react["default"].createElement("div", getRootProps());
    		  }
    		};
    		SidebarWrapper.secretKey = "SidebarHeader";
    		var _default = SidebarWrapper;
    		exports["default"] = _default; 
    	} (SidebarHeader));
    	return SidebarHeader;
    }

    var hasRequiredTimelineHeaders;

    function requireTimelineHeaders () {
    	if (hasRequiredTimelineHeaders) return TimelineHeaders;
    	hasRequiredTimelineHeaders = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _classnames = _interopRequireDefault(requireClassnames());
    		var _HeadersContext = requireHeadersContext();
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _SidebarHeader = _interopRequireDefault(requireSidebarHeader());
    		var _constants = requireConstants();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var TimelineHeaders = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(TimelineHeaders, _React$Component);
    		  function TimelineHeaders(props) {
    		    var _this;
    		    _classCallCheck(this, TimelineHeaders);
    		    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimelineHeaders).call(this, props));
    		    _defineProperty(_assertThisInitialized(_this), "getRootStyle", function () {
    		      return _objectSpread({}, _this.props.style, {
    		        display: 'flex',
    		        width: '100%'
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getCalendarHeaderStyle", function () {
    		      var _this$props = _this.props,
    		        leftSidebarWidth = _this$props.leftSidebarWidth,
    		        rightSidebarWidth = _this$props.rightSidebarWidth,
    		        calendarHeaderStyle = _this$props.calendarHeaderStyle;
    		      return _objectSpread({}, calendarHeaderStyle, {
    		        overflow: 'hidden',
    		        width: "calc(100% - ".concat(leftSidebarWidth + rightSidebarWidth, "px)")
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleRootRef", function (element) {
    		      if (_this.props.headerRef) {
    		        _this.props.headerRef(element);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "isSidebarHeader", function (child) {
    		      if (child.type === undefined) return false;
    		      return child.type.secretKey === _SidebarHeader["default"].secretKey;
    		    });
    		    return _this;
    		  }
    		  _createClass(TimelineHeaders, [{
    		    key: "render",
    		    value: function render() {
    		      var _this2 = this;
    		      var rightSidebarHeader;
    		      var leftSidebarHeader;
    		      var calendarHeaders = [];
    		      var children = Array.isArray(this.props.children) ? this.props.children.filter(function (c) {
    		        return c;
    		      }) : [this.props.children];
    		      _react["default"].Children.map(children, function (child) {
    		        if (_this2.isSidebarHeader(child)) {
    		          if (child.props.variant === _constants.RIGHT_VARIANT) {
    		            rightSidebarHeader = child;
    		          } else {
    		            leftSidebarHeader = child;
    		          }
    		        } else {
    		          calendarHeaders.push(child);
    		        }
    		      });
    		      if (!leftSidebarHeader) {
    		        leftSidebarHeader = _react["default"].createElement(_SidebarHeader["default"], null);
    		      }
    		      if (!rightSidebarHeader && this.props.rightSidebarWidth) {
    		        rightSidebarHeader = _react["default"].createElement(_SidebarHeader["default"], {
    		          variant: "right"
    		        });
    		      }
    		      return _react["default"].createElement("div", {
    		        ref: this.handleRootRef,
    		        style: this.getRootStyle(),
    		        className: (0, _classnames["default"])('rct-header-root', this.props.className)
    		      }, leftSidebarHeader, _react["default"].createElement("div", {
    		        ref: this.props.registerScroll,
    		        style: this.getCalendarHeaderStyle(),
    		        className: (0, _classnames["default"])('rct-calendar-header', this.props.calendarHeaderClassName)
    		      }, calendarHeaders), rightSidebarHeader);
    		    }
    		  }]);
    		  return TimelineHeaders;
    		}(_react["default"].Component);
    		_defineProperty(TimelineHeaders, "propTypes", {
    		  registerScroll: _propTypes["default"].func.isRequired,
    		  leftSidebarWidth: _propTypes["default"].number.isRequired,
    		  rightSidebarWidth: _propTypes["default"].number.isRequired,
    		  style: _propTypes["default"].object,
    		  children: _propTypes["default"].node,
    		  className: _propTypes["default"].string,
    		  calendarHeaderStyle: _propTypes["default"].object,
    		  calendarHeaderClassName: _propTypes["default"].string,
    		  headerRef: _propTypes["default"].func
    		});
    		var TimelineHeadersWrapper = function TimelineHeadersWrapper(_ref) {
    		  var children = _ref.children,
    		    style = _ref.style,
    		    className = _ref.className,
    		    calendarHeaderStyle = _ref.calendarHeaderStyle,
    		    calendarHeaderClassName = _ref.calendarHeaderClassName;
    		  return _react["default"].createElement(_HeadersContext.TimelineHeadersConsumer, null, function (_ref2) {
    		    var leftSidebarWidth = _ref2.leftSidebarWidth,
    		      rightSidebarWidth = _ref2.rightSidebarWidth,
    		      registerScroll = _ref2.registerScroll;
    		    return _react["default"].createElement(TimelineHeaders, {
    		      leftSidebarWidth: leftSidebarWidth,
    		      rightSidebarWidth: rightSidebarWidth,
    		      registerScroll: registerScroll,
    		      style: style,
    		      className: className,
    		      calendarHeaderStyle: calendarHeaderStyle,
    		      calendarHeaderClassName: calendarHeaderClassName
    		    }, children);
    		  });
    		};
    		TimelineHeadersWrapper.propTypes = {
    		  style: _propTypes["default"].object,
    		  children: _propTypes["default"].node,
    		  className: _propTypes["default"].string,
    		  calendarHeaderStyle: _propTypes["default"].object,
    		  calendarHeaderClassName: _propTypes["default"].string
    		};
    		TimelineHeadersWrapper.secretKey = "TimelineHeaders";
    		var _default = TimelineHeadersWrapper;
    		exports["default"] = _default; 
    	} (TimelineHeaders));
    	return TimelineHeaders;
    }

    var DateHeader = {};

    var CustomHeader = {};

    var hasRequiredCustomHeader;

    function requireCustomHeader () {
    	if (hasRequiredCustomHeader) return CustomHeader;
    	hasRequiredCustomHeader = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = exports.CustomHeader = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _HeadersContext = requireHeadersContext();
    		var _TimelineStateContext = requireTimelineStateContext();
    		var _calendar = requireCalendar();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var CustomHeader = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(CustomHeader, _React$Component);
    		  function CustomHeader(_props) {
    		    var _this;
    		    _classCallCheck(this, CustomHeader);
    		    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomHeader).call(this, _props));
    		    _defineProperty(_assertThisInitialized(_this), "getHeaderIntervals", function (_ref) {
    		      var canvasTimeStart = _ref.canvasTimeStart,
    		        canvasTimeEnd = _ref.canvasTimeEnd,
    		        unit = _ref.unit,
    		        timeSteps = _ref.timeSteps,
    		        getLeftOffsetFromDate = _ref.getLeftOffsetFromDate;
    		      var intervals = [];
    		      (0, _calendar.iterateTimes)(canvasTimeStart, canvasTimeEnd, unit, timeSteps, function (startTime, endTime) {
    		        var left = getLeftOffsetFromDate(startTime.valueOf());
    		        var right = getLeftOffsetFromDate(endTime.valueOf());
    		        var width = right - left;
    		        intervals.push({
    		          startTime: startTime,
    		          endTime: endTime,
    		          labelWidth: width,
    		          left: left
    		        });
    		      });
    		      return intervals;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getRootProps", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    		      var style = props.style;
    		      return {
    		        style: Object.assign({}, style ? style : {}, {
    		          position: 'relative',
    		          width: _this.props.canvasWidth,
    		          height: _this.props.height
    		        })
    		      };
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getIntervalProps", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    		      var interval = props.interval,
    		        style = props.style;
    		      if (!interval) throw new Error('you should provide interval to the prop getter');
    		      var startTime = interval.startTime,
    		        labelWidth = interval.labelWidth,
    		        left = interval.left;
    		      return {
    		        style: _this.getIntervalStyle({
    		          style: style,
    		          startTime: startTime,
    		          labelWidth: labelWidth,
    		          canvasTimeStart: _this.props.canvasTimeStart,
    		          unit: _this.props.unit,
    		          left: left
    		        }),
    		        key: "label-".concat(startTime.valueOf())
    		      };
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getIntervalStyle", function (_ref2) {
    		      var left = _ref2.left,
    		        labelWidth = _ref2.labelWidth,
    		        style = _ref2.style;
    		      return _objectSpread({}, style, {
    		        left: left,
    		        width: labelWidth,
    		        position: 'absolute'
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getStateAndHelpers", function () {
    		      var _this$props = _this.props,
    		        canvasTimeStart = _this$props.canvasTimeStart,
    		        canvasTimeEnd = _this$props.canvasTimeEnd,
    		        unit = _this$props.unit,
    		        showPeriod = _this$props.showPeriod,
    		        timelineWidth = _this$props.timelineWidth,
    		        visibleTimeStart = _this$props.visibleTimeStart,
    		        visibleTimeEnd = _this$props.visibleTimeEnd,
    		        headerData = _this$props.headerData; //TODO: only evaluate on changing params

    		      return {
    		        timelineContext: {
    		          timelineWidth: timelineWidth,
    		          visibleTimeStart: visibleTimeStart,
    		          visibleTimeEnd: visibleTimeEnd,
    		          canvasTimeStart: canvasTimeStart,
    		          canvasTimeEnd: canvasTimeEnd
    		        },
    		        headerContext: {
    		          unit: unit,
    		          intervals: _this.state.intervals
    		        },
    		        getRootProps: _this.getRootProps,
    		        getIntervalProps: _this.getIntervalProps,
    		        showPeriod: showPeriod,
    		        data: headerData
    		      };
    		    });
    		    var _canvasTimeStart = _props.canvasTimeStart,
    		      _canvasTimeEnd = _props.canvasTimeEnd,
    		      canvasWidth = _props.canvasWidth,
    		      _unit = _props.unit,
    		      _timeSteps = _props.timeSteps,
    		      _showPeriod = _props.showPeriod,
    		      _getLeftOffsetFromDate = _props.getLeftOffsetFromDate;
    		    var _intervals = _this.getHeaderIntervals({
    		      canvasTimeStart: _canvasTimeStart,
    		      canvasTimeEnd: _canvasTimeEnd,
    		      canvasWidth: canvasWidth,
    		      unit: _unit,
    		      timeSteps: _timeSteps,
    		      showPeriod: _showPeriod,
    		      getLeftOffsetFromDate: _getLeftOffsetFromDate
    		    });
    		    _this.state = {
    		      intervals: _intervals
    		    };
    		    return _this;
    		  }
    		  _createClass(CustomHeader, [{
    		    key: "shouldComponentUpdate",
    		    value: function shouldComponentUpdate(nextProps) {
    		      if (nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || nextProps.unit !== this.props.unit || nextProps.timeSteps !== this.props.timeSteps || nextProps.showPeriod !== this.props.showPeriod || nextProps.children !== this.props.children || nextProps.headerData !== this.props.headerData) {
    		        return true;
    		      }
    		      return false;
    		    }
    		  }, {
    		    key: "componentWillReceiveProps",
    		    value: function componentWillReceiveProps(nextProps) {
    		      if (nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || nextProps.unit !== this.props.unit || nextProps.timeSteps !== this.props.timeSteps || nextProps.showPeriod !== this.props.showPeriod) {
    		        var canvasTimeStart = nextProps.canvasTimeStart,
    		          canvasTimeEnd = nextProps.canvasTimeEnd,
    		          canvasWidth = nextProps.canvasWidth,
    		          unit = nextProps.unit,
    		          timeSteps = nextProps.timeSteps,
    		          showPeriod = nextProps.showPeriod,
    		          getLeftOffsetFromDate = nextProps.getLeftOffsetFromDate;
    		        var intervals = this.getHeaderIntervals({
    		          canvasTimeStart: canvasTimeStart,
    		          canvasTimeEnd: canvasTimeEnd,
    		          canvasWidth: canvasWidth,
    		          unit: unit,
    		          timeSteps: timeSteps,
    		          showPeriod: showPeriod,
    		          getLeftOffsetFromDate: getLeftOffsetFromDate
    		        });
    		        this.setState({
    		          intervals: intervals
    		        });
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var props = this.getStateAndHelpers();
    		      var Renderer = this.props.children;
    		      return _react["default"].createElement(Renderer, props);
    		    }
    		  }]);
    		  return CustomHeader;
    		}(_react["default"].Component);
    		exports.CustomHeader = CustomHeader;
    		_defineProperty(CustomHeader, "propTypes", {
    		  //component props
    		  children: _propTypes["default"].func.isRequired,
    		  unit: _propTypes["default"].string.isRequired,
    		  //Timeline context
    		  timeSteps: _propTypes["default"].object.isRequired,
    		  visibleTimeStart: _propTypes["default"].number.isRequired,
    		  visibleTimeEnd: _propTypes["default"].number.isRequired,
    		  canvasTimeStart: _propTypes["default"].number.isRequired,
    		  canvasTimeEnd: _propTypes["default"].number.isRequired,
    		  canvasWidth: _propTypes["default"].number.isRequired,
    		  showPeriod: _propTypes["default"].func.isRequired,
    		  headerData: _propTypes["default"].object,
    		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired,
    		  height: _propTypes["default"].number.isRequired
    		});
    		var CustomHeaderWrapper = function CustomHeaderWrapper(_ref3) {
    		  var children = _ref3.children,
    		    unit = _ref3.unit,
    		    headerData = _ref3.headerData,
    		    height = _ref3.height;
    		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref4) {
    		    var getTimelineState = _ref4.getTimelineState,
    		      showPeriod = _ref4.showPeriod,
    		      getLeftOffsetFromDate = _ref4.getLeftOffsetFromDate;
    		    var timelineState = getTimelineState();
    		    return _react["default"].createElement(_HeadersContext.TimelineHeadersConsumer, null, function (_ref5) {
    		      var timeSteps = _ref5.timeSteps;
    		      return _react["default"].createElement(CustomHeader, _extends({
    		        children: children,
    		        timeSteps: timeSteps,
    		        showPeriod: showPeriod,
    		        unit: unit ? unit : timelineState.timelineUnit
    		      }, timelineState, {
    		        headerData: headerData,
    		        getLeftOffsetFromDate: getLeftOffsetFromDate,
    		        height: height
    		      }));
    		    });
    		  });
    		};
    		CustomHeaderWrapper.propTypes = {
    		  children: _propTypes["default"].func.isRequired,
    		  unit: _propTypes["default"].string,
    		  headerData: _propTypes["default"].object,
    		  height: _propTypes["default"].number
    		};
    		CustomHeaderWrapper.defaultProps = {
    		  height: 30
    		};
    		var _default = CustomHeaderWrapper;
    		exports["default"] = _default; 
    	} (CustomHeader));
    	return CustomHeader;
    }

    var safeIsNaN = Number.isNaN || function ponyfill(value) {
      return typeof value === 'number' && value !== value;
    };
    function isEqual(first, second) {
      if (first === second) {
        return true;
      }
      if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
      }
      return false;
    }
    function areInputsEqual(newInputs, lastInputs) {
      if (newInputs.length !== lastInputs.length) {
        return false;
      }
      for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
          return false;
        }
      }
      return true;
    }
    function memoizeOne(resultFn, isEqual) {
      if (isEqual === void 0) {
        isEqual = areInputsEqual;
      }
      var lastThis;
      var lastArgs = [];
      var lastResult;
      var calledOnce = false;
      function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
          return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
      }
      return memoized;
    }

    var CustomDateHeader = {};

    var Interval = {};

    var hasRequiredInterval;

    function requireInterval () {
    	if (hasRequiredInterval) return Interval;
    	hasRequiredInterval = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _calendar = requireCalendar();
    		var _events = requireEvents();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var Interval = /*#__PURE__*/
    		function (_React$PureComponent) {
    		  _inherits(Interval, _React$PureComponent);
    		  function Interval() {
    		    var _getPrototypeOf2;
    		    var _this;
    		    _classCallCheck(this, Interval);
    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }
    		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Interval)).call.apply(_getPrototypeOf2, [this].concat(args)));
    		    _defineProperty(_assertThisInitialized(_this), "onIntervalClick", function () {
    		      var _this$props = _this.props,
    		        primaryHeader = _this$props.primaryHeader,
    		        interval = _this$props.interval,
    		        unit = _this$props.unit,
    		        showPeriod = _this$props.showPeriod;
    		      if (primaryHeader) {
    		        var nextUnit = (0, _calendar.getNextUnit)(unit);
    		        var newStartTime = interval.startTime.clone().startOf(nextUnit);
    		        var newEndTime = interval.startTime.clone().endOf(nextUnit);
    		        showPeriod(newStartTime, newEndTime);
    		      } else {
    		        showPeriod(interval.startTime, interval.endTime);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getIntervalProps", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    		      return _objectSpread({}, _this.props.getIntervalProps(_objectSpread({
    		        interval: _this.props.interval
    		      }, props)), {
    		        onClick: (0, _events.composeEvents)(_this.onIntervalClick, props.onClick)
    		      });
    		    });
    		    return _this;
    		  }
    		  _createClass(Interval, [{
    		    key: "render",
    		    value: function render() {
    		      var _this$props2 = this.props,
    		        intervalText = _this$props2.intervalText,
    		        interval = _this$props2.interval,
    		        intervalRenderer = _this$props2.intervalRenderer,
    		        headerData = _this$props2.headerData;
    		      var Renderer = intervalRenderer;
    		      if (Renderer) {
    		        return _react["default"].createElement(Renderer, {
    		          getIntervalProps: this.getIntervalProps,
    		          intervalContext: {
    		            interval: interval,
    		            intervalText: intervalText
    		          },
    		          data: headerData
    		        });
    		      }
    		      return _react["default"].createElement("div", _extends({}, this.getIntervalProps({}), {
    		        className: "rct-dateHeader ".concat(this.props.primaryHeader ? 'rct-dateHeader-primary' : '')
    		      }), _react["default"].createElement("span", null, intervalText));
    		    }
    		  }]);
    		  return Interval;
    		}(_react["default"].PureComponent);
    		_defineProperty(Interval, "propTypes", {
    		  intervalRenderer: _propTypes["default"].func,
    		  unit: _propTypes["default"].string.isRequired,
    		  interval: _propTypes["default"].object.isRequired,
    		  showPeriod: _propTypes["default"].func.isRequired,
    		  intervalText: _propTypes["default"].string.isRequired,
    		  primaryHeader: _propTypes["default"].bool.isRequired,
    		  getIntervalProps: _propTypes["default"].func.isRequired,
    		  headerData: _propTypes["default"].object
    		});
    		var _default = Interval;
    		exports["default"] = _default; 
    	} (Interval));
    	return Interval;
    }

    var hasRequiredCustomDateHeader;

    function requireCustomDateHeader () {
    	if (hasRequiredCustomDateHeader) return CustomDateHeader;
    	hasRequiredCustomDateHeader = 1;

    	Object.defineProperty(CustomDateHeader, "__esModule", {
    	  value: true
    	});
    	CustomDateHeader.CustomDateHeader = CustomDateHeader$1;
    	var _react = _interopRequireDefault(require("react"));
    	var _Interval = _interopRequireDefault(requireInterval());
    	function _interopRequireDefault(obj) {
    	  return obj && obj.__esModule ? obj : {
    	    "default": obj
    	  };
    	}
    	function _extends() {
    	  _extends = Object.assign || function (target) {
    	    for (var i = 1; i < arguments.length; i++) {
    	      var source = arguments[i];
    	      for (var key in source) {
    	        if (Object.prototype.hasOwnProperty.call(source, key)) {
    	          target[key] = source[key];
    	        }
    	      }
    	    }
    	    return target;
    	  };
    	  return _extends.apply(this, arguments);
    	}
    	function CustomDateHeader$1(_ref) {
    	  var _ref$headerContext = _ref.headerContext,
    	    intervals = _ref$headerContext.intervals,
    	    unit = _ref$headerContext.unit,
    	    getRootProps = _ref.getRootProps,
    	    getIntervalProps = _ref.getIntervalProps,
    	    showPeriod = _ref.showPeriod,
    	    _ref$data = _ref.data,
    	    style = _ref$data.style,
    	    intervalRenderer = _ref$data.intervalRenderer,
    	    className = _ref$data.className,
    	    getLabelFormat = _ref$data.getLabelFormat,
    	    unitProp = _ref$data.unitProp,
    	    headerData = _ref$data.headerData;
    	  return _react["default"].createElement("div", _extends({
    	    className: className
    	  }, getRootProps({
    	    style: style
    	  })), intervals.map(function (interval) {
    	    var intervalText = getLabelFormat([interval.startTime, interval.endTime], unit, interval.labelWidth);
    	    return _react["default"].createElement(_Interval["default"], {
    	      key: "label-".concat(interval.startTime.valueOf()),
    	      unit: unit,
    	      interval: interval,
    	      showPeriod: showPeriod,
    	      intervalText: intervalText,
    	      primaryHeader: unitProp === 'primaryHeader',
    	      getIntervalProps: getIntervalProps,
    	      intervalRenderer: intervalRenderer,
    	      headerData: headerData
    	    });
    	  }));
    	}
    	return CustomDateHeader;
    }

    var hasRequiredDateHeader;

    function requireDateHeader () {
    	if (hasRequiredDateHeader) return DateHeader;
    	hasRequiredDateHeader = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _TimelineStateContext = requireTimelineStateContext();
    		var _CustomHeader = _interopRequireDefault(requireCustomHeader());
    		var _calendar = requireCalendar();
    		var _defaultConfig = requireDefaultConfig();
    		var _memoizeOne = _interopRequireDefault(memoizeOne);
    		var _CustomDateHeader = requireCustomDateHeader();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _slicedToArray(arr, i) {
    		  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    		}
    		function _nonIterableRest() {
    		  throw new TypeError("Invalid attempt to destructure non-iterable instance");
    		}
    		function _iterableToArrayLimit(arr, i) {
    		  var _arr = [];
    		  var _n = true;
    		  var _d = false;
    		  var _e = undefined;
    		  try {
    		    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
    		      _arr.push(_s.value);
    		      if (i && _arr.length === i) break;
    		    }
    		  } catch (err) {
    		    _d = true;
    		    _e = err;
    		  } finally {
    		    try {
    		      if (!_n && _i["return"] != null) _i["return"]();
    		    } finally {
    		      if (_d) throw _e;
    		    }
    		  }
    		  return _arr;
    		}
    		function _arrayWithHoles(arr) {
    		  if (Array.isArray(arr)) return arr;
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var DateHeader = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(DateHeader, _React$Component);
    		  function DateHeader() {
    		    var _getPrototypeOf2;
    		    var _this;
    		    _classCallCheck(this, DateHeader);
    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }
    		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DateHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
    		    _defineProperty(_assertThisInitialized(_this), "getHeaderUnit", function () {
    		      if (_this.props.unit === 'primaryHeader') {
    		        return (0, _calendar.getNextUnit)(_this.props.timelineUnit);
    		      } else if (_this.props.unit) {
    		        return _this.props.unit;
    		      }
    		      return _this.props.timelineUnit;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getRootStyle", (0, _memoizeOne["default"])(function (style) {
    		      return _objectSpread({
    		        height: 30
    		      }, style);
    		    }));
    		    _defineProperty(_assertThisInitialized(_this), "getLabelFormat", function (interval, unit, labelWidth) {
    		      var labelFormat = _this.props.labelFormat;
    		      if (typeof labelFormat === 'string') {
    		        var startTime = interval[0];
    		        return startTime.format(labelFormat);
    		      } else if (typeof labelFormat === 'function') {
    		        return labelFormat(interval, unit, labelWidth);
    		      } else {
    		        throw new Error('labelFormat should be function or string');
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getHeaderData", (0, _memoizeOne["default"])(function (intervalRenderer, style, className, getLabelFormat, unitProp, headerData) {
    		      return {
    		        intervalRenderer: intervalRenderer,
    		        style: style,
    		        className: className,
    		        getLabelFormat: getLabelFormat,
    		        unitProp: unitProp,
    		        headerData: headerData
    		      };
    		    }));
    		    return _this;
    		  }
    		  _createClass(DateHeader, [{
    		    key: "render",
    		    value: function render() {
    		      var unit = this.getHeaderUnit();
    		      var _this$props = this.props;
    		        _this$props.headerData;
    		        var height = _this$props.height;
    		      return _react["default"].createElement(_CustomHeader["default"], {
    		        unit: unit,
    		        height: height,
    		        headerData: this.getHeaderData(this.props.intervalRenderer, this.getRootStyle(this.props.style), this.props.className, this.getLabelFormat, this.props.unit, this.props.headerData),
    		        children: _CustomDateHeader.CustomDateHeader
    		      });
    		    }
    		  }]);
    		  return DateHeader;
    		}(_react["default"].Component);
    		_defineProperty(DateHeader, "propTypes", {
    		  unit: _propTypes["default"].string,
    		  style: _propTypes["default"].object,
    		  className: _propTypes["default"].string,
    		  timelineUnit: _propTypes["default"].string,
    		  labelFormat: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].objectOf(_propTypes["default"].objectOf(_propTypes["default"].string)), _propTypes["default"].string]).isRequired,
    		  intervalRenderer: _propTypes["default"].func,
    		  headerData: _propTypes["default"].object,
    		  height: _propTypes["default"].number
    		});
    		var DateHeaderWrapper = function DateHeaderWrapper(_ref) {
    		  var unit = _ref.unit,
    		    labelFormat = _ref.labelFormat,
    		    style = _ref.style,
    		    className = _ref.className,
    		    intervalRenderer = _ref.intervalRenderer,
    		    headerData = _ref.headerData,
    		    height = _ref.height;
    		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref2) {
    		    var getTimelineState = _ref2.getTimelineState;
    		    var timelineState = getTimelineState();
    		    return _react["default"].createElement(DateHeader, {
    		      timelineUnit: timelineState.timelineUnit,
    		      unit: unit,
    		      labelFormat: labelFormat,
    		      style: style,
    		      className: className,
    		      intervalRenderer: intervalRenderer,
    		      headerData: headerData,
    		      height: height
    		    });
    		  });
    		};
    		DateHeaderWrapper.propTypes = {
    		  style: _propTypes["default"].object,
    		  className: _propTypes["default"].string,
    		  unit: _propTypes["default"].string,
    		  labelFormat: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].objectOf(_propTypes["default"].objectOf(_propTypes["default"].string)), _propTypes["default"].string]),
    		  intervalRenderer: _propTypes["default"].func,
    		  headerData: _propTypes["default"].object,
    		  height: _propTypes["default"].number
    		};
    		DateHeaderWrapper.defaultProps = {
    		  labelFormat: formatLabel
    		};
    		function formatLabel(_ref3, unit, labelWidth) {
    		  var _ref4 = _slicedToArray(_ref3, 2),
    		    timeStart = _ref4[0];
    		    _ref4[1];
    		  var formatOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _defaultConfig.defaultHeaderFormats;
    		  var format;
    		  if (labelWidth >= 150) {
    		    format = formatOptions[unit]['long'];
    		  } else if (labelWidth >= 100) {
    		    format = formatOptions[unit]['mediumLong'];
    		  } else if (labelWidth >= 50) {
    		    format = formatOptions[unit]['medium'];
    		  } else {
    		    format = formatOptions[unit]['short'];
    		  }
    		  return timeStart.format(format);
    		}
    		var _default = DateHeaderWrapper;
    		exports["default"] = _default; 
    	} (DateHeader));
    	return DateHeader;
    }

    var hasRequiredTimeline;

    function requireTimeline () {
    	if (hasRequiredTimeline) return Timeline$1;
    	hasRequiredTimeline = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _react = _interopRequireWildcard(require("react"));
    		var _Items = _interopRequireDefault(requireItems());
    		var _Sidebar = _interopRequireDefault(requireSidebar());
    		var _Columns = _interopRequireDefault(requireColumns());
    		var _GroupRows = _interopRequireDefault(requireGroupRows());
    		var _ScrollElement = _interopRequireDefault(requireScrollElement());
    		var _MarkerCanvas = _interopRequireDefault(requireMarkerCanvas());
    		var _window = _interopRequireDefault(requireWindow());
    		var _calendar = requireCalendar();
    		var _generic = requireGeneric();
    		var _defaultConfig = requireDefaultConfig();
    		var _TimelineStateContext = requireTimelineStateContext();
    		var _TimelineMarkersContext = requireTimelineMarkersContext();
    		var _HeadersContext = requireHeadersContext();
    		var _TimelineHeaders = _interopRequireDefault(requireTimelineHeaders());
    		var _DateHeader = _interopRequireDefault(requireDateHeader());
    		function _interopRequireWildcard(obj) {
    		  if (obj && obj.__esModule) {
    		    return obj;
    		  } else {
    		    var newObj = {};
    		    if (obj != null) {
    		      for (var key in obj) {
    		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
    		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
    		          if (desc.get || desc.set) {
    		            Object.defineProperty(newObj, key, desc);
    		          } else {
    		            newObj[key] = obj[key];
    		          }
    		        }
    		      }
    		    }
    		    newObj["default"] = obj;
    		    return newObj;
    		  }
    		}
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _slicedToArray(arr, i) {
    		  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    		}
    		function _nonIterableRest() {
    		  throw new TypeError("Invalid attempt to destructure non-iterable instance");
    		}
    		function _iterableToArrayLimit(arr, i) {
    		  var _arr = [];
    		  var _n = true;
    		  var _d = false;
    		  var _e = undefined;
    		  try {
    		    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
    		      _arr.push(_s.value);
    		      if (i && _arr.length === i) break;
    		    }
    		  } catch (err) {
    		    _d = true;
    		    _e = err;
    		  } finally {
    		    try {
    		      if (!_n && _i["return"] != null) _i["return"]();
    		    } finally {
    		      if (_d) throw _e;
    		    }
    		  }
    		  return _arr;
    		}
    		function _arrayWithHoles(arr) {
    		  if (Array.isArray(arr)) return arr;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var ReactCalendarTimeline = /*#__PURE__*/
    		function (_Component) {
    		  _inherits(ReactCalendarTimeline, _Component);
    		  _createClass(ReactCalendarTimeline, [{
    		    key: "getChildContext",
    		    value: function getChildContext() {
    		      var _this2 = this;
    		      return {
    		        getTimelineContext: function getTimelineContext() {
    		          return _this2.getTimelineContext();
    		        }
    		      };
    		    }
    		  }]);
    		  function ReactCalendarTimeline(_props) {
    		    var _this;
    		    _classCallCheck(this, ReactCalendarTimeline);
    		    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactCalendarTimeline).call(this, _props));
    		    _defineProperty(_assertThisInitialized(_this), "getTimelineContext", function () {
    		      var _this$state = _this.state,
    		        width = _this$state.width,
    		        visibleTimeStart = _this$state.visibleTimeStart,
    		        visibleTimeEnd = _this$state.visibleTimeEnd,
    		        canvasTimeStart = _this$state.canvasTimeStart,
    		        canvasTimeEnd = _this$state.canvasTimeEnd;
    		      return {
    		        timelineWidth: width,
    		        visibleTimeStart: visibleTimeStart,
    		        visibleTimeEnd: visibleTimeEnd,
    		        canvasTimeStart: canvasTimeStart,
    		        canvasTimeEnd: canvasTimeEnd
    		      };
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getTimelineUnit", function () {
    		      var _this$state2 = _this.state,
    		        width = _this$state2.width,
    		        visibleTimeStart = _this$state2.visibleTimeStart,
    		        visibleTimeEnd = _this$state2.visibleTimeEnd;
    		      var timeSteps = _this.props.timeSteps;
    		      var zoom = visibleTimeEnd - visibleTimeStart;
    		      var minUnit = (0, _calendar.getMinUnit)(zoom, width, timeSteps);
    		      return minUnit;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "resize", function () {
    		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
    		      var _this$container$getBo = _this.container.getBoundingClientRect(),
    		        containerWidth = _this$container$getBo.width;
    		      var width = containerWidth - props.sidebarWidth - props.rightSidebarWidth;
    		      var canvasWidth = (0, _calendar.getCanvasWidth)(width, props.buffer);
    		      var _stackTimelineItems = (0, _calendar.stackTimelineItems)(props.items, props.groups, canvasWidth, _this.state.canvasTimeStart, _this.state.canvasTimeEnd, props.keys, props.lineHeight, props.itemHeightRatio, props.stackItems, _this.state.draggingItem, _this.state.resizingItem, _this.state.dragTime, _this.state.resizingEdge, _this.state.resizeTime, _this.state.newGroupOrder),
    		        dimensionItems = _stackTimelineItems.dimensionItems,
    		        height = _stackTimelineItems.height,
    		        groupHeights = _stackTimelineItems.groupHeights,
    		        groupTops = _stackTimelineItems.groupTops; // this is needed by dragItem since it uses pageY from the drag events
    		      // if this was in the context of the scrollElement, this would not be necessary

    		      _this.setState({
    		        width: width,
    		        dimensionItems: dimensionItems,
    		        height: height,
    		        groupHeights: groupHeights,
    		        groupTops: groupTops
    		      }); //initial scroll left is the buffer - 1 (1 is visible area) divided by 2 (2 is the buffer split on the right and left of the timeline)

    		      var scrollLeft = width * ((props.buffer - 1) / 2);
    		      _this.scrollComponent.scrollLeft = scrollLeft;
    		      _this.scrollHeaderRef.scrollLeft = scrollLeft;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "onScroll", function (scrollX) {
    		      var width = _this.state.width;
    		      var canvasTimeStart = _this.state.canvasTimeStart;
    		      var zoom = _this.state.visibleTimeEnd - _this.state.visibleTimeStart;
    		      var visibleTimeStart = canvasTimeStart + zoom * scrollX / width;
    		      if (_this.state.visibleTimeStart !== visibleTimeStart || _this.state.visibleTimeEnd !== visibleTimeStart + zoom) {
    		        _this.props.onTimeChange(visibleTimeStart, visibleTimeStart + zoom, _this.updateScrollCanvas, _this.getTimelineUnit());
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "updateScrollCanvas", function (visibleTimeStart, visibleTimeEnd, forceUpdateDimensions) {
    		      var items = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _this.props.items;
    		      var groups = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _this.props.groups;
    		      _this.setState((0, _calendar.calculateScrollCanvas)(visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, items, groups, _this.props, _this.state));
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleWheelZoom", function (speed, xPosition, deltaY) {
    		      _this.changeZoom(1.0 + speed * deltaY / 500, xPosition / _this.state.width);
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "changeZoom", function (scale) {
    		      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
    		      var _this$props = _this.props,
    		        minZoom = _this$props.minZoom,
    		        maxZoom = _this$props.maxZoom;
    		      var oldZoom = _this.state.visibleTimeEnd - _this.state.visibleTimeStart;
    		      var newZoom = Math.min(Math.max(Math.round(oldZoom * scale), minZoom), maxZoom); // min 1 min, max 20 years

    		      var newVisibleTimeStart = Math.round(_this.state.visibleTimeStart + (oldZoom - newZoom) * offset);
    		      _this.props.onTimeChange(newVisibleTimeStart, newVisibleTimeStart + newZoom, _this.updateScrollCanvas, _this.getTimelineUnit());
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "showPeriod", function (from, to) {
    		      var visibleTimeStart = from.valueOf();
    		      var visibleTimeEnd = to.valueOf();
    		      var zoom = visibleTimeEnd - visibleTimeStart; // can't zoom in more than to show one hour

    		      if (zoom < _this.props.minZoom) {
    		        return;
    		      }
    		      _this.props.onTimeChange(visibleTimeStart, visibleTimeStart + zoom, _this.updateScrollCanvas, _this.getTimelineUnit());
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "selectItem", function (item, clickType, e) {
    		      if (_this.isItemSelected(item) || _this.props.itemTouchSendsClick && clickType === 'touch') {
    		        if (item && _this.props.onItemClick) {
    		          var time = _this.timeFromItemEvent(e);
    		          _this.props.onItemClick(item, e, time);
    		        }
    		      } else {
    		        _this.setState({
    		          selectedItem: item
    		        });
    		        if (item && _this.props.onItemSelect) {
    		          var _time = _this.timeFromItemEvent(e);
    		          _this.props.onItemSelect(item, e, _time);
    		        } else if (item === null && _this.props.onItemDeselect) {
    		          _this.props.onItemDeselect(e); // this isnt in the docs. Is this function even used?
    		        }
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "doubleClickItem", function (item, e) {
    		      if (_this.props.onItemDoubleClick) {
    		        var time = _this.timeFromItemEvent(e);
    		        _this.props.onItemDoubleClick(item, e, time);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "contextMenuClickItem", function (item, e) {
    		      if (_this.props.onItemContextMenu) {
    		        var time = _this.timeFromItemEvent(e);
    		        _this.props.onItemContextMenu(item, e, time);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getTimeFromRowClickEvent", function (e) {
    		      var _this$props2 = _this.props,
    		        dragSnap = _this$props2.dragSnap,
    		        buffer = _this$props2.buffer;
    		      var _this$state3 = _this.state,
    		        width = _this$state3.width,
    		        canvasTimeStart = _this$state3.canvasTimeStart,
    		        canvasTimeEnd = _this$state3.canvasTimeEnd; // this gives us distance from left of row element, so event is in
    		      // context of the row element, not client or page

    		      var offsetX = e.nativeEvent.offsetX;
    		      var time = (0, _calendar.calculateTimeForXPosition)(canvasTimeStart, canvasTimeEnd, (0, _calendar.getCanvasWidth)(width, buffer), offsetX);
    		      time = Math.floor(time / dragSnap) * dragSnap;
    		      return time;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "timeFromItemEvent", function (e) {
    		      var _this$state4 = _this.state,
    		        width = _this$state4.width,
    		        visibleTimeStart = _this$state4.visibleTimeStart,
    		        visibleTimeEnd = _this$state4.visibleTimeEnd;
    		      var dragSnap = _this.props.dragSnap;
    		      var scrollComponent = _this.scrollComponent;
    		      var _scrollComponent$getB = scrollComponent.getBoundingClientRect(),
    		        scrollX = _scrollComponent$getB.left;
    		      var xRelativeToTimeline = e.clientX - scrollX;
    		      var relativeItemPosition = xRelativeToTimeline / width;
    		      var zoom = visibleTimeEnd - visibleTimeStart;
    		      var timeOffset = relativeItemPosition * zoom;
    		      var time = Math.round(visibleTimeStart + timeOffset);
    		      time = Math.floor(time / dragSnap) * dragSnap;
    		      return time;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "dragItem", function (item, dragTime, newGroupOrder) {
    		      var newGroup = _this.props.groups[newGroupOrder];
    		      var keys = _this.props.keys;
    		      _this.setState({
    		        draggingItem: item,
    		        dragTime: dragTime,
    		        newGroupOrder: newGroupOrder,
    		        dragGroupTitle: newGroup ? (0, _generic._get)(newGroup, keys.groupLabelKey) : ''
    		      });
    		      _this.updatingItem({
    		        eventType: 'move',
    		        itemId: item,
    		        time: dragTime,
    		        newGroupOrder: newGroupOrder
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "dropItem", function (item, dragTime, newGroupOrder) {
    		      _this.setState({
    		        draggingItem: null,
    		        dragTime: null,
    		        dragGroupTitle: null
    		      });
    		      if (_this.props.onItemMove) {
    		        _this.props.onItemMove(item, dragTime, newGroupOrder);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "resizingItem", function (item, resizeTime, edge) {
    		      _this.setState({
    		        resizingItem: item,
    		        resizingEdge: edge,
    		        resizeTime: resizeTime
    		      });
    		      _this.updatingItem({
    		        eventType: 'resize',
    		        itemId: item,
    		        time: resizeTime,
    		        edge: edge
    		      });
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "resizedItem", function (item, resizeTime, edge, timeDelta) {
    		      _this.setState({
    		        resizingItem: null,
    		        resizingEdge: null,
    		        resizeTime: null
    		      });
    		      if (_this.props.onItemResize && timeDelta !== 0) {
    		        _this.props.onItemResize(item, resizeTime, edge);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "updatingItem", function (_ref) {
    		      var eventType = _ref.eventType,
    		        itemId = _ref.itemId,
    		        time = _ref.time,
    		        edge = _ref.edge,
    		        newGroupOrder = _ref.newGroupOrder;
    		      if (_this.props.onItemDrag) {
    		        _this.props.onItemDrag({
    		          eventType: eventType,
    		          itemId: itemId,
    		          time: time,
    		          edge: edge,
    		          newGroupOrder: newGroupOrder
    		        });
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleRowClick", function (e, rowIndex) {
    		      // shouldnt this be handled by the user, as far as when to deselect an item?
    		      if (_this.hasSelectedItem()) {
    		        _this.selectItem(null);
    		      }
    		      if (_this.props.onCanvasClick == null) return;
    		      var time = _this.getTimeFromRowClickEvent(e);
    		      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);
    		      _this.props.onCanvasClick(groupId, time, e);
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleRowDoubleClick", function (e, rowIndex) {
    		      if (_this.props.onCanvasDoubleClick == null) return;
    		      var time = _this.getTimeFromRowClickEvent(e);
    		      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);
    		      _this.props.onCanvasDoubleClick(groupId, time, e);
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleScrollContextMenu", function (e, rowIndex) {
    		      if (_this.props.onCanvasContextMenu == null) return;
    		      var timePosition = _this.getTimeFromRowClickEvent(e);
    		      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);
    		      if (_this.props.onCanvasContextMenu) {
    		        e.preventDefault();
    		        _this.props.onCanvasContextMenu(groupId, timePosition, e);
    		      }
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "handleHeaderRef", function (el) {
    		      _this.scrollHeaderRef = el;
    		      _this.props.headerRef(el);
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "isTimelineHeader", function (child) {
    		      if (child.type === undefined) return false;
    		      return child.type.secretKey === _TimelineHeaders["default"].secretKey;
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "renderHeaders", function () {
    		      if (_this.props.children) {
    		        var headerRenderer;
    		        _react["default"].Children.map(_this.props.children, function (child) {
    		          if (_this.isTimelineHeader(child)) {
    		            headerRenderer = child;
    		          }
    		        });
    		        if (headerRenderer) {
    		          return headerRenderer;
    		        }
    		      }
    		      return _react["default"].createElement(_TimelineHeaders["default"], null, _react["default"].createElement(_DateHeader["default"], {
    		        unit: "primaryHeader"
    		      }), _react["default"].createElement(_DateHeader["default"], null));
    		    });
    		    _defineProperty(_assertThisInitialized(_this), "getScrollElementRef", function (el) {
    		      _this.props.scrollRef(el);
    		      _this.scrollComponent = el;
    		    });
    		    _this.getSelected = _this.getSelected.bind(_assertThisInitialized(_this));
    		    _this.hasSelectedItem = _this.hasSelectedItem.bind(_assertThisInitialized(_this));
    		    _this.isItemSelected = _this.isItemSelected.bind(_assertThisInitialized(_this));
    		    var _visibleTimeStart = null;
    		    var _visibleTimeEnd = null;
    		    if (_this.props.defaultTimeStart && _this.props.defaultTimeEnd) {
    		      _visibleTimeStart = _this.props.defaultTimeStart.valueOf();
    		      _visibleTimeEnd = _this.props.defaultTimeEnd.valueOf();
    		    } else if (_this.props.visibleTimeStart && _this.props.visibleTimeEnd) {
    		      _visibleTimeStart = _this.props.visibleTimeStart;
    		      _visibleTimeEnd = _this.props.visibleTimeEnd;
    		    } else {
    		      //throwing an error because neither default or visible time props provided
    		      throw new Error('You must provide either "defaultTimeStart" and "defaultTimeEnd" or "visibleTimeStart" and "visibleTimeEnd" to initialize the Timeline');
    		    }
    		    var _getCanvasBoundariesF = (0, _calendar.getCanvasBoundariesFromVisibleTime)(_visibleTimeStart, _visibleTimeEnd, _props.buffer),
    		      _getCanvasBoundariesF2 = _slicedToArray(_getCanvasBoundariesF, 2),
    		      _canvasTimeStart = _getCanvasBoundariesF2[0],
    		      _canvasTimeEnd = _getCanvasBoundariesF2[1];
    		    _this.state = {
    		      width: 1000,
    		      visibleTimeStart: _visibleTimeStart,
    		      visibleTimeEnd: _visibleTimeEnd,
    		      canvasTimeStart: _canvasTimeStart,
    		      canvasTimeEnd: _canvasTimeEnd,
    		      selectedItem: null,
    		      dragTime: null,
    		      dragGroupTitle: null,
    		      resizeTime: null,
    		      resizingItem: null,
    		      resizingEdge: null
    		    };
    		    var _canvasWidth = (0, _calendar.getCanvasWidth)(_this.state.width, _props.buffer);
    		    var _stackTimelineItems2 = (0, _calendar.stackTimelineItems)(_props.items, _props.groups, _canvasWidth, _this.state.canvasTimeStart, _this.state.canvasTimeEnd, _props.keys, _props.lineHeight, _props.itemHeightRatio, _props.stackItems, _this.state.draggingItem, _this.state.resizingItem, _this.state.dragTime, _this.state.resizingEdge, _this.state.resizeTime, _this.state.newGroupOrder),
    		      _dimensionItems = _stackTimelineItems2.dimensionItems,
    		      _height = _stackTimelineItems2.height,
    		      _groupHeights = _stackTimelineItems2.groupHeights,
    		      _groupTops = _stackTimelineItems2.groupTops;
    		    /* eslint-disable react/no-direct-mutation-state */

    		    _this.state.dimensionItems = _dimensionItems;
    		    _this.state.height = _height;
    		    _this.state.groupHeights = _groupHeights;
    		    _this.state.groupTops = _groupTops;
    		    /* eslint-enable */

    		    return _this;
    		  }
    		  _createClass(ReactCalendarTimeline, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.resize(this.props);
    		      if (this.props.resizeDetector && this.props.resizeDetector.addListener) {
    		        this.props.resizeDetector.addListener(this);
    		      }
    		      _window["default"].addListener(this);
    		      this.lastTouchDistance = null;
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      if (this.props.resizeDetector && this.props.resizeDetector.addListener) {
    		        this.props.resizeDetector.removeListener(this);
    		      }
    		      _window["default"].removeListener(this);
    		    }
    		  }, {
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps, prevState) {
    		      var newZoom = this.state.visibleTimeEnd - this.state.visibleTimeStart;
    		      var oldZoom = prevState.visibleTimeEnd - prevState.visibleTimeStart; // are we changing zoom? Report it!

    		      if (this.props.onZoom && newZoom !== oldZoom) {
    		        this.props.onZoom(this.getTimelineContext(), this.getTimelineUnit());
    		      } // The bounds have changed? Report it!

    		      if (this.props.onBoundsChange && this.state.canvasTimeStart !== prevState.canvasTimeStart) {
    		        this.props.onBoundsChange(this.state.canvasTimeStart, this.state.canvasTimeStart + newZoom * 3);
    		      } // Check the scroll is correct

    		      var scrollLeft = Math.round(this.state.width * (this.state.visibleTimeStart - this.state.canvasTimeStart) / newZoom);
    		      var componentScrollLeft = Math.round(prevState.width * (prevState.visibleTimeStart - prevState.canvasTimeStart) / oldZoom);
    		      if (componentScrollLeft !== scrollLeft) {
    		        this.scrollComponent.scrollLeft = scrollLeft;
    		        this.scrollHeaderRef.scrollLeft = scrollLeft;
    		      }
    		    }
    		  }, {
    		    key: "columns",
    		    value: function columns(canvasTimeStart, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height) {
    		      return _react["default"].createElement(_Columns["default"], {
    		        canvasTimeStart: canvasTimeStart,
    		        canvasTimeEnd: canvasTimeEnd,
    		        canvasWidth: canvasWidth,
    		        lineCount: (0, _generic._length)(this.props.groups),
    		        minUnit: minUnit,
    		        timeSteps: timeSteps,
    		        height: height,
    		        verticalLineClassNamesForTime: this.props.verticalLineClassNamesForTime
    		      });
    		    }
    		  }, {
    		    key: "rows",
    		    value: function rows(canvasWidth, groupHeights, groups) {
    		      return _react["default"].createElement(_GroupRows["default"], {
    		        groups: groups,
    		        canvasWidth: canvasWidth,
    		        lineCount: (0, _generic._length)(this.props.groups),
    		        groupHeights: groupHeights,
    		        clickTolerance: this.props.clickTolerance,
    		        onRowClick: this.handleRowClick,
    		        onRowDoubleClick: this.handleRowDoubleClick,
    		        horizontalLineClassNamesForGroup: this.props.horizontalLineClassNamesForGroup,
    		        onRowContextClick: this.handleScrollContextMenu
    		      });
    		    }
    		  }, {
    		    key: "items",
    		    value: function items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops) {
    		      return _react["default"].createElement(_Items["default"], {
    		        canvasTimeStart: canvasTimeStart,
    		        canvasTimeEnd: canvasTimeEnd,
    		        canvasWidth: canvasWidth,
    		        dimensionItems: dimensionItems,
    		        groupTops: groupTops,
    		        items: this.props.items,
    		        groups: this.props.groups,
    		        keys: this.props.keys,
    		        selectedItem: this.state.selectedItem,
    		        dragSnap: this.props.dragSnap,
    		        minResizeWidth: this.props.minResizeWidth,
    		        canChangeGroup: this.props.canChangeGroup,
    		        canMove: this.props.canMove,
    		        canResize: this.props.canResize,
    		        useResizeHandle: this.props.useResizeHandle,
    		        canSelect: this.props.canSelect,
    		        moveResizeValidator: this.props.moveResizeValidator,
    		        itemSelect: this.selectItem,
    		        itemDrag: this.dragItem,
    		        itemDrop: this.dropItem,
    		        onItemDoubleClick: this.doubleClickItem,
    		        onItemContextMenu: this.props.onItemContextMenu ? this.contextMenuClickItem : undefined,
    		        itemResizing: this.resizingItem,
    		        itemResized: this.resizedItem,
    		        itemRenderer: this.props.itemRenderer,
    		        selected: this.props.selected,
    		        scrollRef: this.scrollComponent
    		      });
    		    }
    		  }, {
    		    key: "sidebar",
    		    value: function sidebar(height, groupHeights) {
    		      var sidebarWidth = this.props.sidebarWidth;
    		      return sidebarWidth && _react["default"].createElement(_Sidebar["default"], {
    		        groups: this.props.groups,
    		        groupRenderer: this.props.groupRenderer,
    		        keys: this.props.keys,
    		        width: sidebarWidth,
    		        groupHeights: groupHeights,
    		        height: height
    		      });
    		    }
    		  }, {
    		    key: "rightSidebar",
    		    value: function rightSidebar(height, groupHeights) {
    		      var rightSidebarWidth = this.props.rightSidebarWidth;
    		      return rightSidebarWidth && _react["default"].createElement(_Sidebar["default"], {
    		        groups: this.props.groups,
    		        keys: this.props.keys,
    		        groupRenderer: this.props.groupRenderer,
    		        isRightSidebar: true,
    		        width: rightSidebarWidth,
    		        groupHeights: groupHeights,
    		        height: height
    		      });
    		    }
    		    /**
    		     * check if child of type TimelineHeader
    		     * refer to for explanation https://github.com/gaearon/react-hot-loader#checking-element-types
    		     */
    		  }, {
    		    key: "childrenWithProps",
    		    value: function childrenWithProps(canvasTimeStart, canvasTimeEnd, canvasWidth, dimensionItems, groupHeights, groupTops, height, visibleTimeStart, visibleTimeEnd, minUnit, timeSteps) {
    		      var _this3 = this;
    		      if (!this.props.children) {
    		        return null;
    		      } // convert to an array and remove the nulls

    		      var childArray = Array.isArray(this.props.children) ? this.props.children.filter(function (c) {
    		        return c;
    		      }) : [this.props.children];
    		      var childProps = {
    		        canvasTimeStart: canvasTimeStart,
    		        canvasTimeEnd: canvasTimeEnd,
    		        canvasWidth: canvasWidth,
    		        visibleTimeStart: visibleTimeStart,
    		        visibleTimeEnd: visibleTimeEnd,
    		        dimensionItems: dimensionItems,
    		        items: this.props.items,
    		        groups: this.props.groups,
    		        keys: this.props.keys,
    		        groupHeights: groupHeights,
    		        groupTops: groupTops,
    		        selected: this.getSelected(),
    		        height: height,
    		        minUnit: minUnit,
    		        timeSteps: timeSteps
    		      };
    		      return _react["default"].Children.map(childArray, function (child) {
    		        if (!_this3.isTimelineHeader(child)) {
    		          return _react["default"].cloneElement(child, childProps);
    		        } else {
    		          return null;
    		        }
    		      });
    		    }
    		  }, {
    		    key: "getSelected",
    		    value: function getSelected() {
    		      return this.state.selectedItem && !this.props.selected ? [this.state.selectedItem] : this.props.selected || [];
    		    }
    		  }, {
    		    key: "hasSelectedItem",
    		    value: function hasSelectedItem() {
    		      if (!Array.isArray(this.props.selected)) return !!this.state.selectedItem;
    		      return this.props.selected.length > 0;
    		    }
    		  }, {
    		    key: "isItemSelected",
    		    value: function isItemSelected(itemId) {
    		      var selectedItems = this.getSelected();
    		      return selectedItems.some(function (i) {
    		        return i === itemId;
    		      });
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this4 = this;
    		      var _this$props3 = this.props,
    		        items = _this$props3.items,
    		        groups = _this$props3.groups,
    		        sidebarWidth = _this$props3.sidebarWidth,
    		        rightSidebarWidth = _this$props3.rightSidebarWidth,
    		        timeSteps = _this$props3.timeSteps,
    		        traditionalZoom = _this$props3.traditionalZoom,
    		        buffer = _this$props3.buffer;
    		      var _this$state5 = this.state,
    		        draggingItem = _this$state5.draggingItem,
    		        resizingItem = _this$state5.resizingItem,
    		        width = _this$state5.width,
    		        visibleTimeStart = _this$state5.visibleTimeStart,
    		        visibleTimeEnd = _this$state5.visibleTimeEnd,
    		        canvasTimeStart = _this$state5.canvasTimeStart,
    		        canvasTimeEnd = _this$state5.canvasTimeEnd;
    		      var _this$state6 = this.state,
    		        dimensionItems = _this$state6.dimensionItems,
    		        height = _this$state6.height,
    		        groupHeights = _this$state6.groupHeights,
    		        groupTops = _this$state6.groupTops;
    		      var zoom = visibleTimeEnd - visibleTimeStart;
    		      var canvasWidth = (0, _calendar.getCanvasWidth)(width, buffer);
    		      var minUnit = (0, _calendar.getMinUnit)(zoom, width, timeSteps);
    		      var isInteractingWithItem = !!draggingItem || !!resizingItem;
    		      if (isInteractingWithItem) {
    		        var stackResults = (0, _calendar.stackTimelineItems)(items, groups, canvasWidth, this.state.canvasTimeStart, this.state.canvasTimeEnd, this.props.keys, this.props.lineHeight, this.props.itemHeightRatio, this.props.stackItems, this.state.draggingItem, this.state.resizingItem, this.state.dragTime, this.state.resizingEdge, this.state.resizeTime, this.state.newGroupOrder);
    		        dimensionItems = stackResults.dimensionItems;
    		        height = stackResults.height;
    		        groupHeights = stackResults.groupHeights;
    		        groupTops = stackResults.groupTops;
    		      }
    		      var outerComponentStyle = {
    		        height: "".concat(height, "px")
    		      };
    		      return _react["default"].createElement(_TimelineStateContext.TimelineStateProvider, {
    		        visibleTimeStart: visibleTimeStart,
    		        visibleTimeEnd: visibleTimeEnd,
    		        canvasTimeStart: canvasTimeStart,
    		        canvasTimeEnd: canvasTimeEnd,
    		        canvasWidth: canvasWidth,
    		        showPeriod: this.showPeriod,
    		        timelineUnit: minUnit,
    		        timelineWidth: this.state.width
    		      }, _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersProvider, null, _react["default"].createElement(_HeadersContext.TimelineHeadersProvider, {
    		        registerScroll: this.handleHeaderRef,
    		        timeSteps: timeSteps,
    		        leftSidebarWidth: this.props.sidebarWidth,
    		        rightSidebarWidth: this.props.rightSidebarWidth
    		      }, _react["default"].createElement("div", {
    		        style: this.props.style,
    		        ref: function ref(el) {
    		          return _this4.container = el;
    		        },
    		        className: "react-calendar-timeline ".concat(this.props.className)
    		      }, this.renderHeaders(), _react["default"].createElement("div", {
    		        style: outerComponentStyle,
    		        className: "rct-outer"
    		      }, sidebarWidth > 0 ? this.sidebar(height, groupHeights) : null, _react["default"].createElement(_ScrollElement["default"], {
    		        scrollRef: this.getScrollElementRef,
    		        width: width,
    		        height: height,
    		        onZoom: this.changeZoom,
    		        onWheelZoom: this.handleWheelZoom,
    		        traditionalZoom: traditionalZoom,
    		        onScroll: this.onScroll,
    		        isInteractingWithItem: isInteractingWithItem
    		      }, _react["default"].createElement(_MarkerCanvas["default"], null, this.columns(canvasTimeStart, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height), this.rows(canvasWidth, groupHeights, groups), this.items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops), this.childrenWithProps(canvasTimeStart, canvasTimeEnd, canvasWidth, dimensionItems, groupHeights, groupTops, height, visibleTimeStart, visibleTimeEnd, minUnit, timeSteps))), rightSidebarWidth > 0 ? this.rightSidebar(height, groupHeights) : null)))));
    		    }
    		  }], [{
    		    key: "getDerivedStateFromProps",
    		    value: function getDerivedStateFromProps(nextProps, prevState) {
    		      var visibleTimeStart = nextProps.visibleTimeStart,
    		        visibleTimeEnd = nextProps.visibleTimeEnd,
    		        items = nextProps.items,
    		        groups = nextProps.groups; // This is a gross hack pushing items and groups in to state only to allow
    		      // For the forceUpdate check

    		      var derivedState = {
    		        items: items,
    		        groups: groups // if the items or groups have changed we must re-render
    		      };
    		      var forceUpdate = items !== prevState.items || groups !== prevState.groups; // We are a controlled component

    		      if (visibleTimeStart && visibleTimeEnd) {
    		        // Get the new canvas position
    		        Object.assign(derivedState, (0, _calendar.calculateScrollCanvas)(visibleTimeStart, visibleTimeEnd, forceUpdate, items, groups, nextProps, prevState));
    		      } else if (forceUpdate) {
    		        // Calculate new item stack position as canvas may have changed
    		        var canvasWidth = (0, _calendar.getCanvasWidth)(prevState.width, nextProps.buffer);
    		        Object.assign(derivedState, (0, _calendar.stackTimelineItems)(items, groups, canvasWidth, prevState.canvasTimeStart, prevState.canvasTimeEnd, nextProps.keys, nextProps.lineHeight, nextProps.itemHeightRatio, nextProps.stackItems, prevState.draggingItem, prevState.resizingItem, prevState.dragTime, prevState.resizingEdge, prevState.resizeTime, prevState.newGroupOrder));
    		      }
    		      return derivedState;
    		    }
    		  }]);
    		  return ReactCalendarTimeline;
    		}(_react.Component);
    		exports["default"] = ReactCalendarTimeline;
    		_defineProperty(ReactCalendarTimeline, "propTypes", {
    		  groups: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
    		  items: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
    		  sidebarWidth: _propTypes["default"].number,
    		  rightSidebarWidth: _propTypes["default"].number,
    		  dragSnap: _propTypes["default"].number,
    		  minResizeWidth: _propTypes["default"].number,
    		  lineHeight: _propTypes["default"].number,
    		  itemHeightRatio: _propTypes["default"].number,
    		  minZoom: _propTypes["default"].number,
    		  maxZoom: _propTypes["default"].number,
    		  buffer: _propTypes["default"].number,
    		  clickTolerance: _propTypes["default"].number,
    		  canChangeGroup: _propTypes["default"].bool,
    		  canMove: _propTypes["default"].bool,
    		  canResize: _propTypes["default"].oneOf([true, false, 'left', 'right', 'both']),
    		  useResizeHandle: _propTypes["default"].bool,
    		  canSelect: _propTypes["default"].bool,
    		  stackItems: _propTypes["default"].bool,
    		  traditionalZoom: _propTypes["default"].bool,
    		  itemTouchSendsClick: _propTypes["default"].bool,
    		  horizontalLineClassNamesForGroup: _propTypes["default"].func,
    		  onItemMove: _propTypes["default"].func,
    		  onItemResize: _propTypes["default"].func,
    		  onItemClick: _propTypes["default"].func,
    		  onItemSelect: _propTypes["default"].func,
    		  onItemDeselect: _propTypes["default"].func,
    		  onCanvasClick: _propTypes["default"].func,
    		  onItemDoubleClick: _propTypes["default"].func,
    		  onItemContextMenu: _propTypes["default"].func,
    		  onCanvasDoubleClick: _propTypes["default"].func,
    		  onCanvasContextMenu: _propTypes["default"].func,
    		  onZoom: _propTypes["default"].func,
    		  onItemDrag: _propTypes["default"].func,
    		  moveResizeValidator: _propTypes["default"].func,
    		  itemRenderer: _propTypes["default"].func,
    		  groupRenderer: _propTypes["default"].func,
    		  className: _propTypes["default"].string,
    		  style: _propTypes["default"].object,
    		  keys: _propTypes["default"].shape({
    		    groupIdKey: _propTypes["default"].string,
    		    groupTitleKey: _propTypes["default"].string,
    		    groupLabelKey: _propTypes["default"].string,
    		    groupRightTitleKey: _propTypes["default"].string,
    		    itemIdKey: _propTypes["default"].string,
    		    itemTitleKey: _propTypes["default"].string,
    		    itemDivTitleKey: _propTypes["default"].string,
    		    itemGroupKey: _propTypes["default"].string,
    		    itemTimeStartKey: _propTypes["default"].string,
    		    itemTimeEndKey: _propTypes["default"].string
    		  }),
    		  headerRef: _propTypes["default"].func,
    		  scrollRef: _propTypes["default"].func,
    		  timeSteps: _propTypes["default"].shape({
    		    second: _propTypes["default"].number,
    		    minute: _propTypes["default"].number,
    		    hour: _propTypes["default"].number,
    		    day: _propTypes["default"].number,
    		    month: _propTypes["default"].number,
    		    year: _propTypes["default"].number
    		  }),
    		  defaultTimeStart: _propTypes["default"].object,
    		  defaultTimeEnd: _propTypes["default"].object,
    		  visibleTimeStart: _propTypes["default"].number,
    		  visibleTimeEnd: _propTypes["default"].number,
    		  onTimeChange: _propTypes["default"].func,
    		  onBoundsChange: _propTypes["default"].func,
    		  selected: _propTypes["default"].array,
    		  resizeDetector: _propTypes["default"].shape({
    		    addListener: _propTypes["default"].func,
    		    removeListener: _propTypes["default"].func
    		  }),
    		  verticalLineClassNamesForTime: _propTypes["default"].func,
    		  children: _propTypes["default"].node
    		});
    		_defineProperty(ReactCalendarTimeline, "defaultProps", {
    		  sidebarWidth: 150,
    		  rightSidebarWidth: 0,
    		  dragSnap: 1000 * 60 * 15,
    		  // 15min
    		  minResizeWidth: 20,
    		  lineHeight: 30,
    		  itemHeightRatio: 0.65,
    		  buffer: 3,
    		  minZoom: 60 * 60 * 1000,
    		  // 1 hour
    		  maxZoom: 5 * 365.24 * 86400 * 1000,
    		  // 5 years
    		  clickTolerance: 3,
    		  // how many pixels can we drag for it to be still considered a click?
    		  canChangeGroup: true,
    		  canMove: true,
    		  canResize: 'right',
    		  useResizeHandle: false,
    		  canSelect: true,
    		  stackItems: false,
    		  traditionalZoom: false,
    		  horizontalLineClassNamesForGroup: null,
    		  onItemMove: null,
    		  onItemResize: null,
    		  onItemClick: null,
    		  onItemSelect: null,
    		  onItemDeselect: null,
    		  onItemDrag: null,
    		  onCanvasClick: null,
    		  onItemDoubleClick: null,
    		  onItemContextMenu: null,
    		  onZoom: null,
    		  verticalLineClassNamesForTime: null,
    		  moveResizeValidator: null,
    		  dayBackground: null,
    		  defaultTimeStart: null,
    		  defaultTimeEnd: null,
    		  itemTouchSendsClick: false,
    		  style: {},
    		  className: '',
    		  keys: _defaultConfig.defaultKeys,
    		  timeSteps: _defaultConfig.defaultTimeSteps,
    		  headerRef: function headerRef() {},
    		  scrollRef: function scrollRef() {},
    		  // if you pass in visibleTimeStart and visibleTimeEnd, you must also pass onTimeChange(visibleTimeStart, visibleTimeEnd),
    		  // which needs to update the props visibleTimeStart and visibleTimeEnd to the ones passed
    		  visibleTimeStart: null,
    		  visibleTimeEnd: null,
    		  onTimeChange: function onTimeChange(visibleTimeStart, visibleTimeEnd, updateScrollCanvas) {
    		    updateScrollCanvas(visibleTimeStart, visibleTimeEnd);
    		  },
    		  // called when the canvas area of the calendar changes
    		  onBoundsChange: null,
    		  children: null,
    		  selected: null
    		});
    		_defineProperty(ReactCalendarTimeline, "childContextTypes", {
    		  getTimelineContext: _propTypes["default"].func
    		}); 
    	} (Timeline$1));
    	return Timeline$1;
    }

    var TimelineMarkers = {};

    var hasRequiredTimelineMarkers;

    function requireTimelineMarkers () {
    	if (hasRequiredTimelineMarkers) return TimelineMarkers;
    	hasRequiredTimelineMarkers = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		// Is this necessary? The initial reason for including this is for organization sake in the
    		// user code e.g.

    		/*
    		<Timeline {...otherProps}>
    		  <TimelineMarkers> // would there be props passed in here?
    		    <TodayLine />
    		    <CursorLine />
    		    <CustomLine />
    		  </TimelineMarkers>
    		</Timeline>

    		*/
    		// If we decide to pass in props to TimelineMarkers, then yes, this is necessary.
    		var TimelineMarkers = function TimelineMarkers(props) {
    		  return props.children || null;
    		};
    		var _default = TimelineMarkers;
    		exports["default"] = _default; 
    	} (TimelineMarkers));
    	return TimelineMarkers;
    }

    var TodayMarker = {};

    var hasRequiredTodayMarker;

    function requireTodayMarker () {
    	if (hasRequiredTodayMarker) return TodayMarker;
    	hasRequiredTodayMarker = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _TimelineMarkersContext = requireTimelineMarkersContext();
    		var _markerType = requireMarkerType();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var TodayMarker = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(TodayMarker, _React$Component);
    		  function TodayMarker() {
    		    _classCallCheck(this, TodayMarker);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(TodayMarker).apply(this, arguments));
    		  }
    		  _createClass(TodayMarker, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      var _this$props$subscribe = this.props.subscribeMarker({
    		          type: _markerType.TimelineMarkerType.Today,
    		          renderer: this.props.children,
    		          interval: this.props.interval
    		        }),
    		        unsubscribe = _this$props$subscribe.unsubscribe,
    		        getMarker = _this$props$subscribe.getMarker;
    		      this.unsubscribe = unsubscribe;
    		      this.getMarker = getMarker;
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      if (this.unsubscribe != null) {
    		        this.unsubscribe();
    		        this.unsubscribe = null;
    		      }
    		    }
    		  }, {
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps) {
    		      if (prevProps.interval !== this.props.interval && this.getMarker) {
    		        var marker = this.getMarker();
    		        this.props.updateMarker(_objectSpread({}, marker, {
    		          interval: this.props.interval
    		        }));
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      return null;
    		    }
    		  }]);
    		  return TodayMarker;
    		}(_react["default"].Component); // TODO: turn into HOC?

    		_defineProperty(TodayMarker, "propTypes", {
    		  subscribeMarker: _propTypes["default"].func.isRequired,
    		  updateMarker: _propTypes["default"].func.isRequired,
    		  interval: _propTypes["default"].number,
    		  children: _propTypes["default"].func
    		});
    		_defineProperty(TodayMarker, "defaultProps", {
    		  interval: 1000 * 10 // default to ten seconds
    		});
    		var TodayMarkerWrapper = function TodayMarkerWrapper(props) {
    		  return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref) {
    		    var subscribeMarker = _ref.subscribeMarker,
    		      updateMarker = _ref.updateMarker;
    		    return _react["default"].createElement(TodayMarker, _extends({
    		      subscribeMarker: subscribeMarker,
    		      updateMarker: updateMarker
    		    }, props));
    		  });
    		};
    		TodayMarkerWrapper.displayName = 'TodayMarkerWrapper';
    		var _default = TodayMarkerWrapper;
    		exports["default"] = _default; 
    	} (TodayMarker));
    	return TodayMarker;
    }

    var CustomMarker = {};

    var hasRequiredCustomMarker;

    function requireCustomMarker () {
    	if (hasRequiredCustomMarker) return CustomMarker;
    	hasRequiredCustomMarker = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _TimelineMarkersContext = requireTimelineMarkersContext();
    		var _markerType = requireMarkerType();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _objectSpread(target) {
    		  for (var i = 1; i < arguments.length; i++) {
    		    if (i % 2) {
    		      var source = arguments[i] != null ? arguments[i] : {};
    		      var ownKeys = Object.keys(source);
    		      if (typeof Object.getOwnPropertySymbols === 'function') {
    		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
    		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    		        }));
    		      }
    		      ownKeys.forEach(function (key) {
    		        _defineProperty(target, key, source[key]);
    		      });
    		    } else {
    		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
    		    }
    		  }
    		  return target;
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var CustomMarker = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(CustomMarker, _React$Component);
    		  function CustomMarker() {
    		    _classCallCheck(this, CustomMarker);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(CustomMarker).apply(this, arguments));
    		  }
    		  _createClass(CustomMarker, [{
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps) {
    		      if (prevProps.date !== this.props.date && this.getMarker) {
    		        var marker = this.getMarker();
    		        this.props.updateMarker(_objectSpread({}, marker, {
    		          date: this.props.date
    		        }));
    		      }
    		    }
    		  }, {
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      var _this$props$subscribe = this.props.subscribeMarker({
    		          type: _markerType.TimelineMarkerType.Custom,
    		          renderer: this.props.children,
    		          date: this.props.date
    		        }),
    		        unsubscribe = _this$props$subscribe.unsubscribe,
    		        getMarker = _this$props$subscribe.getMarker;
    		      this.unsubscribe = unsubscribe;
    		      this.getMarker = getMarker;
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      if (this.unsubscribe != null) {
    		        this.unsubscribe();
    		        this.unsubscribe = null;
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      return null;
    		    }
    		  }]);
    		  return CustomMarker;
    		}(_react["default"].Component); // TODO: turn into HOC?

    		_defineProperty(CustomMarker, "propTypes", {
    		  subscribeMarker: _propTypes["default"].func.isRequired,
    		  updateMarker: _propTypes["default"].func.isRequired,
    		  children: _propTypes["default"].func,
    		  date: _propTypes["default"].number.isRequired
    		});
    		var CustomMarkerWrapper = function CustomMarkerWrapper(props) {
    		  return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref) {
    		    var subscribeMarker = _ref.subscribeMarker,
    		      updateMarker = _ref.updateMarker;
    		    return _react["default"].createElement(CustomMarker, _extends({
    		      subscribeMarker: subscribeMarker,
    		      updateMarker: updateMarker
    		    }, props));
    		  });
    		};
    		CustomMarkerWrapper.displayName = 'CustomMarkerWrapper';
    		var _default = CustomMarkerWrapper;
    		exports["default"] = _default; 
    	} (CustomMarker));
    	return CustomMarker;
    }

    var CursorMarker = {};

    var hasRequiredCursorMarker;

    function requireCursorMarker () {
    	if (hasRequiredCursorMarker) return CursorMarker;
    	hasRequiredCursorMarker = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;
    		var _react = _interopRequireDefault(require("react"));
    		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
    		var _TimelineMarkersContext = requireTimelineMarkersContext();
    		var _markerType = requireMarkerType();
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    default: obj
    		  };
    		}
    		function _extends() {
    		  _extends = Object.assign || function (target) {
    		    for (var i = 1; i < arguments.length; i++) {
    		      var source = arguments[i];
    		      for (var key in source) {
    		        if (Object.prototype.hasOwnProperty.call(source, key)) {
    		          target[key] = source[key];
    		        }
    		      }
    		    }
    		    return target;
    		  };
    		  return _extends.apply(this, arguments);
    		}
    		function _typeof(obj) {
    		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    		    _typeof = function _typeof(obj) {
    		      return typeof obj;
    		    };
    		  } else {
    		    _typeof = function _typeof(obj) {
    		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    		    };
    		  }
    		  return _typeof(obj);
    		}
    		function _classCallCheck(instance, Constructor) {
    		  if (!(instance instanceof Constructor)) {
    		    throw new TypeError("Cannot call a class as a function");
    		  }
    		}
    		function _defineProperties(target, props) {
    		  for (var i = 0; i < props.length; i++) {
    		    var descriptor = props[i];
    		    descriptor.enumerable = descriptor.enumerable || false;
    		    descriptor.configurable = true;
    		    if ("value" in descriptor) descriptor.writable = true;
    		    Object.defineProperty(target, descriptor.key, descriptor);
    		  }
    		}
    		function _createClass(Constructor, protoProps, staticProps) {
    		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    		  if (staticProps) _defineProperties(Constructor, staticProps);
    		  return Constructor;
    		}
    		function _possibleConstructorReturn(self, call) {
    		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    		    return call;
    		  }
    		  return _assertThisInitialized(self);
    		}
    		function _assertThisInitialized(self) {
    		  if (self === void 0) {
    		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    		  }
    		  return self;
    		}
    		function _getPrototypeOf(o) {
    		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    		    return o.__proto__ || Object.getPrototypeOf(o);
    		  };
    		  return _getPrototypeOf(o);
    		}
    		function _inherits(subClass, superClass) {
    		  if (typeof superClass !== "function" && superClass !== null) {
    		    throw new TypeError("Super expression must either be null or a function");
    		  }
    		  subClass.prototype = Object.create(superClass && superClass.prototype, {
    		    constructor: {
    		      value: subClass,
    		      writable: true,
    		      configurable: true
    		    }
    		  });
    		  if (superClass) _setPrototypeOf(subClass, superClass);
    		}
    		function _setPrototypeOf(o, p) {
    		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    		    o.__proto__ = p;
    		    return o;
    		  };
    		  return _setPrototypeOf(o, p);
    		}
    		function _defineProperty(obj, key, value) {
    		  if (key in obj) {
    		    Object.defineProperty(obj, key, {
    		      value: value,
    		      enumerable: true,
    		      configurable: true,
    		      writable: true
    		    });
    		  } else {
    		    obj[key] = value;
    		  }
    		  return obj;
    		}
    		var CursorMarker = /*#__PURE__*/
    		function (_React$Component) {
    		  _inherits(CursorMarker, _React$Component);
    		  function CursorMarker() {
    		    _classCallCheck(this, CursorMarker);
    		    return _possibleConstructorReturn(this, _getPrototypeOf(CursorMarker).apply(this, arguments));
    		  }
    		  _createClass(CursorMarker, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      var _this$props$subscribe = this.props.subscribeMarker({
    		          type: _markerType.TimelineMarkerType.Cursor,
    		          renderer: this.props.children
    		        }),
    		        unsubscribe = _this$props$subscribe.unsubscribe;
    		      this.unsubscribe = unsubscribe;
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      if (this.unsubscribe != null) {
    		        this.unsubscribe();
    		        this.unsubscribe = null;
    		      }
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      return null;
    		    }
    		  }]);
    		  return CursorMarker;
    		}(_react["default"].Component); // TODO: turn into HOC?

    		_defineProperty(CursorMarker, "propTypes", {
    		  subscribeMarker: _propTypes["default"].func.isRequired,
    		  children: _propTypes["default"].func
    		});
    		var CursorMarkerWrapper = function CursorMarkerWrapper(props) {
    		  return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref) {
    		    var subscribeMarker = _ref.subscribeMarker;
    		    return _react["default"].createElement(CursorMarker, _extends({
    		      subscribeMarker: subscribeMarker
    		    }, props));
    		  });
    		};
    		CursorMarkerWrapper.displayName = 'CursorMarkerWrapper';
    		var _default = CursorMarkerWrapper;
    		exports["default"] = _default; 
    	} (CursorMarker));
    	return CursorMarker;
    }

    var hasRequiredLib;

    function requireLib () {
    	if (hasRequiredLib) return lib$1;
    	hasRequiredLib = 1;
    	(function (exports) {

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		Object.defineProperty(exports, "TimelineMarkers", {
    		  enumerable: true,
    		  get: function get() {
    		    return _TimelineMarkers["default"];
    		  }
    		});
    		Object.defineProperty(exports, "TodayMarker", {
    		  enumerable: true,
    		  get: function get() {
    		    return _TodayMarker["default"];
    		  }
    		});
    		Object.defineProperty(exports, "CustomMarker", {
    		  enumerable: true,
    		  get: function get() {
    		    return _CustomMarker["default"];
    		  }
    		});
    		Object.defineProperty(exports, "CursorMarker", {
    		  enumerable: true,
    		  get: function get() {
    		    return _CursorMarker["default"];
    		  }
    		});
    		Object.defineProperty(exports, "TimelineHeaders", {
    		  enumerable: true,
    		  get: function get() {
    		    return _TimelineHeaders["default"];
    		  }
    		});
    		Object.defineProperty(exports, "SidebarHeader", {
    		  enumerable: true,
    		  get: function get() {
    		    return _SidebarHeader["default"];
    		  }
    		});
    		Object.defineProperty(exports, "CustomHeader", {
    		  enumerable: true,
    		  get: function get() {
    		    return _CustomHeader["default"];
    		  }
    		});
    		Object.defineProperty(exports, "DateHeader", {
    		  enumerable: true,
    		  get: function get() {
    		    return _DateHeader["default"];
    		  }
    		});
    		exports["default"] = void 0;
    		var _Timeline = _interopRequireDefault(requireTimeline());
    		var _TimelineMarkers = _interopRequireDefault(requireTimelineMarkers());
    		var _TodayMarker = _interopRequireDefault(requireTodayMarker());
    		var _CustomMarker = _interopRequireDefault(requireCustomMarker());
    		var _CursorMarker = _interopRequireDefault(requireCursorMarker());
    		var _TimelineHeaders = _interopRequireDefault(requireTimelineHeaders());
    		var _SidebarHeader = _interopRequireDefault(requireSidebarHeader());
    		var _CustomHeader = _interopRequireDefault(requireCustomHeader());
    		var _DateHeader = _interopRequireDefault(requireDateHeader());
    		function _interopRequireDefault(obj) {
    		  return obj && obj.__esModule ? obj : {
    		    "default": obj
    		  };
    		}
    		var _default = _Timeline["default"];
    		exports["default"] = _default; 
    	} (lib$1));
    	return lib$1;
    }

    var libExports = requireLib();
    var Timeline = /*@__PURE__*/getDefaultExportFromCjs(libExports);

    const TimelineContainer = ({ items, resources, onItemClick, onItemMove, onItemResize, enableDragDrop, enableResize, enableMultiSelect }) => {
        // Transform scheduler items to timeline items
        const timelineItems = items.map(item => ({
            id: item.id,
            group: item.resourceId,
            title: item.title,
            start_time: item.start.getTime(),
            end_time: item.end.getTime(),
            itemProps: {
                onDoubleClick: () => onItemClick?.(item)
            }
        }));
        // Transform resources to timeline groups
        const timelineGroups = resources.map(resource => ({
            id: resource.id,
            title: resource.title
        }));
        const handleItemMove = react.useCallback((itemId, dragTime, newGroupOrder) => {
            if (!enableDragDrop || !onItemMove) {
                return;
            }
            const item = items.find(i => i.id === itemId);
            const newGroup = timelineGroups[newGroupOrder];
            if (item && newGroup) {
                const duration = item.end.getTime() - item.start.getTime();
                const newStart = new Date(dragTime);
                const newEnd = new Date(dragTime + duration);
                onItemMove(item, newStart, newEnd, newGroup.id);
            }
        }, [enableDragDrop, onItemMove, items, timelineGroups]);
        const handleItemResize = react.useCallback((itemId, time, edge) => {
            if (!enableResize || !onItemResize) {
                return;
            }
            const item = items.find(i => i.id === itemId);
            if (item) {
                const newStart = edge === "left" ? new Date(time) : item.start;
                const newEnd = edge === "right" ? new Date(time) : item.end;
                onItemResize(item, newStart, newEnd);
            }
        }, [enableResize, onItemResize, items]);
        return (jsxRuntime.jsx("div", { className: "modern-schedule-board-timeline", children: jsxRuntime.jsx(Timeline, { groups: timelineGroups, items: timelineItems, defaultTimeStart: new Date(Date.now() - 24 * 60 * 60 * 1000), defaultTimeEnd: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), canMove: enableDragDrop, canResize: enableResize ? "both" : false, onItemMove: handleItemMove, onItemResize: handleItemResize, lineHeight: 50, itemHeightRatio: 0.8, sidebarWidth: 150, traditionalZoom: true }) }));
    };

    const ModernScheduleBoard = ({ name, class: className, style, tabIndex, dataSource, resourcesSource, startDateAttribute, endDateAttribute, titleAttribute, resourceIdAttribute, enableDragDrop, enableResize, enableMultiSelect, onItemClick, onItemMove, onItemResize }) => {
        const { items, resources, loading, updateItem } = useSchedulerData({
            dataSource,
            resourcesSource,
            startDateAttribute,
            endDateAttribute,
            titleAttribute,
            resourceIdAttribute
        });
        const handleItemClick = react.useCallback((item) => {
            if (onItemClick && onItemClick.canExecute) {
                onItemClick.execute();
            }
        }, [onItemClick]);
        const handleItemMove = react.useCallback((item, newStart, newEnd, newResourceId) => {
            // Update the item optimistically
            updateItem(item.id, {
                start: newStart,
                end: newEnd,
                resourceId: newResourceId
            });
            // Update the Mendix object
            const mendixObject = item.mendixObject;
            if (mendixObject &&
                startDateAttribute.get(mendixObject) &&
                endDateAttribute.get(mendixObject) &&
                resourceIdAttribute.get(mendixObject)) {
                startDateAttribute.get(mendixObject).setValue(newStart);
                endDateAttribute.get(mendixObject).setValue(newEnd);
                resourceIdAttribute.get(mendixObject).setValue(newResourceId);
            }
            // Execute the action
            if (onItemMove && onItemMove.canExecute) {
                onItemMove.execute();
            }
        }, [onItemMove, updateItem, startDateAttribute, endDateAttribute, resourceIdAttribute]);
        const handleItemResize = react.useCallback((item, newStart, newEnd) => {
            // Update the item optimistically
            updateItem(item.id, {
                start: newStart,
                end: newEnd
            });
            // Update the Mendix object
            const mendixObject = item.mendixObject;
            if (mendixObject && startDateAttribute.get(mendixObject) && endDateAttribute.get(mendixObject)) {
                startDateAttribute.get(mendixObject).setValue(newStart);
                endDateAttribute.get(mendixObject).setValue(newEnd);
            }
            // Execute the action
            if (onItemResize && onItemResize.canExecute) {
                onItemResize.execute();
            }
        }, [onItemResize, updateItem, startDateAttribute, endDateAttribute]);
        if (loading) {
            return (jsxRuntime.jsx("div", { className: `modern-schedule-board ${className}`, style: style, tabIndex: tabIndex, children: jsxRuntime.jsx("div", { className: "modern-schedule-board-loading", children: "Loading scheduler..." }) }));
        }
        return (jsxRuntime.jsx("div", { className: `modern-schedule-board ${className}`, style: style, tabIndex: tabIndex, "data-widget-name": name, children: jsxRuntime.jsx(TimelineContainer, { items: items, resources: resources, onItemClick: handleItemClick, onItemMove: handleItemMove, onItemResize: handleItemResize, enableDragDrop: enableDragDrop, enableResize: enableResize, enableMultiSelect: enableMultiSelect }) }));
    };

    return ModernScheduleBoard;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kZXJuU2NoZWR1bGVCb2FyZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVNjaGVkdWxlckRhdGEudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvaGFzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2ludGVyYWN0anMvZGlzdC9pbnRlcmFjdC5taW4uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9tZW50L21vbWVudC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNlcXVhbC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL3V0aWxpdHkvZ2VuZXJpYy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL3V0aWxpdHkvZXZlbnRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvaXRlbXMvZGVmYXVsdEl0ZW1SZW5kZXJlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL3V0aWxpdHkvY2FsZW5kYXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi91dGlsaXR5L2RvbS1oZWxwZXJzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvaXRlbXMvc3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvaXRlbXMvSXRlbS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL2l0ZW1zL0l0ZW1zLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvbGF5b3V0L1NpZGViYXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW1wbGVtZW50YXRpb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNvbnRleHQvbGliL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvdGltZWxpbmUvVGltZWxpbmVTdGF0ZUNvbnRleHQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9jb2x1bW5zL0NvbHVtbnMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9pbnRlcmFjdGlvbi9QcmV2ZW50Q2xpY2tPbkRyYWcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9yb3cvR3JvdXBSb3cuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9yb3cvR3JvdXBSb3dzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvc2Nyb2xsL1Njcm9sbEVsZW1lbnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL01hcmtlckNhbnZhc0NvbnRleHQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL1RpbWVsaW5lTWFya2Vyc0NvbnRleHQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL21hcmtlclR5cGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL2ltcGxlbWVudGF0aW9ucy9zaGFyZWQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL2ltcGxlbWVudGF0aW9ucy9Ub2RheU1hcmtlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL21hcmtlcnMvaW1wbGVtZW50YXRpb25zL0N1c3RvbU1hcmtlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL21hcmtlcnMvaW1wbGVtZW50YXRpb25zL0N1cnNvck1hcmtlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL21hcmtlcnMvVGltZWxpbmVNYXJrZXJzUmVuZGVyZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL01hcmtlckNhbnZhcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvcmVzaXplLWRldGVjdG9yL3dpbmRvdy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL2RlZmF1bHQtY29uZmlnLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvaGVhZGVycy9IZWFkZXJzQ29udGV4dC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvaGVhZGVycy9jb25zdGFudHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9oZWFkZXJzL1NpZGViYXJIZWFkZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9oZWFkZXJzL1RpbWVsaW5lSGVhZGVycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL2hlYWRlcnMvQ3VzdG9tSGVhZGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvaGVhZGVycy9JbnRlcnZhbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL2hlYWRlcnMvQ3VzdG9tRGF0ZUhlYWRlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL2hlYWRlcnMvRGF0ZUhlYWRlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci10aW1lbGluZS9saWIvbGliL1RpbWVsaW5lLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvbWFya2Vycy9wdWJsaWMvVGltZWxpbmVNYXJrZXJzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9saWIvbWFya2Vycy9wdWJsaWMvVG9kYXlNYXJrZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL3B1YmxpYy9DdXN0b21NYXJrZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2xpYi9tYXJrZXJzL3B1YmxpYy9DdXJzb3JNYXJrZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXItdGltZWxpbmUvbGliL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGltZWxpbmUvVGltZWxpbmVDb250YWluZXIudHN4IiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL01vZGVyblNjaGVkdWxlQm9hcmQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IExpc3RWYWx1ZSwgT2JqZWN0SXRlbSwgTGlzdEF0dHJpYnV0ZVZhbHVlIH0gZnJvbSBcIm1lbmRpeFwiO1xuaW1wb3J0IHsgU2NoZWR1bGVySXRlbSwgU2NoZWR1bGVyUmVzb3VyY2UgfSBmcm9tIFwiLi4vdHlwZXMvU2NoZWR1bGVyVHlwZXNcIjtcblxuaW50ZXJmYWNlIFVzZVNjaGVkdWxlckRhdGFQcm9wcyB7XG4gICAgZGF0YVNvdXJjZTogTGlzdFZhbHVlO1xuICAgIHJlc291cmNlc1NvdXJjZTogTGlzdFZhbHVlO1xuICAgIHN0YXJ0RGF0ZUF0dHJpYnV0ZTogTGlzdEF0dHJpYnV0ZVZhbHVlPERhdGU+O1xuICAgIGVuZERhdGVBdHRyaWJ1dGU6IExpc3RBdHRyaWJ1dGVWYWx1ZTxEYXRlPjtcbiAgICB0aXRsZUF0dHJpYnV0ZTogTGlzdEF0dHJpYnV0ZVZhbHVlPHN0cmluZz47XG4gICAgcmVzb3VyY2VJZEF0dHJpYnV0ZTogTGlzdEF0dHJpYnV0ZVZhbHVlPHN0cmluZz47XG59XG5cbmV4cG9ydCBjb25zdCB1c2VTY2hlZHVsZXJEYXRhID0gKHtcbiAgICBkYXRhU291cmNlLFxuICAgIHJlc291cmNlc1NvdXJjZSxcbiAgICBzdGFydERhdGVBdHRyaWJ1dGUsXG4gICAgZW5kRGF0ZUF0dHJpYnV0ZSxcbiAgICB0aXRsZUF0dHJpYnV0ZSxcbiAgICByZXNvdXJjZUlkQXR0cmlidXRlXG59OiBVc2VTY2hlZHVsZXJEYXRhUHJvcHMpID0+IHtcbiAgICBjb25zdCBbaXRlbXMsIHNldEl0ZW1zXSA9IHVzZVN0YXRlPFNjaGVkdWxlckl0ZW1bXT4oW10pO1xuICAgIGNvbnN0IFtyZXNvdXJjZXMsIHNldFJlc291cmNlc10gPSB1c2VTdGF0ZTxTY2hlZHVsZXJSZXNvdXJjZVtdPihbXSk7XG4gICAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gTWVuZGl4IGRhdGEgdG8gc2NoZWR1bGVyIGl0ZW1zXG4gICAgY29uc3QgdHJhbnNmb3JtZWRJdGVtcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGF0YVNvdXJjZS5zdGF0dXMgIT09IFwiYXZhaWxhYmxlXCIgfHwgIWRhdGFTb3VyY2UuaXRlbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhU291cmNlLml0ZW1zLm1hcCgoaXRlbTogT2JqZWN0SXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gc3RhcnREYXRlQXR0cmlidXRlLmdldChpdGVtKS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGVuZERhdGUgPSBlbmREYXRlQXR0cmlidXRlLmdldChpdGVtKS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVBdHRyaWJ1dGUuZ2V0KGl0ZW0pLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VJZCA9IHJlc291cmNlSWRBdHRyaWJ1dGUuZ2V0KGl0ZW0pLnZhbHVlO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSB8fCBcIlVudGl0bGVkXCIsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0RGF0ZSB8fCBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZSB8fCBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlSWQ/LnRvU3RyaW5nKCkgfHwgXCJcIixcbiAgICAgICAgICAgICAgICBtZW5kaXhPYmplY3Q6IGl0ZW1cbiAgICAgICAgICAgIH0gYXMgU2NoZWR1bGVySXRlbTtcbiAgICAgICAgfSk7XG4gICAgfSwgW2RhdGFTb3VyY2UsIHN0YXJ0RGF0ZUF0dHJpYnV0ZSwgZW5kRGF0ZUF0dHJpYnV0ZSwgdGl0bGVBdHRyaWJ1dGUsIHJlc291cmNlSWRBdHRyaWJ1dGVdKTtcblxuICAgIC8vIFRyYW5zZm9ybSBNZW5kaXggZGF0YSB0byBzY2hlZHVsZXIgcmVzb3VyY2VzXG4gICAgY29uc3QgdHJhbnNmb3JtZWRSZXNvdXJjZXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKHJlc291cmNlc1NvdXJjZS5zdGF0dXMgIT09IFwiYXZhaWxhYmxlXCIgfHwgIXJlc291cmNlc1NvdXJjZS5pdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1NvdXJjZS5pdGVtcy5tYXAoXG4gICAgICAgICAgICAoaXRlbTogT2JqZWN0SXRlbSkgPT5cbiAgICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0uaWQsIC8vIFlvdSBtaWdodCB3YW50IHRvIGFkZCBhIHRpdGxlIGF0dHJpYnV0ZSBmb3IgcmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgIG1lbmRpeE9iamVjdDogaXRlbVxuICAgICAgICAgICAgICAgIH0gYXMgU2NoZWR1bGVyUmVzb3VyY2UpXG4gICAgICAgICk7XG4gICAgfSwgW3Jlc291cmNlc1NvdXJjZV0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0SXRlbXModHJhbnNmb3JtZWRJdGVtcyk7XG4gICAgICAgIHNldExvYWRpbmcoZGF0YVNvdXJjZS5zdGF0dXMgPT09IFwibG9hZGluZ1wiKTtcbiAgICB9LCBbdHJhbnNmb3JtZWRJdGVtcywgZGF0YVNvdXJjZS5zdGF0dXNdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFJlc291cmNlcyh0cmFuc2Zvcm1lZFJlc291cmNlcyk7XG4gICAgfSwgW3RyYW5zZm9ybWVkUmVzb3VyY2VzXSk7XG5cbiAgICBjb25zdCB1cGRhdGVJdGVtID0gKGl0ZW1JZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPFNjaGVkdWxlckl0ZW0+KSA9PiB7XG4gICAgICAgIHNldEl0ZW1zKHByZXYgPT4gcHJldi5tYXAoaXRlbSA9PiAoaXRlbS5pZCA9PT0gaXRlbUlkID8geyAuLi5pdGVtLCAuLi51cGRhdGVzIH0gOiBpdGVtKSkpO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRJdGVtQnlJZCA9IChpZDogc3RyaW5nKTogU2NoZWR1bGVySXRlbSB8IHVuZGVmaW5lZCA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRSZXNvdXJjZUJ5SWQgPSAoaWQ6IHN0cmluZyk6IFNjaGVkdWxlclJlc291cmNlIHwgdW5kZWZpbmVkID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlcy5maW5kKHJlc291cmNlID0+IHJlc291cmNlLmlkID09PSBpZCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIGxvYWRpbmcsXG4gICAgICAgIHVwZGF0ZUl0ZW0sXG4gICAgICAgIGdldEl0ZW1CeUlkLFxuICAgICAgICBnZXRSZXNvdXJjZUJ5SWRcbiAgICB9O1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJykgOiAweGVhY2E7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JykgOiAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJykgOiAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJykgOiAweGVhZDI7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJykgOiAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpIDogMHhlYWNlOyAvLyBUT0RPOiBXZSBkb24ndCB1c2UgQXN5bmNNb2RlIG9yIENvbmN1cnJlbnRNb2RlIGFueW1vcmUuIFRoZXkgd2VyZSB0ZW1wb3Jhcnlcbi8vICh1bnN0YWJsZSkgQVBJcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkLiBDYW4gd2UgcmVtb3ZlIHRoZSBzeW1ib2xzP1xuXG52YXIgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuYXN5bmNfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29uY3VycmVudF9tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJykgOiAweGVhZDA7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJykgOiAweGVhZDE7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpIDogMHhlYWQ4O1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKSA6IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5JykgOiAweGVhZDQ7XG52YXIgUkVBQ1RfQkxPQ0tfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmJsb2NrJykgOiAweGVhZDk7XG52YXIgUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZ1bmRhbWVudGFsJykgOiAweGVhZDU7XG52YXIgUkVBQ1RfUkVTUE9OREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5yZXNwb25kZXInKSA6IDB4ZWFkNjtcbnZhciBSRUFDVF9TQ09QRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc2NvcGUnKSA6IDB4ZWFkNztcblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUkVTUE9OREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfU0NPUEVfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9CTE9DS19UWVBFKTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mO1xuXG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHZhciB0eXBlID0gb2JqZWN0LnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IC8vIEFzeW5jTW9kZSBpcyBkZXByZWNhdGVkIGFsb25nIHdpdGggaXNBc3luY01vZGVcblxudmFyIEFzeW5jTW9kZSA9IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbnZhciBDb25jdXJyZW50TW9kZSA9IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xudmFyIENvbnRleHRDb25zdW1lciA9IFJFQUNUX0NPTlRFWFRfVFlQRTtcbnZhciBDb250ZXh0UHJvdmlkZXIgPSBSRUFDVF9QUk9WSURFUl9UWVBFO1xudmFyIEVsZW1lbnQgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG52YXIgRm9yd2FyZFJlZiA9IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG52YXIgRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xudmFyIExhenkgPSBSRUFDVF9MQVpZX1RZUEU7XG52YXIgTWVtbyA9IFJFQUNUX01FTU9fVFlQRTtcbnZhciBQb3J0YWwgPSBSRUFDVF9QT1JUQUxfVFlQRTtcbnZhciBQcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG52YXIgU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG52YXIgU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xudmFyIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gZmFsc2U7IC8vIEFzeW5jTW9kZSBzaG91bGQgYmUgZGVwcmVjYXRlZFxuXG5mdW5jdGlvbiBpc0FzeW5jTW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gdHJ1ZTsgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnRcblxuICAgICAgY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxNysuIFVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlICcgKyAnUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSS4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHx8IHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRm9yd2FyZFJlZihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTWVtbyhvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufVxuXG5leHBvcnRzLkFzeW5jTW9kZSA9IEFzeW5jTW9kZTtcbmV4cG9ydHMuQ29uY3VycmVudE1vZGUgPSBDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuQ29udGV4dENvbnN1bWVyID0gQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuZXhwb3J0cy5Gb3J3YXJkUmVmID0gRm9yd2FyZFJlZjtcbmV4cG9ydHMuRnJhZ21lbnQgPSBGcmFnbWVudDtcbmV4cG9ydHMuTGF6eSA9IExhenk7XG5leHBvcnRzLk1lbW8gPSBNZW1vO1xuZXhwb3J0cy5Qb3J0YWwgPSBQb3J0YWw7XG5leHBvcnRzLlByb2ZpbGVyID0gUHJvZmlsZXI7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBTdHJpY3RNb2RlO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFN1c3BlbnNlO1xuZXhwb3J0cy5pc0FzeW5jTW9kZSA9IGlzQXN5bmNNb2RlO1xuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gaXNDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBpc0NvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXIgPSBpc0NvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBpc0ZvcndhcmRSZWY7XG5leHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50O1xuZXhwb3J0cy5pc0xhenkgPSBpc0xhenk7XG5leHBvcnRzLmlzTWVtbyA9IGlzTWVtbztcbmV4cG9ydHMuaXNQb3J0YWwgPSBpc1BvcnRhbDtcbmV4cG9ydHMuaXNQcm9maWxlciA9IGlzUHJvZmlsZXI7XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGlzU3RyaWN0TW9kZTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGlzU3VzcGVuc2U7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZTtcbmV4cG9ydHMudHlwZU9mID0gdHlwZU9mO1xuICB9KSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbiAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9saWIvaGFzJyk7XG5cbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHsgLyoqLyB9XG4gIH07XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFxuICAgICAgICAgICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgICAgICAgICAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nICtcbiAgICAgICAgICAgICAgJ1RoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9saWIvaGFzJyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBiaWdpbnQ6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdiaWdpbnQnKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBlbGVtZW50VHlwZTogY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSwgZGF0YSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5kYXRhID0gZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBkYXRhOiB7fTtcbiAgICB0aGlzLnN0YWNrID0gJyc7XG4gIH1cbiAgLy8gTWFrZSBgaW5zdGFuY2VvZiBFcnJvcmAgc3RpbGwgd29yayBmb3IgcmV0dXJuZWQgZXJyb3JzLlxuICBQcm9wVHlwZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUgPSB7fTtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA9IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAoc2VjcmV0ICE9PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgICBpZiAodGhyb3dPbkRpcmVjdEFjY2Vzcykge1xuICAgICAgICAgIC8vIE5ldyBiZWhhdmlvciBvbmx5IGZvciB1c2VycyBvZiBgcHJvcC10eXBlc2AgcGFja2FnZVxuICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAnVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gT2xkIGJlaGF2aW9yIGZvciBwZW9wbGUgdXNpbmcgUmVhY3QuUHJvcFR5cGVzXG4gICAgICAgICAgdmFyIGNhY2hlS2V5ID0gY29tcG9uZW50TmFtZSArICc6JyArIHByb3BOYW1lO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFtYW51YWxQcm9wVHlwZUNhbGxDYWNoZVtjYWNoZUtleV0gJiZcbiAgICAgICAgICAgIC8vIEF2b2lkIHNwYW1taW5nIHRoZSBjb25zb2xlIGJlY2F1c2UgdGhleSBhcmUgb2Z0ZW4gbm90IGFjdGlvbmFibGUgZXhjZXB0IGZvciBsaWIgYXV0aG9yc1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPCAzXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwcmludFdhcm5pbmcoXG4gICAgICAgICAgICAgICdZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiAnICtcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGZvciB0aGUgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBwcm9wIG9uIGAnICsgY29tcG9uZW50TmFtZSArICdgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXG4gICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSxcbiAgICAgICAgICB7ZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGV9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50cyBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXksIGdvdCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLiAnICtcbiAgICAgICAgICAgICdBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcywgZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgU3RyaW5nKHByb3BWYWx1ZSkgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICAgIHZhciBjaGVja2VyUmVzdWx0ID0gY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGNoZWNrZXJSZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVja2VyUmVzdWx0LmRhdGEgJiYgaGFzKGNoZWNrZXJSZXN1bHQuZGF0YSwgJ2V4cGVjdGVkVHlwZScpKSB7XG4gICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGNoZWNrZXJSZXN1bHQuZGF0YS5leHBlY3RlZFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZXhwZWN0ZWRUeXBlc01lc3NhZ2UgPSAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPiAwKSA/ICcsIGV4cGVjdGVkIG9uZSBvZiB0eXBlIFsnICsgZXhwZWN0ZWRUeXBlcy5qb2luKCcsICcpICsgJ10nOiAnJztcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AnICsgZXhwZWN0ZWRUeXBlc01lc3NhZ2UgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRWYWxpZGF0b3JFcnJvcihjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBrZXksIHR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXG4gICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHByb3BGdWxsTmFtZSArICcuJyArIGtleSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZSArICdgLidcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnZhbGlkVmFsaWRhdG9yRXJyb3IoY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwga2V5LCBnZXRQcmVjaXNlVHlwZShjaGVja2VyKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb20gcHJvcHMuXG4gICAgICB2YXIgYWxsS2V5cyA9IGFzc2lnbih7fSwgcHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgICBpZiAoaGFzKHNoYXBlVHlwZXMsIGtleSkgJiYgdHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gaW52YWxpZFZhbGlkYXRvckVycm9yKGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIGtleSwgZ2V0UHJlY2lzZVR5cGUoY2hlY2tlcikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG4gICAgaWYgKCFwcm9wVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyogaW50ZXJhY3QuanMgMS4xMC4yNyB8IGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vdGF5ZS9pbnRlcmFjdC5qcy9tYWluL0xJQ0VOU0UgKi9cblxuIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5pbnRlcmFjdD1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuPU9iamVjdC5rZXlzKHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7ZSYmKHI9ci5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4scil9cmV0dXJuIG59ZnVuY3Rpb24gZShlKXtmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbbl0/YXJndW1lbnRzW25dOnt9O24lMj90KE9iamVjdChyKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7YShlLHQsclt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6dChPYmplY3QocikpLmZvckVhY2goKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpKX0pKX1yZXR1cm4gZX1mdW5jdGlvbiBuKHQpe3JldHVybiBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LG4odCl9ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxkKHIua2V5KSxyKX19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUmJmkodC5wcm90b3R5cGUsZSksbiYmaSh0LG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH1mdW5jdGlvbiBhKHQsZSxuKXtyZXR1cm4oZT1kKGUpKWluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbZV09bix0fWZ1bmN0aW9uIHModCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmbCh0LGUpfWZ1bmN0aW9uIGModCl7cmV0dXJuIGM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LGModCl9ZnVuY3Rpb24gbCh0LGUpe3JldHVybiBsPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sbCh0LGUpfWZ1bmN0aW9uIHUodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gcCh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBuLHI9Yyh0KTtpZihlKXt2YXIgaT1jKHRoaXMpLmNvbnN0cnVjdG9yO249UmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsaSl9ZWxzZSBuPXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIHUodCl9KHRoaXMsbil9fWZ1bmN0aW9uIGYoKXtyZXR1cm4gZj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5nZXQ/UmVmbGVjdC5nZXQuYmluZCgpOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1mdW5jdGlvbih0LGUpe2Zvcig7IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpJiZudWxsIT09KHQ9Yyh0KSk7KTtyZXR1cm4gdH0odCxlKTtpZihyKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsZSk7cmV0dXJuIGkuZ2V0P2kuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aDwzP3Q6bik6aS52YWx1ZX19LGYuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIGQodCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgdHx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LGV8fFwiZGVmYXVsdFwiKTtpZihcIm9iamVjdFwiIT10eXBlb2YgcilyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuKFwic3RyaW5nXCI9PT1lP1N0cmluZzpOdW1iZXIpKHQpfSh0LFwic3RyaW5nXCIpO3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlP2U6ZStcIlwifXZhciBoPWZ1bmN0aW9uKHQpe3JldHVybiEoIXR8fCF0LldpbmRvdykmJnQgaW5zdGFuY2VvZiB0LldpbmRvd30sdj12b2lkIDAsZz12b2lkIDA7ZnVuY3Rpb24gbSh0KXt2PXQ7dmFyIGU9dC5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtlLm93bmVyRG9jdW1lbnQhPT10LmRvY3VtZW50JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LndyYXAmJnQud3JhcChlKT09PWUmJih0PXQud3JhcCh0KSksZz10fWZ1bmN0aW9uIHkodCl7cmV0dXJuIGgodCk/dDoodC5vd25lckRvY3VtZW50fHx0KS5kZWZhdWx0Vmlld3x8Zy53aW5kb3d9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93JiZtKHdpbmRvdyk7dmFyIGI9ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZcIm9iamVjdFwiPT09bih0KX0seD1mdW5jdGlvbih0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fSx3PXt3aW5kb3c6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1nfHxoKHQpfSxkb2NGcmFnOmZ1bmN0aW9uKHQpe3JldHVybiBiKHQpJiYxMT09PXQubm9kZVR5cGV9LG9iamVjdDpiLGZ1bmM6eCxudW1iZXI6ZnVuY3Rpb24odCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHR9LGJvb2w6ZnVuY3Rpb24odCl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiB0fSxzdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR9LGVsZW1lbnQ6ZnVuY3Rpb24odCl7aWYoIXR8fFwib2JqZWN0XCIhPT1uKHQpKXJldHVybiExO3ZhciBlPXkodCl8fGc7cmV0dXJuL29iamVjdHxmdW5jdGlvbi8udGVzdChcInVuZGVmaW5lZFwiPT10eXBlb2YgRWxlbWVudD9cInVuZGVmaW5lZFwiOm4oRWxlbWVudCkpP3QgaW5zdGFuY2VvZiBFbGVtZW50fHx0IGluc3RhbmNlb2YgZS5FbGVtZW50OjE9PT10Lm5vZGVUeXBlJiZcInN0cmluZ1wiPT10eXBlb2YgdC5ub2RlTmFtZX0scGxhaW5PYmplY3Q6ZnVuY3Rpb24odCl7cmV0dXJuIGIodCkmJiEhdC5jb25zdHJ1Y3RvciYmL2Z1bmN0aW9uIE9iamVjdFxcYi8udGVzdCh0LmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpfSxhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gYih0KSYmdm9pZCAwIT09dC5sZW5ndGgmJngodC5zcGxpY2UpfX07ZnVuY3Rpb24gRSh0KXt2YXIgZT10LmludGVyYWN0aW9uO2lmKFwiZHJhZ1wiPT09ZS5wcmVwYXJlZC5uYW1lKXt2YXIgbj1lLnByZXBhcmVkLmF4aXM7XCJ4XCI9PT1uPyhlLmNvb3Jkcy5jdXIucGFnZS55PWUuY29vcmRzLnN0YXJ0LnBhZ2UueSxlLmNvb3Jkcy5jdXIuY2xpZW50Lnk9ZS5jb29yZHMuc3RhcnQuY2xpZW50LnksZS5jb29yZHMudmVsb2NpdHkuY2xpZW50Lnk9MCxlLmNvb3Jkcy52ZWxvY2l0eS5wYWdlLnk9MCk6XCJ5XCI9PT1uJiYoZS5jb29yZHMuY3VyLnBhZ2UueD1lLmNvb3Jkcy5zdGFydC5wYWdlLngsZS5jb29yZHMuY3VyLmNsaWVudC54PWUuY29vcmRzLnN0YXJ0LmNsaWVudC54LGUuY29vcmRzLnZlbG9jaXR5LmNsaWVudC54PTAsZS5jb29yZHMudmVsb2NpdHkucGFnZS54PTApfX1mdW5jdGlvbiBUKHQpe3ZhciBlPXQuaUV2ZW50LG49dC5pbnRlcmFjdGlvbjtpZihcImRyYWdcIj09PW4ucHJlcGFyZWQubmFtZSl7dmFyIHI9bi5wcmVwYXJlZC5heGlzO2lmKFwieFwiPT09cnx8XCJ5XCI9PT1yKXt2YXIgaT1cInhcIj09PXI/XCJ5XCI6XCJ4XCI7ZS5wYWdlW2ldPW4uY29vcmRzLnN0YXJ0LnBhZ2VbaV0sZS5jbGllbnRbaV09bi5jb29yZHMuc3RhcnQuY2xpZW50W2ldLGUuZGVsdGFbaV09MH19fXZhciBTPXtpZDpcImFjdGlvbnMvZHJhZ1wiLGluc3RhbGw6ZnVuY3Rpb24odCl7dmFyIGU9dC5hY3Rpb25zLG49dC5JbnRlcmFjdGFibGUscj10LmRlZmF1bHRzO24ucHJvdG90eXBlLmRyYWdnYWJsZT1TLmRyYWdnYWJsZSxlLm1hcC5kcmFnPVMsZS5tZXRob2REaWN0LmRyYWc9XCJkcmFnZ2FibGVcIixyLmFjdGlvbnMuZHJhZz1TLmRlZmF1bHRzfSxsaXN0ZW5lcnM6e1wiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tbW92ZVwiOkUsXCJpbnRlcmFjdGlvbnM6YWN0aW9uLXJlc3VtZVwiOkUsXCJpbnRlcmFjdGlvbnM6YWN0aW9uLW1vdmVcIjpULFwiYXV0by1zdGFydDpjaGVja1wiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LmludGVyYWN0YWJsZSxyPXQuYnV0dG9ucyxpPW4ub3B0aW9ucy5kcmFnO2lmKGkmJmkuZW5hYmxlZCYmKCFlLnBvaW50ZXJJc0Rvd258fCEvbW91c2V8cG9pbnRlci8udGVzdChlLnBvaW50ZXJUeXBlKXx8MCE9KHImbi5vcHRpb25zLmRyYWcubW91c2VCdXR0b25zKSkpcmV0dXJuIHQuYWN0aW9uPXtuYW1lOlwiZHJhZ1wiLGF4aXM6XCJzdGFydFwiPT09aS5sb2NrQXhpcz9pLnN0YXJ0QXhpczppLmxvY2tBeGlzfSwhMX19LGRyYWdnYWJsZTpmdW5jdGlvbih0KXtyZXR1cm4gdy5vYmplY3QodCk/KHRoaXMub3B0aW9ucy5kcmFnLmVuYWJsZWQ9ITEhPT10LmVuYWJsZWQsdGhpcy5zZXRQZXJBY3Rpb24oXCJkcmFnXCIsdCksdGhpcy5zZXRPbkV2ZW50cyhcImRyYWdcIix0KSwvXih4eXx4fHl8c3RhcnQpJC8udGVzdCh0LmxvY2tBeGlzKSYmKHRoaXMub3B0aW9ucy5kcmFnLmxvY2tBeGlzPXQubG9ja0F4aXMpLC9eKHh5fHh8eSkkLy50ZXN0KHQuc3RhcnRBeGlzKSYmKHRoaXMub3B0aW9ucy5kcmFnLnN0YXJ0QXhpcz10LnN0YXJ0QXhpcyksdGhpcyk6dy5ib29sKHQpPyh0aGlzLm9wdGlvbnMuZHJhZy5lbmFibGVkPXQsdGhpcyk6dGhpcy5vcHRpb25zLmRyYWd9LGJlZm9yZU1vdmU6RSxtb3ZlOlQsZGVmYXVsdHM6e3N0YXJ0QXhpczpcInh5XCIsbG9ja0F4aXM6XCJ4eVwifSxnZXRDdXJzb3I6ZnVuY3Rpb24oKXtyZXR1cm5cIm1vdmVcIn0sZmlsdGVyRXZlbnRUeXBlOmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dC5zZWFyY2goXCJkcmFnXCIpfX0sXz1TLFA9e2luaXQ6ZnVuY3Rpb24odCl7dmFyIGU9dDtQLmRvY3VtZW50PWUuZG9jdW1lbnQsUC5Eb2N1bWVudEZyYWdtZW50PWUuRG9jdW1lbnRGcmFnbWVudHx8TyxQLlNWR0VsZW1lbnQ9ZS5TVkdFbGVtZW50fHxPLFAuU1ZHU1ZHRWxlbWVudD1lLlNWR1NWR0VsZW1lbnR8fE8sUC5TVkdFbGVtZW50SW5zdGFuY2U9ZS5TVkdFbGVtZW50SW5zdGFuY2V8fE8sUC5FbGVtZW50PWUuRWxlbWVudHx8TyxQLkhUTUxFbGVtZW50PWUuSFRNTEVsZW1lbnR8fFAuRWxlbWVudCxQLkV2ZW50PWUuRXZlbnQsUC5Ub3VjaD1lLlRvdWNofHxPLFAuUG9pbnRlckV2ZW50PWUuUG9pbnRlckV2ZW50fHxlLk1TUG9pbnRlckV2ZW50fSxkb2N1bWVudDpudWxsLERvY3VtZW50RnJhZ21lbnQ6bnVsbCxTVkdFbGVtZW50Om51bGwsU1ZHU1ZHRWxlbWVudDpudWxsLFNWR0VsZW1lbnRJbnN0YW5jZTpudWxsLEVsZW1lbnQ6bnVsbCxIVE1MRWxlbWVudDpudWxsLEV2ZW50Om51bGwsVG91Y2g6bnVsbCxQb2ludGVyRXZlbnQ6bnVsbH07ZnVuY3Rpb24gTygpe312YXIgaz1QO3ZhciBEPXtpbml0OmZ1bmN0aW9uKHQpe3ZhciBlPWsuRWxlbWVudCxuPXQubmF2aWdhdG9yfHx7fTtELnN1cHBvcnRzVG91Y2g9XCJvbnRvdWNoc3RhcnRcImluIHR8fHcuZnVuYyh0LkRvY3VtZW50VG91Y2gpJiZrLmRvY3VtZW50IGluc3RhbmNlb2YgdC5Eb2N1bWVudFRvdWNoLEQuc3VwcG9ydHNQb2ludGVyRXZlbnQ9ITEhPT1uLnBvaW50ZXJFbmFibGVkJiYhIWsuUG9pbnRlckV2ZW50LEQuaXNJT1M9L2lQKGhvbmV8b2R8YWQpLy50ZXN0KG4ucGxhdGZvcm0pLEQuaXNJT1M3PS9pUChob25lfG9kfGFkKS8udGVzdChuLnBsYXRmb3JtKSYmL09TIDdbXlxcZF0vLnRlc3Qobi5hcHBWZXJzaW9uKSxELmlzSWU5PS9NU0lFIDkvLnRlc3Qobi51c2VyQWdlbnQpLEQuaXNPcGVyYU1vYmlsZT1cIk9wZXJhXCI9PT1uLmFwcE5hbWUmJkQuc3VwcG9ydHNUb3VjaCYmL1ByZXN0by8udGVzdChuLnVzZXJBZ2VudCksRC5wcmVmaXhlZE1hdGNoZXNTZWxlY3Rvcj1cIm1hdGNoZXNcImluIGUucHJvdG90eXBlP1wibWF0Y2hlc1wiOlwid2Via2l0TWF0Y2hlc1NlbGVjdG9yXCJpbiBlLnByb3RvdHlwZT9cIndlYmtpdE1hdGNoZXNTZWxlY3RvclwiOlwibW96TWF0Y2hlc1NlbGVjdG9yXCJpbiBlLnByb3RvdHlwZT9cIm1vek1hdGNoZXNTZWxlY3RvclwiOlwib01hdGNoZXNTZWxlY3RvclwiaW4gZS5wcm90b3R5cGU/XCJvTWF0Y2hlc1NlbGVjdG9yXCI6XCJtc01hdGNoZXNTZWxlY3RvclwiLEQucEV2ZW50VHlwZXM9RC5zdXBwb3J0c1BvaW50ZXJFdmVudD9rLlBvaW50ZXJFdmVudD09PXQuTVNQb2ludGVyRXZlbnQ/e3VwOlwiTVNQb2ludGVyVXBcIixkb3duOlwiTVNQb2ludGVyRG93blwiLG92ZXI6XCJtb3VzZW92ZXJcIixvdXQ6XCJtb3VzZW91dFwiLG1vdmU6XCJNU1BvaW50ZXJNb3ZlXCIsY2FuY2VsOlwiTVNQb2ludGVyQ2FuY2VsXCJ9Ont1cDpcInBvaW50ZXJ1cFwiLGRvd246XCJwb2ludGVyZG93blwiLG92ZXI6XCJwb2ludGVyb3ZlclwiLG91dDpcInBvaW50ZXJvdXRcIixtb3ZlOlwicG9pbnRlcm1vdmVcIixjYW5jZWw6XCJwb2ludGVyY2FuY2VsXCJ9Om51bGwsRC53aGVlbEV2ZW50PWsuZG9jdW1lbnQmJlwib25tb3VzZXdoZWVsXCJpbiBrLmRvY3VtZW50P1wibW91c2V3aGVlbFwiOlwid2hlZWxcIn0sc3VwcG9ydHNUb3VjaDpudWxsLHN1cHBvcnRzUG9pbnRlckV2ZW50Om51bGwsaXNJT1M3Om51bGwsaXNJT1M6bnVsbCxpc0llOTpudWxsLGlzT3BlcmFNb2JpbGU6bnVsbCxwcmVmaXhlZE1hdGNoZXNTZWxlY3RvcjpudWxsLHBFdmVudFR5cGVzOm51bGwsd2hlZWxFdmVudDpudWxsfTt2YXIgST1EO2Z1bmN0aW9uIE0odCxlKXtpZih0LmNvbnRhaW5zKXJldHVybiB0LmNvbnRhaW5zKGUpO2Zvcig7ZTspe2lmKGU9PT10KXJldHVybiEwO2U9ZS5wYXJlbnROb2RlfXJldHVybiExfWZ1bmN0aW9uIHoodCxlKXtmb3IoO3cuZWxlbWVudCh0KTspe2lmKFIodCxlKSlyZXR1cm4gdDt0PUEodCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQSh0KXt2YXIgZT10LnBhcmVudE5vZGU7aWYody5kb2NGcmFnKGUpKXtmb3IoOyhlPWUuaG9zdCkmJncuZG9jRnJhZyhlKTspO3JldHVybiBlfXJldHVybiBlfWZ1bmN0aW9uIFIodCxlKXtyZXR1cm4gZyE9PXYmJihlPWUucmVwbGFjZSgvXFwvZGVlcFxcLy9nLFwiIFwiKSksdFtJLnByZWZpeGVkTWF0Y2hlc1NlbGVjdG9yXShlKX12YXIgQz1mdW5jdGlvbih0KXtyZXR1cm4gdC5wYXJlbnROb2RlfHx0Lmhvc3R9O2Z1bmN0aW9uIGoodCxlKXtmb3IodmFyIG4scj1bXSxpPXQ7KG49QyhpKSkmJmkhPT1lJiZuIT09aS5vd25lckRvY3VtZW50OylyLnVuc2hpZnQoaSksaT1uO3JldHVybiByfWZ1bmN0aW9uIEYodCxlLG4pe2Zvcig7dy5lbGVtZW50KHQpOyl7aWYoUih0LGUpKXJldHVybiEwO2lmKCh0PUEodCkpPT09bilyZXR1cm4gUih0LGUpfXJldHVybiExfWZ1bmN0aW9uIFgodCl7cmV0dXJuIHQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnR8fHR9ZnVuY3Rpb24gWSh0KXt2YXIgZT10IGluc3RhbmNlb2Ygay5TVkdFbGVtZW50P3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6dC5nZXRDbGllbnRSZWN0cygpWzBdO3JldHVybiBlJiZ7bGVmdDplLmxlZnQscmlnaHQ6ZS5yaWdodCx0b3A6ZS50b3AsYm90dG9tOmUuYm90dG9tLHdpZHRoOmUud2lkdGh8fGUucmlnaHQtZS5sZWZ0LGhlaWdodDplLmhlaWdodHx8ZS5ib3R0b20tZS50b3B9fWZ1bmN0aW9uIEwodCl7dmFyIGUsbj1ZKHQpO2lmKCFJLmlzSU9TNyYmbil7dmFyIHI9e3g6KGU9KGU9eSh0KSl8fGcpLnNjcm9sbFh8fGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQseTplLnNjcm9sbFl8fGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcH07bi5sZWZ0Kz1yLngsbi5yaWdodCs9ci54LG4udG9wKz1yLnksbi5ib3R0b20rPXIueX1yZXR1cm4gbn1mdW5jdGlvbiBxKHQpe2Zvcih2YXIgZT1bXTt0OyllLnB1c2godCksdD1BKHQpO3JldHVybiBlfWZ1bmN0aW9uIEIodCl7cmV0dXJuISF3LnN0cmluZyh0KSYmKGsuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KSwhMCl9ZnVuY3Rpb24gVih0LGUpe2Zvcih2YXIgbiBpbiBlKXRbbl09ZVtuXTtyZXR1cm4gdH1mdW5jdGlvbiBXKHQsZSxuKXtyZXR1cm5cInBhcmVudFwiPT09dD9BKG4pOlwic2VsZlwiPT09dD9lLmdldFJlY3Qobik6eihuLHQpfWZ1bmN0aW9uIEcodCxlLG4scil7dmFyIGk9dDtyZXR1cm4gdy5zdHJpbmcoaSk/aT1XKGksZSxuKTp3LmZ1bmMoaSkmJihpPWkuYXBwbHkodm9pZCAwLHIpKSx3LmVsZW1lbnQoaSkmJihpPUwoaSkpLGl9ZnVuY3Rpb24gTih0KXtyZXR1cm4gdCYme3g6XCJ4XCJpbiB0P3QueDp0LmxlZnQseTpcInlcImluIHQ/dC55OnQudG9wfX1mdW5jdGlvbiBVKHQpe3JldHVybiF0fHxcInhcImluIHQmJlwieVwiaW4gdHx8KCh0PVYoe30sdCkpLng9dC5sZWZ0fHwwLHQueT10LnRvcHx8MCx0LndpZHRoPXQud2lkdGh8fCh0LnJpZ2h0fHwwKS10LngsdC5oZWlnaHQ9dC5oZWlnaHR8fCh0LmJvdHRvbXx8MCktdC55KSx0fWZ1bmN0aW9uIEgodCxlLG4pe3QubGVmdCYmKGUubGVmdCs9bi54KSx0LnJpZ2h0JiYoZS5yaWdodCs9bi54KSx0LnRvcCYmKGUudG9wKz1uLnkpLHQuYm90dG9tJiYoZS5ib3R0b20rPW4ueSksZS53aWR0aD1lLnJpZ2h0LWUubGVmdCxlLmhlaWdodD1lLmJvdHRvbS1lLnRvcH1mdW5jdGlvbiBLKHQsZSxuKXt2YXIgcj1uJiZ0Lm9wdGlvbnNbbl07cmV0dXJuIE4oRyhyJiZyLm9yaWdpbnx8dC5vcHRpb25zLm9yaWdpbix0LGUsW3QmJmVdKSl8fHt4OjAseTowfX1mdW5jdGlvbiAkKHQsZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmZ1bmN0aW9uKHQpe3JldHVybiEwfSxyPWFyZ3VtZW50cy5sZW5ndGg+Mz9hcmd1bWVudHNbM106dm9pZCAwO2lmKHI9cnx8e30sdy5zdHJpbmcodCkmJi0xIT09dC5zZWFyY2goXCIgXCIpJiYodD1KKHQpKSx3LmFycmF5KHQpKXJldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiAkKHQsZSxuLHIpfSkpLHI7aWYody5vYmplY3QodCkmJihlPXQsdD1cIlwiKSx3LmZ1bmMoZSkmJm4odCkpclt0XT1yW3RdfHxbXSxyW3RdLnB1c2goZSk7ZWxzZSBpZih3LmFycmF5KGUpKWZvcih2YXIgaT0wLG89ZTtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9b1tpXTskKHQsYSxuLHIpfWVsc2UgaWYody5vYmplY3QoZSkpZm9yKHZhciBzIGluIGUpeyQoSihzKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwiXCIuY29uY2F0KHQpLmNvbmNhdChlKX0pKSxlW3NdLG4scil9cmV0dXJuIHJ9ZnVuY3Rpb24gSih0KXtyZXR1cm4gdC50cmltKCkuc3BsaXQoLyArLyl9dmFyIFE9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5zcXJ0KHQqdCtlKmUpfSxaPVtcIndlYmtpdFwiLFwibW96XCJdO2Z1bmN0aW9uIHR0KHQsZSl7dC5fX3NldHx8KHQuX19zZXQ9e30pO3ZhciBuPWZ1bmN0aW9uKG4pe2lmKFouc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIDA9PT1uLmluZGV4T2YodCl9KSkpcmV0dXJuIDE7XCJmdW5jdGlvblwiIT10eXBlb2YgdFtuXSYmXCJfX3NldFwiIT09biYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4gaW4gdC5fX3NldD90Ll9fc2V0W25dOnQuX19zZXRbbl09ZVtuXX0sc2V0OmZ1bmN0aW9uKGUpe3QuX19zZXRbbl09ZX0sY29uZmlndXJhYmxlOiEwfSl9O2Zvcih2YXIgciBpbiBlKW4ocik7cmV0dXJuIHR9ZnVuY3Rpb24gZXQodCxlKXt0LnBhZ2U9dC5wYWdlfHx7fSx0LnBhZ2UueD1lLnBhZ2UueCx0LnBhZ2UueT1lLnBhZ2UueSx0LmNsaWVudD10LmNsaWVudHx8e30sdC5jbGllbnQueD1lLmNsaWVudC54LHQuY2xpZW50Lnk9ZS5jbGllbnQueSx0LnRpbWVTdGFtcD1lLnRpbWVTdGFtcH1mdW5jdGlvbiBudCh0KXt0LnBhZ2UueD0wLHQucGFnZS55PTAsdC5jbGllbnQueD0wLHQuY2xpZW50Lnk9MH1mdW5jdGlvbiBydCh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGsuRXZlbnR8fHQgaW5zdGFuY2VvZiBrLlRvdWNofWZ1bmN0aW9uIGl0KHQsZSxuKXtyZXR1cm4gdD10fHxcInBhZ2VcIiwobj1ufHx7fSkueD1lW3QrXCJYXCJdLG4ueT1lW3QrXCJZXCJdLG59ZnVuY3Rpb24gb3QodCxlKXtyZXR1cm4gZT1lfHx7eDowLHk6MH0sSS5pc09wZXJhTW9iaWxlJiZydCh0KT8oaXQoXCJzY3JlZW5cIix0LGUpLGUueCs9d2luZG93LnNjcm9sbFgsZS55Kz13aW5kb3cuc2Nyb2xsWSk6aXQoXCJwYWdlXCIsdCxlKSxlfWZ1bmN0aW9uIGF0KHQpe3JldHVybiB3Lm51bWJlcih0LnBvaW50ZXJJZCk/dC5wb2ludGVySWQ6dC5pZGVudGlmaWVyfWZ1bmN0aW9uIHN0KHQsZSxuKXt2YXIgcj1lLmxlbmd0aD4xP2x0KGUpOmVbMF07b3Qocix0LnBhZ2UpLGZ1bmN0aW9uKHQsZSl7ZT1lfHx7fSxJLmlzT3BlcmFNb2JpbGUmJnJ0KHQpP2l0KFwic2NyZWVuXCIsdCxlKTppdChcImNsaWVudFwiLHQsZSl9KHIsdC5jbGllbnQpLHQudGltZVN0YW1wPW59ZnVuY3Rpb24gY3QodCl7dmFyIGU9W107cmV0dXJuIHcuYXJyYXkodCk/KGVbMF09dFswXSxlWzFdPXRbMV0pOlwidG91Y2hlbmRcIj09PXQudHlwZT8xPT09dC50b3VjaGVzLmxlbmd0aD8oZVswXT10LnRvdWNoZXNbMF0sZVsxXT10LmNoYW5nZWRUb3VjaGVzWzBdKTowPT09dC50b3VjaGVzLmxlbmd0aCYmKGVbMF09dC5jaGFuZ2VkVG91Y2hlc1swXSxlWzFdPXQuY2hhbmdlZFRvdWNoZXNbMV0pOihlWzBdPXQudG91Y2hlc1swXSxlWzFdPXQudG91Y2hlc1sxXSksZX1mdW5jdGlvbiBsdCh0KXtmb3IodmFyIGU9e3BhZ2VYOjAscGFnZVk6MCxjbGllbnRYOjAsY2xpZW50WTowLHNjcmVlblg6MCxzY3JlZW5ZOjB9LG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtmb3IodmFyIGkgaW4gZSllW2ldKz1yW2ldfWZvcih2YXIgbyBpbiBlKWVbb10vPXQubGVuZ3RoO3JldHVybiBlfWZ1bmN0aW9uIHV0KHQpe2lmKCF0Lmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgZT1jdCh0KSxuPU1hdGgubWluKGVbMF0ucGFnZVgsZVsxXS5wYWdlWCkscj1NYXRoLm1pbihlWzBdLnBhZ2VZLGVbMV0ucGFnZVkpLGk9TWF0aC5tYXgoZVswXS5wYWdlWCxlWzFdLnBhZ2VYKSxvPU1hdGgubWF4KGVbMF0ucGFnZVksZVsxXS5wYWdlWSk7cmV0dXJue3g6bix5OnIsbGVmdDpuLHRvcDpyLHJpZ2h0OmksYm90dG9tOm8sd2lkdGg6aS1uLGhlaWdodDpvLXJ9fWZ1bmN0aW9uIHB0KHQsZSl7dmFyIG49ZStcIlhcIixyPWUrXCJZXCIsaT1jdCh0KSxvPWlbMF1bbl0taVsxXVtuXSxhPWlbMF1bcl0taVsxXVtyXTtyZXR1cm4gUShvLGEpfWZ1bmN0aW9uIGZ0KHQsZSl7dmFyIG49ZStcIlhcIixyPWUrXCJZXCIsaT1jdCh0KSxvPWlbMV1bbl0taVswXVtuXSxhPWlbMV1bcl0taVswXVtyXTtyZXR1cm4gMTgwKk1hdGguYXRhbjIoYSxvKS9NYXRoLlBJfWZ1bmN0aW9uIGR0KHQpe3JldHVybiB3LnN0cmluZyh0LnBvaW50ZXJUeXBlKT90LnBvaW50ZXJUeXBlOncubnVtYmVyKHQucG9pbnRlclR5cGUpP1t2b2lkIDAsdm9pZCAwLFwidG91Y2hcIixcInBlblwiLFwibW91c2VcIl1bdC5wb2ludGVyVHlwZV06L3RvdWNoLy50ZXN0KHQudHlwZXx8XCJcIil8fHQgaW5zdGFuY2VvZiBrLlRvdWNoP1widG91Y2hcIjpcIm1vdXNlXCJ9ZnVuY3Rpb24gaHQodCl7dmFyIGU9dy5mdW5jKHQuY29tcG9zZWRQYXRoKT90LmNvbXBvc2VkUGF0aCgpOnQucGF0aDtyZXR1cm5bWChlP2VbMF06dC50YXJnZXQpLFgodC5jdXJyZW50VGFyZ2V0KV19dmFyIHZ0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtyKHRoaXMsdCksdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9ITEsdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQ9ITEsdGhpcy5faW50ZXJhY3Rpb249ZX1yZXR1cm4gbyh0LFt7a2V5OlwicHJldmVudERlZmF1bHRcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJzdG9wUHJvcGFnYXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucHJvcGFnYXRpb25TdG9wcGVkPSEwfX0se2tleTpcInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5wcm9wYWdhdGlvblN0b3BwZWQ9ITB9fV0pLHR9KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHZ0LnByb3RvdHlwZSxcImludGVyYWN0aW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnRlcmFjdGlvbi5fcHJveHl9LHNldDpmdW5jdGlvbigpe319KTt2YXIgZ3Q9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTt0LnB1c2gocil9cmV0dXJuIHR9LG10PWZ1bmN0aW9uKHQpe3JldHVybiBndChbXSx0KX0seXQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKylpZihlKHRbbl0sbix0KSlyZXR1cm4gbjtyZXR1cm4tMX0sYnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdFt5dCh0LGUpXX0seHQ9ZnVuY3Rpb24odCl7cyhuLHQpO3ZhciBlPXAobik7ZnVuY3Rpb24gbih0LGksbyl7dmFyIGE7cih0aGlzLG4pLChhPWUuY2FsbCh0aGlzLGkuX2ludGVyYWN0aW9uKSkuZHJvcHpvbmU9dm9pZCAwLGEuZHJhZ0V2ZW50PXZvaWQgMCxhLnJlbGF0ZWRUYXJnZXQ9dm9pZCAwLGEuZHJhZ2dhYmxlPXZvaWQgMCxhLnByb3BhZ2F0aW9uU3RvcHBlZD0hMSxhLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMTt2YXIgcz1cImRyYWdsZWF2ZVwiPT09bz90LnByZXY6dC5jdXIsYz1zLmVsZW1lbnQsbD1zLmRyb3B6b25lO3JldHVybiBhLnR5cGU9byxhLnRhcmdldD1jLGEuY3VycmVudFRhcmdldD1jLGEuZHJvcHpvbmU9bCxhLmRyYWdFdmVudD1pLGEucmVsYXRlZFRhcmdldD1pLnRhcmdldCxhLmRyYWdnYWJsZT1pLmludGVyYWN0YWJsZSxhLnRpbWVTdGFtcD1pLnRpbWVTdGFtcCxhfXJldHVybiBvKG4sW3trZXk6XCJyZWplY3RcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLl9pbnRlcmFjdGlvbi5kcm9wU3RhdGU7aWYoXCJkcm9wYWN0aXZhdGVcIj09PXRoaXMudHlwZXx8dGhpcy5kcm9wem9uZSYmZS5jdXIuZHJvcHpvbmU9PT10aGlzLmRyb3B6b25lJiZlLmN1ci5lbGVtZW50PT09dGhpcy50YXJnZXQpaWYoZS5wcmV2LmRyb3B6b25lPXRoaXMuZHJvcHpvbmUsZS5wcmV2LmVsZW1lbnQ9dGhpcy50YXJnZXQsZS5yZWplY3RlZD0hMCxlLmV2ZW50cy5lbnRlcj1udWxsLHRoaXMuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksXCJkcm9wYWN0aXZhdGVcIj09PXRoaXMudHlwZSl7dmFyIHI9ZS5hY3RpdmVEcm9wcyxpPXl0KHIsKGZ1bmN0aW9uKGUpe3ZhciBuPWUuZHJvcHpvbmUscj1lLmVsZW1lbnQ7cmV0dXJuIG49PT10LmRyb3B6b25lJiZyPT09dC50YXJnZXR9KSk7ZS5hY3RpdmVEcm9wcy5zcGxpY2UoaSwxKTt2YXIgbz1uZXcgbihlLHRoaXMuZHJhZ0V2ZW50LFwiZHJvcGRlYWN0aXZhdGVcIik7by5kcm9wem9uZT10aGlzLmRyb3B6b25lLG8udGFyZ2V0PXRoaXMudGFyZ2V0LHRoaXMuZHJvcHpvbmUuZmlyZShvKX1lbHNlIHRoaXMuZHJvcHpvbmUuZmlyZShuZXcgbihlLHRoaXMuZHJhZ0V2ZW50LFwiZHJhZ2xlYXZlXCIpKX19LHtrZXk6XCJwcmV2ZW50RGVmYXVsdFwiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcInN0b3BQcm9wYWdhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5wcm9wYWdhdGlvblN0b3BwZWQ9ITB9fSx7a2V5Olwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD10aGlzLnByb3BhZ2F0aW9uU3RvcHBlZD0hMH19XSksbn0odnQpO2Z1bmN0aW9uIHd0KHQsZSl7Zm9yKHZhciBuPTAscj10LnNsaWNlKCk7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl0sbz1pLmRyb3B6b25lLGE9aS5lbGVtZW50O2UuZHJvcHpvbmU9byxlLnRhcmdldD1hLG8uZmlyZShlKSxlLnByb3BhZ2F0aW9uU3RvcHBlZD1lLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMX19ZnVuY3Rpb24gRXQodCxlKXtmb3IodmFyIG49ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj0wLGk9dC5pbnRlcmFjdGFibGVzLmxpc3Q7cjxpLmxlbmd0aDtyKyspe3ZhciBvPWlbcl07aWYoby5vcHRpb25zLmRyb3AuZW5hYmxlZCl7dmFyIGE9by5vcHRpb25zLmRyb3AuYWNjZXB0O2lmKCEody5lbGVtZW50KGEpJiZhIT09ZXx8dy5zdHJpbmcoYSkmJiFSKGUsYSl8fHcuZnVuYyhhKSYmIWEoe2Ryb3B6b25lOm8sZHJhZ2dhYmxlRWxlbWVudDplfSkpKWZvcih2YXIgcz0wLGM9by5nZXRBbGxFbGVtZW50cygpO3M8Yy5sZW5ndGg7cysrKXt2YXIgbD1jW3NdO2whPT1lJiZuLnB1c2goe2Ryb3B6b25lOm8sZWxlbWVudDpsLHJlY3Q6by5nZXRSZWN0KGwpfSl9fX1yZXR1cm4gbn0odCxlKSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW5bcl07aS5yZWN0PWkuZHJvcHpvbmUuZ2V0UmVjdChpLmVsZW1lbnQpfXJldHVybiBufWZ1bmN0aW9uIFR0KHQsZSxuKXtmb3IodmFyIHI9dC5kcm9wU3RhdGUsaT10LmludGVyYWN0YWJsZSxvPXQuZWxlbWVudCxhPVtdLHM9MCxjPXIuYWN0aXZlRHJvcHM7czxjLmxlbmd0aDtzKyspe3ZhciBsPWNbc10sdT1sLmRyb3B6b25lLHA9bC5lbGVtZW50LGY9bC5yZWN0LGQ9dS5kcm9wQ2hlY2soZSxuLGksbyxwLGYpO2EucHVzaChkP3A6bnVsbCl9dmFyIGg9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG4scixpPVtdLG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGE9dFtvXSxzPXRbZV07aWYoYSYmbyE9PWUpaWYocyl7dmFyIGM9QyhhKSxsPUMocyk7aWYoYyE9PWEub3duZXJEb2N1bWVudClpZihsIT09YS5vd25lckRvY3VtZW50KWlmKGMhPT1sKXtpPWkubGVuZ3RoP2k6aihzKTt2YXIgdT12b2lkIDA7aWYocyBpbnN0YW5jZW9mIGsuSFRNTEVsZW1lbnQmJmEgaW5zdGFuY2VvZiBrLlNWR0VsZW1lbnQmJiEoYSBpbnN0YW5jZW9mIGsuU1ZHU1ZHRWxlbWVudCkpe2lmKGE9PT1sKWNvbnRpbnVlO3U9YS5vd25lclNWR0VsZW1lbnR9ZWxzZSB1PWE7Zm9yKHZhciBwPWoodSxzLm93bmVyRG9jdW1lbnQpLGY9MDtwW2ZdJiZwW2ZdPT09aVtmXTspZisrO3ZhciBkPVtwW2YtMV0scFtmXSxpW2ZdXTtpZihkWzBdKWZvcih2YXIgaD1kWzBdLmxhc3RDaGlsZDtoOyl7aWYoaD09PWRbMV0pe2U9byxpPXA7YnJlYWt9aWYoaD09PWRbMl0pYnJlYWs7aD1oLnByZXZpb3VzU2libGluZ319ZWxzZSByPXMsdm9pZCAwLHZvaWQgMCwocGFyc2VJbnQoeShuPWEpLmdldENvbXB1dGVkU3R5bGUobikuekluZGV4LDEwKXx8MCk+PShwYXJzZUludCh5KHIpLmdldENvbXB1dGVkU3R5bGUocikuekluZGV4LDEwKXx8MCkmJihlPW8pO2Vsc2UgZT1vfWVsc2UgZT1vfXJldHVybiBlfShhKTtyZXR1cm4gci5hY3RpdmVEcm9wc1toXXx8bnVsbH1mdW5jdGlvbiBTdCh0LGUsbil7dmFyIHI9dC5kcm9wU3RhdGUsaT17ZW50ZXI6bnVsbCxsZWF2ZTpudWxsLGFjdGl2YXRlOm51bGwsZGVhY3RpdmF0ZTpudWxsLG1vdmU6bnVsbCxkcm9wOm51bGx9O3JldHVyblwiZHJhZ3N0YXJ0XCI9PT1uLnR5cGUmJihpLmFjdGl2YXRlPW5ldyB4dChyLG4sXCJkcm9wYWN0aXZhdGVcIiksaS5hY3RpdmF0ZS50YXJnZXQ9bnVsbCxpLmFjdGl2YXRlLmRyb3B6b25lPW51bGwpLFwiZHJhZ2VuZFwiPT09bi50eXBlJiYoaS5kZWFjdGl2YXRlPW5ldyB4dChyLG4sXCJkcm9wZGVhY3RpdmF0ZVwiKSxpLmRlYWN0aXZhdGUudGFyZ2V0PW51bGwsaS5kZWFjdGl2YXRlLmRyb3B6b25lPW51bGwpLHIucmVqZWN0ZWR8fChyLmN1ci5lbGVtZW50IT09ci5wcmV2LmVsZW1lbnQmJihyLnByZXYuZHJvcHpvbmUmJihpLmxlYXZlPW5ldyB4dChyLG4sXCJkcmFnbGVhdmVcIiksbi5kcmFnTGVhdmU9aS5sZWF2ZS50YXJnZXQ9ci5wcmV2LmVsZW1lbnQsbi5wcmV2RHJvcHpvbmU9aS5sZWF2ZS5kcm9wem9uZT1yLnByZXYuZHJvcHpvbmUpLHIuY3VyLmRyb3B6b25lJiYoaS5lbnRlcj1uZXcgeHQocixuLFwiZHJhZ2VudGVyXCIpLG4uZHJhZ0VudGVyPXIuY3VyLmVsZW1lbnQsbi5kcm9wem9uZT1yLmN1ci5kcm9wem9uZSkpLFwiZHJhZ2VuZFwiPT09bi50eXBlJiZyLmN1ci5kcm9wem9uZSYmKGkuZHJvcD1uZXcgeHQocixuLFwiZHJvcFwiKSxuLmRyb3B6b25lPXIuY3VyLmRyb3B6b25lLG4ucmVsYXRlZFRhcmdldD1yLmN1ci5lbGVtZW50KSxcImRyYWdtb3ZlXCI9PT1uLnR5cGUmJnIuY3VyLmRyb3B6b25lJiYoaS5tb3ZlPW5ldyB4dChyLG4sXCJkcm9wbW92ZVwiKSxuLmRyb3B6b25lPXIuY3VyLmRyb3B6b25lKSksaX1mdW5jdGlvbiBfdCh0LGUpe3ZhciBuPXQuZHJvcFN0YXRlLHI9bi5hY3RpdmVEcm9wcyxpPW4uY3VyLG89bi5wcmV2O2UubGVhdmUmJm8uZHJvcHpvbmUuZmlyZShlLmxlYXZlKSxlLmVudGVyJiZpLmRyb3B6b25lLmZpcmUoZS5lbnRlciksZS5tb3ZlJiZpLmRyb3B6b25lLmZpcmUoZS5tb3ZlKSxlLmRyb3AmJmkuZHJvcHpvbmUuZmlyZShlLmRyb3ApLGUuZGVhY3RpdmF0ZSYmd3QocixlLmRlYWN0aXZhdGUpLG4ucHJldi5kcm9wem9uZT1pLmRyb3B6b25lLG4ucHJldi5lbGVtZW50PWkuZWxlbWVudH1mdW5jdGlvbiBQdCh0LGUpe3ZhciBuPXQuaW50ZXJhY3Rpb24scj10LmlFdmVudCxpPXQuZXZlbnQ7aWYoXCJkcmFnbW92ZVwiPT09ci50eXBlfHxcImRyYWdlbmRcIj09PXIudHlwZSl7dmFyIG89bi5kcm9wU3RhdGU7ZS5keW5hbWljRHJvcCYmKG8uYWN0aXZlRHJvcHM9RXQoZSxuLmVsZW1lbnQpKTt2YXIgYT1yLHM9VHQobixhLGkpO28ucmVqZWN0ZWQ9by5yZWplY3RlZCYmISFzJiZzLmRyb3B6b25lPT09by5jdXIuZHJvcHpvbmUmJnMuZWxlbWVudD09PW8uY3VyLmVsZW1lbnQsby5jdXIuZHJvcHpvbmU9cyYmcy5kcm9wem9uZSxvLmN1ci5lbGVtZW50PXMmJnMuZWxlbWVudCxvLmV2ZW50cz1TdChuLDAsYSl9fXZhciBPdD17aWQ6XCJhY3Rpb25zL2Ryb3BcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXQuYWN0aW9ucyxuPXQuaW50ZXJhY3RTdGF0aWMscj10LkludGVyYWN0YWJsZSxpPXQuZGVmYXVsdHM7dC51c2VQbHVnaW4oXyksci5wcm90b3R5cGUuZHJvcHpvbmU9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYody5vYmplY3QoZSkpe2lmKHQub3B0aW9ucy5kcm9wLmVuYWJsZWQ9ITEhPT1lLmVuYWJsZWQsZS5saXN0ZW5lcnMpe3ZhciBuPSQoZS5saXN0ZW5lcnMpLHI9T2JqZWN0LmtleXMobikucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0Wy9eKGVudGVyfGxlYXZlKS8udGVzdChlKT9cImRyYWdcIi5jb25jYXQoZSk6L14oYWN0aXZhdGV8ZGVhY3RpdmF0ZXxtb3ZlKS8udGVzdChlKT9cImRyb3BcIi5jb25jYXQoZSk6ZV09bltlXSx0fSkse30pLGk9dC5vcHRpb25zLmRyb3AubGlzdGVuZXJzO2kmJnQub2ZmKGkpLHQub24ociksdC5vcHRpb25zLmRyb3AubGlzdGVuZXJzPXJ9cmV0dXJuIHcuZnVuYyhlLm9uZHJvcCkmJnQub24oXCJkcm9wXCIsZS5vbmRyb3ApLHcuZnVuYyhlLm9uZHJvcGFjdGl2YXRlKSYmdC5vbihcImRyb3BhY3RpdmF0ZVwiLGUub25kcm9wYWN0aXZhdGUpLHcuZnVuYyhlLm9uZHJvcGRlYWN0aXZhdGUpJiZ0Lm9uKFwiZHJvcGRlYWN0aXZhdGVcIixlLm9uZHJvcGRlYWN0aXZhdGUpLHcuZnVuYyhlLm9uZHJhZ2VudGVyKSYmdC5vbihcImRyYWdlbnRlclwiLGUub25kcmFnZW50ZXIpLHcuZnVuYyhlLm9uZHJhZ2xlYXZlKSYmdC5vbihcImRyYWdsZWF2ZVwiLGUub25kcmFnbGVhdmUpLHcuZnVuYyhlLm9uZHJvcG1vdmUpJiZ0Lm9uKFwiZHJvcG1vdmVcIixlLm9uZHJvcG1vdmUpLC9eKHBvaW50ZXJ8Y2VudGVyKSQvLnRlc3QoZS5vdmVybGFwKT90Lm9wdGlvbnMuZHJvcC5vdmVybGFwPWUub3ZlcmxhcDp3Lm51bWJlcihlLm92ZXJsYXApJiYodC5vcHRpb25zLmRyb3Aub3ZlcmxhcD1NYXRoLm1heChNYXRoLm1pbigxLGUub3ZlcmxhcCksMCkpLFwiYWNjZXB0XCJpbiBlJiYodC5vcHRpb25zLmRyb3AuYWNjZXB0PWUuYWNjZXB0KSxcImNoZWNrZXJcImluIGUmJih0Lm9wdGlvbnMuZHJvcC5jaGVja2VyPWUuY2hlY2tlciksdH1pZih3LmJvb2woZSkpcmV0dXJuIHQub3B0aW9ucy5kcm9wLmVuYWJsZWQ9ZSx0O3JldHVybiB0Lm9wdGlvbnMuZHJvcH0odGhpcyx0KX0sci5wcm90b3R5cGUuZHJvcENoZWNrPWZ1bmN0aW9uKHQsZSxuLHIsaSxvKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixpLG8sYSl7dmFyIHM9ITE7aWYoIShhPWF8fHQuZ2V0UmVjdChvKSkpcmV0dXJuISF0Lm9wdGlvbnMuZHJvcC5jaGVja2VyJiZ0Lm9wdGlvbnMuZHJvcC5jaGVja2VyKGUsbixzLHQsbyxyLGkpO3ZhciBjPXQub3B0aW9ucy5kcm9wLm92ZXJsYXA7aWYoXCJwb2ludGVyXCI9PT1jKXt2YXIgbD1LKHIsaSxcImRyYWdcIiksdT1vdChlKTt1LngrPWwueCx1LnkrPWwueTt2YXIgcD11Lng+YS5sZWZ0JiZ1Lng8YS5yaWdodCxmPXUueT5hLnRvcCYmdS55PGEuYm90dG9tO3M9cCYmZn12YXIgZD1yLmdldFJlY3QoaSk7aWYoZCYmXCJjZW50ZXJcIj09PWMpe3ZhciBoPWQubGVmdCtkLndpZHRoLzIsdj1kLnRvcCtkLmhlaWdodC8yO3M9aD49YS5sZWZ0JiZoPD1hLnJpZ2h0JiZ2Pj1hLnRvcCYmdjw9YS5ib3R0b219aWYoZCYmdy5udW1iZXIoYykpe3M9TWF0aC5tYXgoMCxNYXRoLm1pbihhLnJpZ2h0LGQucmlnaHQpLU1hdGgubWF4KGEubGVmdCxkLmxlZnQpKSpNYXRoLm1heCgwLE1hdGgubWluKGEuYm90dG9tLGQuYm90dG9tKS1NYXRoLm1heChhLnRvcCxkLnRvcCkpLyhkLndpZHRoKmQuaGVpZ2h0KT49Y310Lm9wdGlvbnMuZHJvcC5jaGVja2VyJiYocz10Lm9wdGlvbnMuZHJvcC5jaGVja2VyKGUsbixzLHQsbyxyLGkpKTtyZXR1cm4gc30odGhpcyx0LGUsbixyLGksbyl9LG4uZHluYW1pY0Ryb3A9ZnVuY3Rpb24oZSl7cmV0dXJuIHcuYm9vbChlKT8odC5keW5hbWljRHJvcD1lLG4pOnQuZHluYW1pY0Ryb3B9LFYoZS5waGFzZWxlc3NUeXBlcyx7ZHJhZ2VudGVyOiEwLGRyYWdsZWF2ZTohMCxkcm9wYWN0aXZhdGU6ITAsZHJvcGRlYWN0aXZhdGU6ITAsZHJvcG1vdmU6ITAsZHJvcDohMH0pLGUubWV0aG9kRGljdC5kcm9wPVwiZHJvcHpvbmVcIix0LmR5bmFtaWNEcm9wPSExLGkuYWN0aW9ucy5kcm9wPU90LmRlZmF1bHRzfSxsaXN0ZW5lcnM6e1wiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tc3RhcnRcIjpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uO1wiZHJhZ1wiPT09ZS5wcmVwYXJlZC5uYW1lJiYoZS5kcm9wU3RhdGU9e2N1cjp7ZHJvcHpvbmU6bnVsbCxlbGVtZW50Om51bGx9LHByZXY6e2Ryb3B6b25lOm51bGwsZWxlbWVudDpudWxsfSxyZWplY3RlZDpudWxsLGV2ZW50czpudWxsLGFjdGl2ZURyb3BzOltdfSl9LFwiaW50ZXJhY3Rpb25zOmFmdGVyLWFjdGlvbi1zdGFydFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5pbnRlcmFjdGlvbixyPSh0LmV2ZW50LHQuaUV2ZW50KTtpZihcImRyYWdcIj09PW4ucHJlcGFyZWQubmFtZSl7dmFyIGk9bi5kcm9wU3RhdGU7aS5hY3RpdmVEcm9wcz1bXSxpLmV2ZW50cz17fSxpLmFjdGl2ZURyb3BzPUV0KGUsbi5lbGVtZW50KSxpLmV2ZW50cz1TdChuLDAsciksaS5ldmVudHMuYWN0aXZhdGUmJih3dChpLmFjdGl2ZURyb3BzLGkuZXZlbnRzLmFjdGl2YXRlKSxlLmZpcmUoXCJhY3Rpb25zL2Ryb3A6c3RhcnRcIix7aW50ZXJhY3Rpb246bixkcmFnRXZlbnQ6cn0pKX19LFwiaW50ZXJhY3Rpb25zOmFjdGlvbi1tb3ZlXCI6UHQsXCJpbnRlcmFjdGlvbnM6YWZ0ZXItYWN0aW9uLW1vdmVcIjpmdW5jdGlvbih0LGUpe3ZhciBuPXQuaW50ZXJhY3Rpb24scj10LmlFdmVudDtpZihcImRyYWdcIj09PW4ucHJlcGFyZWQubmFtZSl7dmFyIGk9bi5kcm9wU3RhdGU7X3QobixpLmV2ZW50cyksZS5maXJlKFwiYWN0aW9ucy9kcm9wOm1vdmVcIix7aW50ZXJhY3Rpb246bixkcmFnRXZlbnQ6cn0pLGkuZXZlbnRzPXt9fX0sXCJpbnRlcmFjdGlvbnM6YWN0aW9uLWVuZFwiOmZ1bmN0aW9uKHQsZSl7aWYoXCJkcmFnXCI9PT10LmludGVyYWN0aW9uLnByZXBhcmVkLm5hbWUpe3ZhciBuPXQuaW50ZXJhY3Rpb24scj10LmlFdmVudDtQdCh0LGUpLF90KG4sbi5kcm9wU3RhdGUuZXZlbnRzKSxlLmZpcmUoXCJhY3Rpb25zL2Ryb3A6ZW5kXCIse2ludGVyYWN0aW9uOm4sZHJhZ0V2ZW50OnJ9KX19LFwiaW50ZXJhY3Rpb25zOnN0b3BcIjpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uO2lmKFwiZHJhZ1wiPT09ZS5wcmVwYXJlZC5uYW1lKXt2YXIgbj1lLmRyb3BTdGF0ZTtuJiYobi5hY3RpdmVEcm9wcz1udWxsLG4uZXZlbnRzPW51bGwsbi5jdXIuZHJvcHpvbmU9bnVsbCxuLmN1ci5lbGVtZW50PW51bGwsbi5wcmV2LmRyb3B6b25lPW51bGwsbi5wcmV2LmVsZW1lbnQ9bnVsbCxuLnJlamVjdGVkPSExKX19fSxnZXRBY3RpdmVEcm9wczpFdCxnZXREcm9wOlR0LGdldERyb3BFdmVudHM6U3QsZmlyZURyb3BFdmVudHM6X3QsZmlsdGVyRXZlbnRUeXBlOmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dC5zZWFyY2goXCJkcmFnXCIpfHwwPT09dC5zZWFyY2goXCJkcm9wXCIpfSxkZWZhdWx0czp7ZW5hYmxlZDohMSxhY2NlcHQ6bnVsbCxvdmVybGFwOlwicG9pbnRlclwifX0sa3Q9T3Q7ZnVuY3Rpb24gRHQodCl7dmFyIGU9dC5pbnRlcmFjdGlvbixuPXQuaUV2ZW50LHI9dC5waGFzZTtpZihcImdlc3R1cmVcIj09PWUucHJlcGFyZWQubmFtZSl7dmFyIGk9ZS5wb2ludGVycy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnBvaW50ZXJ9KSksbz1cInN0YXJ0XCI9PT1yLGE9XCJlbmRcIj09PXIscz1lLmludGVyYWN0YWJsZS5vcHRpb25zLmRlbHRhU291cmNlO2lmKG4udG91Y2hlcz1baVswXSxpWzFdXSxvKW4uZGlzdGFuY2U9cHQoaSxzKSxuLmJveD11dChpKSxuLnNjYWxlPTEsbi5kcz0wLG4uYW5nbGU9ZnQoaSxzKSxuLmRhPTAsZS5nZXN0dXJlLnN0YXJ0RGlzdGFuY2U9bi5kaXN0YW5jZSxlLmdlc3R1cmUuc3RhcnRBbmdsZT1uLmFuZ2xlO2Vsc2UgaWYoYXx8ZS5wb2ludGVycy5sZW5ndGg8Mil7dmFyIGM9ZS5wcmV2RXZlbnQ7bi5kaXN0YW5jZT1jLmRpc3RhbmNlLG4uYm94PWMuYm94LG4uc2NhbGU9Yy5zY2FsZSxuLmRzPTAsbi5hbmdsZT1jLmFuZ2xlLG4uZGE9MH1lbHNlIG4uZGlzdGFuY2U9cHQoaSxzKSxuLmJveD11dChpKSxuLnNjYWxlPW4uZGlzdGFuY2UvZS5nZXN0dXJlLnN0YXJ0RGlzdGFuY2Usbi5hbmdsZT1mdChpLHMpLG4uZHM9bi5zY2FsZS1lLmdlc3R1cmUuc2NhbGUsbi5kYT1uLmFuZ2xlLWUuZ2VzdHVyZS5hbmdsZTtlLmdlc3R1cmUuZGlzdGFuY2U9bi5kaXN0YW5jZSxlLmdlc3R1cmUuYW5nbGU9bi5hbmdsZSx3Lm51bWJlcihuLnNjYWxlKSYmbi5zY2FsZSE9PTEvMCYmIWlzTmFOKG4uc2NhbGUpJiYoZS5nZXN0dXJlLnNjYWxlPW4uc2NhbGUpfX12YXIgSXQ9e2lkOlwiYWN0aW9ucy9nZXN0dXJlXCIsYmVmb3JlOltcImFjdGlvbnMvZHJhZ1wiLFwiYWN0aW9ucy9yZXNpemVcIl0saW5zdGFsbDpmdW5jdGlvbih0KXt2YXIgZT10LmFjdGlvbnMsbj10LkludGVyYWN0YWJsZSxyPXQuZGVmYXVsdHM7bi5wcm90b3R5cGUuZ2VzdHVyYWJsZT1mdW5jdGlvbih0KXtyZXR1cm4gdy5vYmplY3QodCk/KHRoaXMub3B0aW9ucy5nZXN0dXJlLmVuYWJsZWQ9ITEhPT10LmVuYWJsZWQsdGhpcy5zZXRQZXJBY3Rpb24oXCJnZXN0dXJlXCIsdCksdGhpcy5zZXRPbkV2ZW50cyhcImdlc3R1cmVcIix0KSx0aGlzKTp3LmJvb2wodCk/KHRoaXMub3B0aW9ucy5nZXN0dXJlLmVuYWJsZWQ9dCx0aGlzKTp0aGlzLm9wdGlvbnMuZ2VzdHVyZX0sZS5tYXAuZ2VzdHVyZT1JdCxlLm1ldGhvZERpY3QuZ2VzdHVyZT1cImdlc3R1cmFibGVcIixyLmFjdGlvbnMuZ2VzdHVyZT1JdC5kZWZhdWx0c30sbGlzdGVuZXJzOntcImludGVyYWN0aW9uczphY3Rpb24tc3RhcnRcIjpEdCxcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOkR0LFwiaW50ZXJhY3Rpb25zOmFjdGlvbi1lbmRcIjpEdCxcImludGVyYWN0aW9uczpuZXdcIjpmdW5jdGlvbih0KXt0LmludGVyYWN0aW9uLmdlc3R1cmU9e2FuZ2xlOjAsZGlzdGFuY2U6MCxzY2FsZToxLHN0YXJ0QW5nbGU6MCxzdGFydERpc3RhbmNlOjB9fSxcImF1dG8tc3RhcnQ6Y2hlY2tcIjpmdW5jdGlvbih0KXtpZighKHQuaW50ZXJhY3Rpb24ucG9pbnRlcnMubGVuZ3RoPDIpKXt2YXIgZT10LmludGVyYWN0YWJsZS5vcHRpb25zLmdlc3R1cmU7aWYoZSYmZS5lbmFibGVkKXJldHVybiB0LmFjdGlvbj17bmFtZTpcImdlc3R1cmVcIn0sITF9fX0sZGVmYXVsdHM6e30sZ2V0Q3Vyc29yOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sZmlsdGVyRXZlbnRUeXBlOmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dC5zZWFyY2goXCJnZXN0dXJlXCIpfX0sTXQ9SXQ7ZnVuY3Rpb24genQodCxlLG4scixpLG8sYSl7aWYoIWUpcmV0dXJuITE7aWYoITA9PT1lKXt2YXIgcz13Lm51bWJlcihvLndpZHRoKT9vLndpZHRoOm8ucmlnaHQtby5sZWZ0LGM9dy5udW1iZXIoby5oZWlnaHQpP28uaGVpZ2h0Om8uYm90dG9tLW8udG9wO2lmKGE9TWF0aC5taW4oYSxNYXRoLmFicygoXCJsZWZ0XCI9PT10fHxcInJpZ2h0XCI9PT10P3M6YykvMikpLHM8MCYmKFwibGVmdFwiPT09dD90PVwicmlnaHRcIjpcInJpZ2h0XCI9PT10JiYodD1cImxlZnRcIikpLGM8MCYmKFwidG9wXCI9PT10P3Q9XCJib3R0b21cIjpcImJvdHRvbVwiPT09dCYmKHQ9XCJ0b3BcIikpLFwibGVmdFwiPT09dCl7dmFyIGw9cz49MD9vLmxlZnQ6by5yaWdodDtyZXR1cm4gbi54PGwrYX1pZihcInRvcFwiPT09dCl7dmFyIHU9Yz49MD9vLnRvcDpvLmJvdHRvbTtyZXR1cm4gbi55PHUrYX1pZihcInJpZ2h0XCI9PT10KXJldHVybiBuLng+KHM+PTA/by5yaWdodDpvLmxlZnQpLWE7aWYoXCJib3R0b21cIj09PXQpcmV0dXJuIG4ueT4oYz49MD9vLmJvdHRvbTpvLnRvcCktYX1yZXR1cm4hIXcuZWxlbWVudChyKSYmKHcuZWxlbWVudChlKT9lPT09cjpGKHIsZSxpKSl9ZnVuY3Rpb24gQXQodCl7dmFyIGU9dC5pRXZlbnQsbj10LmludGVyYWN0aW9uO2lmKFwicmVzaXplXCI9PT1uLnByZXBhcmVkLm5hbWUmJm4ucmVzaXplQXhlcyl7dmFyIHI9ZTtuLmludGVyYWN0YWJsZS5vcHRpb25zLnJlc2l6ZS5zcXVhcmU/KFwieVwiPT09bi5yZXNpemVBeGVzP3IuZGVsdGEueD1yLmRlbHRhLnk6ci5kZWx0YS55PXIuZGVsdGEueCxyLmF4ZXM9XCJ4eVwiKTooci5heGVzPW4ucmVzaXplQXhlcyxcInhcIj09PW4ucmVzaXplQXhlcz9yLmRlbHRhLnk9MDpcInlcIj09PW4ucmVzaXplQXhlcyYmKHIuZGVsdGEueD0wKSl9fXZhciBSdCxDdCxqdD17aWQ6XCJhY3Rpb25zL3Jlc2l6ZVwiLGJlZm9yZTpbXCJhY3Rpb25zL2RyYWdcIl0saW5zdGFsbDpmdW5jdGlvbih0KXt2YXIgZT10LmFjdGlvbnMsbj10LmJyb3dzZXIscj10LkludGVyYWN0YWJsZSxpPXQuZGVmYXVsdHM7anQuY3Vyc29ycz1mdW5jdGlvbih0KXtyZXR1cm4gdC5pc0llOT97eDpcImUtcmVzaXplXCIseTpcInMtcmVzaXplXCIseHk6XCJzZS1yZXNpemVcIix0b3A6XCJuLXJlc2l6ZVwiLGxlZnQ6XCJ3LXJlc2l6ZVwiLGJvdHRvbTpcInMtcmVzaXplXCIscmlnaHQ6XCJlLXJlc2l6ZVwiLHRvcGxlZnQ6XCJzZS1yZXNpemVcIixib3R0b21yaWdodDpcInNlLXJlc2l6ZVwiLHRvcHJpZ2h0OlwibmUtcmVzaXplXCIsYm90dG9tbGVmdDpcIm5lLXJlc2l6ZVwifTp7eDpcImV3LXJlc2l6ZVwiLHk6XCJucy1yZXNpemVcIix4eTpcIm53c2UtcmVzaXplXCIsdG9wOlwibnMtcmVzaXplXCIsbGVmdDpcImV3LXJlc2l6ZVwiLGJvdHRvbTpcIm5zLXJlc2l6ZVwiLHJpZ2h0OlwiZXctcmVzaXplXCIsdG9wbGVmdDpcIm53c2UtcmVzaXplXCIsYm90dG9tcmlnaHQ6XCJud3NlLXJlc2l6ZVwiLHRvcHJpZ2h0OlwibmVzdy1yZXNpemVcIixib3R0b21sZWZ0OlwibmVzdy1yZXNpemVcIn19KG4pLGp0LmRlZmF1bHRNYXJnaW49bi5zdXBwb3J0c1RvdWNofHxuLnN1cHBvcnRzUG9pbnRlckV2ZW50PzIwOjEwLHIucHJvdG90eXBlLnJlc2l6YWJsZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe2lmKHcub2JqZWN0KGUpKXJldHVybiB0Lm9wdGlvbnMucmVzaXplLmVuYWJsZWQ9ITEhPT1lLmVuYWJsZWQsdC5zZXRQZXJBY3Rpb24oXCJyZXNpemVcIixlKSx0LnNldE9uRXZlbnRzKFwicmVzaXplXCIsZSksdy5zdHJpbmcoZS5heGlzKSYmL154JHxeeSR8Xnh5JC8udGVzdChlLmF4aXMpP3Qub3B0aW9ucy5yZXNpemUuYXhpcz1lLmF4aXM6bnVsbD09PWUuYXhpcyYmKHQub3B0aW9ucy5yZXNpemUuYXhpcz1uLmRlZmF1bHRzLmFjdGlvbnMucmVzaXplLmF4aXMpLHcuYm9vbChlLnByZXNlcnZlQXNwZWN0UmF0aW8pP3Qub3B0aW9ucy5yZXNpemUucHJlc2VydmVBc3BlY3RSYXRpbz1lLnByZXNlcnZlQXNwZWN0UmF0aW86dy5ib29sKGUuc3F1YXJlKSYmKHQub3B0aW9ucy5yZXNpemUuc3F1YXJlPWUuc3F1YXJlKSx0O2lmKHcuYm9vbChlKSlyZXR1cm4gdC5vcHRpb25zLnJlc2l6ZS5lbmFibGVkPWUsdDtyZXR1cm4gdC5vcHRpb25zLnJlc2l6ZX0odGhpcyxlLHQpfSxlLm1hcC5yZXNpemU9anQsZS5tZXRob2REaWN0LnJlc2l6ZT1cInJlc2l6YWJsZVwiLGkuYWN0aW9ucy5yZXNpemU9anQuZGVmYXVsdHN9LGxpc3RlbmVyczp7XCJpbnRlcmFjdGlvbnM6bmV3XCI6ZnVuY3Rpb24odCl7dC5pbnRlcmFjdGlvbi5yZXNpemVBeGVzPVwieHlcIn0sXCJpbnRlcmFjdGlvbnM6YWN0aW9uLXN0YXJ0XCI6ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQpe3ZhciBlPXQuaUV2ZW50LG49dC5pbnRlcmFjdGlvbjtpZihcInJlc2l6ZVwiPT09bi5wcmVwYXJlZC5uYW1lJiZuLnByZXBhcmVkLmVkZ2VzKXt2YXIgcj1lLGk9bi5yZWN0O24uX3JlY3RzPXtzdGFydDpWKHt9LGkpLGNvcnJlY3RlZDpWKHt9LGkpLHByZXZpb3VzOlYoe30saSksZGVsdGE6e2xlZnQ6MCxyaWdodDowLHdpZHRoOjAsdG9wOjAsYm90dG9tOjAsaGVpZ2h0OjB9fSxyLmVkZ2VzPW4ucHJlcGFyZWQuZWRnZXMsci5yZWN0PW4uX3JlY3RzLmNvcnJlY3RlZCxyLmRlbHRhUmVjdD1uLl9yZWN0cy5kZWx0YX19KHQpLEF0KHQpfSxcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOmZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0KXt2YXIgZT10LmlFdmVudCxuPXQuaW50ZXJhY3Rpb247aWYoXCJyZXNpemVcIj09PW4ucHJlcGFyZWQubmFtZSYmbi5wcmVwYXJlZC5lZGdlcyl7dmFyIHI9ZSxpPW4uaW50ZXJhY3RhYmxlLm9wdGlvbnMucmVzaXplLmludmVydCxvPVwicmVwb3NpdGlvblwiPT09aXx8XCJuZWdhdGVcIj09PWksYT1uLnJlY3Qscz1uLl9yZWN0cyxjPXMuc3RhcnQsbD1zLmNvcnJlY3RlZCx1PXMuZGVsdGEscD1zLnByZXZpb3VzO2lmKFYocCxsKSxvKXtpZihWKGwsYSksXCJyZXBvc2l0aW9uXCI9PT1pKXtpZihsLnRvcD5sLmJvdHRvbSl7dmFyIGY9bC50b3A7bC50b3A9bC5ib3R0b20sbC5ib3R0b209Zn1pZihsLmxlZnQ+bC5yaWdodCl7dmFyIGQ9bC5sZWZ0O2wubGVmdD1sLnJpZ2h0LGwucmlnaHQ9ZH19fWVsc2UgbC50b3A9TWF0aC5taW4oYS50b3AsYy5ib3R0b20pLGwuYm90dG9tPU1hdGgubWF4KGEuYm90dG9tLGMudG9wKSxsLmxlZnQ9TWF0aC5taW4oYS5sZWZ0LGMucmlnaHQpLGwucmlnaHQ9TWF0aC5tYXgoYS5yaWdodCxjLmxlZnQpO2Zvcih2YXIgaCBpbiBsLndpZHRoPWwucmlnaHQtbC5sZWZ0LGwuaGVpZ2h0PWwuYm90dG9tLWwudG9wLGwpdVtoXT1sW2hdLXBbaF07ci5lZGdlcz1uLnByZXBhcmVkLmVkZ2VzLHIucmVjdD1sLHIuZGVsdGFSZWN0PXV9fSh0KSxBdCh0KX0sXCJpbnRlcmFjdGlvbnM6YWN0aW9uLWVuZFwiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaUV2ZW50LG49dC5pbnRlcmFjdGlvbjtpZihcInJlc2l6ZVwiPT09bi5wcmVwYXJlZC5uYW1lJiZuLnByZXBhcmVkLmVkZ2VzKXt2YXIgcj1lO3IuZWRnZXM9bi5wcmVwYXJlZC5lZGdlcyxyLnJlY3Q9bi5fcmVjdHMuY29ycmVjdGVkLHIuZGVsdGFSZWN0PW4uX3JlY3RzLmRlbHRhfX0sXCJhdXRvLXN0YXJ0OmNoZWNrXCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbixuPXQuaW50ZXJhY3RhYmxlLHI9dC5lbGVtZW50LGk9dC5yZWN0LG89dC5idXR0b25zO2lmKGkpe3ZhciBhPVYoe30sZS5jb29yZHMuY3VyLnBhZ2UpLHM9bi5vcHRpb25zLnJlc2l6ZTtpZihzJiZzLmVuYWJsZWQmJighZS5wb2ludGVySXNEb3dufHwhL21vdXNlfHBvaW50ZXIvLnRlc3QoZS5wb2ludGVyVHlwZSl8fDAhPShvJnMubW91c2VCdXR0b25zKSkpe2lmKHcub2JqZWN0KHMuZWRnZXMpKXt2YXIgYz17bGVmdDohMSxyaWdodDohMSx0b3A6ITEsYm90dG9tOiExfTtmb3IodmFyIGwgaW4gYyljW2xdPXp0KGwscy5lZGdlc1tsXSxhLGUuX2xhdGVzdFBvaW50ZXIuZXZlbnRUYXJnZXQscixpLHMubWFyZ2lufHxqdC5kZWZhdWx0TWFyZ2luKTtjLmxlZnQ9Yy5sZWZ0JiYhYy5yaWdodCxjLnRvcD1jLnRvcCYmIWMuYm90dG9tLChjLmxlZnR8fGMucmlnaHR8fGMudG9wfHxjLmJvdHRvbSkmJih0LmFjdGlvbj17bmFtZTpcInJlc2l6ZVwiLGVkZ2VzOmN9KX1lbHNle3ZhciB1PVwieVwiIT09cy5heGlzJiZhLng+aS5yaWdodC1qdC5kZWZhdWx0TWFyZ2luLHA9XCJ4XCIhPT1zLmF4aXMmJmEueT5pLmJvdHRvbS1qdC5kZWZhdWx0TWFyZ2luOyh1fHxwKSYmKHQuYWN0aW9uPXtuYW1lOlwicmVzaXplXCIsYXhlczoodT9cInhcIjpcIlwiKSsocD9cInlcIjpcIlwiKX0pfXJldHVybiF0LmFjdGlvbiYmdm9pZCAwfX19fSxkZWZhdWx0czp7c3F1YXJlOiExLHByZXNlcnZlQXNwZWN0UmF0aW86ITEsYXhpczpcInh5XCIsbWFyZ2luOk5hTixlZGdlczpudWxsLGludmVydDpcIm5vbmVcIn0sY3Vyc29yczpudWxsLGdldEN1cnNvcjpmdW5jdGlvbih0KXt2YXIgZT10LmVkZ2VzLG49dC5heGlzLHI9dC5uYW1lLGk9anQuY3Vyc29ycyxvPW51bGw7aWYobilvPWlbcituXTtlbHNlIGlmKGUpe2Zvcih2YXIgYT1cIlwiLHM9MCxjPVtcInRvcFwiLFwiYm90dG9tXCIsXCJsZWZ0XCIsXCJyaWdodFwiXTtzPGMubGVuZ3RoO3MrKyl7dmFyIGw9Y1tzXTtlW2xdJiYoYSs9bCl9bz1pW2FdfXJldHVybiBvfSxmaWx0ZXJFdmVudFR5cGU6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10LnNlYXJjaChcInJlc2l6ZVwiKX0sZGVmYXVsdE1hcmdpbjpudWxsfSxGdD1qdCxYdD17aWQ6XCJhY3Rpb25zXCIsaW5zdGFsbDpmdW5jdGlvbih0KXt0LnVzZVBsdWdpbihNdCksdC51c2VQbHVnaW4oRnQpLHQudXNlUGx1Z2luKF8pLHQudXNlUGx1Z2luKGt0KX19LFl0PTA7dmFyIEx0PXtyZXF1ZXN0OmZ1bmN0aW9uKHQpe3JldHVybiBSdCh0KX0sY2FuY2VsOmZ1bmN0aW9uKHQpe3JldHVybiBDdCh0KX0saW5pdDpmdW5jdGlvbih0KXtpZihSdD10LnJlcXVlc3RBbmltYXRpb25GcmFtZSxDdD10LmNhbmNlbEFuaW1hdGlvbkZyYW1lLCFSdClmb3IodmFyIGU9W1wibXNcIixcIm1velwiLFwid2Via2l0XCIsXCJvXCJdLG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtSdD10W1wiXCIuY29uY2F0KHIsXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIildLEN0PXRbXCJcIi5jb25jYXQocixcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCIpXXx8dFtcIlwiLmNvbmNhdChyLFwiQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIpXX1SdD1SdCYmUnQuYmluZCh0KSxDdD1DdCYmQ3QuYmluZCh0KSxSdHx8KFJ0PWZ1bmN0aW9uKGUpe3ZhciBuPURhdGUubm93KCkscj1NYXRoLm1heCgwLDE2LShuLVl0KSksaT10LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZShuK3IpfSkscik7cmV0dXJuIFl0PW4rcixpfSxDdD1mdW5jdGlvbih0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KHQpfSl9fTt2YXIgcXQ9e2RlZmF1bHRzOntlbmFibGVkOiExLG1hcmdpbjo2MCxjb250YWluZXI6bnVsbCxzcGVlZDozMDB9LG5vdzpEYXRlLm5vdyxpbnRlcmFjdGlvbjpudWxsLGk6MCx4OjAseTowLGlzU2Nyb2xsaW5nOiExLHByZXZUaW1lOjAsbWFyZ2luOjAsc3BlZWQ6MCxzdGFydDpmdW5jdGlvbih0KXtxdC5pc1Njcm9sbGluZz0hMCxMdC5jYW5jZWwocXQuaSksdC5hdXRvU2Nyb2xsPXF0LHF0LmludGVyYWN0aW9uPXQscXQucHJldlRpbWU9cXQubm93KCkscXQuaT1MdC5yZXF1ZXN0KHF0LnNjcm9sbCl9LHN0b3A6ZnVuY3Rpb24oKXtxdC5pc1Njcm9sbGluZz0hMSxxdC5pbnRlcmFjdGlvbiYmKHF0LmludGVyYWN0aW9uLmF1dG9TY3JvbGw9bnVsbCksTHQuY2FuY2VsKHF0LmkpfSxzY3JvbGw6ZnVuY3Rpb24oKXt2YXIgdD1xdC5pbnRlcmFjdGlvbixlPXQuaW50ZXJhY3RhYmxlLG49dC5lbGVtZW50LHI9dC5wcmVwYXJlZC5uYW1lLGk9ZS5vcHRpb25zW3JdLmF1dG9TY3JvbGwsbz1CdChpLmNvbnRhaW5lcixlLG4pLGE9cXQubm93KCkscz0oYS1xdC5wcmV2VGltZSkvMWUzLGM9aS5zcGVlZCpzO2lmKGM+PTEpe3ZhciBsPXt4OnF0LngqYyx5OnF0LnkqY307aWYobC54fHxsLnkpe3ZhciB1PVZ0KG8pO3cud2luZG93KG8pP28uc2Nyb2xsQnkobC54LGwueSk6byYmKG8uc2Nyb2xsTGVmdCs9bC54LG8uc2Nyb2xsVG9wKz1sLnkpO3ZhciBwPVZ0KG8pLGY9e3g6cC54LXUueCx5OnAueS11Lnl9OyhmLnh8fGYueSkmJmUuZmlyZSh7dHlwZTpcImF1dG9zY3JvbGxcIix0YXJnZXQ6bixpbnRlcmFjdGFibGU6ZSxkZWx0YTpmLGludGVyYWN0aW9uOnQsY29udGFpbmVyOm99KX1xdC5wcmV2VGltZT1hfXF0LmlzU2Nyb2xsaW5nJiYoTHQuY2FuY2VsKHF0LmkpLHF0Lmk9THQucmVxdWVzdChxdC5zY3JvbGwpKX0sY2hlY2s6ZnVuY3Rpb24odCxlKXt2YXIgbjtyZXR1cm4gbnVsbD09KG49dC5vcHRpb25zW2VdLmF1dG9TY3JvbGwpP3ZvaWQgMDpuLmVuYWJsZWR9LG9uSW50ZXJhY3Rpb25Nb3ZlOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LnBvaW50ZXI7aWYoZS5pbnRlcmFjdGluZygpJiZxdC5jaGVjayhlLmludGVyYWN0YWJsZSxlLnByZXBhcmVkLm5hbWUpKWlmKGUuc2ltdWxhdGlvbilxdC54PXF0Lnk9MDtlbHNle3ZhciByLGksbyxhLHM9ZS5pbnRlcmFjdGFibGUsYz1lLmVsZW1lbnQsbD1lLnByZXBhcmVkLm5hbWUsdT1zLm9wdGlvbnNbbF0uYXV0b1Njcm9sbCxwPUJ0KHUuY29udGFpbmVyLHMsYyk7aWYody53aW5kb3cocCkpYT1uLmNsaWVudFg8cXQubWFyZ2luLHI9bi5jbGllbnRZPHF0Lm1hcmdpbixpPW4uY2xpZW50WD5wLmlubmVyV2lkdGgtcXQubWFyZ2luLG89bi5jbGllbnRZPnAuaW5uZXJIZWlnaHQtcXQubWFyZ2luO2Vsc2V7dmFyIGY9WShwKTthPW4uY2xpZW50WDxmLmxlZnQrcXQubWFyZ2luLHI9bi5jbGllbnRZPGYudG9wK3F0Lm1hcmdpbixpPW4uY2xpZW50WD5mLnJpZ2h0LXF0Lm1hcmdpbixvPW4uY2xpZW50WT5mLmJvdHRvbS1xdC5tYXJnaW59cXQueD1pPzE6YT8tMTowLHF0Lnk9bz8xOnI/LTE6MCxxdC5pc1Njcm9sbGluZ3x8KHF0Lm1hcmdpbj11Lm1hcmdpbixxdC5zcGVlZD11LnNwZWVkLHF0LnN0YXJ0KGUpKX19fTtmdW5jdGlvbiBCdCh0LGUsbil7cmV0dXJuKHcuc3RyaW5nKHQpP1codCxlLG4pOnQpfHx5KG4pfWZ1bmN0aW9uIFZ0KHQpe3JldHVybiB3LndpbmRvdyh0KSYmKHQ9d2luZG93LmRvY3VtZW50LmJvZHkpLHt4OnQuc2Nyb2xsTGVmdCx5OnQuc2Nyb2xsVG9wfX12YXIgV3Q9e2lkOlwiYXV0by1zY3JvbGxcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZGVmYXVsdHMsbj10LmFjdGlvbnM7dC5hdXRvU2Nyb2xsPXF0LHF0Lm5vdz1mdW5jdGlvbigpe3JldHVybiB0Lm5vdygpfSxuLnBoYXNlbGVzc1R5cGVzLmF1dG9zY3JvbGw9ITAsZS5wZXJBY3Rpb24uYXV0b1Njcm9sbD1xdC5kZWZhdWx0c30sbGlzdGVuZXJzOntcImludGVyYWN0aW9uczpuZXdcIjpmdW5jdGlvbih0KXt0LmludGVyYWN0aW9uLmF1dG9TY3JvbGw9bnVsbH0sXCJpbnRlcmFjdGlvbnM6ZGVzdHJveVwiOmZ1bmN0aW9uKHQpe3QuaW50ZXJhY3Rpb24uYXV0b1Njcm9sbD1udWxsLHF0LnN0b3AoKSxxdC5pbnRlcmFjdGlvbiYmKHF0LmludGVyYWN0aW9uPW51bGwpfSxcImludGVyYWN0aW9uczpzdG9wXCI6cXQuc3RvcCxcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOmZ1bmN0aW9uKHQpe3JldHVybiBxdC5vbkludGVyYWN0aW9uTW92ZSh0KX19fSxHdD1XdDtmdW5jdGlvbiBOdCh0LGUpe3ZhciBuPSExO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBufHwoZy5jb25zb2xlLndhcm4oZSksbj0hMCksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIFV0KHQsZSl7cmV0dXJuIHQubmFtZT1lLm5hbWUsdC5heGlzPWUuYXhpcyx0LmVkZ2VzPWUuZWRnZXMsdH1mdW5jdGlvbiBIdCh0KXtyZXR1cm4gdy5ib29sKHQpPyh0aGlzLm9wdGlvbnMuc3R5bGVDdXJzb3I9dCx0aGlzKTpudWxsPT09dD8oZGVsZXRlIHRoaXMub3B0aW9ucy5zdHlsZUN1cnNvcix0aGlzKTp0aGlzLm9wdGlvbnMuc3R5bGVDdXJzb3J9ZnVuY3Rpb24gS3QodCl7cmV0dXJuIHcuZnVuYyh0KT8odGhpcy5vcHRpb25zLmFjdGlvbkNoZWNrZXI9dCx0aGlzKTpudWxsPT09dD8oZGVsZXRlIHRoaXMub3B0aW9ucy5hY3Rpb25DaGVja2VyLHRoaXMpOnRoaXMub3B0aW9ucy5hY3Rpb25DaGVja2VyfXZhciAkdD17aWQ6XCJhdXRvLXN0YXJ0L2ludGVyYWN0YWJsZU1ldGhvZHNcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXQuSW50ZXJhY3RhYmxlO2UucHJvdG90eXBlLmdldEFjdGlvbj1mdW5jdGlvbihlLG4scixpKXt2YXIgbz1mdW5jdGlvbih0LGUsbixyLGkpe3ZhciBvPXQuZ2V0UmVjdChyKSxhPWUuYnV0dG9uc3x8ezA6MSwxOjQsMzo4LDQ6MTZ9W2UuYnV0dG9uXSxzPXthY3Rpb246bnVsbCxpbnRlcmFjdGFibGU6dCxpbnRlcmFjdGlvbjpuLGVsZW1lbnQ6cixyZWN0Om8sYnV0dG9uczphfTtyZXR1cm4gaS5maXJlKFwiYXV0by1zdGFydDpjaGVja1wiLHMpLHMuYWN0aW9ufSh0aGlzLG4scixpLHQpO3JldHVybiB0aGlzLm9wdGlvbnMuYWN0aW9uQ2hlY2tlcj90aGlzLm9wdGlvbnMuYWN0aW9uQ2hlY2tlcihlLG4sbyx0aGlzLGkscik6b30sZS5wcm90b3R5cGUuaWdub3JlRnJvbT1OdCgoZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2JhY2tDb21wYXRPcHRpb24oXCJpZ25vcmVGcm9tXCIsdCl9KSxcIkludGVyYWN0YWJsZS5pZ25vcmVGcm9tKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIEludGVyYWN0YmxlLmRyYWdnYWJsZSh7aWdub3JlRnJvbTogbmV3VmFsdWV9KS5cIiksZS5wcm90b3R5cGUuYWxsb3dGcm9tPU50KChmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fYmFja0NvbXBhdE9wdGlvbihcImFsbG93RnJvbVwiLHQpfSksXCJJbnRlcmFjdGFibGUuYWxsb3dGcm9tKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIEludGVyYWN0YmxlLmRyYWdnYWJsZSh7YWxsb3dGcm9tOiBuZXdWYWx1ZX0pLlwiKSxlLnByb3RvdHlwZS5hY3Rpb25DaGVja2VyPUt0LGUucHJvdG90eXBlLnN0eWxlQ3Vyc29yPUh0fX07ZnVuY3Rpb24gSnQodCxlLG4scixpKXtyZXR1cm4gZS50ZXN0SWdub3JlQWxsb3coZS5vcHRpb25zW3QubmFtZV0sbixyKSYmZS5vcHRpb25zW3QubmFtZV0uZW5hYmxlZCYmZWUoZSxuLHQsaSk/dDpudWxsfWZ1bmN0aW9uIFF0KHQsZSxuLHIsaSxvLGEpe2Zvcih2YXIgcz0wLGM9ci5sZW5ndGg7czxjO3MrKyl7dmFyIGw9cltzXSx1PWlbc10scD1sLmdldEFjdGlvbihlLG4sdCx1KTtpZihwKXt2YXIgZj1KdChwLGwsdSxvLGEpO2lmKGYpcmV0dXJue2FjdGlvbjpmLGludGVyYWN0YWJsZTpsLGVsZW1lbnQ6dX19fXJldHVybnthY3Rpb246bnVsbCxpbnRlcmFjdGFibGU6bnVsbCxlbGVtZW50Om51bGx9fWZ1bmN0aW9uIFp0KHQsZSxuLHIsaSl7dmFyIG89W10sYT1bXSxzPXI7ZnVuY3Rpb24gYyh0KXtvLnB1c2godCksYS5wdXNoKHMpfWZvcig7dy5lbGVtZW50KHMpOyl7bz1bXSxhPVtdLGkuaW50ZXJhY3RhYmxlcy5mb3JFYWNoTWF0Y2gocyxjKTt2YXIgbD1RdCh0LGUsbixvLGEscixpKTtpZihsLmFjdGlvbiYmIWwuaW50ZXJhY3RhYmxlLm9wdGlvbnNbbC5hY3Rpb24ubmFtZV0ubWFudWFsU3RhcnQpcmV0dXJuIGw7cz1BKHMpfXJldHVybnthY3Rpb246bnVsbCxpbnRlcmFjdGFibGU6bnVsbCxlbGVtZW50Om51bGx9fWZ1bmN0aW9uIHRlKHQsZSxuKXt2YXIgcj1lLmFjdGlvbixpPWUuaW50ZXJhY3RhYmxlLG89ZS5lbGVtZW50O3I9cnx8e25hbWU6bnVsbH0sdC5pbnRlcmFjdGFibGU9aSx0LmVsZW1lbnQ9byxVdCh0LnByZXBhcmVkLHIpLHQucmVjdD1pJiZyLm5hbWU/aS5nZXRSZWN0KG8pOm51bGwsaWUodCxuKSxuLmZpcmUoXCJhdXRvU3RhcnQ6cHJlcGFyZWRcIix7aW50ZXJhY3Rpb246dH0pfWZ1bmN0aW9uIGVlKHQsZSxuLHIpe3ZhciBpPXQub3B0aW9ucyxvPWlbbi5uYW1lXS5tYXgsYT1pW24ubmFtZV0ubWF4UGVyRWxlbWVudCxzPXIuYXV0b1N0YXJ0Lm1heEludGVyYWN0aW9ucyxjPTAsbD0wLHU9MDtpZighKG8mJmEmJnMpKXJldHVybiExO2Zvcih2YXIgcD0wLGY9ci5pbnRlcmFjdGlvbnMubGlzdDtwPGYubGVuZ3RoO3ArKyl7dmFyIGQ9ZltwXSxoPWQucHJlcGFyZWQubmFtZTtpZihkLmludGVyYWN0aW5nKCkpe2lmKCsrYz49cylyZXR1cm4hMTtpZihkLmludGVyYWN0YWJsZT09PXQpe2lmKChsKz1oPT09bi5uYW1lPzE6MCk+PW8pcmV0dXJuITE7aWYoZC5lbGVtZW50PT09ZSYmKHUrKyxoPT09bi5uYW1lJiZ1Pj1hKSlyZXR1cm4hMX19fXJldHVybiBzPjB9ZnVuY3Rpb24gbmUodCxlKXtyZXR1cm4gdy5udW1iZXIodCk/KGUuYXV0b1N0YXJ0Lm1heEludGVyYWN0aW9ucz10LHRoaXMpOmUuYXV0b1N0YXJ0Lm1heEludGVyYWN0aW9uc31mdW5jdGlvbiByZSh0LGUsbil7dmFyIHI9bi5hdXRvU3RhcnQuY3Vyc29yRWxlbWVudDtyJiZyIT09dCYmKHIuc3R5bGUuY3Vyc29yPVwiXCIpLHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3Vyc29yPWUsdC5zdHlsZS5jdXJzb3I9ZSxuLmF1dG9TdGFydC5jdXJzb3JFbGVtZW50PWU/dDpudWxsfWZ1bmN0aW9uIGllKHQsZSl7dmFyIG49dC5pbnRlcmFjdGFibGUscj10LmVsZW1lbnQsaT10LnByZXBhcmVkO2lmKFwibW91c2VcIj09PXQucG9pbnRlclR5cGUmJm4mJm4ub3B0aW9ucy5zdHlsZUN1cnNvcil7dmFyIG89XCJcIjtpZihpLm5hbWUpe3ZhciBhPW4ub3B0aW9uc1tpLm5hbWVdLmN1cnNvckNoZWNrZXI7bz13LmZ1bmMoYSk/YShpLG4scix0Ll9pbnRlcmFjdGluZyk6ZS5hY3Rpb25zLm1hcFtpLm5hbWVdLmdldEN1cnNvcihpKX1yZSh0LmVsZW1lbnQsb3x8XCJcIixlKX1lbHNlIGUuYXV0b1N0YXJ0LmN1cnNvckVsZW1lbnQmJnJlKGUuYXV0b1N0YXJ0LmN1cnNvckVsZW1lbnQsXCJcIixlKX12YXIgb2U9e2lkOlwiYXV0by1zdGFydC9iYXNlXCIsYmVmb3JlOltcImFjdGlvbnNcIl0saW5zdGFsbDpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0U3RhdGljLG49dC5kZWZhdWx0czt0LnVzZVBsdWdpbigkdCksbi5iYXNlLmFjdGlvbkNoZWNrZXI9bnVsbCxuLmJhc2Uuc3R5bGVDdXJzb3I9ITAsVihuLnBlckFjdGlvbix7bWFudWFsU3RhcnQ6ITEsbWF4OjEvMCxtYXhQZXJFbGVtZW50OjEsYWxsb3dGcm9tOm51bGwsaWdub3JlRnJvbTpudWxsLG1vdXNlQnV0dG9uczoxfSksZS5tYXhJbnRlcmFjdGlvbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5lKGUsdCl9LHQuYXV0b1N0YXJ0PXttYXhJbnRlcmFjdGlvbnM6MS8wLHdpdGhpbkludGVyYWN0aW9uTGltaXQ6ZWUsY3Vyc29yRWxlbWVudDpudWxsfX0sbGlzdGVuZXJzOntcImludGVyYWN0aW9uczpkb3duXCI6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmludGVyYWN0aW9uLHI9dC5wb2ludGVyLGk9dC5ldmVudCxvPXQuZXZlbnRUYXJnZXQ7bi5pbnRlcmFjdGluZygpfHx0ZShuLFp0KG4scixpLG8sZSksZSl9LFwiaW50ZXJhY3Rpb25zOm1vdmVcIjpmdW5jdGlvbih0LGUpeyFmdW5jdGlvbih0LGUpe3ZhciBuPXQuaW50ZXJhY3Rpb24scj10LnBvaW50ZXIsaT10LmV2ZW50LG89dC5ldmVudFRhcmdldDtcIm1vdXNlXCIhPT1uLnBvaW50ZXJUeXBlfHxuLnBvaW50ZXJJc0Rvd258fG4uaW50ZXJhY3RpbmcoKXx8dGUobixadChuLHIsaSxvLGUpLGUpfSh0LGUpLGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5pbnRlcmFjdGlvbjtpZihuLnBvaW50ZXJJc0Rvd24mJiFuLmludGVyYWN0aW5nKCkmJm4ucG9pbnRlcldhc01vdmVkJiZuLnByZXBhcmVkLm5hbWUpe2UuZmlyZShcImF1dG9TdGFydDpiZWZvcmUtc3RhcnRcIix0KTt2YXIgcj1uLmludGVyYWN0YWJsZSxpPW4ucHJlcGFyZWQubmFtZTtpJiZyJiYoci5vcHRpb25zW2ldLm1hbnVhbFN0YXJ0fHwhZWUocixuLmVsZW1lbnQsbi5wcmVwYXJlZCxlKT9uLnN0b3AoKToobi5zdGFydChuLnByZXBhcmVkLHIsbi5lbGVtZW50KSxpZShuLGUpKSl9fSh0LGUpfSxcImludGVyYWN0aW9uczpzdG9wXCI6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmludGVyYWN0aW9uLHI9bi5pbnRlcmFjdGFibGU7ciYmci5vcHRpb25zLnN0eWxlQ3Vyc29yJiZyZShuLmVsZW1lbnQsXCJcIixlKX19LG1heEludGVyYWN0aW9uczpuZSx3aXRoaW5JbnRlcmFjdGlvbkxpbWl0OmVlLHZhbGlkYXRlQWN0aW9uOkp0fSxhZT1vZTt2YXIgc2U9e2lkOlwiYXV0by1zdGFydC9kcmFnQXhpc1wiLGxpc3RlbmVyczp7XCJhdXRvU3RhcnQ6YmVmb3JlLXN0YXJ0XCI6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmludGVyYWN0aW9uLHI9dC5ldmVudFRhcmdldCxpPXQuZHgsbz10LmR5O2lmKFwiZHJhZ1wiPT09bi5wcmVwYXJlZC5uYW1lKXt2YXIgYT1NYXRoLmFicyhpKSxzPU1hdGguYWJzKG8pLGM9bi5pbnRlcmFjdGFibGUub3B0aW9ucy5kcmFnLGw9Yy5zdGFydEF4aXMsdT1hPnM/XCJ4XCI6YTxzP1wieVwiOlwieHlcIjtpZihuLnByZXBhcmVkLmF4aXM9XCJzdGFydFwiPT09Yy5sb2NrQXhpcz91WzBdOmMubG9ja0F4aXMsXCJ4eVwiIT09dSYmXCJ4eVwiIT09bCYmbCE9PXUpe24ucHJlcGFyZWQubmFtZT1udWxsO2Zvcih2YXIgcD1yLGY9ZnVuY3Rpb24odCl7aWYodCE9PW4uaW50ZXJhY3RhYmxlKXt2YXIgaT1uLmludGVyYWN0YWJsZS5vcHRpb25zLmRyYWc7aWYoIWkubWFudWFsU3RhcnQmJnQudGVzdElnbm9yZUFsbG93KGkscCxyKSl7dmFyIG89dC5nZXRBY3Rpb24obi5kb3duUG9pbnRlcixuLmRvd25FdmVudCxuLHApO2lmKG8mJlwiZHJhZ1wiPT09by5uYW1lJiZmdW5jdGlvbih0LGUpe2lmKCFlKXJldHVybiExO3ZhciBuPWUub3B0aW9ucy5kcmFnLnN0YXJ0QXhpcztyZXR1cm5cInh5XCI9PT10fHxcInh5XCI9PT1ufHxuPT09dH0odSx0KSYmYWUudmFsaWRhdGVBY3Rpb24obyx0LHAscixlKSlyZXR1cm4gdH19fTt3LmVsZW1lbnQocCk7KXt2YXIgZD1lLmludGVyYWN0YWJsZXMuZm9yRWFjaE1hdGNoKHAsZik7aWYoZCl7bi5wcmVwYXJlZC5uYW1lPVwiZHJhZ1wiLG4uaW50ZXJhY3RhYmxlPWQsbi5lbGVtZW50PXA7YnJlYWt9cD1BKHApfX19fX19O2Z1bmN0aW9uIGNlKHQpe3ZhciBlPXQucHJlcGFyZWQmJnQucHJlcGFyZWQubmFtZTtpZighZSlyZXR1cm4gbnVsbDt2YXIgbj10LmludGVyYWN0YWJsZS5vcHRpb25zO3JldHVybiBuW2VdLmhvbGR8fG5bZV0uZGVsYXl9dmFyIGxlPXtpZDpcImF1dG8tc3RhcnQvaG9sZFwiLGluc3RhbGw6ZnVuY3Rpb24odCl7dmFyIGU9dC5kZWZhdWx0czt0LnVzZVBsdWdpbihhZSksZS5wZXJBY3Rpb24uaG9sZD0wLGUucGVyQWN0aW9uLmRlbGF5PTB9LGxpc3RlbmVyczp7XCJpbnRlcmFjdGlvbnM6bmV3XCI6ZnVuY3Rpb24odCl7dC5pbnRlcmFjdGlvbi5hdXRvU3RhcnRIb2xkVGltZXI9bnVsbH0sXCJhdXRvU3RhcnQ6cHJlcGFyZWRcIjpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uLG49Y2UoZSk7bj4wJiYoZS5hdXRvU3RhcnRIb2xkVGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLnN0YXJ0KGUucHJlcGFyZWQsZS5pbnRlcmFjdGFibGUsZS5lbGVtZW50KX0pLG4pKX0sXCJpbnRlcmFjdGlvbnM6bW92ZVwiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LmR1cGxpY2F0ZTtlLmF1dG9TdGFydEhvbGRUaW1lciYmZS5wb2ludGVyV2FzTW92ZWQmJiFuJiYoY2xlYXJUaW1lb3V0KGUuYXV0b1N0YXJ0SG9sZFRpbWVyKSxlLmF1dG9TdGFydEhvbGRUaW1lcj1udWxsKX0sXCJhdXRvU3RhcnQ6YmVmb3JlLXN0YXJ0XCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbjtjZShlKT4wJiYoZS5wcmVwYXJlZC5uYW1lPW51bGwpfX0sZ2V0SG9sZER1cmF0aW9uOmNlfSx1ZT1sZSxwZT17aWQ6XCJhdXRvLXN0YXJ0XCIsaW5zdGFsbDpmdW5jdGlvbih0KXt0LnVzZVBsdWdpbihhZSksdC51c2VQbHVnaW4odWUpLHQudXNlUGx1Z2luKHNlKX19LGZlPWZ1bmN0aW9uKHQpe3JldHVybi9eKGFsd2F5c3xuZXZlcnxhdXRvKSQvLnRlc3QodCk/KHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdD10LHRoaXMpOncuYm9vbCh0KT8odGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0PXQ/XCJhbHdheXNcIjpcIm5ldmVyXCIsdGhpcyk6dGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0fTtmdW5jdGlvbiBkZSh0KXt2YXIgZT10LmludGVyYWN0aW9uLG49dC5ldmVudDtlLmludGVyYWN0YWJsZSYmZS5pbnRlcmFjdGFibGUuY2hlY2tBbmRQcmV2ZW50RGVmYXVsdChuKX12YXIgaGU9e2lkOlwiY29yZS9pbnRlcmFjdGFibGVQcmV2ZW50RGVmYXVsdFwiLGluc3RhbGw6ZnVuY3Rpb24odCl7dmFyIGU9dC5JbnRlcmFjdGFibGU7ZS5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZmUsZS5wcm90b3R5cGUuY2hlY2tBbmRQcmV2ZW50RGVmYXVsdD1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZhciByPXQub3B0aW9ucy5wcmV2ZW50RGVmYXVsdDtpZihcIm5ldmVyXCIhPT1yKWlmKFwiYWx3YXlzXCIhPT1yKXtpZihlLmV2ZW50cy5zdXBwb3J0c1Bhc3NpdmUmJi9edG91Y2goc3RhcnR8bW92ZSkkLy50ZXN0KG4udHlwZSkpe3ZhciBpPXkobi50YXJnZXQpLmRvY3VtZW50LG89ZS5nZXREb2NPcHRpb25zKGkpO2lmKCFvfHwhby5ldmVudHN8fCExIT09by5ldmVudHMucGFzc2l2ZSlyZXR1cm59L14obW91c2V8cG9pbnRlcnx0b3VjaCkqKGRvd258c3RhcnQpL2kudGVzdChuLnR5cGUpfHx3LmVsZW1lbnQobi50YXJnZXQpJiZSKG4udGFyZ2V0LFwiaW5wdXQsc2VsZWN0LHRleHRhcmVhLFtjb250ZW50ZWRpdGFibGU9dHJ1ZV0sW2NvbnRlbnRlZGl0YWJsZT10cnVlXSAqXCIpfHxuLnByZXZlbnREZWZhdWx0KCl9ZWxzZSBuLnByZXZlbnREZWZhdWx0KCl9KHRoaXMsdCxlKX0sdC5pbnRlcmFjdGlvbnMuZG9jRXZlbnRzLnB1c2goe3R5cGU6XCJkcmFnc3RhcnRcIixsaXN0ZW5lcjpmdW5jdGlvbihlKXtmb3IodmFyIG49MCxyPXQuaW50ZXJhY3Rpb25zLmxpc3Q7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07aWYoaS5lbGVtZW50JiYoaS5lbGVtZW50PT09ZS50YXJnZXR8fE0oaS5lbGVtZW50LGUudGFyZ2V0KSkpcmV0dXJuIHZvaWQgaS5pbnRlcmFjdGFibGUuY2hlY2tBbmRQcmV2ZW50RGVmYXVsdChlKX19fSl9LGxpc3RlbmVyczpbXCJkb3duXCIsXCJtb3ZlXCIsXCJ1cFwiLFwiY2FuY2VsXCJdLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFtcImludGVyYWN0aW9uczpcIi5jb25jYXQoZSldPWRlLHR9KSx7fSl9O2Z1bmN0aW9uIHZlKHQsZSl7aWYoZS5waGFzZWxlc3NUeXBlc1t0XSlyZXR1cm4hMDtmb3IodmFyIG4gaW4gZS5tYXApaWYoMD09PXQuaW5kZXhPZihuKSYmdC5zdWJzdHIobi5sZW5ndGgpaW4gZS5waGFzZXMpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZ2UodCl7dmFyIGU9e307Zm9yKHZhciBuIGluIHQpe3ZhciByPXRbbl07dy5wbGFpbk9iamVjdChyKT9lW25dPWdlKHIpOncuYXJyYXkocik/ZVtuXT1tdChyKTplW25dPXJ9cmV0dXJuIGV9dmFyIG1lPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtyKHRoaXMsdCksdGhpcy5zdGF0ZXM9W10sdGhpcy5zdGFydE9mZnNldD17bGVmdDowLHJpZ2h0OjAsdG9wOjAsYm90dG9tOjB9LHRoaXMuc3RhcnREZWx0YT12b2lkIDAsdGhpcy5yZXN1bHQ9dm9pZCAwLHRoaXMuZW5kUmVzdWx0PXZvaWQgMCx0aGlzLnN0YXJ0RWRnZXM9dm9pZCAwLHRoaXMuZWRnZXM9dm9pZCAwLHRoaXMuaW50ZXJhY3Rpb249dm9pZCAwLHRoaXMuaW50ZXJhY3Rpb249ZSx0aGlzLnJlc3VsdD15ZSgpLHRoaXMuZWRnZXM9e2xlZnQ6ITEscmlnaHQ6ITEsdG9wOiExLGJvdHRvbTohMX19cmV0dXJuIG8odCxbe2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbixyLGk9dC5waGFzZSxvPXRoaXMuaW50ZXJhY3Rpb24sYT1mdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0YWJsZS5vcHRpb25zW3QucHJlcGFyZWQubmFtZV0sbj1lLm1vZGlmaWVycztpZihuJiZuLmxlbmd0aClyZXR1cm4gbjtyZXR1cm5bXCJzbmFwXCIsXCJzbmFwU2l6ZVwiLFwic25hcEVkZ2VzXCIsXCJyZXN0cmljdFwiLFwicmVzdHJpY3RFZGdlc1wiLFwicmVzdHJpY3RTaXplXCJdLm1hcCgoZnVuY3Rpb24odCl7dmFyIG49ZVt0XTtyZXR1cm4gbiYmbi5lbmFibGVkJiZ7b3B0aW9uczpuLG1ldGhvZHM6bi5fbWV0aG9kc319KSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4hIXR9KSl9KG8pO3RoaXMucHJlcGFyZVN0YXRlcyhhKSx0aGlzLnN0YXJ0RWRnZXM9Vih7fSxvLmVkZ2VzKSx0aGlzLmVkZ2VzPVYoe30sdGhpcy5zdGFydEVkZ2VzKSx0aGlzLnN0YXJ0T2Zmc2V0PShuPW8ucmVjdCxyPWUsbj97bGVmdDpyLngtbi5sZWZ0LHRvcDpyLnktbi50b3AscmlnaHQ6bi5yaWdodC1yLngsYm90dG9tOm4uYm90dG9tLXIueX06e2xlZnQ6MCx0b3A6MCxyaWdodDowLGJvdHRvbTowfSksdGhpcy5zdGFydERlbHRhPXt4OjAseTowfTt2YXIgcz10aGlzLmZpbGxBcmcoe3BoYXNlOmkscGFnZUNvb3JkczplLHByZUVuZDohMX0pO3JldHVybiB0aGlzLnJlc3VsdD15ZSgpLHRoaXMuc3RhcnRBbGwocyksdGhpcy5yZXN1bHQ9dGhpcy5zZXRBbGwocyl9fSx7a2V5OlwiZmlsbEFyZ1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuaW50ZXJhY3Rpb247cmV0dXJuIHQuaW50ZXJhY3Rpb249ZSx0LmludGVyYWN0YWJsZT1lLmludGVyYWN0YWJsZSx0LmVsZW1lbnQ9ZS5lbGVtZW50LHQucmVjdHx8KHQucmVjdD1lLnJlY3QpLHQuZWRnZXN8fCh0LmVkZ2VzPXRoaXMuc3RhcnRFZGdlcyksdC5zdGFydE9mZnNldD10aGlzLnN0YXJ0T2Zmc2V0LHR9fSx7a2V5Olwic3RhcnRBbGxcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPXRoaXMuc3RhdGVzO2U8bi5sZW5ndGg7ZSsrKXt2YXIgcj1uW2VdO3IubWV0aG9kcy5zdGFydCYmKHQuc3RhdGU9cixyLm1ldGhvZHMuc3RhcnQodCkpfX19LHtrZXk6XCJzZXRBbGxcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LnBoYXNlLG49dC5wcmVFbmQscj10LnNraXBNb2RpZmllcnMsaT10LnJlY3Qsbz10LmVkZ2VzO3QuY29vcmRzPVYoe30sdC5wYWdlQ29vcmRzKSx0LnJlY3Q9Vih7fSxpKSx0LmVkZ2VzPVYoe30sbyk7Zm9yKHZhciBhPXI/dGhpcy5zdGF0ZXMuc2xpY2Uocik6dGhpcy5zdGF0ZXMscz15ZSh0LmNvb3Jkcyx0LnJlY3QpLGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGwsdT1hW2NdLHA9dS5vcHRpb25zLGY9Vih7fSx0LmNvb3JkcyksZD1udWxsO251bGwhPShsPXUubWV0aG9kcykmJmwuc2V0JiZ0aGlzLnNob3VsZERvKHAsbixlKSYmKHQuc3RhdGU9dSxkPXUubWV0aG9kcy5zZXQodCksSCh0LmVkZ2VzLHQucmVjdCx7eDp0LmNvb3Jkcy54LWYueCx5OnQuY29vcmRzLnktZi55fSkpLHMuZXZlbnRQcm9wcy5wdXNoKGQpfVYodGhpcy5lZGdlcyx0LmVkZ2VzKSxzLmRlbHRhLng9dC5jb29yZHMueC10LnBhZ2VDb29yZHMueCxzLmRlbHRhLnk9dC5jb29yZHMueS10LnBhZ2VDb29yZHMueSxzLnJlY3REZWx0YS5sZWZ0PXQucmVjdC5sZWZ0LWkubGVmdCxzLnJlY3REZWx0YS5yaWdodD10LnJlY3QucmlnaHQtaS5yaWdodCxzLnJlY3REZWx0YS50b3A9dC5yZWN0LnRvcC1pLnRvcCxzLnJlY3REZWx0YS5ib3R0b209dC5yZWN0LmJvdHRvbS1pLmJvdHRvbTt2YXIgaD10aGlzLnJlc3VsdC5jb29yZHMsdj10aGlzLnJlc3VsdC5yZWN0O2lmKGgmJnYpe3ZhciBnPXMucmVjdC5sZWZ0IT09di5sZWZ0fHxzLnJlY3QucmlnaHQhPT12LnJpZ2h0fHxzLnJlY3QudG9wIT09di50b3B8fHMucmVjdC5ib3R0b20hPT12LmJvdHRvbTtzLmNoYW5nZWQ9Z3x8aC54IT09cy5jb29yZHMueHx8aC55IT09cy5jb29yZHMueX1yZXR1cm4gc319LHtrZXk6XCJhcHBseVRvSW50ZXJhY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmludGVyYWN0aW9uLG49dC5waGFzZSxyPWUuY29vcmRzLmN1cixpPWUuY29vcmRzLnN0YXJ0LG89dGhpcy5yZXN1bHQsYT10aGlzLnN0YXJ0RGVsdGEscz1vLmRlbHRhO1wic3RhcnRcIj09PW4mJlYodGhpcy5zdGFydERlbHRhLG8uZGVsdGEpO2Zvcih2YXIgYz0wLGw9W1tpLGFdLFtyLHNdXTtjPGwubGVuZ3RoO2MrKyl7dmFyIHU9bFtjXSxwPXVbMF0sZj11WzFdO3AucGFnZS54Kz1mLngscC5wYWdlLnkrPWYueSxwLmNsaWVudC54Kz1mLngscC5jbGllbnQueSs9Zi55fXZhciBkPXRoaXMucmVzdWx0LnJlY3REZWx0YSxoPXQucmVjdHx8ZS5yZWN0O2gubGVmdCs9ZC5sZWZ0LGgucmlnaHQrPWQucmlnaHQsaC50b3ArPWQudG9wLGguYm90dG9tKz1kLmJvdHRvbSxoLndpZHRoPWgucmlnaHQtaC5sZWZ0LGguaGVpZ2h0PWguYm90dG9tLWgudG9wfX0se2tleTpcInNldEFuZEFwcGx5XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnRlcmFjdGlvbixuPXQucGhhc2Uscj10LnByZUVuZCxpPXQuc2tpcE1vZGlmaWVycyxvPXRoaXMuc2V0QWxsKHRoaXMuZmlsbEFyZyh7cHJlRW5kOnIscGhhc2U6bixwYWdlQ29vcmRzOnQubW9kaWZpZWRDb29yZHN8fGUuY29vcmRzLmN1ci5wYWdlfSkpO2lmKHRoaXMucmVzdWx0PW8sIW8uY2hhbmdlZCYmKCFpfHxpPHRoaXMuc3RhdGVzLmxlbmd0aCkmJmUuaW50ZXJhY3RpbmcoKSlyZXR1cm4hMTtpZih0Lm1vZGlmaWVkQ29vcmRzKXt2YXIgYT1lLmNvb3Jkcy5jdXIucGFnZSxzPXt4OnQubW9kaWZpZWRDb29yZHMueC1hLngseTp0Lm1vZGlmaWVkQ29vcmRzLnktYS55fTtvLmNvb3Jkcy54Kz1zLngsby5jb29yZHMueSs9cy55LG8uZGVsdGEueCs9cy54LG8uZGVsdGEueSs9cy55fXRoaXMuYXBwbHlUb0ludGVyYWN0aW9uKHQpfX0se2tleTpcImJlZm9yZUVuZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LmV2ZW50LHI9dGhpcy5zdGF0ZXM7aWYociYmci5sZW5ndGgpe2Zvcih2YXIgaT0hMSxvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBhPXJbb107dC5zdGF0ZT1hO3ZhciBzPWEub3B0aW9ucyxjPWEubWV0aG9kcyxsPWMuYmVmb3JlRW5kJiZjLmJlZm9yZUVuZCh0KTtpZihsKXJldHVybiB0aGlzLmVuZFJlc3VsdD1sLCExO2k9aXx8IWkmJnRoaXMuc2hvdWxkRG8ocywhMCx0LnBoYXNlLCEwKX1pJiZlLm1vdmUoe2V2ZW50Om4scHJlRW5kOiEwfSl9fX0se2tleTpcInN0b3BcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uO2lmKHRoaXMuc3RhdGVzJiZ0aGlzLnN0YXRlcy5sZW5ndGgpe3ZhciBuPVYoe3N0YXRlczp0aGlzLnN0YXRlcyxpbnRlcmFjdGFibGU6ZS5pbnRlcmFjdGFibGUsZWxlbWVudDplLmVsZW1lbnQscmVjdDpudWxsfSx0KTt0aGlzLmZpbGxBcmcobik7Zm9yKHZhciByPTAsaT10aGlzLnN0YXRlcztyPGkubGVuZ3RoO3IrKyl7dmFyIG89aVtyXTtuLnN0YXRlPW8sby5tZXRob2RzLnN0b3AmJm8ubWV0aG9kcy5zdG9wKG4pfXRoaXMuc3RhdGVzPW51bGwsdGhpcy5lbmRSZXN1bHQ9bnVsbH19fSx7a2V5OlwicHJlcGFyZVN0YXRlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuc3RhdGVzPVtdO2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdLHI9bi5vcHRpb25zLGk9bi5tZXRob2RzLG89bi5uYW1lO3RoaXMuc3RhdGVzLnB1c2goe29wdGlvbnM6cixtZXRob2RzOmksaW5kZXg6ZSxuYW1lOm99KX1yZXR1cm4gdGhpcy5zdGF0ZXN9fSx7a2V5OlwicmVzdG9yZUludGVyYWN0aW9uQ29vcmRzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbixuPWUuY29vcmRzLHI9ZS5yZWN0LGk9ZS5tb2RpZmljYXRpb247aWYoaS5yZXN1bHQpe2Zvcih2YXIgbz1pLnN0YXJ0RGVsdGEsYT1pLnJlc3VsdCxzPWEuZGVsdGEsYz1hLnJlY3REZWx0YSxsPTAsdT1bW24uc3RhcnQsb10sW24uY3VyLHNdXTtsPHUubGVuZ3RoO2wrKyl7dmFyIHA9dVtsXSxmPXBbMF0sZD1wWzFdO2YucGFnZS54LT1kLngsZi5wYWdlLnktPWQueSxmLmNsaWVudC54LT1kLngsZi5jbGllbnQueS09ZC55fXIubGVmdC09Yy5sZWZ0LHIucmlnaHQtPWMucmlnaHQsci50b3AtPWMudG9wLHIuYm90dG9tLT1jLmJvdHRvbX19fSx7a2V5Olwic2hvdWxkRG9cIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyKXtyZXR1cm4hKCF0fHwhMT09PXQuZW5hYmxlZHx8ciYmIXQuZW5kT25seXx8dC5lbmRPbmx5JiYhZXx8XCJzdGFydFwiPT09biYmIXQuc2V0U3RhcnQpfX0se2tleTpcImNvcHlGcm9tXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5zdGFydE9mZnNldD10LnN0YXJ0T2Zmc2V0LHRoaXMuc3RhcnREZWx0YT10LnN0YXJ0RGVsdGEsdGhpcy5zdGFydEVkZ2VzPXQuc3RhcnRFZGdlcyx0aGlzLmVkZ2VzPXQuZWRnZXMsdGhpcy5zdGF0ZXM9dC5zdGF0ZXMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZ2UodCl9KSksdGhpcy5yZXN1bHQ9eWUoVih7fSx0LnJlc3VsdC5jb29yZHMpLFYoe30sdC5yZXN1bHQucmVjdCkpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzKXRoaXNbdF09bnVsbH19XSksdH0oKTtmdW5jdGlvbiB5ZSh0LGUpe3JldHVybntyZWN0OmUsY29vcmRzOnQsZGVsdGE6e3g6MCx5OjB9LHJlY3REZWx0YTp7bGVmdDowLHJpZ2h0OjAsdG9wOjAsYm90dG9tOjB9LGV2ZW50UHJvcHM6W10sY2hhbmdlZDohMH19ZnVuY3Rpb24gYmUodCxlKXt2YXIgbj10LmRlZmF1bHRzLHI9e3N0YXJ0OnQuc3RhcnQsc2V0OnQuc2V0LGJlZm9yZUVuZDp0LmJlZm9yZUVuZCxzdG9wOnQuc3RvcH0saT1mdW5jdGlvbih0KXt2YXIgaT10fHx7fTtmb3IodmFyIG8gaW4gaS5lbmFibGVkPSExIT09aS5lbmFibGVkLG4pbyBpbiBpfHwoaVtvXT1uW29dKTt2YXIgYT17b3B0aW9uczppLG1ldGhvZHM6cixuYW1lOmUsZW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGkuZW5hYmxlZD0hMCxhfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGkuZW5hYmxlZD0hMSxhfX07cmV0dXJuIGF9O3JldHVybiBlJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmKGkuX2RlZmF1bHRzPW4saS5fbWV0aG9kcz1yKSxpfWZ1bmN0aW9uIHhlKHQpe3ZhciBlPXQuaUV2ZW50LG49dC5pbnRlcmFjdGlvbi5tb2RpZmljYXRpb24ucmVzdWx0O24mJihlLm1vZGlmaWVycz1uLmV2ZW50UHJvcHMpfXZhciB3ZT17aWQ6XCJtb2RpZmllcnMvYmFzZVwiLGJlZm9yZTpbXCJhY3Rpb25zXCJdLGluc3RhbGw6ZnVuY3Rpb24odCl7dC5kZWZhdWx0cy5wZXJBY3Rpb24ubW9kaWZpZXJzPVtdfSxsaXN0ZW5lcnM6e1wiaW50ZXJhY3Rpb25zOm5ld1wiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb247ZS5tb2RpZmljYXRpb249bmV3IG1lKGUpfSxcImludGVyYWN0aW9uczpiZWZvcmUtYWN0aW9uLXN0YXJ0XCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbixuPXQuaW50ZXJhY3Rpb24ubW9kaWZpY2F0aW9uO24uc3RhcnQodCxlLmNvb3Jkcy5zdGFydC5wYWdlKSxlLmVkZ2VzPW4uZWRnZXMsbi5hcHBseVRvSW50ZXJhY3Rpb24odCl9LFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tbW92ZVwiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj1lLm1vZGlmaWNhdGlvbixyPW4uc2V0QW5kQXBwbHkodCk7cmV0dXJuIGUuZWRnZXM9bi5lZGdlcyxyfSxcImludGVyYWN0aW9uczpiZWZvcmUtYWN0aW9uLWVuZFwiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj1lLm1vZGlmaWNhdGlvbixyPW4uYmVmb3JlRW5kKHQpO3JldHVybiBlLmVkZ2VzPW4uc3RhcnRFZGdlcyxyfSxcImludGVyYWN0aW9uczphY3Rpb24tc3RhcnRcIjp4ZSxcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOnhlLFwiaW50ZXJhY3Rpb25zOmFjdGlvbi1lbmRcIjp4ZSxcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tc3RhcnRcIjpmdW5jdGlvbih0KXtyZXR1cm4gdC5pbnRlcmFjdGlvbi5tb2RpZmljYXRpb24ucmVzdG9yZUludGVyYWN0aW9uQ29vcmRzKHQpfSxcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tbW92ZVwiOmZ1bmN0aW9uKHQpe3JldHVybiB0LmludGVyYWN0aW9uLm1vZGlmaWNhdGlvbi5yZXN0b3JlSW50ZXJhY3Rpb25Db29yZHModCl9LFwiaW50ZXJhY3Rpb25zOnN0b3BcIjpmdW5jdGlvbih0KXtyZXR1cm4gdC5pbnRlcmFjdGlvbi5tb2RpZmljYXRpb24uc3RvcCh0KX19fSxFZT13ZSxUZT17YmFzZTp7cHJldmVudERlZmF1bHQ6XCJhdXRvXCIsZGVsdGFTb3VyY2U6XCJwYWdlXCJ9LHBlckFjdGlvbjp7ZW5hYmxlZDohMSxvcmlnaW46e3g6MCx5OjB9fSxhY3Rpb25zOnt9fSxTZT1mdW5jdGlvbih0KXtzKG4sdCk7dmFyIGU9cChuKTtmdW5jdGlvbiBuKHQsaSxvLGEscyxjLGwpe3ZhciBwO3IodGhpcyxuKSwocD1lLmNhbGwodGhpcyx0KSkucmVsYXRlZFRhcmdldD1udWxsLHAuc2NyZWVuWD12b2lkIDAscC5zY3JlZW5ZPXZvaWQgMCxwLmJ1dHRvbj12b2lkIDAscC5idXR0b25zPXZvaWQgMCxwLmN0cmxLZXk9dm9pZCAwLHAuc2hpZnRLZXk9dm9pZCAwLHAuYWx0S2V5PXZvaWQgMCxwLm1ldGFLZXk9dm9pZCAwLHAucGFnZT12b2lkIDAscC5jbGllbnQ9dm9pZCAwLHAuZGVsdGE9dm9pZCAwLHAucmVjdD12b2lkIDAscC54MD12b2lkIDAscC55MD12b2lkIDAscC50MD12b2lkIDAscC5kdD12b2lkIDAscC5kdXJhdGlvbj12b2lkIDAscC5jbGllbnRYMD12b2lkIDAscC5jbGllbnRZMD12b2lkIDAscC52ZWxvY2l0eT12b2lkIDAscC5zcGVlZD12b2lkIDAscC5zd2lwZT12b2lkIDAscC5heGVzPXZvaWQgMCxwLnByZUVuZD12b2lkIDAscz1zfHx0LmVsZW1lbnQ7dmFyIGY9dC5pbnRlcmFjdGFibGUsZD0oZiYmZi5vcHRpb25zfHxUZSkuZGVsdGFTb3VyY2UsaD1LKGYscyxvKSx2PVwic3RhcnRcIj09PWEsZz1cImVuZFwiPT09YSxtPXY/dShwKTp0LnByZXZFdmVudCx5PXY/dC5jb29yZHMuc3RhcnQ6Zz97cGFnZTptLnBhZ2UsY2xpZW50Om0uY2xpZW50LHRpbWVTdGFtcDp0LmNvb3Jkcy5jdXIudGltZVN0YW1wfTp0LmNvb3Jkcy5jdXI7cmV0dXJuIHAucGFnZT1WKHt9LHkucGFnZSkscC5jbGllbnQ9Vih7fSx5LmNsaWVudCkscC5yZWN0PVYoe30sdC5yZWN0KSxwLnRpbWVTdGFtcD15LnRpbWVTdGFtcCxnfHwocC5wYWdlLngtPWgueCxwLnBhZ2UueS09aC55LHAuY2xpZW50LngtPWgueCxwLmNsaWVudC55LT1oLnkpLHAuY3RybEtleT1pLmN0cmxLZXkscC5hbHRLZXk9aS5hbHRLZXkscC5zaGlmdEtleT1pLnNoaWZ0S2V5LHAubWV0YUtleT1pLm1ldGFLZXkscC5idXR0b249aS5idXR0b24scC5idXR0b25zPWkuYnV0dG9ucyxwLnRhcmdldD1zLHAuY3VycmVudFRhcmdldD1zLHAucHJlRW5kPWMscC50eXBlPWx8fG8rKGF8fFwiXCIpLHAuaW50ZXJhY3RhYmxlPWYscC50MD12P3QucG9pbnRlcnNbdC5wb2ludGVycy5sZW5ndGgtMV0uZG93blRpbWU6bS50MCxwLngwPXQuY29vcmRzLnN0YXJ0LnBhZ2UueC1oLngscC55MD10LmNvb3Jkcy5zdGFydC5wYWdlLnktaC55LHAuY2xpZW50WDA9dC5jb29yZHMuc3RhcnQuY2xpZW50LngtaC54LHAuY2xpZW50WTA9dC5jb29yZHMuc3RhcnQuY2xpZW50LnktaC55LHAuZGVsdGE9dnx8Zz97eDowLHk6MH06e3g6cFtkXS54LW1bZF0ueCx5OnBbZF0ueS1tW2RdLnl9LHAuZHQ9dC5jb29yZHMuZGVsdGEudGltZVN0YW1wLHAuZHVyYXRpb249cC50aW1lU3RhbXAtcC50MCxwLnZlbG9jaXR5PVYoe30sdC5jb29yZHMudmVsb2NpdHlbZF0pLHAuc3BlZWQ9UShwLnZlbG9jaXR5LngscC52ZWxvY2l0eS55KSxwLnN3aXBlPWd8fFwiaW5lcnRpYXN0YXJ0XCI9PT1hP3AuZ2V0U3dpcGUoKTpudWxsLHB9cmV0dXJuIG8obixbe2tleTpcImdldFN3aXBlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9pbnRlcmFjdGlvbjtpZih0LnByZXZFdmVudC5zcGVlZDw2MDB8fHRoaXMudGltZVN0YW1wLXQucHJldkV2ZW50LnRpbWVTdGFtcD4xNTApcmV0dXJuIG51bGw7dmFyIGU9MTgwKk1hdGguYXRhbjIodC5wcmV2RXZlbnQudmVsb2NpdHlZLHQucHJldkV2ZW50LnZlbG9jaXR5WCkvTWF0aC5QSTtlPDAmJihlKz0zNjApO3ZhciBuPTExMi41PD1lJiZlPDI0Ny41LHI9MjAyLjU8PWUmJmU8MzM3LjU7cmV0dXJue3VwOnIsZG93bjohciYmMjIuNTw9ZSYmZTwxNTcuNSxsZWZ0Om4scmlnaHQ6IW4mJigyOTIuNTw9ZXx8ZTw2Ny41KSxhbmdsZTplLHNwZWVkOnQucHJldkV2ZW50LnNwZWVkLHZlbG9jaXR5Ont4OnQucHJldkV2ZW50LnZlbG9jaXR5WCx5OnQucHJldkV2ZW50LnZlbG9jaXR5WX19fX0se2tleTpcInByZXZlbnREZWZhdWx0XCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5Olwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD10aGlzLnByb3BhZ2F0aW9uU3RvcHBlZD0hMH19LHtrZXk6XCJzdG9wUHJvcGFnYXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucHJvcGFnYXRpb25TdG9wcGVkPSEwfX1dKSxufSh2dCk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoU2UucHJvdG90eXBlLHtwYWdlWDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFnZS54fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5wYWdlLng9dH19LHBhZ2VZOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYWdlLnl9LHNldDpmdW5jdGlvbih0KXt0aGlzLnBhZ2UueT10fX0sY2xpZW50WDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xpZW50Lnh9LHNldDpmdW5jdGlvbih0KXt0aGlzLmNsaWVudC54PXR9fSxjbGllbnRZOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGllbnQueX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuY2xpZW50Lnk9dH19LGR4OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZWx0YS54fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5kZWx0YS54PXR9fSxkeTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGVsdGEueX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuZGVsdGEueT10fX0sdmVsb2NpdHlYOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52ZWxvY2l0eS54fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy52ZWxvY2l0eS54PXR9fSx2ZWxvY2l0eVk6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZlbG9jaXR5Lnl9LHNldDpmdW5jdGlvbih0KXt0aGlzLnZlbG9jaXR5Lnk9dH19fSk7dmFyIF9lPW8oKGZ1bmN0aW9uIHQoZSxuLGksbyxhKXtyKHRoaXMsdCksdGhpcy5pZD12b2lkIDAsdGhpcy5wb2ludGVyPXZvaWQgMCx0aGlzLmV2ZW50PXZvaWQgMCx0aGlzLmRvd25UaW1lPXZvaWQgMCx0aGlzLmRvd25UYXJnZXQ9dm9pZCAwLHRoaXMuaWQ9ZSx0aGlzLnBvaW50ZXI9bix0aGlzLmV2ZW50PWksdGhpcy5kb3duVGltZT1vLHRoaXMuZG93blRhcmdldD1hfSkpLFBlPWZ1bmN0aW9uKHQpe3JldHVybiB0LmludGVyYWN0YWJsZT1cIlwiLHQuZWxlbWVudD1cIlwiLHQucHJlcGFyZWQ9XCJcIix0LnBvaW50ZXJJc0Rvd249XCJcIix0LnBvaW50ZXJXYXNNb3ZlZD1cIlwiLHQuX3Byb3h5PVwiXCIsdH0oe30pLE9lPWZ1bmN0aW9uKHQpe3JldHVybiB0LnN0YXJ0PVwiXCIsdC5tb3ZlPVwiXCIsdC5lbmQ9XCJcIix0LnN0b3A9XCJcIix0LmludGVyYWN0aW5nPVwiXCIsdH0oe30pLGtlPTAsRGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciBuPXRoaXMsaT1lLnBvaW50ZXJUeXBlLG89ZS5zY29wZUZpcmU7cih0aGlzLHQpLHRoaXMuaW50ZXJhY3RhYmxlPW51bGwsdGhpcy5lbGVtZW50PW51bGwsdGhpcy5yZWN0PW51bGwsdGhpcy5fcmVjdHM9dm9pZCAwLHRoaXMuZWRnZXM9bnVsbCx0aGlzLl9zY29wZUZpcmU9dm9pZCAwLHRoaXMucHJlcGFyZWQ9e25hbWU6bnVsbCxheGlzOm51bGwsZWRnZXM6bnVsbH0sdGhpcy5wb2ludGVyVHlwZT12b2lkIDAsdGhpcy5wb2ludGVycz1bXSx0aGlzLmRvd25FdmVudD1udWxsLHRoaXMuZG93blBvaW50ZXI9e30sdGhpcy5fbGF0ZXN0UG9pbnRlcj17cG9pbnRlcjpudWxsLGV2ZW50Om51bGwsZXZlbnRUYXJnZXQ6bnVsbH0sdGhpcy5wcmV2RXZlbnQ9bnVsbCx0aGlzLnBvaW50ZXJJc0Rvd249ITEsdGhpcy5wb2ludGVyV2FzTW92ZWQ9ITEsdGhpcy5faW50ZXJhY3Rpbmc9ITEsdGhpcy5fZW5kaW5nPSExLHRoaXMuX3N0b3BwZWQ9ITAsdGhpcy5fcHJveHk9dm9pZCAwLHRoaXMuc2ltdWxhdGlvbj1udWxsLHRoaXMuZG9Nb3ZlPU50KChmdW5jdGlvbih0KXt0aGlzLm1vdmUodCl9KSxcIlRoZSBpbnRlcmFjdGlvbi5kb01vdmUoKSBtZXRob2QgaGFzIGJlZW4gcmVuYW1lZCB0byBpbnRlcmFjdGlvbi5tb3ZlKClcIiksdGhpcy5jb29yZHM9e3N0YXJ0OntwYWdlOnt4OjAseTowfSxjbGllbnQ6e3g6MCx5OjB9LHRpbWVTdGFtcDowfSxwcmV2OntwYWdlOnt4OjAseTowfSxjbGllbnQ6e3g6MCx5OjB9LHRpbWVTdGFtcDowfSxjdXI6e3BhZ2U6e3g6MCx5OjB9LGNsaWVudDp7eDowLHk6MH0sdGltZVN0YW1wOjB9LGRlbHRhOntwYWdlOnt4OjAseTowfSxjbGllbnQ6e3g6MCx5OjB9LHRpbWVTdGFtcDowfSx2ZWxvY2l0eTp7cGFnZTp7eDowLHk6MH0sY2xpZW50Ont4OjAseTowfSx0aW1lU3RhbXA6MH19LHRoaXMuX2lkPWtlKyssdGhpcy5fc2NvcGVGaXJlPW8sdGhpcy5wb2ludGVyVHlwZT1pO3ZhciBhPXRoaXM7dGhpcy5fcHJveHk9e307dmFyIHM9ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4uX3Byb3h5LHQse2dldDpmdW5jdGlvbigpe3JldHVybiBhW3RdfX0pfTtmb3IodmFyIGMgaW4gUGUpcyhjKTt2YXIgbD1mdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkobi5fcHJveHksdCx7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gYVt0XS5hcHBseShhLGFyZ3VtZW50cyl9fSl9O2Zvcih2YXIgdSBpbiBPZSlsKHUpO3RoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpuZXdcIix7aW50ZXJhY3Rpb246dGhpc30pfXJldHVybiBvKHQsW3trZXk6XCJwb2ludGVyTW92ZVRvbGVyYW5jZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiAxfX0se2tleTpcInBvaW50ZXJEb3duXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXMudXBkYXRlUG9pbnRlcih0LGUsbiwhMCksaT10aGlzLnBvaW50ZXJzW3JdO3RoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpkb3duXCIse3BvaW50ZXI6dCxldmVudDplLGV2ZW50VGFyZ2V0Om4scG9pbnRlckluZGV4OnIscG9pbnRlckluZm86aSx0eXBlOlwiZG93blwiLGludGVyYWN0aW9uOnRoaXN9KX19LHtrZXk6XCJzdGFydFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4hKHRoaXMuaW50ZXJhY3RpbmcoKXx8IXRoaXMucG9pbnRlcklzRG93bnx8dGhpcy5wb2ludGVycy5sZW5ndGg8KFwiZ2VzdHVyZVwiPT09dC5uYW1lPzI6MSl8fCFlLm9wdGlvbnNbdC5uYW1lXS5lbmFibGVkKSYmKFV0KHRoaXMucHJlcGFyZWQsdCksdGhpcy5pbnRlcmFjdGFibGU9ZSx0aGlzLmVsZW1lbnQ9bix0aGlzLnJlY3Q9ZS5nZXRSZWN0KG4pLHRoaXMuZWRnZXM9dGhpcy5wcmVwYXJlZC5lZGdlcz9WKHt9LHRoaXMucHJlcGFyZWQuZWRnZXMpOntsZWZ0OiEwLHJpZ2h0OiEwLHRvcDohMCxib3R0b206ITB9LHRoaXMuX3N0b3BwZWQ9ITEsdGhpcy5faW50ZXJhY3Rpbmc9dGhpcy5fZG9QaGFzZSh7aW50ZXJhY3Rpb246dGhpcyxldmVudDp0aGlzLmRvd25FdmVudCxwaGFzZTpcInN0YXJ0XCJ9KSYmIXRoaXMuX3N0b3BwZWQsdGhpcy5faW50ZXJhY3RpbmcpfX0se2tleTpcInBvaW50ZXJNb3ZlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3RoaXMuc2ltdWxhdGlvbnx8dGhpcy5tb2RpZmljYXRpb24mJnRoaXMubW9kaWZpY2F0aW9uLmVuZFJlc3VsdHx8dGhpcy51cGRhdGVQb2ludGVyKHQsZSxuLCExKTt2YXIgcixpLG89dGhpcy5jb29yZHMuY3VyLnBhZ2UueD09PXRoaXMuY29vcmRzLnByZXYucGFnZS54JiZ0aGlzLmNvb3Jkcy5jdXIucGFnZS55PT09dGhpcy5jb29yZHMucHJldi5wYWdlLnkmJnRoaXMuY29vcmRzLmN1ci5jbGllbnQueD09PXRoaXMuY29vcmRzLnByZXYuY2xpZW50LngmJnRoaXMuY29vcmRzLmN1ci5jbGllbnQueT09PXRoaXMuY29vcmRzLnByZXYuY2xpZW50Lnk7dGhpcy5wb2ludGVySXNEb3duJiYhdGhpcy5wb2ludGVyV2FzTW92ZWQmJihyPXRoaXMuY29vcmRzLmN1ci5jbGllbnQueC10aGlzLmNvb3Jkcy5zdGFydC5jbGllbnQueCxpPXRoaXMuY29vcmRzLmN1ci5jbGllbnQueS10aGlzLmNvb3Jkcy5zdGFydC5jbGllbnQueSx0aGlzLnBvaW50ZXJXYXNNb3ZlZD1RKHIsaSk+dGhpcy5wb2ludGVyTW92ZVRvbGVyYW5jZSk7dmFyIGEscyxjLGw9dGhpcy5nZXRQb2ludGVySW5kZXgodCksdT17cG9pbnRlcjp0LHBvaW50ZXJJbmRleDpsLHBvaW50ZXJJbmZvOnRoaXMucG9pbnRlcnNbbF0sZXZlbnQ6ZSx0eXBlOlwibW92ZVwiLGV2ZW50VGFyZ2V0Om4sZHg6cixkeTppLGR1cGxpY2F0ZTpvLGludGVyYWN0aW9uOnRoaXN9O298fChhPXRoaXMuY29vcmRzLnZlbG9jaXR5LHM9dGhpcy5jb29yZHMuZGVsdGEsYz1NYXRoLm1heChzLnRpbWVTdGFtcC8xZTMsLjAwMSksYS5wYWdlLng9cy5wYWdlLngvYyxhLnBhZ2UueT1zLnBhZ2UueS9jLGEuY2xpZW50Lng9cy5jbGllbnQueC9jLGEuY2xpZW50Lnk9cy5jbGllbnQueS9jLGEudGltZVN0YW1wPWMpLHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczptb3ZlXCIsdSksb3x8dGhpcy5zaW11bGF0aW9ufHwodGhpcy5pbnRlcmFjdGluZygpJiYodS50eXBlPW51bGwsdGhpcy5tb3ZlKHUpKSx0aGlzLnBvaW50ZXJXYXNNb3ZlZCYmZXQodGhpcy5jb29yZHMucHJldix0aGlzLmNvb3Jkcy5jdXIpKX19LHtrZXk6XCJtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dCYmdC5ldmVudHx8bnQodGhpcy5jb29yZHMuZGVsdGEpLCh0PVYoe3BvaW50ZXI6dGhpcy5fbGF0ZXN0UG9pbnRlci5wb2ludGVyLGV2ZW50OnRoaXMuX2xhdGVzdFBvaW50ZXIuZXZlbnQsZXZlbnRUYXJnZXQ6dGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudFRhcmdldCxpbnRlcmFjdGlvbjp0aGlzfSx0fHx7fSkpLnBoYXNlPVwibW92ZVwiLHRoaXMuX2RvUGhhc2UodCl9fSx7a2V5OlwicG9pbnRlclVwXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9dGhpcy5nZXRQb2ludGVySW5kZXgodCk7LTE9PT1pJiYoaT10aGlzLnVwZGF0ZVBvaW50ZXIodCxlLG4sITEpKTt2YXIgbz0vY2FuY2VsJC9pLnRlc3QoZS50eXBlKT9cImNhbmNlbFwiOlwidXBcIjt0aGlzLl9zY29wZUZpcmUoXCJpbnRlcmFjdGlvbnM6XCIuY29uY2F0KG8pLHtwb2ludGVyOnQscG9pbnRlckluZGV4OmkscG9pbnRlckluZm86dGhpcy5wb2ludGVyc1tpXSxldmVudDplLGV2ZW50VGFyZ2V0Om4sdHlwZTpvLGN1ckV2ZW50VGFyZ2V0OnIsaW50ZXJhY3Rpb246dGhpc30pLHRoaXMuc2ltdWxhdGlvbnx8dGhpcy5lbmQoZSksdGhpcy5yZW1vdmVQb2ludGVyKHQsZSl9fSx7a2V5OlwiZG9jdW1lbnRCbHVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5lbmQodCksdGhpcy5fc2NvcGVGaXJlKFwiaW50ZXJhY3Rpb25zOmJsdXJcIix7ZXZlbnQ6dCx0eXBlOlwiYmx1clwiLGludGVyYWN0aW9uOnRoaXN9KX19LHtrZXk6XCJlbmRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZTt0aGlzLl9lbmRpbmc9ITAsdD10fHx0aGlzLl9sYXRlc3RQb2ludGVyLmV2ZW50LHRoaXMuaW50ZXJhY3RpbmcoKSYmKGU9dGhpcy5fZG9QaGFzZSh7ZXZlbnQ6dCxpbnRlcmFjdGlvbjp0aGlzLHBoYXNlOlwiZW5kXCJ9KSksdGhpcy5fZW5kaW5nPSExLCEwPT09ZSYmdGhpcy5zdG9wKCl9fSx7a2V5OlwiY3VycmVudEFjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludGVyYWN0aW5nP3RoaXMucHJlcGFyZWQubmFtZTpudWxsfX0se2tleTpcImludGVyYWN0aW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW50ZXJhY3Rpbmd9fSx7a2V5Olwic3RvcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fc2NvcGVGaXJlKFwiaW50ZXJhY3Rpb25zOnN0b3BcIix7aW50ZXJhY3Rpb246dGhpc30pLHRoaXMuaW50ZXJhY3RhYmxlPXRoaXMuZWxlbWVudD1udWxsLHRoaXMuX2ludGVyYWN0aW5nPSExLHRoaXMuX3N0b3BwZWQ9ITAsdGhpcy5wcmVwYXJlZC5uYW1lPXRoaXMucHJldkV2ZW50PW51bGx9fSx7a2V5OlwiZ2V0UG9pbnRlckluZGV4XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXQodCk7cmV0dXJuXCJtb3VzZVwiPT09dGhpcy5wb2ludGVyVHlwZXx8XCJwZW5cIj09PXRoaXMucG9pbnRlclR5cGU/dGhpcy5wb2ludGVycy5sZW5ndGgtMTp5dCh0aGlzLnBvaW50ZXJzLChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWV9KSl9fSx7a2V5OlwiZ2V0UG9pbnRlckluZm9cIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wb2ludGVyc1t0aGlzLmdldFBvaW50ZXJJbmRleCh0KV19fSx7a2V5OlwidXBkYXRlUG9pbnRlclwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBpLG8sYSxzPWF0KHQpLGM9dGhpcy5nZXRQb2ludGVySW5kZXgodCksbD10aGlzLnBvaW50ZXJzW2NdO3JldHVybiByPSExIT09ciYmKHJ8fC8oZG93bnxzdGFydCkkL2kudGVzdChlLnR5cGUpKSxsP2wucG9pbnRlcj10OihsPW5ldyBfZShzLHQsZSxudWxsLG51bGwpLGM9dGhpcy5wb2ludGVycy5sZW5ndGgsdGhpcy5wb2ludGVycy5wdXNoKGwpKSxzdCh0aGlzLmNvb3Jkcy5jdXIsdGhpcy5wb2ludGVycy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnBvaW50ZXJ9KSksdGhpcy5fbm93KCkpLGk9dGhpcy5jb29yZHMuZGVsdGEsbz10aGlzLmNvb3Jkcy5wcmV2LGE9dGhpcy5jb29yZHMuY3VyLGkucGFnZS54PWEucGFnZS54LW8ucGFnZS54LGkucGFnZS55PWEucGFnZS55LW8ucGFnZS55LGkuY2xpZW50Lng9YS5jbGllbnQueC1vLmNsaWVudC54LGkuY2xpZW50Lnk9YS5jbGllbnQueS1vLmNsaWVudC55LGkudGltZVN0YW1wPWEudGltZVN0YW1wLW8udGltZVN0YW1wLHImJih0aGlzLnBvaW50ZXJJc0Rvd249ITAsbC5kb3duVGltZT10aGlzLmNvb3Jkcy5jdXIudGltZVN0YW1wLGwuZG93blRhcmdldD1uLHR0KHRoaXMuZG93blBvaW50ZXIsdCksdGhpcy5pbnRlcmFjdGluZygpfHwoZXQodGhpcy5jb29yZHMuc3RhcnQsdGhpcy5jb29yZHMuY3VyKSxldCh0aGlzLmNvb3Jkcy5wcmV2LHRoaXMuY29vcmRzLmN1ciksdGhpcy5kb3duRXZlbnQ9ZSx0aGlzLnBvaW50ZXJXYXNNb3ZlZD0hMSkpLHRoaXMuX3VwZGF0ZUxhdGVzdFBvaW50ZXIodCxlLG4pLHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczp1cGRhdGUtcG9pbnRlclwiLHtwb2ludGVyOnQsZXZlbnQ6ZSxldmVudFRhcmdldDpuLGRvd246cixwb2ludGVySW5mbzpsLHBvaW50ZXJJbmRleDpjLGludGVyYWN0aW9uOnRoaXN9KSxjfX0se2tleTpcInJlbW92ZVBvaW50ZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZ2V0UG9pbnRlckluZGV4KHQpO2lmKC0xIT09bil7dmFyIHI9dGhpcy5wb2ludGVyc1tuXTt0aGlzLl9zY29wZUZpcmUoXCJpbnRlcmFjdGlvbnM6cmVtb3ZlLXBvaW50ZXJcIix7cG9pbnRlcjp0LGV2ZW50OmUsZXZlbnRUYXJnZXQ6bnVsbCxwb2ludGVySW5kZXg6bixwb2ludGVySW5mbzpyLGludGVyYWN0aW9uOnRoaXN9KSx0aGlzLnBvaW50ZXJzLnNwbGljZShuLDEpLHRoaXMucG9pbnRlcklzRG93bj0hMX19fSx7a2V5OlwiX3VwZGF0ZUxhdGVzdFBvaW50ZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dGhpcy5fbGF0ZXN0UG9pbnRlci5wb2ludGVyPXQsdGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudD1lLHRoaXMuX2xhdGVzdFBvaW50ZXIuZXZlbnRUYXJnZXQ9bn19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9sYXRlc3RQb2ludGVyLnBvaW50ZXI9bnVsbCx0aGlzLl9sYXRlc3RQb2ludGVyLmV2ZW50PW51bGwsdGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudFRhcmdldD1udWxsfX0se2tleTpcIl9jcmVhdGVQcmVwYXJlZEV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIG5ldyBTZSh0aGlzLHQsdGhpcy5wcmVwYXJlZC5uYW1lLGUsdGhpcy5lbGVtZW50LG4scil9fSx7a2V5OlwiX2ZpcmVFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlO251bGw9PShlPXRoaXMuaW50ZXJhY3RhYmxlKXx8ZS5maXJlKHQpLCghdGhpcy5wcmV2RXZlbnR8fHQudGltZVN0YW1wPj10aGlzLnByZXZFdmVudC50aW1lU3RhbXApJiYodGhpcy5wcmV2RXZlbnQ9dCl9fSx7a2V5OlwiX2RvUGhhc2VcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LmV2ZW50LG49dC5waGFzZSxyPXQucHJlRW5kLGk9dC50eXBlLG89dGhpcy5yZWN0O2lmKG8mJlwibW92ZVwiPT09biYmKEgodGhpcy5lZGdlcyxvLHRoaXMuY29vcmRzLmRlbHRhW3RoaXMuaW50ZXJhY3RhYmxlLm9wdGlvbnMuZGVsdGFTb3VyY2VdKSxvLndpZHRoPW8ucmlnaHQtby5sZWZ0LG8uaGVpZ2h0PW8uYm90dG9tLW8udG9wKSwhMT09PXRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpiZWZvcmUtYWN0aW9uLVwiLmNvbmNhdChuKSx0KSlyZXR1cm4hMTt2YXIgYT10LmlFdmVudD10aGlzLl9jcmVhdGVQcmVwYXJlZEV2ZW50KGUsbixyLGkpO3JldHVybiB0aGlzLl9zY29wZUZpcmUoXCJpbnRlcmFjdGlvbnM6YWN0aW9uLVwiLmNvbmNhdChuKSx0KSxcInN0YXJ0XCI9PT1uJiYodGhpcy5wcmV2RXZlbnQ9YSksdGhpcy5fZmlyZUV2ZW50KGEpLHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tXCIuY29uY2F0KG4pLHQpLCEwfX0se2tleTpcIl9ub3dcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfX1dKSx0fSgpO2Z1bmN0aW9uIEllKHQpe01lKHQuaW50ZXJhY3Rpb24pfWZ1bmN0aW9uIE1lKHQpe2lmKCFmdW5jdGlvbih0KXtyZXR1cm4hKCF0Lm9mZnNldC5wZW5kaW5nLngmJiF0Lm9mZnNldC5wZW5kaW5nLnkpfSh0KSlyZXR1cm4hMTt2YXIgZT10Lm9mZnNldC5wZW5kaW5nO3JldHVybiBBZSh0LmNvb3Jkcy5jdXIsZSksQWUodC5jb29yZHMuZGVsdGEsZSksSCh0LmVkZ2VzLHQucmVjdCxlKSxlLng9MCxlLnk9MCwhMH1mdW5jdGlvbiB6ZSh0KXt2YXIgZT10Lngsbj10Lnk7dGhpcy5vZmZzZXQucGVuZGluZy54Kz1lLHRoaXMub2Zmc2V0LnBlbmRpbmcueSs9bix0aGlzLm9mZnNldC50b3RhbC54Kz1lLHRoaXMub2Zmc2V0LnRvdGFsLnkrPW59ZnVuY3Rpb24gQWUodCxlKXt2YXIgbj10LnBhZ2Uscj10LmNsaWVudCxpPWUueCxvPWUueTtuLngrPWksbi55Kz1vLHIueCs9aSxyLnkrPW99T2Uub2Zmc2V0Qnk9XCJcIjt2YXIgUmU9e2lkOlwib2Zmc2V0XCIsYmVmb3JlOltcIm1vZGlmaWVyc1wiLFwicG9pbnRlci1ldmVudHNcIixcImFjdGlvbnNcIixcImluZXJ0aWFcIl0saW5zdGFsbDpmdW5jdGlvbih0KXt0LkludGVyYWN0aW9uLnByb3RvdHlwZS5vZmZzZXRCeT16ZX0sbGlzdGVuZXJzOntcImludGVyYWN0aW9uczpuZXdcIjpmdW5jdGlvbih0KXt0LmludGVyYWN0aW9uLm9mZnNldD17dG90YWw6e3g6MCx5OjB9LHBlbmRpbmc6e3g6MCx5OjB9fX0sXCJpbnRlcmFjdGlvbnM6dXBkYXRlLXBvaW50ZXJcIjpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCl7dC5wb2ludGVySXNEb3duJiYoQWUodC5jb29yZHMuY3VyLHQub2Zmc2V0LnRvdGFsKSx0Lm9mZnNldC5wZW5kaW5nLng9MCx0Lm9mZnNldC5wZW5kaW5nLnk9MCl9KHQuaW50ZXJhY3Rpb24pfSxcImludGVyYWN0aW9uczpiZWZvcmUtYWN0aW9uLXN0YXJ0XCI6SWUsXCJpbnRlcmFjdGlvbnM6YmVmb3JlLWFjdGlvbi1tb3ZlXCI6SWUsXCJpbnRlcmFjdGlvbnM6YmVmb3JlLWFjdGlvbi1lbmRcIjpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uO2lmKE1lKGUpKXJldHVybiBlLm1vdmUoe29mZnNldDohMH0pLGUuZW5kKCksITF9LFwiaW50ZXJhY3Rpb25zOnN0b3BcIjpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uO2Uub2Zmc2V0LnRvdGFsLng9MCxlLm9mZnNldC50b3RhbC55PTAsZS5vZmZzZXQucGVuZGluZy54PTAsZS5vZmZzZXQucGVuZGluZy55PTB9fX0sQ2U9UmU7dmFyIGplPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtyKHRoaXMsdCksdGhpcy5hY3RpdmU9ITEsdGhpcy5pc01vZGlmaWVkPSExLHRoaXMuc21vb3RoRW5kPSExLHRoaXMuYWxsb3dSZXN1bWU9ITEsdGhpcy5tb2RpZmljYXRpb249dm9pZCAwLHRoaXMubW9kaWZpZXJDb3VudD0wLHRoaXMubW9kaWZpZXJBcmc9dm9pZCAwLHRoaXMuc3RhcnRDb29yZHM9dm9pZCAwLHRoaXMudDA9MCx0aGlzLnYwPTAsdGhpcy50ZT0wLHRoaXMudGFyZ2V0T2Zmc2V0PXZvaWQgMCx0aGlzLm1vZGlmaWVkT2Zmc2V0PXZvaWQgMCx0aGlzLmN1cnJlbnRPZmZzZXQ9dm9pZCAwLHRoaXMubGFtYmRhX3YwPTAsdGhpcy5vbmVfdmVfdjA9MCx0aGlzLnRpbWVvdXQ9dm9pZCAwLHRoaXMuaW50ZXJhY3Rpb249dm9pZCAwLHRoaXMuaW50ZXJhY3Rpb249ZX1yZXR1cm4gbyh0LFt7a2V5Olwic3RhcnRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmludGVyYWN0aW9uLG49RmUoZSk7aWYoIW58fCFuLmVuYWJsZWQpcmV0dXJuITE7dmFyIHI9ZS5jb29yZHMudmVsb2NpdHkuY2xpZW50LGk9UShyLngsci55KSxvPXRoaXMubW9kaWZpY2F0aW9ufHwodGhpcy5tb2RpZmljYXRpb249bmV3IG1lKGUpKTtpZihvLmNvcHlGcm9tKGUubW9kaWZpY2F0aW9uKSx0aGlzLnQwPWUuX25vdygpLHRoaXMuYWxsb3dSZXN1bWU9bi5hbGxvd1Jlc3VtZSx0aGlzLnYwPWksdGhpcy5jdXJyZW50T2Zmc2V0PXt4OjAseTowfSx0aGlzLnN0YXJ0Q29vcmRzPWUuY29vcmRzLmN1ci5wYWdlLHRoaXMubW9kaWZpZXJBcmc9by5maWxsQXJnKHtwYWdlQ29vcmRzOnRoaXMuc3RhcnRDb29yZHMscHJlRW5kOiEwLHBoYXNlOlwiaW5lcnRpYXN0YXJ0XCJ9KSx0aGlzLnQwLWUuY29vcmRzLmN1ci50aW1lU3RhbXA8NTAmJmk+bi5taW5TcGVlZCYmaT5uLmVuZFNwZWVkKXRoaXMuc3RhcnRJbmVydGlhKCk7ZWxzZXtpZihvLnJlc3VsdD1vLnNldEFsbCh0aGlzLm1vZGlmaWVyQXJnKSwhby5yZXN1bHQuY2hhbmdlZClyZXR1cm4hMTt0aGlzLnN0YXJ0U21vb3RoRW5kKCl9cmV0dXJuIGUubW9kaWZpY2F0aW9uLnJlc3VsdC5yZWN0PW51bGwsZS5vZmZzZXRCeSh0aGlzLnRhcmdldE9mZnNldCksZS5fZG9QaGFzZSh7aW50ZXJhY3Rpb246ZSxldmVudDp0LHBoYXNlOlwiaW5lcnRpYXN0YXJ0XCJ9KSxlLm9mZnNldEJ5KHt4Oi10aGlzLnRhcmdldE9mZnNldC54LHk6LXRoaXMudGFyZ2V0T2Zmc2V0Lnl9KSxlLm1vZGlmaWNhdGlvbi5yZXN1bHQucmVjdD1udWxsLHRoaXMuYWN0aXZlPSEwLGUuc2ltdWxhdGlvbj10aGlzLCEwfX0se2tleTpcInN0YXJ0SW5lcnRpYVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuaW50ZXJhY3Rpb24uY29vcmRzLnZlbG9jaXR5LmNsaWVudCxuPUZlKHRoaXMuaW50ZXJhY3Rpb24pLHI9bi5yZXNpc3RhbmNlLGk9LU1hdGgubG9nKG4uZW5kU3BlZWQvdGhpcy52MCkvcjt0aGlzLnRhcmdldE9mZnNldD17eDooZS54LWkpL3IseTooZS55LWkpL3J9LHRoaXMudGU9aSx0aGlzLmxhbWJkYV92MD1yL3RoaXMudjAsdGhpcy5vbmVfdmVfdjA9MS1uLmVuZFNwZWVkL3RoaXMudjA7dmFyIG89dGhpcy5tb2RpZmljYXRpb24sYT10aGlzLm1vZGlmaWVyQXJnO2EucGFnZUNvb3Jkcz17eDp0aGlzLnN0YXJ0Q29vcmRzLngrdGhpcy50YXJnZXRPZmZzZXQueCx5OnRoaXMuc3RhcnRDb29yZHMueSt0aGlzLnRhcmdldE9mZnNldC55fSxvLnJlc3VsdD1vLnNldEFsbChhKSxvLnJlc3VsdC5jaGFuZ2VkJiYodGhpcy5pc01vZGlmaWVkPSEwLHRoaXMubW9kaWZpZWRPZmZzZXQ9e3g6dGhpcy50YXJnZXRPZmZzZXQueCtvLnJlc3VsdC5kZWx0YS54LHk6dGhpcy50YXJnZXRPZmZzZXQueStvLnJlc3VsdC5kZWx0YS55fSksdGhpcy5vbk5leHRGcmFtZSgoZnVuY3Rpb24oKXtyZXR1cm4gdC5pbmVydGlhVGljaygpfSkpfX0se2tleTpcInN0YXJ0U21vb3RoRW5kXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuc21vb3RoRW5kPSEwLHRoaXMuaXNNb2RpZmllZD0hMCx0aGlzLnRhcmdldE9mZnNldD17eDp0aGlzLm1vZGlmaWNhdGlvbi5yZXN1bHQuZGVsdGEueCx5OnRoaXMubW9kaWZpY2F0aW9uLnJlc3VsdC5kZWx0YS55fSx0aGlzLm9uTmV4dEZyYW1lKChmdW5jdGlvbigpe3JldHVybiB0LnNtb290aEVuZFRpY2soKX0pKX19LHtrZXk6XCJvbk5leHRGcmFtZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy50aW1lb3V0PUx0LnJlcXVlc3QoKGZ1bmN0aW9uKCl7ZS5hY3RpdmUmJnQoKX0pKX19LHtrZXk6XCJpbmVydGlhVGlja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZSxuLHIsaSxvLGEscz10aGlzLGM9dGhpcy5pbnRlcmFjdGlvbixsPUZlKGMpLnJlc2lzdGFuY2UsdT0oYy5fbm93KCktdGhpcy50MCkvMWUzO2lmKHU8dGhpcy50ZSl7dmFyIHAsZj0xLShNYXRoLmV4cCgtbCp1KS10aGlzLmxhbWJkYV92MCkvdGhpcy5vbmVfdmVfdjA7dGhpcy5pc01vZGlmaWVkPyh0PTAsZT0wLG49dGhpcy50YXJnZXRPZmZzZXQueCxyPXRoaXMudGFyZ2V0T2Zmc2V0LnksaT10aGlzLm1vZGlmaWVkT2Zmc2V0Lngsbz10aGlzLm1vZGlmaWVkT2Zmc2V0LnkscD17eDpZZShhPWYsdCxuLGkpLHk6WWUoYSxlLHIsbyl9KTpwPXt4OnRoaXMudGFyZ2V0T2Zmc2V0LngqZix5OnRoaXMudGFyZ2V0T2Zmc2V0LnkqZn07dmFyIGQ9e3g6cC54LXRoaXMuY3VycmVudE9mZnNldC54LHk6cC55LXRoaXMuY3VycmVudE9mZnNldC55fTt0aGlzLmN1cnJlbnRPZmZzZXQueCs9ZC54LHRoaXMuY3VycmVudE9mZnNldC55Kz1kLnksYy5vZmZzZXRCeShkKSxjLm1vdmUoKSx0aGlzLm9uTmV4dEZyYW1lKChmdW5jdGlvbigpe3JldHVybiBzLmluZXJ0aWFUaWNrKCl9KSl9ZWxzZSBjLm9mZnNldEJ5KHt4OnRoaXMubW9kaWZpZWRPZmZzZXQueC10aGlzLmN1cnJlbnRPZmZzZXQueCx5OnRoaXMubW9kaWZpZWRPZmZzZXQueS10aGlzLmN1cnJlbnRPZmZzZXQueX0pLHRoaXMuZW5kKCl9fSx7a2V5Olwic21vb3RoRW5kVGlja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuaW50ZXJhY3Rpb24sbj1lLl9ub3coKS10aGlzLnQwLHI9RmUoZSkuc21vb3RoRW5kRHVyYXRpb247aWYobjxyKXt2YXIgaT17eDpMZShuLDAsdGhpcy50YXJnZXRPZmZzZXQueCxyKSx5OkxlKG4sMCx0aGlzLnRhcmdldE9mZnNldC55LHIpfSxvPXt4OmkueC10aGlzLmN1cnJlbnRPZmZzZXQueCx5OmkueS10aGlzLmN1cnJlbnRPZmZzZXQueX07dGhpcy5jdXJyZW50T2Zmc2V0LngrPW8ueCx0aGlzLmN1cnJlbnRPZmZzZXQueSs9by55LGUub2Zmc2V0QnkobyksZS5tb3ZlKHtza2lwTW9kaWZpZXJzOnRoaXMubW9kaWZpZXJDb3VudH0pLHRoaXMub25OZXh0RnJhbWUoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuc21vb3RoRW5kVGljaygpfSkpfWVsc2UgZS5vZmZzZXRCeSh7eDp0aGlzLnRhcmdldE9mZnNldC54LXRoaXMuY3VycmVudE9mZnNldC54LHk6dGhpcy50YXJnZXRPZmZzZXQueS10aGlzLmN1cnJlbnRPZmZzZXQueX0pLHRoaXMuZW5kKCl9fSx7a2V5OlwicmVzdW1lXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5wb2ludGVyLG49dC5ldmVudCxyPXQuZXZlbnRUYXJnZXQsaT10aGlzLmludGVyYWN0aW9uO2kub2Zmc2V0Qnkoe3g6LXRoaXMuY3VycmVudE9mZnNldC54LHk6LXRoaXMuY3VycmVudE9mZnNldC55fSksaS51cGRhdGVQb2ludGVyKGUsbixyLCEwKSxpLl9kb1BoYXNlKHtpbnRlcmFjdGlvbjppLGV2ZW50Om4scGhhc2U6XCJyZXN1bWVcIn0pLGV0KGkuY29vcmRzLnByZXYsaS5jb29yZHMuY3VyKSx0aGlzLnN0b3AoKX19LHtrZXk6XCJlbmRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaW50ZXJhY3Rpb24ubW92ZSgpLHRoaXMuaW50ZXJhY3Rpb24uZW5kKCksdGhpcy5zdG9wKCl9fSx7a2V5Olwic3RvcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5hY3RpdmU9dGhpcy5zbW9vdGhFbmQ9ITEsdGhpcy5pbnRlcmFjdGlvbi5zaW11bGF0aW9uPW51bGwsTHQuY2FuY2VsKHRoaXMudGltZW91dCl9fV0pLHR9KCk7ZnVuY3Rpb24gRmUodCl7dmFyIGU9dC5pbnRlcmFjdGFibGUsbj10LnByZXBhcmVkO3JldHVybiBlJiZlLm9wdGlvbnMmJm4ubmFtZSYmZS5vcHRpb25zW24ubmFtZV0uaW5lcnRpYX12YXIgWGU9e2lkOlwiaW5lcnRpYVwiLGJlZm9yZTpbXCJtb2RpZmllcnNcIixcImFjdGlvbnNcIl0saW5zdGFsbDpmdW5jdGlvbih0KXt2YXIgZT10LmRlZmF1bHRzO3QudXNlUGx1Z2luKENlKSx0LnVzZVBsdWdpbihFZSksdC5hY3Rpb25zLnBoYXNlcy5pbmVydGlhc3RhcnQ9ITAsdC5hY3Rpb25zLnBoYXNlcy5yZXN1bWU9ITAsZS5wZXJBY3Rpb24uaW5lcnRpYT17ZW5hYmxlZDohMSxyZXNpc3RhbmNlOjEwLG1pblNwZWVkOjEwMCxlbmRTcGVlZDoxMCxhbGxvd1Jlc3VtZTohMCxzbW9vdGhFbmREdXJhdGlvbjozMDB9fSxsaXN0ZW5lcnM6e1wiaW50ZXJhY3Rpb25zOm5ld1wiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb247ZS5pbmVydGlhPW5ldyBqZShlKX0sXCJpbnRlcmFjdGlvbnM6YmVmb3JlLWFjdGlvbi1lbmRcIjpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0aW9uLG49dC5ldmVudDtyZXR1cm4oIWUuX2ludGVyYWN0aW5nfHxlLnNpbXVsYXRpb258fCFlLmluZXJ0aWEuc3RhcnQobikpJiZudWxsfSxcImludGVyYWN0aW9uczpkb3duXCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbixuPXQuZXZlbnRUYXJnZXQscj1lLmluZXJ0aWE7aWYoci5hY3RpdmUpZm9yKHZhciBpPW47dy5lbGVtZW50KGkpOyl7aWYoaT09PWUuZWxlbWVudCl7ci5yZXN1bWUodCk7YnJlYWt9aT1BKGkpfX0sXCJpbnRlcmFjdGlvbnM6c3RvcFwiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24uaW5lcnRpYTtlLmFjdGl2ZSYmZS5zdG9wKCl9LFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tcmVzdW1lXCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbi5tb2RpZmljYXRpb247ZS5zdG9wKHQpLGUuc3RhcnQodCx0LmludGVyYWN0aW9uLmNvb3Jkcy5jdXIucGFnZSksZS5hcHBseVRvSW50ZXJhY3Rpb24odCl9LFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24taW5lcnRpYXN0YXJ0XCI6ZnVuY3Rpb24odCl7cmV0dXJuIHQuaW50ZXJhY3Rpb24ubW9kaWZpY2F0aW9uLnNldEFuZEFwcGx5KHQpfSxcImludGVyYWN0aW9uczphY3Rpb24tcmVzdW1lXCI6eGUsXCJpbnRlcmFjdGlvbnM6YWN0aW9uLWluZXJ0aWFzdGFydFwiOnhlLFwiaW50ZXJhY3Rpb25zOmFmdGVyLWFjdGlvbi1pbmVydGlhc3RhcnRcIjpmdW5jdGlvbih0KXtyZXR1cm4gdC5pbnRlcmFjdGlvbi5tb2RpZmljYXRpb24ucmVzdG9yZUludGVyYWN0aW9uQ29vcmRzKHQpfSxcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tcmVzdW1lXCI6ZnVuY3Rpb24odCl7cmV0dXJuIHQuaW50ZXJhY3Rpb24ubW9kaWZpY2F0aW9uLnJlc3RvcmVJbnRlcmFjdGlvbkNvb3Jkcyh0KX19fTtmdW5jdGlvbiBZZSh0LGUsbixyKXt2YXIgaT0xLXQ7cmV0dXJuIGkqaSplKzIqaSp0Km4rdCp0KnJ9ZnVuY3Rpb24gTGUodCxlLG4scil7cmV0dXJuLW4qKHQvPXIpKih0LTIpK2V9dmFyIHFlPVhlO2Z1bmN0aW9uIEJlKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07aWYodC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpYnJlYWs7cih0KX19dmFyIFZlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtyKHRoaXMsdCksdGhpcy5vcHRpb25zPXZvaWQgMCx0aGlzLnR5cGVzPXt9LHRoaXMucHJvcGFnYXRpb25TdG9wcGVkPSExLHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPSExLHRoaXMuZ2xvYmFsPXZvaWQgMCx0aGlzLm9wdGlvbnM9Vih7fSxlfHx7fSl9cmV0dXJuIG8odCxbe2tleTpcImZpcmVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMuZ2xvYmFsOyhlPXRoaXMudHlwZXNbdC50eXBlXSkmJkJlKHQsZSksIXQucHJvcGFnYXRpb25TdG9wcGVkJiZuJiYoZT1uW3QudHlwZV0pJiZCZSh0LGUpfX0se2tleTpcIm9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj0kKHQsZSk7Zm9yKHQgaW4gbil0aGlzLnR5cGVzW3RdPWd0KHRoaXMudHlwZXNbdF18fFtdLG5bdF0pfX0se2tleTpcIm9mZlwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49JCh0LGUpO2Zvcih0IGluIG4pe3ZhciByPXRoaXMudHlwZXNbdF07aWYociYmci5sZW5ndGgpZm9yKHZhciBpPTAsbz1uW3RdO2k8by5sZW5ndGg7aSsrKXt2YXIgYT1vW2ldLHM9ci5pbmRleE9mKGEpOy0xIT09cyYmci5zcGxpY2UocywxKX19fX0se2tleTpcImdldFJlY3RcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbH19XSksdH0oKTt2YXIgV2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3IodGhpcyx0KSx0aGlzLmN1cnJlbnRUYXJnZXQ9dm9pZCAwLHRoaXMub3JpZ2luYWxFdmVudD12b2lkIDAsdGhpcy50eXBlPXZvaWQgMCx0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0dCh0aGlzLGUpfXJldHVybiBvKHQsW3trZXk6XCJwcmV2ZW50T3JpZ2luYWxEZWZhdWx0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKX19LHtrZXk6XCJzdG9wUHJvcGFnYXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKX19LHtrZXk6XCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3JpZ2luYWxFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX19XSksdH0oKTtmdW5jdGlvbiBHZSh0KXtyZXR1cm4gdy5vYmplY3QodCk/e2NhcHR1cmU6ISF0LmNhcHR1cmUscGFzc2l2ZTohIXQucGFzc2l2ZX06e2NhcHR1cmU6ISF0LHBhc3NpdmU6ITF9fWZ1bmN0aW9uIE5lKHQsZSl7cmV0dXJuIHQ9PT1lfHwoXCJib29sZWFuXCI9PXR5cGVvZiB0PyEhZS5jYXB0dXJlPT09dCYmITE9PSEhZS5wYXNzaXZlOiEhdC5jYXB0dXJlPT0hIWUuY2FwdHVyZSYmISF0LnBhc3NpdmU9PSEhZS5wYXNzaXZlKX12YXIgVWU9e2lkOlwiZXZlbnRzXCIsaW5zdGFsbDpmdW5jdGlvbih0KXt2YXIgZSxuPVtdLHI9e30saT1bXSxvPXthZGQ6YSxyZW1vdmU6cyxhZGREZWxlZ2F0ZTpmdW5jdGlvbih0LGUsbixvLHMpe3ZhciB1PUdlKHMpO2lmKCFyW25dKXtyW25dPVtdO2Zvcih2YXIgcD0wO3A8aS5sZW5ndGg7cCsrKXt2YXIgZj1pW3BdO2EoZixuLGMpLGEoZixuLGwsITApfX12YXIgZD1yW25dLGg9YnQoZCwoZnVuY3Rpb24obil7cmV0dXJuIG4uc2VsZWN0b3I9PT10JiZuLmNvbnRleHQ9PT1lfSkpO2h8fChoPXtzZWxlY3Rvcjp0LGNvbnRleHQ6ZSxsaXN0ZW5lcnM6W119LGQucHVzaChoKSk7aC5saXN0ZW5lcnMucHVzaCh7ZnVuYzpvLG9wdGlvbnM6dX0pfSxyZW1vdmVEZWxlZ2F0ZTpmdW5jdGlvbih0LGUsbixpLG8pe3ZhciBhLHU9R2UobykscD1yW25dLGY9ITE7aWYoIXApcmV0dXJuO2ZvcihhPXAubGVuZ3RoLTE7YT49MDthLS0pe3ZhciBkPXBbYV07aWYoZC5zZWxlY3Rvcj09PXQmJmQuY29udGV4dD09PWUpe2Zvcih2YXIgaD1kLmxpc3RlbmVycyx2PWgubGVuZ3RoLTE7dj49MDt2LS0pe3ZhciBnPWhbdl07aWYoZy5mdW5jPT09aSYmTmUoZy5vcHRpb25zLHUpKXtoLnNwbGljZSh2LDEpLGgubGVuZ3RofHwocC5zcGxpY2UoYSwxKSxzKGUsbixjKSxzKGUsbixsLCEwKSksZj0hMDticmVha319aWYoZilicmVha319fSxkZWxlZ2F0ZUxpc3RlbmVyOmMsZGVsZWdhdGVVc2VDYXB0dXJlOmwsZGVsZWdhdGVkRXZlbnRzOnIsZG9jdW1lbnRzOmksdGFyZ2V0czpuLHN1cHBvcnRzT3B0aW9uczohMSxzdXBwb3J0c1Bhc3NpdmU6ITF9O2Z1bmN0aW9uIGEodCxlLHIsaSl7aWYodC5hZGRFdmVudExpc3RlbmVyKXt2YXIgYT1HZShpKSxzPWJ0KG4sKGZ1bmN0aW9uKGUpe3JldHVybiBlLmV2ZW50VGFyZ2V0PT09dH0pKTtzfHwocz17ZXZlbnRUYXJnZXQ6dCxldmVudHM6e319LG4ucHVzaChzKSkscy5ldmVudHNbZV18fChzLmV2ZW50c1tlXT1bXSksYnQocy5ldmVudHNbZV0sKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZ1bmM9PT1yJiZOZSh0Lm9wdGlvbnMsYSl9KSl8fCh0LmFkZEV2ZW50TGlzdGVuZXIoZSxyLG8uc3VwcG9ydHNPcHRpb25zP2E6YS5jYXB0dXJlKSxzLmV2ZW50c1tlXS5wdXNoKHtmdW5jOnIsb3B0aW9uczphfSkpfX1mdW5jdGlvbiBzKHQsZSxyLGkpe2lmKHQuYWRkRXZlbnRMaXN0ZW5lciYmdC5yZW1vdmVFdmVudExpc3RlbmVyKXt2YXIgYT15dChuLChmdW5jdGlvbihlKXtyZXR1cm4gZS5ldmVudFRhcmdldD09PXR9KSksYz1uW2FdO2lmKGMmJmMuZXZlbnRzKWlmKFwiYWxsXCIhPT1lKXt2YXIgbD0hMSx1PWMuZXZlbnRzW2VdO2lmKHUpe2lmKFwiYWxsXCI9PT1yKXtmb3IodmFyIHA9dS5sZW5ndGgtMTtwPj0wO3AtLSl7dmFyIGY9dVtwXTtzKHQsZSxmLmZ1bmMsZi5vcHRpb25zKX1yZXR1cm59Zm9yKHZhciBkPUdlKGkpLGg9MDtoPHUubGVuZ3RoO2grKyl7dmFyIHY9dVtoXTtpZih2LmZ1bmM9PT1yJiZOZSh2Lm9wdGlvbnMsZCkpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHIsby5zdXBwb3J0c09wdGlvbnM/ZDpkLmNhcHR1cmUpLHUuc3BsaWNlKGgsMSksMD09PXUubGVuZ3RoJiYoZGVsZXRlIGMuZXZlbnRzW2VdLGw9ITApO2JyZWFrfX19bCYmIU9iamVjdC5rZXlzKGMuZXZlbnRzKS5sZW5ndGgmJm4uc3BsaWNlKGEsMSl9ZWxzZSBmb3IoZSBpbiBjLmV2ZW50cyljLmV2ZW50cy5oYXNPd25Qcm9wZXJ0eShlKSYmcyh0LGUsXCJhbGxcIil9fWZ1bmN0aW9uIGModCxlKXtmb3IodmFyIG49R2UoZSksaT1uZXcgV2UodCksbz1yW3QudHlwZV0sYT1odCh0KVswXSxzPWE7dy5lbGVtZW50KHMpOyl7Zm9yKHZhciBjPTA7YzxvLmxlbmd0aDtjKyspe3ZhciBsPW9bY10sdT1sLnNlbGVjdG9yLHA9bC5jb250ZXh0O2lmKFIocyx1KSYmTShwLGEpJiZNKHAscykpe3ZhciBmPWwubGlzdGVuZXJzO2kuY3VycmVudFRhcmdldD1zO2Zvcih2YXIgZD0wO2Q8Zi5sZW5ndGg7ZCsrKXt2YXIgaD1mW2RdO05lKGgub3B0aW9ucyxuKSYmaC5mdW5jKGkpfX19cz1BKHMpfX1mdW5jdGlvbiBsKHQpe3JldHVybiBjKHQsITApfXJldHVybiBudWxsPT0oZT10LmRvY3VtZW50KXx8ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbnVsbCx7Z2V0IGNhcHR1cmUoKXtyZXR1cm4gby5zdXBwb3J0c09wdGlvbnM9ITB9LGdldCBwYXNzaXZlKCl7cmV0dXJuIG8uc3VwcG9ydHNQYXNzaXZlPSEwfX0pLHQuZXZlbnRzPW8sb319LEhlPXttZXRob2RPcmRlcjpbXCJzaW11bGF0aW9uUmVzdW1lXCIsXCJtb3VzZU9yUGVuXCIsXCJoYXNQb2ludGVyXCIsXCJpZGxlXCJdLHNlYXJjaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPUhlLm1ldGhvZE9yZGVyO2U8bi5sZW5ndGg7ZSsrKXt2YXIgcj1uW2VdLGk9SGVbcl0odCk7aWYoaSlyZXR1cm4gaX1yZXR1cm4gbnVsbH0sc2ltdWxhdGlvblJlc3VtZTpmdW5jdGlvbih0KXt2YXIgZT10LnBvaW50ZXJUeXBlLG49dC5ldmVudFR5cGUscj10LmV2ZW50VGFyZ2V0LGk9dC5zY29wZTtpZighL2Rvd258c3RhcnQvaS50ZXN0KG4pKXJldHVybiBudWxsO2Zvcih2YXIgbz0wLGE9aS5pbnRlcmFjdGlvbnMubGlzdDtvPGEubGVuZ3RoO28rKyl7dmFyIHM9YVtvXSxjPXI7aWYocy5zaW11bGF0aW9uJiZzLnNpbXVsYXRpb24uYWxsb3dSZXN1bWUmJnMucG9pbnRlclR5cGU9PT1lKWZvcig7Yzspe2lmKGM9PT1zLmVsZW1lbnQpcmV0dXJuIHM7Yz1BKGMpfX1yZXR1cm4gbnVsbH0sbW91c2VPclBlbjpmdW5jdGlvbih0KXt2YXIgZSxuPXQucG9pbnRlcklkLHI9dC5wb2ludGVyVHlwZSxpPXQuZXZlbnRUeXBlLG89dC5zY29wZTtpZihcIm1vdXNlXCIhPT1yJiZcInBlblwiIT09cilyZXR1cm4gbnVsbDtmb3IodmFyIGE9MCxzPW8uaW50ZXJhY3Rpb25zLmxpc3Q7YTxzLmxlbmd0aDthKyspe3ZhciBjPXNbYV07aWYoYy5wb2ludGVyVHlwZT09PXIpe2lmKGMuc2ltdWxhdGlvbiYmIUtlKGMsbikpY29udGludWU7aWYoYy5pbnRlcmFjdGluZygpKXJldHVybiBjO2V8fChlPWMpfX1pZihlKXJldHVybiBlO2Zvcih2YXIgbD0wLHU9by5pbnRlcmFjdGlvbnMubGlzdDtsPHUubGVuZ3RoO2wrKyl7dmFyIHA9dVtsXTtpZighKHAucG9pbnRlclR5cGUhPT1yfHwvZG93bi9pLnRlc3QoaSkmJnAuc2ltdWxhdGlvbikpcmV0dXJuIHB9cmV0dXJuIG51bGx9LGhhc1BvaW50ZXI6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQucG9pbnRlcklkLG49MCxyPXQuc2NvcGUuaW50ZXJhY3Rpb25zLmxpc3Q7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07aWYoS2UoaSxlKSlyZXR1cm4gaX1yZXR1cm4gbnVsbH0saWRsZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5wb2ludGVyVHlwZSxuPTAscj10LnNjb3BlLmludGVyYWN0aW9ucy5saXN0O248ci5sZW5ndGg7bisrKXt2YXIgaT1yW25dO2lmKDE9PT1pLnBvaW50ZXJzLmxlbmd0aCl7dmFyIG89aS5pbnRlcmFjdGFibGU7aWYobyYmKCFvLm9wdGlvbnMuZ2VzdHVyZXx8IW8ub3B0aW9ucy5nZXN0dXJlLmVuYWJsZWQpKWNvbnRpbnVlfWVsc2UgaWYoaS5wb2ludGVycy5sZW5ndGg+PTIpY29udGludWU7aWYoIWkuaW50ZXJhY3RpbmcoKSYmZT09PWkucG9pbnRlclR5cGUpcmV0dXJuIGl9cmV0dXJuIG51bGx9fTtmdW5jdGlvbiBLZSh0LGUpe3JldHVybiB0LnBvaW50ZXJzLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZX0pKX12YXIgJGU9SGUsSmU9W1wicG9pbnRlckRvd25cIixcInBvaW50ZXJNb3ZlXCIsXCJwb2ludGVyVXBcIixcInVwZGF0ZVBvaW50ZXJcIixcInJlbW92ZVBvaW50ZXJcIixcIndpbmRvd0JsdXJcIl07ZnVuY3Rpb24gUWUodCxlKXtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9ZS5pbnRlcmFjdGlvbnMubGlzdCxpPWR0KG4pLG89aHQobiksYT1vWzBdLHM9b1sxXSxjPVtdO2lmKC9edG91Y2gvLnRlc3Qobi50eXBlKSl7ZS5wcmV2VG91Y2hUaW1lPWUubm93KCk7Zm9yKHZhciBsPTAsdT1uLmNoYW5nZWRUb3VjaGVzO2w8dS5sZW5ndGg7bCsrKXt2YXIgcD11W2xdLGY9e3BvaW50ZXI6cCxwb2ludGVySWQ6YXQocCkscG9pbnRlclR5cGU6aSxldmVudFR5cGU6bi50eXBlLGV2ZW50VGFyZ2V0OmEsY3VyRXZlbnRUYXJnZXQ6cyxzY29wZTplfSxkPVplKGYpO2MucHVzaChbZi5wb2ludGVyLGYuZXZlbnRUYXJnZXQsZi5jdXJFdmVudFRhcmdldCxkXSl9fWVsc2V7dmFyIGg9ITE7aWYoIUkuc3VwcG9ydHNQb2ludGVyRXZlbnQmJi9tb3VzZS8udGVzdChuLnR5cGUpKXtmb3IodmFyIHY9MDt2PHIubGVuZ3RoJiYhaDt2KyspaD1cIm1vdXNlXCIhPT1yW3ZdLnBvaW50ZXJUeXBlJiZyW3ZdLnBvaW50ZXJJc0Rvd247aD1ofHxlLm5vdygpLWUucHJldlRvdWNoVGltZTw1MDB8fDA9PT1uLnRpbWVTdGFtcH1pZighaCl7dmFyIGc9e3BvaW50ZXI6bixwb2ludGVySWQ6YXQobikscG9pbnRlclR5cGU6aSxldmVudFR5cGU6bi50eXBlLGN1ckV2ZW50VGFyZ2V0OnMsZXZlbnRUYXJnZXQ6YSxzY29wZTplfSxtPVplKGcpO2MucHVzaChbZy5wb2ludGVyLGcuZXZlbnRUYXJnZXQsZy5jdXJFdmVudFRhcmdldCxtXSl9fWZvcih2YXIgeT0wO3k8Yy5sZW5ndGg7eSsrKXt2YXIgYj1jW3ldLHg9YlswXSx3PWJbMV0sRT1iWzJdO2JbM11bdF0oeCxuLHcsRSl9fX1mdW5jdGlvbiBaZSh0KXt2YXIgZT10LnBvaW50ZXJUeXBlLG49dC5zY29wZSxyPXtpbnRlcmFjdGlvbjokZS5zZWFyY2godCksc2VhcmNoRGV0YWlsczp0fTtyZXR1cm4gbi5maXJlKFwiaW50ZXJhY3Rpb25zOmZpbmRcIixyKSxyLmludGVyYWN0aW9ufHxuLmludGVyYWN0aW9ucy5uZXcoe3BvaW50ZXJUeXBlOmV9KX1mdW5jdGlvbiB0bih0LGUpe3ZhciBuPXQuZG9jLHI9dC5zY29wZSxpPXQub3B0aW9ucyxvPXIuaW50ZXJhY3Rpb25zLmRvY0V2ZW50cyxhPXIuZXZlbnRzLHM9YVtlXTtmb3IodmFyIGMgaW4gci5icm93c2VyLmlzSU9TJiYhaS5ldmVudHMmJihpLmV2ZW50cz17cGFzc2l2ZTohMX0pLGEuZGVsZWdhdGVkRXZlbnRzKXMobixjLGEuZGVsZWdhdGVMaXN0ZW5lcikscyhuLGMsYS5kZWxlZ2F0ZVVzZUNhcHR1cmUsITApO2Zvcih2YXIgbD1pJiZpLmV2ZW50cyx1PTA7dTxvLmxlbmd0aDt1Kyspe3ZhciBwPW9bdV07cyhuLHAudHlwZSxwLmxpc3RlbmVyLGwpfX12YXIgZW49e2lkOlwiY29yZS9pbnRlcmFjdGlvbnNcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT17fSxuPTA7bjxKZS5sZW5ndGg7bisrKXt2YXIgaT1KZVtuXTtlW2ldPVFlKGksdCl9dmFyIGEsYz1JLnBFdmVudFR5cGVzO2Z1bmN0aW9uIGwoKXtmb3IodmFyIGU9MCxuPXQuaW50ZXJhY3Rpb25zLmxpc3Q7ZTxuLmxlbmd0aDtlKyspe3ZhciByPW5bZV07aWYoci5wb2ludGVySXNEb3duJiZcInRvdWNoXCI9PT1yLnBvaW50ZXJUeXBlJiYhci5faW50ZXJhY3RpbmcpZm9yKHZhciBpPWZ1bmN0aW9uKCl7dmFyIGU9YVtvXTt0LmRvY3VtZW50cy5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gTSh0LmRvYyxlLmRvd25UYXJnZXQpfSkpfHxyLnJlbW92ZVBvaW50ZXIoZS5wb2ludGVyLGUuZXZlbnQpfSxvPTAsYT1yLnBvaW50ZXJzO288YS5sZW5ndGg7bysrKWkoKX19KGE9ay5Qb2ludGVyRXZlbnQ/W3t0eXBlOmMuZG93bixsaXN0ZW5lcjpsfSx7dHlwZTpjLmRvd24sbGlzdGVuZXI6ZS5wb2ludGVyRG93bn0se3R5cGU6Yy5tb3ZlLGxpc3RlbmVyOmUucG9pbnRlck1vdmV9LHt0eXBlOmMudXAsbGlzdGVuZXI6ZS5wb2ludGVyVXB9LHt0eXBlOmMuY2FuY2VsLGxpc3RlbmVyOmUucG9pbnRlclVwfV06W3t0eXBlOlwibW91c2Vkb3duXCIsbGlzdGVuZXI6ZS5wb2ludGVyRG93bn0se3R5cGU6XCJtb3VzZW1vdmVcIixsaXN0ZW5lcjplLnBvaW50ZXJNb3ZlfSx7dHlwZTpcIm1vdXNldXBcIixsaXN0ZW5lcjplLnBvaW50ZXJVcH0se3R5cGU6XCJ0b3VjaHN0YXJ0XCIsbGlzdGVuZXI6bH0se3R5cGU6XCJ0b3VjaHN0YXJ0XCIsbGlzdGVuZXI6ZS5wb2ludGVyRG93bn0se3R5cGU6XCJ0b3VjaG1vdmVcIixsaXN0ZW5lcjplLnBvaW50ZXJNb3ZlfSx7dHlwZTpcInRvdWNoZW5kXCIsbGlzdGVuZXI6ZS5wb2ludGVyVXB9LHt0eXBlOlwidG91Y2hjYW5jZWxcIixsaXN0ZW5lcjplLnBvaW50ZXJVcH1dKS5wdXNoKHt0eXBlOlwiYmx1clwiLGxpc3RlbmVyOmZ1bmN0aW9uKGUpe2Zvcih2YXIgbj0wLHI9dC5pbnRlcmFjdGlvbnMubGlzdDtuPHIubGVuZ3RoO24rKyl7cltuXS5kb2N1bWVudEJsdXIoZSl9fX0pLHQucHJldlRvdWNoVGltZT0wLHQuSW50ZXJhY3Rpb249ZnVuY3Rpb24oZSl7cyhpLGUpO3ZhciBuPXAoaSk7ZnVuY3Rpb24gaSgpe3JldHVybiByKHRoaXMsaSksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIG8oaSxbe2tleTpcInBvaW50ZXJNb3ZlVG9sZXJhbmNlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuaW50ZXJhY3Rpb25zLnBvaW50ZXJNb3ZlVG9sZXJhbmNlfSxzZXQ6ZnVuY3Rpb24oZSl7dC5pbnRlcmFjdGlvbnMucG9pbnRlck1vdmVUb2xlcmFuY2U9ZX19LHtrZXk6XCJfbm93XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdC5ub3coKX19XSksaX0oRGUpLHQuaW50ZXJhY3Rpb25zPXtsaXN0OltdLG5ldzpmdW5jdGlvbihlKXtlLnNjb3BlRmlyZT1mdW5jdGlvbihlLG4pe3JldHVybiB0LmZpcmUoZSxuKX07dmFyIG49bmV3IHQuSW50ZXJhY3Rpb24oZSk7cmV0dXJuIHQuaW50ZXJhY3Rpb25zLmxpc3QucHVzaChuKSxufSxsaXN0ZW5lcnM6ZSxkb2NFdmVudHM6YSxwb2ludGVyTW92ZVRvbGVyYW5jZToxfSx0LnVzZVBsdWdpbihoZSl9LGxpc3RlbmVyczp7XCJzY29wZTphZGQtZG9jdW1lbnRcIjpmdW5jdGlvbih0KXtyZXR1cm4gdG4odCxcImFkZFwiKX0sXCJzY29wZTpyZW1vdmUtZG9jdW1lbnRcIjpmdW5jdGlvbih0KXtyZXR1cm4gdG4odCxcInJlbW92ZVwiKX0sXCJpbnRlcmFjdGFibGU6dW5zZXRcIjpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LmludGVyYWN0YWJsZSxyPWUuaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciBpPWUuaW50ZXJhY3Rpb25zLmxpc3Rbcl07aS5pbnRlcmFjdGFibGU9PT1uJiYoaS5zdG9wKCksZS5maXJlKFwiaW50ZXJhY3Rpb25zOmRlc3Ryb3lcIix7aW50ZXJhY3Rpb246aX0pLGkuZGVzdHJveSgpLGUuaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoPjImJmUuaW50ZXJhY3Rpb25zLmxpc3Quc3BsaWNlKHIsMSkpfX19LG9uRG9jU2lnbmFsOnRuLGRvT25JbnRlcmFjdGlvbnM6UWUsbWV0aG9kTmFtZXM6SmV9LG5uPWVuLHJuPWZ1bmN0aW9uKHQpe3JldHVybiB0W3QuT249MF09XCJPblwiLHRbdC5PZmY9MV09XCJPZmZcIix0fShybnx8e30pLG9uPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLG4saSxvKXtyKHRoaXMsdCksdGhpcy50YXJnZXQ9dm9pZCAwLHRoaXMub3B0aW9ucz12b2lkIDAsdGhpcy5fYWN0aW9ucz12b2lkIDAsdGhpcy5ldmVudHM9bmV3IFZlLHRoaXMuX2NvbnRleHQ9dm9pZCAwLHRoaXMuX3dpbj12b2lkIDAsdGhpcy5fZG9jPXZvaWQgMCx0aGlzLl9zY29wZUV2ZW50cz12b2lkIDAsdGhpcy5fYWN0aW9ucz1uLmFjdGlvbnMsdGhpcy50YXJnZXQ9ZSx0aGlzLl9jb250ZXh0PW4uY29udGV4dHx8aSx0aGlzLl93aW49eShCKGUpP3RoaXMuX2NvbnRleHQ6ZSksdGhpcy5fZG9jPXRoaXMuX3dpbi5kb2N1bWVudCx0aGlzLl9zY29wZUV2ZW50cz1vLHRoaXMuc2V0KG4pfXJldHVybiBvKHQsW3trZXk6XCJfZGVmYXVsdHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57YmFzZTp7fSxwZXJBY3Rpb246e30sYWN0aW9uczp7fX19fSx7a2V5Olwic2V0T25FdmVudHNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB3LmZ1bmMoZS5vbnN0YXJ0KSYmdGhpcy5vbihcIlwiLmNvbmNhdCh0LFwic3RhcnRcIiksZS5vbnN0YXJ0KSx3LmZ1bmMoZS5vbm1vdmUpJiZ0aGlzLm9uKFwiXCIuY29uY2F0KHQsXCJtb3ZlXCIpLGUub25tb3ZlKSx3LmZ1bmMoZS5vbmVuZCkmJnRoaXMub24oXCJcIi5jb25jYXQodCxcImVuZFwiKSxlLm9uZW5kKSx3LmZ1bmMoZS5vbmluZXJ0aWFzdGFydCkmJnRoaXMub24oXCJcIi5jb25jYXQodCxcImluZXJ0aWFzdGFydFwiKSxlLm9uaW5lcnRpYXN0YXJ0KSx0aGlzfX0se2tleTpcInVwZGF0ZVBlckFjdGlvbkxpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcixpPXRoaXMsbz1udWxsPT0ocj10aGlzLl9hY3Rpb25zLm1hcFt0XSk/dm9pZCAwOnIuZmlsdGVyRXZlbnRUeXBlLGE9ZnVuY3Rpb24odCl7cmV0dXJuKG51bGw9PW98fG8odCkpJiZ2ZSh0LGkuX2FjdGlvbnMpfTsody5hcnJheShlKXx8dy5vYmplY3QoZSkpJiZ0aGlzLl9vbk9mZihybi5PZmYsdCxlLHZvaWQgMCxhKSwody5hcnJheShuKXx8dy5vYmplY3QobikpJiZ0aGlzLl9vbk9mZihybi5Pbix0LG4sdm9pZCAwLGEpfX0se2tleTpcInNldFBlckFjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fZGVmYXVsdHM7Zm9yKHZhciByIGluIGUpe3ZhciBpPXIsbz10aGlzLm9wdGlvbnNbdF0sYT1lW2ldO1wibGlzdGVuZXJzXCI9PT1pJiZ0aGlzLnVwZGF0ZVBlckFjdGlvbkxpc3RlbmVycyh0LG8ubGlzdGVuZXJzLGEpLHcuYXJyYXkoYSk/b1tpXT1tdChhKTp3LnBsYWluT2JqZWN0KGEpPyhvW2ldPVYob1tpXXx8e30sZ2UoYSkpLHcub2JqZWN0KG4ucGVyQWN0aW9uW2ldKSYmXCJlbmFibGVkXCJpbiBuLnBlckFjdGlvbltpXSYmKG9baV0uZW5hYmxlZD0hMSE9PWEuZW5hYmxlZCkpOncuYm9vbChhKSYmdy5vYmplY3Qobi5wZXJBY3Rpb25baV0pP29baV0uZW5hYmxlZD1hOm9baV09YX19fSx7a2V5OlwiZ2V0UmVjdFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0PXR8fCh3LmVsZW1lbnQodGhpcy50YXJnZXQpP3RoaXMudGFyZ2V0Om51bGwpLHcuc3RyaW5nKHRoaXMudGFyZ2V0KSYmKHQ9dHx8dGhpcy5fY29udGV4dC5xdWVyeVNlbGVjdG9yKHRoaXMudGFyZ2V0KSksTCh0KX19LHtrZXk6XCJyZWN0Q2hlY2tlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHcuZnVuYyh0KT8odGhpcy5nZXRSZWN0PWZ1bmN0aW9uKG4pe3ZhciByPVYoe30sdC5hcHBseShlLG4pKTtyZXR1cm5cIndpZHRoXCJpbiByfHwoci53aWR0aD1yLnJpZ2h0LXIubGVmdCxyLmhlaWdodD1yLmJvdHRvbS1yLnRvcCkscn0sdGhpcyk6bnVsbD09PXQ/KGRlbGV0ZSB0aGlzLmdldFJlY3QsdGhpcyk6dGhpcy5nZXRSZWN0fX0se2tleTpcIl9iYWNrQ29tcGF0T3B0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihCKGUpfHx3Lm9iamVjdChlKSl7Zm9yKHZhciBuIGluIHRoaXMub3B0aW9uc1t0XT1lLHRoaXMuX2FjdGlvbnMubWFwKXRoaXMub3B0aW9uc1tuXVt0XT1lO3JldHVybiB0aGlzfXJldHVybiB0aGlzLm9wdGlvbnNbdF19fSx7a2V5Olwib3JpZ2luXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2JhY2tDb21wYXRPcHRpb24oXCJvcmlnaW5cIix0KX19LHtrZXk6XCJkZWx0YVNvdXJjZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVyblwicGFnZVwiPT09dHx8XCJjbGllbnRcIj09PXQ/KHRoaXMub3B0aW9ucy5kZWx0YVNvdXJjZT10LHRoaXMpOnRoaXMub3B0aW9ucy5kZWx0YVNvdXJjZX19LHtrZXk6XCJnZXRBbGxFbGVtZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy50YXJnZXQ7cmV0dXJuIHcuc3RyaW5nKHQpP0FycmF5LmZyb20odGhpcy5fY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHQpKTp3LmZ1bmModCkmJnQuZ2V0QWxsRWxlbWVudHM/dC5nZXRBbGxFbGVtZW50cygpOncuZWxlbWVudCh0KT9bdF06W119fSx7a2V5OlwiY29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbnRleHR9fSx7a2V5OlwiaW5Db250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2NvbnRleHQ9PT10Lm93bmVyRG9jdW1lbnR8fE0odGhpcy5fY29udGV4dCx0KX19LHtrZXk6XCJ0ZXN0SWdub3JlQWxsb3dcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIXRoaXMudGVzdElnbm9yZSh0Lmlnbm9yZUZyb20sZSxuKSYmdGhpcy50ZXN0QWxsb3codC5hbGxvd0Zyb20sZSxuKX19LHtrZXk6XCJ0ZXN0QWxsb3dcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIXR8fCEhdy5lbGVtZW50KG4pJiYody5zdHJpbmcodCk/RihuLHQsZSk6ISF3LmVsZW1lbnQodCkmJk0odCxuKSl9fSx7a2V5OlwidGVzdElnbm9yZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4hKCF0fHwhdy5lbGVtZW50KG4pKSYmKHcuc3RyaW5nKHQpP0Yobix0LGUpOiEhdy5lbGVtZW50KHQpJiZNKHQsbikpfX0se2tleTpcImZpcmVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ldmVudHMuZmlyZSh0KSx0aGlzfX0se2tleTpcIl9vbk9mZlwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsaSl7dy5vYmplY3QoZSkmJiF3LmFycmF5KGUpJiYocj1uLG49bnVsbCk7dmFyIG89JChlLG4saSk7Zm9yKHZhciBhIGluIG8pe1wid2hlZWxcIj09PWEmJihhPUkud2hlZWxFdmVudCk7Zm9yKHZhciBzPTAsYz1vW2FdO3M8Yy5sZW5ndGg7cysrKXt2YXIgbD1jW3NdO3ZlKGEsdGhpcy5fYWN0aW9ucyk/dGhpcy5ldmVudHNbdD09PXJuLk9uP1wib25cIjpcIm9mZlwiXShhLGwpOncuc3RyaW5nKHRoaXMudGFyZ2V0KT90aGlzLl9zY29wZUV2ZW50c1t0PT09cm4uT24/XCJhZGREZWxlZ2F0ZVwiOlwicmVtb3ZlRGVsZWdhdGVcIl0odGhpcy50YXJnZXQsdGhpcy5fY29udGV4dCxhLGwscik6dGhpcy5fc2NvcGVFdmVudHNbdD09PXJuLk9uP1wiYWRkXCI6XCJyZW1vdmVcIl0odGhpcy50YXJnZXQsYSxsLHIpfX1yZXR1cm4gdGhpc319LHtrZXk6XCJvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5fb25PZmYocm4uT24sdCxlLG4pfX0se2tleTpcIm9mZlwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5fb25PZmYocm4uT2ZmLHQsZSxuKX19LHtrZXk6XCJzZXRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9kZWZhdWx0cztmb3IodmFyIG4gaW4gdy5vYmplY3QodCl8fCh0PXt9KSx0aGlzLm9wdGlvbnM9Z2UoZS5iYXNlKSx0aGlzLl9hY3Rpb25zLm1ldGhvZERpY3Qpe3ZhciByPW4saT10aGlzLl9hY3Rpb25zLm1ldGhvZERpY3Rbcl07dGhpcy5vcHRpb25zW3JdPXt9LHRoaXMuc2V0UGVyQWN0aW9uKHIsVihWKHt9LGUucGVyQWN0aW9uKSxlLmFjdGlvbnNbcl0pKSx0aGlzW2ldKHRbcl0pfWZvcih2YXIgbyBpbiB0KVwiZ2V0UmVjdFwiIT09bz93LmZ1bmModGhpc1tvXSkmJnRoaXNbb10odFtvXSk6dGhpcy5yZWN0Q2hlY2tlcih0LmdldFJlY3QpO3JldHVybiB0aGlzfX0se2tleTpcInVuc2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih3LnN0cmluZyh0aGlzLnRhcmdldCkpZm9yKHZhciB0IGluIHRoaXMuX3Njb3BlRXZlbnRzLmRlbGVnYXRlZEV2ZW50cylmb3IodmFyIGU9dGhpcy5fc2NvcGVFdmVudHMuZGVsZWdhdGVkRXZlbnRzW3RdLG49ZS5sZW5ndGgtMTtuPj0wO24tLSl7dmFyIHI9ZVtuXSxpPXIuc2VsZWN0b3Isbz1yLmNvbnRleHQsYT1yLmxpc3RlbmVycztpPT09dGhpcy50YXJnZXQmJm89PT10aGlzLl9jb250ZXh0JiZlLnNwbGljZShuLDEpO2Zvcih2YXIgcz1hLmxlbmd0aC0xO3M+PTA7cy0tKXRoaXMuX3Njb3BlRXZlbnRzLnJlbW92ZURlbGVnYXRlKHRoaXMudGFyZ2V0LHRoaXMuX2NvbnRleHQsdCxhW3NdWzBdLGFbc11bMV0pfWVsc2UgdGhpcy5fc2NvcGVFdmVudHMucmVtb3ZlKHRoaXMudGFyZ2V0LFwiYWxsXCIpfX1dKSx0fSgpLGFuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj10aGlzO3IodGhpcyx0KSx0aGlzLmxpc3Q9W10sdGhpcy5zZWxlY3Rvck1hcD17fSx0aGlzLnNjb3BlPXZvaWQgMCx0aGlzLnNjb3BlPWUsZS5hZGRMaXN0ZW5lcnMoe1wiaW50ZXJhY3RhYmxlOnVuc2V0XCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGFibGUscj1lLnRhcmdldCxpPXcuc3RyaW5nKHIpP24uc2VsZWN0b3JNYXBbcl06cltuLnNjb3BlLmlkXSxvPXl0KGksKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09ZX0pKTtpLnNwbGljZShvLDEpfX0pfXJldHVybiBvKHQsW3trZXk6XCJuZXdcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2U9VihlfHx7fSx7YWN0aW9uczp0aGlzLnNjb3BlLmFjdGlvbnN9KTt2YXIgbj1uZXcgdGhpcy5zY29wZS5JbnRlcmFjdGFibGUodCxlLHRoaXMuc2NvcGUuZG9jdW1lbnQsdGhpcy5zY29wZS5ldmVudHMpO3JldHVybiB0aGlzLnNjb3BlLmFkZERvY3VtZW50KG4uX2RvYyksdGhpcy5saXN0LnB1c2gobiksdy5zdHJpbmcodCk/KHRoaXMuc2VsZWN0b3JNYXBbdF18fCh0aGlzLnNlbGVjdG9yTWFwW3RdPVtdKSx0aGlzLnNlbGVjdG9yTWFwW3RdLnB1c2gobikpOihuLnRhcmdldFt0aGlzLnNjb3BlLmlkXXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsdGhpcy5zY29wZS5pZCx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSksdFt0aGlzLnNjb3BlLmlkXS5wdXNoKG4pKSx0aGlzLnNjb3BlLmZpcmUoXCJpbnRlcmFjdGFibGU6bmV3XCIse3RhcmdldDp0LG9wdGlvbnM6ZSxpbnRlcmFjdGFibGU6bix3aW46dGhpcy5zY29wZS5fd2lufSksbn19LHtrZXk6XCJnZXRFeGlzdGluZ1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZSYmZS5jb250ZXh0fHx0aGlzLnNjb3BlLmRvY3VtZW50LHI9dy5zdHJpbmcodCksaT1yP3RoaXMuc2VsZWN0b3JNYXBbdF06dFt0aGlzLnNjb3BlLmlkXTtpZihpKXJldHVybiBidChpLChmdW5jdGlvbihlKXtyZXR1cm4gZS5fY29udGV4dD09PW4mJihyfHxlLmluQ29udGV4dCh0KSl9KSl9fSx7a2V5OlwiZm9yRWFjaE1hdGNoXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MCxyPXRoaXMubGlzdDtuPHIubGVuZ3RoO24rKyl7dmFyIGk9cltuXSxvPXZvaWQgMDtpZigody5zdHJpbmcoaS50YXJnZXQpP3cuZWxlbWVudCh0KSYmUih0LGkudGFyZ2V0KTp0PT09aS50YXJnZXQpJiZpLmluQ29udGV4dCh0KSYmKG89ZShpKSksdm9pZCAwIT09bylyZXR1cm4gb319fV0pLHR9KCk7dmFyIHNuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXM7cih0aGlzLHQpLHRoaXMuaWQ9XCJfX2ludGVyYWN0X3Njb3BlX1wiLmNvbmNhdChNYXRoLmZsb29yKDEwMCpNYXRoLnJhbmRvbSgpKSksdGhpcy5pc0luaXRpYWxpemVkPSExLHRoaXMubGlzdGVuZXJNYXBzPVtdLHRoaXMuYnJvd3Nlcj1JLHRoaXMuZGVmYXVsdHM9Z2UoVGUpLHRoaXMuRXZlbnRhYmxlPVZlLHRoaXMuYWN0aW9ucz17bWFwOnt9LHBoYXNlczp7c3RhcnQ6ITAsbW92ZTohMCxlbmQ6ITB9LG1ldGhvZERpY3Q6e30scGhhc2VsZXNzVHlwZXM6e319LHRoaXMuaW50ZXJhY3RTdGF0aWM9ZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24gZShuLHIpe3ZhciBpPXQuaW50ZXJhY3RhYmxlcy5nZXRFeGlzdGluZyhuLHIpO3JldHVybiBpfHwoKGk9dC5pbnRlcmFjdGFibGVzLm5ldyhuLHIpKS5ldmVudHMuZ2xvYmFsPWUuZ2xvYmFsRXZlbnRzKSxpfTtyZXR1cm4gZS5nZXRQb2ludGVyQXZlcmFnZT1sdCxlLmdldFRvdWNoQkJveD11dCxlLmdldFRvdWNoRGlzdGFuY2U9cHQsZS5nZXRUb3VjaEFuZ2xlPWZ0LGUuZ2V0RWxlbWVudFJlY3Q9TCxlLmdldEVsZW1lbnRDbGllbnRSZWN0PVksZS5tYXRjaGVzU2VsZWN0b3I9UixlLmNsb3Nlc3Q9eixlLmdsb2JhbEV2ZW50cz17fSxlLnZlcnNpb249XCIxLjEwLjI3XCIsZS5zY29wZT10LGUudXNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuc2NvcGUudXNlUGx1Z2luKHQsZSksdGhpc30sZS5pc1NldD1mdW5jdGlvbih0LGUpe3JldHVybiEhdGhpcy5zY29wZS5pbnRlcmFjdGFibGVzLmdldCh0LGUmJmUuY29udGV4dCl9LGUub249TnQoKGZ1bmN0aW9uKHQsZSxuKXtpZih3LnN0cmluZyh0KSYmLTEhPT10LnNlYXJjaChcIiBcIikmJih0PXQudHJpbSgpLnNwbGl0KC8gKy8pKSx3LmFycmF5KHQpKXtmb3IodmFyIHI9MCxpPXQ7cjxpLmxlbmd0aDtyKyspe3ZhciBvPWlbcl07dGhpcy5vbihvLGUsbil9cmV0dXJuIHRoaXN9aWYody5vYmplY3QodCkpe2Zvcih2YXIgYSBpbiB0KXRoaXMub24oYSx0W2FdLGUpO3JldHVybiB0aGlzfXJldHVybiB2ZSh0LHRoaXMuc2NvcGUuYWN0aW9ucyk/dGhpcy5nbG9iYWxFdmVudHNbdF0/dGhpcy5nbG9iYWxFdmVudHNbdF0ucHVzaChlKTp0aGlzLmdsb2JhbEV2ZW50c1t0XT1bZV06dGhpcy5zY29wZS5ldmVudHMuYWRkKHRoaXMuc2NvcGUuZG9jdW1lbnQsdCxlLHtvcHRpb25zOm59KSx0aGlzfSksXCJUaGUgaW50ZXJhY3Qub24oKSBtZXRob2QgaXMgYmVpbmcgZGVwcmVjYXRlZFwiKSxlLm9mZj1OdCgoZnVuY3Rpb24odCxlLG4pe2lmKHcuc3RyaW5nKHQpJiYtMSE9PXQuc2VhcmNoKFwiIFwiKSYmKHQ9dC50cmltKCkuc3BsaXQoLyArLykpLHcuYXJyYXkodCkpe2Zvcih2YXIgcj0wLGk9dDtyPGkubGVuZ3RoO3IrKyl7dmFyIG89aVtyXTt0aGlzLm9mZihvLGUsbil9cmV0dXJuIHRoaXN9aWYody5vYmplY3QodCkpe2Zvcih2YXIgYSBpbiB0KXRoaXMub2ZmKGEsdFthXSxlKTtyZXR1cm4gdGhpc312YXIgcztyZXR1cm4gdmUodCx0aGlzLnNjb3BlLmFjdGlvbnMpP3QgaW4gdGhpcy5nbG9iYWxFdmVudHMmJi0xIT09KHM9dGhpcy5nbG9iYWxFdmVudHNbdF0uaW5kZXhPZihlKSkmJnRoaXMuZ2xvYmFsRXZlbnRzW3RdLnNwbGljZShzLDEpOnRoaXMuc2NvcGUuZXZlbnRzLnJlbW92ZSh0aGlzLnNjb3BlLmRvY3VtZW50LHQsZSxuKSx0aGlzfSksXCJUaGUgaW50ZXJhY3Qub2ZmKCkgbWV0aG9kIGlzIGJlaW5nIGRlcHJlY2F0ZWRcIiksZS5kZWJ1Zz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNjb3BlfSxlLnN1cHBvcnRzVG91Y2g9ZnVuY3Rpb24oKXtyZXR1cm4gSS5zdXBwb3J0c1RvdWNofSxlLnN1cHBvcnRzUG9pbnRlckV2ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIEkuc3VwcG9ydHNQb2ludGVyRXZlbnR9LGUuc3RvcD1mdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9dGhpcy5zY29wZS5pbnRlcmFjdGlvbnMubGlzdDt0PGUubGVuZ3RoO3QrKyllW3RdLnN0b3AoKTtyZXR1cm4gdGhpc30sZS5wb2ludGVyTW92ZVRvbGVyYW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gdy5udW1iZXIodCk/KHRoaXMuc2NvcGUuaW50ZXJhY3Rpb25zLnBvaW50ZXJNb3ZlVG9sZXJhbmNlPXQsdGhpcyk6dGhpcy5zY29wZS5pbnRlcmFjdGlvbnMucG9pbnRlck1vdmVUb2xlcmFuY2V9LGUuYWRkRG9jdW1lbnQ9ZnVuY3Rpb24odCxlKXt0aGlzLnNjb3BlLmFkZERvY3VtZW50KHQsZSl9LGUucmVtb3ZlRG9jdW1lbnQ9ZnVuY3Rpb24odCl7dGhpcy5zY29wZS5yZW1vdmVEb2N1bWVudCh0KX0sZX0odGhpcyksdGhpcy5JbnRlcmFjdEV2ZW50PVNlLHRoaXMuSW50ZXJhY3RhYmxlPXZvaWQgMCx0aGlzLmludGVyYWN0YWJsZXM9bmV3IGFuKHRoaXMpLHRoaXMuX3dpbj12b2lkIDAsdGhpcy5kb2N1bWVudD12b2lkIDAsdGhpcy53aW5kb3c9dm9pZCAwLHRoaXMuZG9jdW1lbnRzPVtdLHRoaXMuX3BsdWdpbnM9e2xpc3Q6W10sbWFwOnt9fSx0aGlzLm9uV2luZG93VW5sb2FkPWZ1bmN0aW9uKHQpe3JldHVybiBlLnJlbW92ZURvY3VtZW50KHQudGFyZ2V0KX07dmFyIG49dGhpczt0aGlzLkludGVyYWN0YWJsZT1mdW5jdGlvbih0KXtzKGksdCk7dmFyIGU9cChpKTtmdW5jdGlvbiBpKCl7cmV0dXJuIHIodGhpcyxpKSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gbyhpLFt7a2V5OlwiX2RlZmF1bHRzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdHN9fSx7a2V5Olwic2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGYoYyhpLnByb3RvdHlwZSksXCJzZXRcIix0aGlzKS5jYWxsKHRoaXMsdCksbi5maXJlKFwiaW50ZXJhY3RhYmxlOnNldFwiLHtvcHRpb25zOnQsaW50ZXJhY3RhYmxlOnRoaXN9KSx0aGlzfX0se2tleTpcInVuc2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXtmKGMoaS5wcm90b3R5cGUpLFwidW5zZXRcIix0aGlzKS5jYWxsKHRoaXMpO3ZhciB0PW4uaW50ZXJhY3RhYmxlcy5saXN0LmluZGV4T2YodGhpcyk7dDwwfHwobi5pbnRlcmFjdGFibGVzLmxpc3Quc3BsaWNlKHQsMSksbi5maXJlKFwiaW50ZXJhY3RhYmxlOnVuc2V0XCIse2ludGVyYWN0YWJsZTp0aGlzfSkpfX1dKSxpfShvbil9cmV0dXJuIG8odCxbe2tleTpcImFkZExpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5saXN0ZW5lck1hcHMucHVzaCh7aWQ6ZSxtYXA6dH0pfX0se2tleTpcImZpcmVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wLHI9dGhpcy5saXN0ZW5lck1hcHM7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl0ubWFwW3RdO2lmKGkmJiExPT09aShlLHRoaXMsdCkpcmV0dXJuITF9fX0se2tleTpcImluaXRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5pc0luaXRpYWxpemVkP3RoaXM6ZnVuY3Rpb24odCxlKXt0LmlzSW5pdGlhbGl6ZWQ9ITAsdy53aW5kb3coZSkmJm0oZSk7cmV0dXJuIGsuaW5pdChlKSxJLmluaXQoZSksTHQuaW5pdChlKSx0LndpbmRvdz1lLHQuZG9jdW1lbnQ9ZS5kb2N1bWVudCx0LnVzZVBsdWdpbihubiksdC51c2VQbHVnaW4oVWUpLHR9KHRoaXMsdCl9fSx7a2V5OlwicGx1Z2luSXNJbnN0YWxsZWRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LmlkO3JldHVybiBlPyEhdGhpcy5fcGx1Z2lucy5tYXBbZV06LTEhPT10aGlzLl9wbHVnaW5zLmxpc3QuaW5kZXhPZih0KX19LHtrZXk6XCJ1c2VQbHVnaW5cIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKCF0aGlzLmlzSW5pdGlhbGl6ZWQpcmV0dXJuIHRoaXM7aWYodGhpcy5wbHVnaW5Jc0luc3RhbGxlZCh0KSlyZXR1cm4gdGhpcztpZih0LmlkJiYodGhpcy5fcGx1Z2lucy5tYXBbdC5pZF09dCksdGhpcy5fcGx1Z2lucy5saXN0LnB1c2godCksdC5pbnN0YWxsJiZ0Lmluc3RhbGwodGhpcyxlKSx0Lmxpc3RlbmVycyYmdC5iZWZvcmUpe2Zvcih2YXIgbj0wLHI9dGhpcy5saXN0ZW5lck1hcHMubGVuZ3RoLGk9dC5iZWZvcmUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0W2VdPSEwLHRbY24oZSldPSEwLHR9KSx7fSk7bjxyO24rKyl7dmFyIG89dGhpcy5saXN0ZW5lck1hcHNbbl0uaWQ7aWYobyYmKGlbb118fGlbY24obyldKSlicmVha310aGlzLmxpc3RlbmVyTWFwcy5zcGxpY2UobiwwLHtpZDp0LmlkLG1hcDp0Lmxpc3RlbmVyc30pfWVsc2UgdC5saXN0ZW5lcnMmJnRoaXMubGlzdGVuZXJNYXBzLnB1c2goe2lkOnQuaWQsbWFwOnQubGlzdGVuZXJzfSk7cmV0dXJuIHRoaXN9fSx7a2V5OlwiYWRkRG9jdW1lbnRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKC0xIT09dGhpcy5nZXREb2NJbmRleCh0KSlyZXR1cm4hMTt2YXIgbj15KHQpO2U9ZT9WKHt9LGUpOnt9LHRoaXMuZG9jdW1lbnRzLnB1c2goe2RvYzp0LG9wdGlvbnM6ZX0pLHRoaXMuZXZlbnRzLmRvY3VtZW50cy5wdXNoKHQpLHQhPT10aGlzLmRvY3VtZW50JiZ0aGlzLmV2ZW50cy5hZGQobixcInVubG9hZFwiLHRoaXMub25XaW5kb3dVbmxvYWQpLHRoaXMuZmlyZShcInNjb3BlOmFkZC1kb2N1bWVudFwiLHtkb2M6dCx3aW5kb3c6bixzY29wZTp0aGlzLG9wdGlvbnM6ZX0pfX0se2tleTpcInJlbW92ZURvY3VtZW50XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXREb2NJbmRleCh0KSxuPXkodCkscj10aGlzLmRvY3VtZW50c1tlXS5vcHRpb25zO3RoaXMuZXZlbnRzLnJlbW92ZShuLFwidW5sb2FkXCIsdGhpcy5vbldpbmRvd1VubG9hZCksdGhpcy5kb2N1bWVudHMuc3BsaWNlKGUsMSksdGhpcy5ldmVudHMuZG9jdW1lbnRzLnNwbGljZShlLDEpLHRoaXMuZmlyZShcInNjb3BlOnJlbW92ZS1kb2N1bWVudFwiLHtkb2M6dCx3aW5kb3c6bixzY29wZTp0aGlzLG9wdGlvbnM6cn0pfX0se2tleTpcImdldERvY0luZGV4XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLmRvY3VtZW50cy5sZW5ndGg7ZSsrKWlmKHRoaXMuZG9jdW1lbnRzW2VdLmRvYz09PXQpcmV0dXJuIGU7cmV0dXJuLTF9fSx7a2V5OlwiZ2V0RG9jT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0RG9jSW5kZXgodCk7cmV0dXJuLTE9PT1lP251bGw6dGhpcy5kb2N1bWVudHNbZV0ub3B0aW9uc319LHtrZXk6XCJub3dcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLndpbmRvdy5EYXRlfHxEYXRlKS5ub3coKX19XSksdH0oKTtmdW5jdGlvbiBjbih0KXtyZXR1cm4gdCYmdC5yZXBsYWNlKC9cXC8uKiQvLFwiXCIpfXZhciBsbj1uZXcgc24sdW49bG4uaW50ZXJhY3RTdGF0aWMscG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp3aW5kb3c7bG4uaW5pdChwbik7dmFyIGZuPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGVkZ2VUYXJnZXQ6ZnVuY3Rpb24oKXt9LGVsZW1lbnRzOmZ1bmN0aW9uKCl7fSxncmlkOmZ1bmN0aW9uKHQpe3ZhciBlPVtbXCJ4XCIsXCJ5XCJdLFtcImxlZnRcIixcInRvcFwiXSxbXCJyaWdodFwiLFwiYm90dG9tXCJdLFtcIndpZHRoXCIsXCJoZWlnaHRcIl1dLmZpbHRlcigoZnVuY3Rpb24oZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJuIG4gaW4gdHx8ciBpbiB0fSkpLG49ZnVuY3Rpb24obixyKXtmb3IodmFyIGk9dC5yYW5nZSxvPXQubGltaXRzLGE9dm9pZCAwPT09bz97bGVmdDotMS8wLHJpZ2h0OjEvMCx0b3A6LTEvMCxib3R0b206MS8wfTpvLHM9dC5vZmZzZXQsYz12b2lkIDA9PT1zP3t4OjAseTowfTpzLGw9e3JhbmdlOmksZ3JpZDp0LHg6bnVsbCx5Om51bGx9LHU9MDt1PGUubGVuZ3RoO3UrKyl7dmFyIHA9ZVt1XSxmPXBbMF0sZD1wWzFdLGg9TWF0aC5yb3VuZCgobi1jLngpL3RbZl0pLHY9TWF0aC5yb3VuZCgoci1jLnkpL3RbZF0pO2xbZl09TWF0aC5tYXgoYS5sZWZ0LE1hdGgubWluKGEucmlnaHQsaCp0W2ZdK2MueCkpLGxbZF09TWF0aC5tYXgoYS50b3AsTWF0aC5taW4oYS5ib3R0b20sdip0W2RdK2MueSkpfXJldHVybiBsfTtyZXR1cm4gbi5ncmlkPXQsbi5jb29yZEZpZWxkcz1lLG59fSksZG49e2lkOlwic25hcHBlcnNcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3RTdGF0aWM7ZS5zbmFwcGVycz1WKGUuc25hcHBlcnN8fHt9LGZuKSxlLmNyZWF0ZVNuYXBHcmlkPWUuc25hcHBlcnMuZ3JpZH19LGhuPWRuLHZuPXtzdGFydDpmdW5jdGlvbih0KXt2YXIgbj10LnN0YXRlLHI9dC5yZWN0LGk9dC5lZGdlcyxvPXQucGFnZUNvb3JkcyxhPW4ub3B0aW9ucyxzPWEucmF0aW8sYz1hLmVuYWJsZWQsbD1uLm9wdGlvbnMsdT1sLmVxdWFsRGVsdGEscD1sLm1vZGlmaWVycztcInByZXNlcnZlXCI9PT1zJiYocz1yLndpZHRoL3IuaGVpZ2h0KSxuLnN0YXJ0Q29vcmRzPVYoe30sbyksbi5zdGFydFJlY3Q9Vih7fSxyKSxuLnJhdGlvPXMsbi5lcXVhbERlbHRhPXU7dmFyIGY9bi5saW5rZWRFZGdlcz17dG9wOmkudG9wfHxpLmxlZnQmJiFpLmJvdHRvbSxsZWZ0OmkubGVmdHx8aS50b3AmJiFpLnJpZ2h0LGJvdHRvbTppLmJvdHRvbXx8aS5yaWdodCYmIWkudG9wLHJpZ2h0OmkucmlnaHR8fGkuYm90dG9tJiYhaS5sZWZ0fTtpZihuLnhJc1ByaW1hcnlBeGlzPSEoIWkubGVmdCYmIWkucmlnaHQpLG4uZXF1YWxEZWx0YSl7dmFyIGQ9KGYubGVmdD8xOi0xKSooZi50b3A/MTotMSk7bi5lZGdlU2lnbj17eDpkLHk6ZH19ZWxzZSBuLmVkZ2VTaWduPXt4OmYubGVmdD8tMToxLHk6Zi50b3A/LTE6MX07aWYoITEhPT1jJiZWKGksZiksbnVsbCE9cCYmcC5sZW5ndGgpe3ZhciBoPW5ldyBtZSh0LmludGVyYWN0aW9uKTtoLmNvcHlGcm9tKHQuaW50ZXJhY3Rpb24ubW9kaWZpY2F0aW9uKSxoLnByZXBhcmVTdGF0ZXMocCksbi5zdWJNb2RpZmljYXRpb249aCxoLnN0YXJ0QWxsKGUoe30sdCkpfX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBuPXQuc3RhdGUscj10LnJlY3QsaT10LmNvb3JkcyxvPW4ubGlua2VkRWRnZXMsYT1WKHt9LGkpLHM9bi5lcXVhbERlbHRhP2duOm1uO2lmKFYodC5lZGdlcyxvKSxzKG4sbi54SXNQcmltYXJ5QXhpcyxpLHIpLCFuLnN1Yk1vZGlmaWNhdGlvbilyZXR1cm4gbnVsbDt2YXIgYz1WKHt9LHIpO0gobyxjLHt4OmkueC1hLngseTppLnktYS55fSk7dmFyIGw9bi5zdWJNb2RpZmljYXRpb24uc2V0QWxsKGUoZSh7fSx0KSx7fSx7cmVjdDpjLGVkZ2VzOm8scGFnZUNvb3JkczppLHByZXZDb29yZHM6aSxwcmV2UmVjdDpjfSkpLHU9bC5kZWx0YTtsLmNoYW5nZWQmJihzKG4sTWF0aC5hYnModS54KT5NYXRoLmFicyh1LnkpLGwuY29vcmRzLGwucmVjdCksVihpLGwuY29vcmRzKSk7cmV0dXJuIGwuZXZlbnRQcm9wc30sZGVmYXVsdHM6e3JhdGlvOlwicHJlc2VydmVcIixlcXVhbERlbHRhOiExLG1vZGlmaWVyczpbXSxlbmFibGVkOiExfX07ZnVuY3Rpb24gZ24odCxlLG4pe3ZhciByPXQuc3RhcnRDb29yZHMsaT10LmVkZ2VTaWduO2U/bi55PXIueSsobi54LXIueCkqaS55Om4ueD1yLngrKG4ueS1yLnkpKmkueH1mdW5jdGlvbiBtbih0LGUsbixyKXt2YXIgaT10LnN0YXJ0UmVjdCxvPXQuc3RhcnRDb29yZHMsYT10LnJhdGlvLHM9dC5lZGdlU2lnbjtpZihlKXt2YXIgYz1yLndpZHRoL2E7bi55PW8ueSsoYy1pLmhlaWdodCkqcy55fWVsc2V7dmFyIGw9ci5oZWlnaHQqYTtuLng9by54KyhsLWkud2lkdGgpKnMueH19dmFyIHluPWJlKHZuLFwiYXNwZWN0UmF0aW9cIiksYm49ZnVuY3Rpb24oKXt9O2JuLl9kZWZhdWx0cz17fTt2YXIgeG49Ym47ZnVuY3Rpb24gd24odCxlLG4pe3JldHVybiB3LmZ1bmModCk/Ryh0LGUuaW50ZXJhY3RhYmxlLGUuZWxlbWVudCxbbi54LG4ueSxlXSk6Ryh0LGUuaW50ZXJhY3RhYmxlLGUuZWxlbWVudCl9dmFyIEVuPXtzdGFydDpmdW5jdGlvbih0KXt2YXIgZT10LnJlY3Qsbj10LnN0YXJ0T2Zmc2V0LHI9dC5zdGF0ZSxpPXQuaW50ZXJhY3Rpb24sbz10LnBhZ2VDb29yZHMsYT1yLm9wdGlvbnMscz1hLmVsZW1lbnRSZWN0LGM9Vih7bGVmdDowLHRvcDowLHJpZ2h0OjAsYm90dG9tOjB9LGEub2Zmc2V0fHx7fSk7aWYoZSYmcyl7dmFyIGw9d24oYS5yZXN0cmljdGlvbixpLG8pO2lmKGwpe3ZhciB1PWwucmlnaHQtbC5sZWZ0LWUud2lkdGgscD1sLmJvdHRvbS1sLnRvcC1lLmhlaWdodDt1PDAmJihjLmxlZnQrPXUsYy5yaWdodCs9dSkscDwwJiYoYy50b3ArPXAsYy5ib3R0b20rPXApfWMubGVmdCs9bi5sZWZ0LWUud2lkdGgqcy5sZWZ0LGMudG9wKz1uLnRvcC1lLmhlaWdodCpzLnRvcCxjLnJpZ2h0Kz1uLnJpZ2h0LWUud2lkdGgqKDEtcy5yaWdodCksYy5ib3R0b20rPW4uYm90dG9tLWUuaGVpZ2h0KigxLXMuYm90dG9tKX1yLm9mZnNldD1jfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9dC5jb29yZHMsbj10LmludGVyYWN0aW9uLHI9dC5zdGF0ZSxpPXIub3B0aW9ucyxvPXIub2Zmc2V0LGE9d24oaS5yZXN0cmljdGlvbixuLGUpO2lmKGEpe3ZhciBzPWZ1bmN0aW9uKHQpe3JldHVybiF0fHxcImxlZnRcImluIHQmJlwidG9wXCJpbiB0fHwoKHQ9Vih7fSx0KSkubGVmdD10Lnh8fDAsdC50b3A9dC55fHwwLHQucmlnaHQ9dC5yaWdodHx8dC5sZWZ0K3Qud2lkdGgsdC5ib3R0b209dC5ib3R0b218fHQudG9wK3QuaGVpZ2h0KSx0fShhKTtlLng9TWF0aC5tYXgoTWF0aC5taW4ocy5yaWdodC1vLnJpZ2h0LGUueCkscy5sZWZ0K28ubGVmdCksZS55PU1hdGgubWF4KE1hdGgubWluKHMuYm90dG9tLW8uYm90dG9tLGUueSkscy50b3Arby50b3ApfX0sZGVmYXVsdHM6e3Jlc3RyaWN0aW9uOm51bGwsZWxlbWVudFJlY3Q6bnVsbCxvZmZzZXQ6bnVsbCxlbmRPbmx5OiExLGVuYWJsZWQ6ITF9fSxUbj1iZShFbixcInJlc3RyaWN0XCIpLFNuPXt0b3A6MS8wLGxlZnQ6MS8wLGJvdHRvbTotMS8wLHJpZ2h0Oi0xLzB9LF9uPXt0b3A6LTEvMCxsZWZ0Oi0xLzAsYm90dG9tOjEvMCxyaWdodDoxLzB9O2Z1bmN0aW9uIFBuKHQsZSl7Zm9yKHZhciBuPTAscj1bXCJ0b3BcIixcImxlZnRcIixcImJvdHRvbVwiLFwicmlnaHRcIl07bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07aSBpbiB0fHwodFtpXT1lW2ldKX1yZXR1cm4gdH12YXIgT249e25vSW5uZXI6U24sbm9PdXRlcjpfbixzdGFydDpmdW5jdGlvbih0KXt2YXIgZSxuPXQuaW50ZXJhY3Rpb24scj10LnN0YXJ0T2Zmc2V0LGk9dC5zdGF0ZSxvPWkub3B0aW9ucztvJiYoZT1OKHduKG8ub2Zmc2V0LG4sbi5jb29yZHMuc3RhcnQucGFnZSkpKSxlPWV8fHt4OjAseTowfSxpLm9mZnNldD17dG9wOmUueStyLnRvcCxsZWZ0OmUueCtyLmxlZnQsYm90dG9tOmUueS1yLmJvdHRvbSxyaWdodDplLngtci5yaWdodH19LHNldDpmdW5jdGlvbih0KXt2YXIgZT10LmNvb3JkcyxuPXQuZWRnZXMscj10LmludGVyYWN0aW9uLGk9dC5zdGF0ZSxvPWkub2Zmc2V0LGE9aS5vcHRpb25zO2lmKG4pe3ZhciBzPVYoe30sZSksYz13bihhLmlubmVyLHIscyl8fHt9LGw9d24oYS5vdXRlcixyLHMpfHx7fTtQbihjLFNuKSxQbihsLF9uKSxuLnRvcD9lLnk9TWF0aC5taW4oTWF0aC5tYXgobC50b3Arby50b3Ascy55KSxjLnRvcCtvLnRvcCk6bi5ib3R0b20mJihlLnk9TWF0aC5tYXgoTWF0aC5taW4obC5ib3R0b20rby5ib3R0b20scy55KSxjLmJvdHRvbStvLmJvdHRvbSkpLG4ubGVmdD9lLng9TWF0aC5taW4oTWF0aC5tYXgobC5sZWZ0K28ubGVmdCxzLngpLGMubGVmdCtvLmxlZnQpOm4ucmlnaHQmJihlLng9TWF0aC5tYXgoTWF0aC5taW4obC5yaWdodCtvLnJpZ2h0LHMueCksYy5yaWdodCtvLnJpZ2h0KSl9fSxkZWZhdWx0czp7aW5uZXI6bnVsbCxvdXRlcjpudWxsLG9mZnNldDpudWxsLGVuZE9ubHk6ITEsZW5hYmxlZDohMX19LGtuPWJlKE9uLFwicmVzdHJpY3RFZGdlc1wiKSxEbj1WKHtnZXQgZWxlbWVudFJlY3QoKXtyZXR1cm57dG9wOjAsbGVmdDowLGJvdHRvbToxLHJpZ2h0OjF9fSxzZXQgZWxlbWVudFJlY3QodCl7fX0sRW4uZGVmYXVsdHMpLEluPWJlKHtzdGFydDpFbi5zdGFydCxzZXQ6RW4uc2V0LGRlZmF1bHRzOkRufSxcInJlc3RyaWN0UmVjdFwiKSxNbj17d2lkdGg6LTEvMCxoZWlnaHQ6LTEvMH0sem49e3dpZHRoOjEvMCxoZWlnaHQ6MS8wfTt2YXIgQW49YmUoe3N0YXJ0OmZ1bmN0aW9uKHQpe3JldHVybiBPbi5zdGFydCh0KX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LnN0YXRlLHI9dC5yZWN0LGk9dC5lZGdlcyxvPW4ub3B0aW9ucztpZihpKXt2YXIgYT1VKHduKG8ubWluLGUsdC5jb29yZHMpKXx8TW4scz1VKHduKG8ubWF4LGUsdC5jb29yZHMpKXx8em47bi5vcHRpb25zPXtlbmRPbmx5Om8uZW5kT25seSxpbm5lcjpWKHt9LE9uLm5vSW5uZXIpLG91dGVyOlYoe30sT24ubm9PdXRlcil9LGkudG9wPyhuLm9wdGlvbnMuaW5uZXIudG9wPXIuYm90dG9tLWEuaGVpZ2h0LG4ub3B0aW9ucy5vdXRlci50b3A9ci5ib3R0b20tcy5oZWlnaHQpOmkuYm90dG9tJiYobi5vcHRpb25zLmlubmVyLmJvdHRvbT1yLnRvcCthLmhlaWdodCxuLm9wdGlvbnMub3V0ZXIuYm90dG9tPXIudG9wK3MuaGVpZ2h0KSxpLmxlZnQ/KG4ub3B0aW9ucy5pbm5lci5sZWZ0PXIucmlnaHQtYS53aWR0aCxuLm9wdGlvbnMub3V0ZXIubGVmdD1yLnJpZ2h0LXMud2lkdGgpOmkucmlnaHQmJihuLm9wdGlvbnMuaW5uZXIucmlnaHQ9ci5sZWZ0K2Eud2lkdGgsbi5vcHRpb25zLm91dGVyLnJpZ2h0PXIubGVmdCtzLndpZHRoKSxPbi5zZXQodCksbi5vcHRpb25zPW99fSxkZWZhdWx0czp7bWluOm51bGwsbWF4Om51bGwsZW5kT25seTohMSxlbmFibGVkOiExfX0sXCJyZXN0cmljdFNpemVcIik7dmFyIFJuPXtzdGFydDpmdW5jdGlvbih0KXt2YXIgZSxuPXQuaW50ZXJhY3Rpb24scj10LmludGVyYWN0YWJsZSxpPXQuZWxlbWVudCxvPXQucmVjdCxhPXQuc3RhdGUscz10LnN0YXJ0T2Zmc2V0LGM9YS5vcHRpb25zLGw9Yy5vZmZzZXRXaXRoT3JpZ2luP2Z1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24uZWxlbWVudCxuPU4oRyh0LnN0YXRlLm9wdGlvbnMub3JpZ2luLG51bGwsbnVsbCxbZV0pKSxyPW58fEsodC5pbnRlcmFjdGFibGUsZSx0LmludGVyYWN0aW9uLnByZXBhcmVkLm5hbWUpO3JldHVybiByfSh0KTp7eDowLHk6MH07aWYoXCJzdGFydENvb3Jkc1wiPT09Yy5vZmZzZXQpZT17eDpuLmNvb3Jkcy5zdGFydC5wYWdlLngseTpuLmNvb3Jkcy5zdGFydC5wYWdlLnl9O2Vsc2V7dmFyIHU9RyhjLm9mZnNldCxyLGksW25dKTsoZT1OKHUpfHx7eDowLHk6MH0pLngrPWwueCxlLnkrPWwueX12YXIgcD1jLnJlbGF0aXZlUG9pbnRzO2Eub2Zmc2V0cz1vJiZwJiZwLmxlbmd0aD9wLm1hcCgoZnVuY3Rpb24odCxuKXtyZXR1cm57aW5kZXg6bixyZWxhdGl2ZVBvaW50OnQseDpzLmxlZnQtby53aWR0aCp0LngrZS54LHk6cy50b3Atby5oZWlnaHQqdC55K2UueX19KSk6W3tpbmRleDowLHJlbGF0aXZlUG9pbnQ6bnVsbCx4OmUueCx5OmUueX1dfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnRlcmFjdGlvbixuPXQuY29vcmRzLHI9dC5zdGF0ZSxpPXIub3B0aW9ucyxvPXIub2Zmc2V0cyxhPUsoZS5pbnRlcmFjdGFibGUsZS5lbGVtZW50LGUucHJlcGFyZWQubmFtZSkscz1WKHt9LG4pLGM9W107aS5vZmZzZXRXaXRoT3JpZ2lufHwocy54LT1hLngscy55LT1hLnkpO2Zvcih2YXIgbD0wLHU9bztsPHUubGVuZ3RoO2wrKylmb3IodmFyIHA9dVtsXSxmPXMueC1wLngsZD1zLnktcC55LGg9MCx2PWkudGFyZ2V0cy5sZW5ndGg7aDx2O2grKyl7dmFyIGc9aS50YXJnZXRzW2hdLG09dm9pZCAwOyhtPXcuZnVuYyhnKT9nKGYsZCxlLl9wcm94eSxwLGgpOmcpJiZjLnB1c2goe3g6KHcubnVtYmVyKG0ueCk/bS54OmYpK3AueCx5Oih3Lm51bWJlcihtLnkpP20ueTpkKStwLnkscmFuZ2U6dy5udW1iZXIobS5yYW5nZSk/bS5yYW5nZTppLnJhbmdlLHNvdXJjZTpnLGluZGV4Omgsb2Zmc2V0OnB9KX1mb3IodmFyIHk9e3RhcmdldDpudWxsLGluUmFuZ2U6ITEsZGlzdGFuY2U6MCxyYW5nZTowLGRlbHRhOnt4OjAseTowfX0sYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgeD1jW2JdLEU9eC5yYW5nZSxUPXgueC1zLngsUz14Lnktcy55LF89UShULFMpLFA9Xzw9RTtFPT09MS8wJiZ5LmluUmFuZ2UmJnkucmFuZ2UhPT0xLzAmJihQPSExKSx5LnRhcmdldCYmIShQP3kuaW5SYW5nZSYmRSE9PTEvMD9fL0U8eS5kaXN0YW5jZS95LnJhbmdlOkU9PT0xLzAmJnkucmFuZ2UhPT0xLzB8fF88eS5kaXN0YW5jZToheS5pblJhbmdlJiZfPHkuZGlzdGFuY2UpfHwoeS50YXJnZXQ9eCx5LmRpc3RhbmNlPV8seS5yYW5nZT1FLHkuaW5SYW5nZT1QLHkuZGVsdGEueD1ULHkuZGVsdGEueT1TKX1yZXR1cm4geS5pblJhbmdlJiYobi54PXkudGFyZ2V0Lngsbi55PXkudGFyZ2V0LnkpLHIuY2xvc2VzdD15LHl9LGRlZmF1bHRzOntyYW5nZToxLzAsdGFyZ2V0czpudWxsLG9mZnNldDpudWxsLG9mZnNldFdpdGhPcmlnaW46ITAsb3JpZ2luOm51bGwscmVsYXRpdmVQb2ludHM6bnVsbCxlbmRPbmx5OiExLGVuYWJsZWQ6ITF9fSxDbj1iZShSbixcInNuYXBcIik7dmFyIGpuPXtzdGFydDpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLG49dC5lZGdlcyxyPWUub3B0aW9ucztpZighbilyZXR1cm4gbnVsbDt0LnN0YXRlPXtvcHRpb25zOnt0YXJnZXRzOm51bGwscmVsYXRpdmVQb2ludHM6W3t4Om4ubGVmdD8wOjEseTpuLnRvcD8wOjF9XSxvZmZzZXQ6ci5vZmZzZXR8fFwic2VsZlwiLG9yaWdpbjp7eDowLHk6MH0scmFuZ2U6ci5yYW5nZX19LGUudGFyZ2V0RmllbGRzPWUudGFyZ2V0RmllbGRzfHxbW1wid2lkdGhcIixcImhlaWdodFwiXSxbXCJ4XCIsXCJ5XCJdXSxSbi5zdGFydCh0KSxlLm9mZnNldHM9dC5zdGF0ZS5vZmZzZXRzLHQuc3RhdGU9ZX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LnN0YXRlLHI9dC5jb29yZHMsaT1uLm9wdGlvbnMsbz1uLm9mZnNldHMsYT17eDpyLngtb1swXS54LHk6ci55LW9bMF0ueX07bi5vcHRpb25zPVYoe30saSksbi5vcHRpb25zLnRhcmdldHM9W107Zm9yKHZhciBzPTAsYz1pLnRhcmdldHN8fFtdO3M8Yy5sZW5ndGg7cysrKXt2YXIgbD1jW3NdLHU9dm9pZCAwO2lmKHU9dy5mdW5jKGwpP2woYS54LGEueSxlKTpsKXtmb3IodmFyIHA9MCxmPW4udGFyZ2V0RmllbGRzO3A8Zi5sZW5ndGg7cCsrKXt2YXIgZD1mW3BdLGg9ZFswXSx2PWRbMV07aWYoaCBpbiB1fHx2IGluIHUpe3UueD11W2hdLHUueT11W3ZdO2JyZWFrfX1uLm9wdGlvbnMudGFyZ2V0cy5wdXNoKHUpfX12YXIgZz1Sbi5zZXQodCk7cmV0dXJuIG4ub3B0aW9ucz1pLGd9LGRlZmF1bHRzOntyYW5nZToxLzAsdGFyZ2V0czpudWxsLG9mZnNldDpudWxsLGVuZE9ubHk6ITEsZW5hYmxlZDohMX19LEZuPWJlKGpuLFwic25hcFNpemVcIik7dmFyIFhuPXthc3BlY3RSYXRpbzp5bixyZXN0cmljdEVkZ2VzOmtuLHJlc3RyaWN0OlRuLHJlc3RyaWN0UmVjdDpJbixyZXN0cmljdFNpemU6QW4sc25hcEVkZ2VzOmJlKHtzdGFydDpmdW5jdGlvbih0KXt2YXIgZT10LmVkZ2VzO3JldHVybiBlPyh0LnN0YXRlLnRhcmdldEZpZWxkcz10LnN0YXRlLnRhcmdldEZpZWxkc3x8W1tlLmxlZnQ/XCJsZWZ0XCI6XCJyaWdodFwiLGUudG9wP1widG9wXCI6XCJib3R0b21cIl1dLGpuLnN0YXJ0KHQpKTpudWxsfSxzZXQ6am4uc2V0LGRlZmF1bHRzOlYoZ2Uoam4uZGVmYXVsdHMpLHt0YXJnZXRzOnZvaWQgMCxyYW5nZTp2b2lkIDAsb2Zmc2V0Ont4OjAseTowfX0pfSxcInNuYXBFZGdlc1wiKSxzbmFwOkNuLHNuYXBTaXplOkZuLHNwcmluZzp4bixhdm9pZDp4bix0cmFuc2Zvcm06eG4scnViYmVyYmFuZDp4bn0sWW49e2lkOlwibW9kaWZpZXJzXCIsaW5zdGFsbDpmdW5jdGlvbih0KXt2YXIgZT10LmludGVyYWN0U3RhdGljO2Zvcih2YXIgbiBpbiB0LnVzZVBsdWdpbihFZSksdC51c2VQbHVnaW4oaG4pLGUubW9kaWZpZXJzPVhuLFhuKXt2YXIgcj1YbltuXSxpPXIuX2RlZmF1bHRzLG89ci5fbWV0aG9kcztpLl9tZXRob2RzPW8sdC5kZWZhdWx0cy5wZXJBY3Rpb25bbl09aX19fSxMbj1Zbixxbj1mdW5jdGlvbih0KXtzKG4sdCk7dmFyIGU9cChuKTtmdW5jdGlvbiBuKHQsaSxvLGEscyxjKXt2YXIgbDtpZihyKHRoaXMsbiksdHQodShsPWUuY2FsbCh0aGlzLHMpKSxvKSxvIT09aSYmdHQodShsKSxpKSxsLnRpbWVTdGFtcD1jLGwub3JpZ2luYWxFdmVudD1vLGwudHlwZT10LGwucG9pbnRlcklkPWF0KGkpLGwucG9pbnRlclR5cGU9ZHQoaSksbC50YXJnZXQ9YSxsLmN1cnJlbnRUYXJnZXQ9bnVsbCxcInRhcFwiPT09dCl7dmFyIHA9cy5nZXRQb2ludGVySW5kZXgoaSk7bC5kdD1sLnRpbWVTdGFtcC1zLnBvaW50ZXJzW3BdLmRvd25UaW1lO3ZhciBmPWwudGltZVN0YW1wLXMudGFwVGltZTtsLmRvdWJsZT0hIXMucHJldlRhcCYmXCJkb3VibGV0YXBcIiE9PXMucHJldlRhcC50eXBlJiZzLnByZXZUYXAudGFyZ2V0PT09bC50YXJnZXQmJmY8NTAwfWVsc2VcImRvdWJsZXRhcFwiPT09dCYmKGwuZHQ9aS50aW1lU3RhbXAtcy50YXBUaW1lLGwuZG91YmxlPSEwKTtyZXR1cm4gbH1yZXR1cm4gbyhuLFt7a2V5OlwiX3N1YnRyYWN0T3JpZ2luXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC54LG49dC55O3JldHVybiB0aGlzLnBhZ2VYLT1lLHRoaXMucGFnZVktPW4sdGhpcy5jbGllbnRYLT1lLHRoaXMuY2xpZW50WS09bix0aGlzfX0se2tleTpcIl9hZGRPcmlnaW5cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10Lngsbj10Lnk7cmV0dXJuIHRoaXMucGFnZVgrPWUsdGhpcy5wYWdlWSs9bix0aGlzLmNsaWVudFgrPWUsdGhpcy5jbGllbnRZKz1uLHRoaXN9fSx7a2V5OlwicHJldmVudERlZmF1bHRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpfX1dKSxufSh2dCksQm49e2lkOlwicG9pbnRlci1ldmVudHMvYmFzZVwiLGJlZm9yZTpbXCJpbmVydGlhXCIsXCJtb2RpZmllcnNcIixcImF1dG8tc3RhcnRcIixcImFjdGlvbnNcIl0saW5zdGFsbDpmdW5jdGlvbih0KXt0LnBvaW50ZXJFdmVudHM9Qm4sdC5kZWZhdWx0cy5hY3Rpb25zLnBvaW50ZXJFdmVudHM9Qm4uZGVmYXVsdHMsVih0LmFjdGlvbnMucGhhc2VsZXNzVHlwZXMsQm4udHlwZXMpfSxsaXN0ZW5lcnM6e1wiaW50ZXJhY3Rpb25zOm5ld1wiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb247ZS5wcmV2VGFwPW51bGwsZS50YXBUaW1lPTB9LFwiaW50ZXJhY3Rpb25zOnVwZGF0ZS1wb2ludGVyXCI6ZnVuY3Rpb24odCl7dmFyIGU9dC5kb3duLG49dC5wb2ludGVySW5mbztpZighZSYmbi5ob2xkKXJldHVybjtuLmhvbGQ9e2R1cmF0aW9uOjEvMCx0aW1lb3V0Om51bGx9fSxcImludGVyYWN0aW9uczptb3ZlXCI6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmludGVyYWN0aW9uLHI9dC5wb2ludGVyLGk9dC5ldmVudCxvPXQuZXZlbnRUYXJnZXQ7dC5kdXBsaWNhdGV8fG4ucG9pbnRlcklzRG93biYmIW4ucG9pbnRlcldhc01vdmVkfHwobi5wb2ludGVySXNEb3duJiZHbih0KSxWbih7aW50ZXJhY3Rpb246bixwb2ludGVyOnIsZXZlbnQ6aSxldmVudFRhcmdldDpvLHR5cGU6XCJtb3ZlXCJ9LGUpKX0sXCJpbnRlcmFjdGlvbnM6ZG93blwiOmZ1bmN0aW9uKHQsZSl7IWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuaW50ZXJhY3Rpb24scj10LnBvaW50ZXIsaT10LmV2ZW50LG89dC5ldmVudFRhcmdldCxhPXQucG9pbnRlckluZGV4LHM9bi5wb2ludGVyc1thXS5ob2xkLGM9cShvKSxsPXtpbnRlcmFjdGlvbjpuLHBvaW50ZXI6cixldmVudDppLGV2ZW50VGFyZ2V0Om8sdHlwZTpcImhvbGRcIix0YXJnZXRzOltdLHBhdGg6Yyxub2RlOm51bGx9LHU9MDt1PGMubGVuZ3RoO3UrKyl7dmFyIHA9Y1t1XTtsLm5vZGU9cCxlLmZpcmUoXCJwb2ludGVyRXZlbnRzOmNvbGxlY3QtdGFyZ2V0c1wiLGwpfWlmKCFsLnRhcmdldHMubGVuZ3RoKXJldHVybjtmb3IodmFyIGY9MS8wLGQ9MCxoPWwudGFyZ2V0cztkPGgubGVuZ3RoO2QrKyl7dmFyIHY9aFtkXS5ldmVudGFibGUub3B0aW9ucy5ob2xkRHVyYXRpb247djxmJiYoZj12KX1zLmR1cmF0aW9uPWYscy50aW1lb3V0PXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Vm4oe2ludGVyYWN0aW9uOm4sZXZlbnRUYXJnZXQ6byxwb2ludGVyOnIsZXZlbnQ6aSx0eXBlOlwiaG9sZFwifSxlKX0pLGYpfSh0LGUpLFZuKHQsZSl9LFwiaW50ZXJhY3Rpb25zOnVwXCI6ZnVuY3Rpb24odCxlKXtHbih0KSxWbih0LGUpLGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5pbnRlcmFjdGlvbixyPXQucG9pbnRlcixpPXQuZXZlbnQsbz10LmV2ZW50VGFyZ2V0O24ucG9pbnRlcldhc01vdmVkfHxWbih7aW50ZXJhY3Rpb246bixldmVudFRhcmdldDpvLHBvaW50ZXI6cixldmVudDppLHR5cGU6XCJ0YXBcIn0sZSl9KHQsZSl9LFwiaW50ZXJhY3Rpb25zOmNhbmNlbFwiOmZ1bmN0aW9uKHQsZSl7R24odCksVm4odCxlKX19LFBvaW50ZXJFdmVudDpxbixmaXJlOlZuLGNvbGxlY3RFdmVudFRhcmdldHM6V24sZGVmYXVsdHM6e2hvbGREdXJhdGlvbjo2MDAsaWdub3JlRnJvbTpudWxsLGFsbG93RnJvbTpudWxsLG9yaWdpbjp7eDowLHk6MH19LHR5cGVzOntkb3duOiEwLG1vdmU6ITAsdXA6ITAsY2FuY2VsOiEwLHRhcDohMCxkb3VibGV0YXA6ITAsaG9sZDohMH19O2Z1bmN0aW9uIFZuKHQsZSl7dmFyIG49dC5pbnRlcmFjdGlvbixyPXQucG9pbnRlcixpPXQuZXZlbnQsbz10LmV2ZW50VGFyZ2V0LGE9dC50eXBlLHM9dC50YXJnZXRzLGM9dm9pZCAwPT09cz9Xbih0LGUpOnMsbD1uZXcgcW4oYSxyLGksbyxuLGUubm93KCkpO2UuZmlyZShcInBvaW50ZXJFdmVudHM6bmV3XCIse3BvaW50ZXJFdmVudDpsfSk7Zm9yKHZhciB1PXtpbnRlcmFjdGlvbjpuLHBvaW50ZXI6cixldmVudDppLGV2ZW50VGFyZ2V0Om8sdGFyZ2V0czpjLHR5cGU6YSxwb2ludGVyRXZlbnQ6bH0scD0wO3A8Yy5sZW5ndGg7cCsrKXt2YXIgZj1jW3BdO2Zvcih2YXIgZCBpbiBmLnByb3BzfHx7fSlsW2RdPWYucHJvcHNbZF07dmFyIGg9SyhmLmV2ZW50YWJsZSxmLm5vZGUpO2lmKGwuX3N1YnRyYWN0T3JpZ2luKGgpLGwuZXZlbnRhYmxlPWYuZXZlbnRhYmxlLGwuY3VycmVudFRhcmdldD1mLm5vZGUsZi5ldmVudGFibGUuZmlyZShsKSxsLl9hZGRPcmlnaW4oaCksbC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWR8fGwucHJvcGFnYXRpb25TdG9wcGVkJiZwKzE8Yy5sZW5ndGgmJmNbcCsxXS5ub2RlIT09bC5jdXJyZW50VGFyZ2V0KWJyZWFrfWlmKGUuZmlyZShcInBvaW50ZXJFdmVudHM6ZmlyZWRcIix1KSxcInRhcFwiPT09YSl7dmFyIHY9bC5kb3VibGU/Vm4oe2ludGVyYWN0aW9uOm4scG9pbnRlcjpyLGV2ZW50OmksZXZlbnRUYXJnZXQ6byx0eXBlOlwiZG91YmxldGFwXCJ9LGUpOmw7bi5wcmV2VGFwPXYsbi50YXBUaW1lPXYudGltZVN0YW1wfXJldHVybiBsfWZ1bmN0aW9uIFduKHQsZSl7dmFyIG49dC5pbnRlcmFjdGlvbixyPXQucG9pbnRlcixpPXQuZXZlbnQsbz10LmV2ZW50VGFyZ2V0LGE9dC50eXBlLHM9bi5nZXRQb2ludGVySW5kZXgociksYz1uLnBvaW50ZXJzW3NdO2lmKFwidGFwXCI9PT1hJiYobi5wb2ludGVyV2FzTW92ZWR8fCFjfHxjLmRvd25UYXJnZXQhPT1vKSlyZXR1cm5bXTtmb3IodmFyIGw9cShvKSx1PXtpbnRlcmFjdGlvbjpuLHBvaW50ZXI6cixldmVudDppLGV2ZW50VGFyZ2V0Om8sdHlwZTphLHBhdGg6bCx0YXJnZXRzOltdLG5vZGU6bnVsbH0scD0wO3A8bC5sZW5ndGg7cCsrKXt2YXIgZj1sW3BdO3Uubm9kZT1mLGUuZmlyZShcInBvaW50ZXJFdmVudHM6Y29sbGVjdC10YXJnZXRzXCIsdSl9cmV0dXJuXCJob2xkXCI9PT1hJiYodS50YXJnZXRzPXUudGFyZ2V0cy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3ZhciBlLHI7cmV0dXJuIHQuZXZlbnRhYmxlLm9wdGlvbnMuaG9sZER1cmF0aW9uPT09KG51bGw9PShlPW4ucG9pbnRlcnNbc10pfHxudWxsPT0ocj1lLmhvbGQpP3ZvaWQgMDpyLmR1cmF0aW9uKX0pKSksdS50YXJnZXRzfWZ1bmN0aW9uIEduKHQpe3ZhciBlPXQuaW50ZXJhY3Rpb24sbj10LnBvaW50ZXJJbmRleCxyPWUucG9pbnRlcnNbbl0uaG9sZDtyJiZyLnRpbWVvdXQmJihjbGVhclRpbWVvdXQoci50aW1lb3V0KSxyLnRpbWVvdXQ9bnVsbCl9dmFyIE5uPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGRlZmF1bHQ6Qm59KTtmdW5jdGlvbiBVbih0KXt2YXIgZT10LmludGVyYWN0aW9uO2UuaG9sZEludGVydmFsSGFuZGxlJiYoY2xlYXJJbnRlcnZhbChlLmhvbGRJbnRlcnZhbEhhbmRsZSksZS5ob2xkSW50ZXJ2YWxIYW5kbGU9bnVsbCl9dmFyIEhuPXtpZDpcInBvaW50ZXItZXZlbnRzL2hvbGRSZXBlYXRcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe3QudXNlUGx1Z2luKEJuKTt2YXIgZT10LnBvaW50ZXJFdmVudHM7ZS5kZWZhdWx0cy5ob2xkUmVwZWF0SW50ZXJ2YWw9MCxlLnR5cGVzLmhvbGRyZXBlYXQ9dC5hY3Rpb25zLnBoYXNlbGVzc1R5cGVzLmhvbGRyZXBlYXQ9ITB9LGxpc3RlbmVyczpbXCJtb3ZlXCIsXCJ1cFwiLFwiY2FuY2VsXCIsXCJlbmRhbGxcIl0ucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0W1wicG9pbnRlckV2ZW50czpcIi5jb25jYXQoZSldPVVuLHR9KSx7XCJwb2ludGVyRXZlbnRzOm5ld1wiOmZ1bmN0aW9uKHQpe3ZhciBlPXQucG9pbnRlckV2ZW50O1wiaG9sZFwiPT09ZS50eXBlJiYoZS5jb3VudD0oZS5jb3VudHx8MCkrMSl9LFwicG9pbnRlckV2ZW50czpmaXJlZFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5pbnRlcmFjdGlvbixyPXQucG9pbnRlckV2ZW50LGk9dC5ldmVudFRhcmdldCxvPXQudGFyZ2V0cztpZihcImhvbGRcIj09PXIudHlwZSYmby5sZW5ndGgpe3ZhciBhPW9bMF0uZXZlbnRhYmxlLm9wdGlvbnMuaG9sZFJlcGVhdEludGVydmFsO2E8PTB8fChuLmhvbGRJbnRlcnZhbEhhbmRsZT1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2UucG9pbnRlckV2ZW50cy5maXJlKHtpbnRlcmFjdGlvbjpuLGV2ZW50VGFyZ2V0OmksdHlwZTpcImhvbGRcIixwb2ludGVyOnIsZXZlbnQ6cn0sZSl9KSxhKSl9fX0pfSxLbj1Ibjt2YXIgJG49e2lkOlwicG9pbnRlci1ldmVudHMvaW50ZXJhY3RhYmxlVGFyZ2V0c1wiLGluc3RhbGw6ZnVuY3Rpb24odCl7dmFyIGU9dC5JbnRlcmFjdGFibGU7ZS5wcm90b3R5cGUucG9pbnRlckV2ZW50cz1mdW5jdGlvbih0KXtyZXR1cm4gVih0aGlzLmV2ZW50cy5vcHRpb25zLHQpLHRoaXN9O3ZhciBuPWUucHJvdG90eXBlLl9iYWNrQ29tcGF0T3B0aW9uO2UucHJvdG90eXBlLl9iYWNrQ29tcGF0T3B0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIHI9bi5jYWxsKHRoaXMsdCxlKTtyZXR1cm4gcj09PXRoaXMmJih0aGlzLmV2ZW50cy5vcHRpb25zW3RdPWUpLHJ9fSxsaXN0ZW5lcnM6e1wicG9pbnRlckV2ZW50czpjb2xsZWN0LXRhcmdldHNcIjpmdW5jdGlvbih0LGUpe3ZhciBuPXQudGFyZ2V0cyxyPXQubm9kZSxpPXQudHlwZSxvPXQuZXZlbnRUYXJnZXQ7ZS5pbnRlcmFjdGFibGVzLmZvckVhY2hNYXRjaChyLChmdW5jdGlvbih0KXt2YXIgZT10LmV2ZW50cyxhPWUub3B0aW9ucztlLnR5cGVzW2ldJiZlLnR5cGVzW2ldLmxlbmd0aCYmdC50ZXN0SWdub3JlQWxsb3coYSxyLG8pJiZuLnB1c2goe25vZGU6cixldmVudGFibGU6ZSxwcm9wczp7aW50ZXJhY3RhYmxlOnR9fSl9KSl9LFwiaW50ZXJhY3RhYmxlOm5ld1wiOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW50ZXJhY3RhYmxlO2UuZXZlbnRzLmdldFJlY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIGUuZ2V0UmVjdCh0KX19LFwiaW50ZXJhY3RhYmxlOnNldFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5pbnRlcmFjdGFibGUscj10Lm9wdGlvbnM7VihuLmV2ZW50cy5vcHRpb25zLGUucG9pbnRlckV2ZW50cy5kZWZhdWx0cyksVihuLmV2ZW50cy5vcHRpb25zLHIucG9pbnRlckV2ZW50c3x8e30pfX19LEpuPSRuLFFuPXtpZDpcInBvaW50ZXItZXZlbnRzXCIsaW5zdGFsbDpmdW5jdGlvbih0KXt0LnVzZVBsdWdpbihObiksdC51c2VQbHVnaW4oS24pLHQudXNlUGx1Z2luKEpuKX19LFpuPVFuO3ZhciB0cj17aWQ6XCJyZWZsb3dcIixpbnN0YWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXQuSW50ZXJhY3RhYmxlO3QuYWN0aW9ucy5waGFzZXMucmVmbG93PSEwLGUucHJvdG90eXBlLnJlZmxvdz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj10LmdldEFsbEVsZW1lbnRzKCksaT1uLndpbmRvdy5Qcm9taXNlLG89aT9bXTpudWxsLGE9ZnVuY3Rpb24oKXt2YXIgYT1yW3NdLGM9dC5nZXRSZWN0KGEpO2lmKCFjKXJldHVybiAxO3ZhciBsLHU9YnQobi5pbnRlcmFjdGlvbnMubGlzdCwoZnVuY3Rpb24obil7cmV0dXJuIG4uaW50ZXJhY3RpbmcoKSYmbi5pbnRlcmFjdGFibGU9PT10JiZuLmVsZW1lbnQ9PT1hJiZuLnByZXBhcmVkLm5hbWU9PT1lLm5hbWV9KSk7aWYodSl1Lm1vdmUoKSxvJiYobD11Ll9yZWZsb3dQcm9taXNlfHxuZXcgaSgoZnVuY3Rpb24odCl7dS5fcmVmbG93UmVzb2x2ZT10fSkpKTtlbHNle3ZhciBwPVUoYyksZj1mdW5jdGlvbih0KXtyZXR1cm57Y29vcmRzOnQsZ2V0IHBhZ2UoKXtyZXR1cm4gdGhpcy5jb29yZHMucGFnZX0sZ2V0IGNsaWVudCgpe3JldHVybiB0aGlzLmNvb3Jkcy5jbGllbnR9LGdldCB0aW1lU3RhbXAoKXtyZXR1cm4gdGhpcy5jb29yZHMudGltZVN0YW1wfSxnZXQgcGFnZVgoKXtyZXR1cm4gdGhpcy5jb29yZHMucGFnZS54fSxnZXQgcGFnZVkoKXtyZXR1cm4gdGhpcy5jb29yZHMucGFnZS55fSxnZXQgY2xpZW50WCgpe3JldHVybiB0aGlzLmNvb3Jkcy5jbGllbnQueH0sZ2V0IGNsaWVudFkoKXtyZXR1cm4gdGhpcy5jb29yZHMuY2xpZW50Lnl9LGdldCBwb2ludGVySWQoKXtyZXR1cm4gdGhpcy5jb29yZHMucG9pbnRlcklkfSxnZXQgdGFyZ2V0KCl7cmV0dXJuIHRoaXMuY29vcmRzLnRhcmdldH0sZ2V0IHR5cGUoKXtyZXR1cm4gdGhpcy5jb29yZHMudHlwZX0sZ2V0IHBvaW50ZXJUeXBlKCl7cmV0dXJuIHRoaXMuY29vcmRzLnBvaW50ZXJUeXBlfSxnZXQgYnV0dG9ucygpe3JldHVybiB0aGlzLmNvb3Jkcy5idXR0b25zfSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe319fSh7cGFnZTp7eDpwLngseTpwLnl9LGNsaWVudDp7eDpwLngseTpwLnl9LHRpbWVTdGFtcDpuLm5vdygpfSk7bD1mdW5jdGlvbih0LGUsbixyLGkpe3ZhciBvPXQuaW50ZXJhY3Rpb25zLm5ldyh7cG9pbnRlclR5cGU6XCJyZWZsb3dcIn0pLGE9e2ludGVyYWN0aW9uOm8sZXZlbnQ6aSxwb2ludGVyOmksZXZlbnRUYXJnZXQ6bixwaGFzZTpcInJlZmxvd1wifTtvLmludGVyYWN0YWJsZT1lLG8uZWxlbWVudD1uLG8ucHJldkV2ZW50PWksby51cGRhdGVQb2ludGVyKGksaSxuLCEwKSxudChvLmNvb3Jkcy5kZWx0YSksVXQoby5wcmVwYXJlZCxyKSxvLl9kb1BoYXNlKGEpO3ZhciBzPXQud2luZG93LGM9cy5Qcm9taXNlLGw9Yz9uZXcgYygoZnVuY3Rpb24odCl7by5fcmVmbG93UmVzb2x2ZT10fSkpOnZvaWQgMDtvLl9yZWZsb3dQcm9taXNlPWwsby5zdGFydChyLGUsbiksby5faW50ZXJhY3Rpbmc/KG8ubW92ZShhKSxvLmVuZChpKSk6KG8uc3RvcCgpLG8uX3JlZmxvd1Jlc29sdmUoKSk7cmV0dXJuIG8ucmVtb3ZlUG9pbnRlcihpLGkpLGx9KG4sdCxhLGUsZil9byYmby5wdXNoKGwpfSxzPTA7czxyLmxlbmd0aCYmIWEoKTtzKyspO3JldHVybiBvJiZpLmFsbChvKS50aGVuKChmdW5jdGlvbigpe3JldHVybiB0fSkpfSh0aGlzLGUsdCl9fSxsaXN0ZW5lcnM6e1wiaW50ZXJhY3Rpb25zOnN0b3BcIjpmdW5jdGlvbih0LGUpe3ZhciBuPXQuaW50ZXJhY3Rpb247XCJyZWZsb3dcIj09PW4ucG9pbnRlclR5cGUmJihuLl9yZWZsb3dSZXNvbHZlJiZuLl9yZWZsb3dSZXNvbHZlKCksZnVuY3Rpb24odCxlKXt0LnNwbGljZSh0LmluZGV4T2YoZSksMSl9KGUuaW50ZXJhY3Rpb25zLmxpc3QsbikpfX19LGVyPXRyO2lmKHVuLnVzZShoZSksdW4udXNlKENlKSx1bi51c2UoWm4pLHVuLnVzZShxZSksdW4udXNlKExuKSx1bi51c2UocGUpLHVuLnVzZShYdCksdW4udXNlKEd0KSx1bi51c2UoZXIpLHVuLmRlZmF1bHQ9dW4sXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgbW9kdWxlP1widW5kZWZpbmVkXCI6bihtb2R1bGUpKSYmbW9kdWxlKXRyeXttb2R1bGUuZXhwb3J0cz11bn1jYXRjaCh0KXt9cmV0dXJuIHVuLmRlZmF1bHQ9dW4sdW59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmFjdC5taW4uanMubWFwXG4iLCIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMzAuMVxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCAhPSBudWxsICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGFyckxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VuczogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdzogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0OiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRFcmE6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGg6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBpc286IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzOiBbXSxcbiAgICAgICAgICAgIGVyYTogbnVsbCxcbiAgICAgICAgICAgIG1lcmlkaWVtOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMjogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2g6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyksXG4gICAgICAgICAgICAgICAgbGVuID0gdC5sZW5ndGggPj4+IDAsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGZsYWdzID0gbnVsbCxcbiAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gZmFsc2UsXG4gICAgICAgICAgICBpc05vd1ZhbGlkID0gbS5fZCAmJiAhaXNOYU4obS5fZC5nZXRUaW1lKCkpO1xuICAgICAgICBpZiAoaXNOb3dWYWxpZCkge1xuICAgICAgICAgICAgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRFcmEgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgICAgICBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IChob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW10pLFxuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcHJvcCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIG1vbWVudFByb3BlcnRpZXNMZW4gPSBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXNMZW4gPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbnNvbGUud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBhcmdMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChhcmd1bWVudHNbMF0sIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICAgICBtc2cgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbkFyZ3VtZW50czogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoKS5zdGFja1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZW9mIEZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNvbmZpZywgaSkpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgICAgICAvXFxkezEsMn0vLnNvdXJjZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksXG4gICAgICAgICAgICBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICtcbiAgICAgICAgICAgIGFic051bWJlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID1cbiAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csXG4gICAgICAgIGZvcm1hdEZ1bmN0aW9ucyA9IHt9LFxuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICAgICAgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKVxuICAgICAgICAgICAgICAgICAgICA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID1cbiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0KGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyXG4gICAgICAgICAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2VucylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU1NTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ0REJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdkZGRkJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCcsXG4gICAgICAgIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICB3OiAnYSB3ZWVrJyxcbiAgICAgICAgd3c6ICclZCB3ZWVrcycsXG4gICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpXG4gICAgICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgICAgICA6IG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge1xuICAgICAgICBEOiAnZGF0ZScsXG4gICAgICAgIGRhdGVzOiAnZGF0ZScsXG4gICAgICAgIGRhdGU6ICdkYXRlJyxcbiAgICAgICAgZDogJ2RheScsXG4gICAgICAgIGRheXM6ICdkYXknLFxuICAgICAgICBkYXk6ICdkYXknLFxuICAgICAgICBlOiAnd2Vla2RheScsXG4gICAgICAgIHdlZWtkYXlzOiAnd2Vla2RheScsXG4gICAgICAgIHdlZWtkYXk6ICd3ZWVrZGF5JyxcbiAgICAgICAgRTogJ2lzb1dlZWtkYXknLFxuICAgICAgICBpc293ZWVrZGF5czogJ2lzb1dlZWtkYXknLFxuICAgICAgICBpc293ZWVrZGF5OiAnaXNvV2Vla2RheScsXG4gICAgICAgIERERDogJ2RheU9mWWVhcicsXG4gICAgICAgIGRheW9meWVhcnM6ICdkYXlPZlllYXInLFxuICAgICAgICBkYXlvZnllYXI6ICdkYXlPZlllYXInLFxuICAgICAgICBoOiAnaG91cicsXG4gICAgICAgIGhvdXJzOiAnaG91cicsXG4gICAgICAgIGhvdXI6ICdob3VyJyxcbiAgICAgICAgbXM6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG1pbGxpc2Vjb25kczogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbWlsbGlzZWNvbmQ6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG06ICdtaW51dGUnLFxuICAgICAgICBtaW51dGVzOiAnbWludXRlJyxcbiAgICAgICAgbWludXRlOiAnbWludXRlJyxcbiAgICAgICAgTTogJ21vbnRoJyxcbiAgICAgICAgbW9udGhzOiAnbW9udGgnLFxuICAgICAgICBtb250aDogJ21vbnRoJyxcbiAgICAgICAgUTogJ3F1YXJ0ZXInLFxuICAgICAgICBxdWFydGVyczogJ3F1YXJ0ZXInLFxuICAgICAgICBxdWFydGVyOiAncXVhcnRlcicsXG4gICAgICAgIHM6ICdzZWNvbmQnLFxuICAgICAgICBzZWNvbmRzOiAnc2Vjb25kJyxcbiAgICAgICAgc2Vjb25kOiAnc2Vjb25kJyxcbiAgICAgICAgZ2c6ICd3ZWVrWWVhcicsXG4gICAgICAgIHdlZWt5ZWFyczogJ3dlZWtZZWFyJyxcbiAgICAgICAgd2Vla3llYXI6ICd3ZWVrWWVhcicsXG4gICAgICAgIEdHOiAnaXNvV2Vla1llYXInLFxuICAgICAgICBpc293ZWVreWVhcnM6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIGlzb3dlZWt5ZWFyOiAnaXNvV2Vla1llYXInLFxuICAgICAgICB3OiAnd2VlaycsXG4gICAgICAgIHdlZWtzOiAnd2VlaycsXG4gICAgICAgIHdlZWs6ICd3ZWVrJyxcbiAgICAgICAgVzogJ2lzb1dlZWsnLFxuICAgICAgICBpc293ZWVrczogJ2lzb1dlZWsnLFxuICAgICAgICBpc293ZWVrOiAnaXNvV2VlaycsXG4gICAgICAgIHk6ICd5ZWFyJyxcbiAgICAgICAgeWVhcnM6ICd5ZWFyJyxcbiAgICAgICAgeWVhcjogJ3llYXInLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHtcbiAgICAgICAgZGF0ZTogOSxcbiAgICAgICAgZGF5OiAxMSxcbiAgICAgICAgd2Vla2RheTogMTEsXG4gICAgICAgIGlzb1dlZWtkYXk6IDExLFxuICAgICAgICBkYXlPZlllYXI6IDQsXG4gICAgICAgIGhvdXI6IDEzLFxuICAgICAgICBtaWxsaXNlY29uZDogMTYsXG4gICAgICAgIG1pbnV0ZTogMTQsXG4gICAgICAgIG1vbnRoOiA4LFxuICAgICAgICBxdWFydGVyOiA3LFxuICAgICAgICBzZWNvbmQ6IDE1LFxuICAgICAgICB3ZWVrWWVhcjogMSxcbiAgICAgICAgaXNvV2Vla1llYXI6IDEsXG4gICAgICAgIHdlZWs6IDUsXG4gICAgICAgIGlzb1dlZWs6IDUsXG4gICAgICAgIHllYXI6IDEsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgICAgICB1O1xuICAgICAgICBmb3IgKHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHVuaXRzT2JqLCB1KSkge1xuICAgICAgICAgICAgICAgIHVuaXRzLnB1c2goeyB1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSA9IC9cXGQvLCAvLyAgICAgICAwIC0gOVxuICAgICAgICBtYXRjaDIgPSAvXFxkXFxkLywgLy8gICAgICAwMCAtIDk5XG4gICAgICAgIG1hdGNoMyA9IC9cXGR7M30vLCAvLyAgICAgMDAwIC0gOTk5XG4gICAgICAgIG1hdGNoNCA9IC9cXGR7NH0vLCAvLyAgICAwMDAwIC0gOTk5OVxuICAgICAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMiA9IC9cXGRcXGQ/LywgLy8gICAgICAgMCAtIDk5XG4gICAgICAgIG1hdGNoM3RvNCA9IC9cXGRcXGRcXGRcXGQ/LywgLy8gICAgIDk5OSAtIDk5OTlcbiAgICAgICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vLCAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMyA9IC9cXGR7MSwzfS8sIC8vICAgICAgIDAgLSA5OTlcbiAgICAgICAgbWF0Y2gxdG80ID0gL1xcZHsxLDR9LywgLy8gICAgICAgMCAtIDk5OTlcbiAgICAgICAgbWF0Y2gxdG82ID0gL1srLV0/XFxkezEsNn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoVW5zaWduZWQgPSAvXFxkKy8sIC8vICAgICAgIDAgLSBpbmZcbiAgICAgICAgbWF0Y2hTaWduZWQgPSAvWystXT9cXGQrLywgLy8gICAgLWluZiAtIGluZlxuICAgICAgICBtYXRjaE9mZnNldCA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naSwgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vLCAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuICAgICAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAgICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgICAgICBtYXRjaFdvcmQgPVxuICAgICAgICAgICAgL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2ksXG4gICAgICAgIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8gPSAvXlsxLTldXFxkPy8sIC8vICAgICAgICAgMS05OVxuICAgICAgICBtYXRjaDF0bzJIYXNaZXJvID0gL14oWzEtOV1cXGR8XFxkKS8sIC8vICAgICAgICAgICAwLTk5XG4gICAgICAgIHJlZ2V4ZXM7XG5cbiAgICByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KVxuICAgICAgICAgICAgPyByZWdleFxuICAgICAgICAgICAgOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpc1N0cmljdCAmJiBzdHJpY3RSZWdleCA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShcbiAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnXFxcXCcsICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZnVuYyA9IGNhbGxiYWNrLFxuICAgICAgICAgICAgdG9rZW5MZW47XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIHZhciBZRUFSID0gMCxcbiAgICAgICAgTU9OVEggPSAxLFxuICAgICAgICBEQVRFID0gMixcbiAgICAgICAgSE9VUiA9IDMsXG4gICAgICAgIE1JTlVURSA9IDQsXG4gICAgICAgIFNFQ09ORCA9IDUsXG4gICAgICAgIE1JTExJU0VDT05EID0gNixcbiAgICAgICAgV0VFSyA9IDcsXG4gICAgICAgIFdFRUtEQVkgPSA4O1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyB6ZXJvRmlsbCh5LCA0KSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgNF0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsIDVdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9XG4gICAgICAgICAgICBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQobW9tLCB1bml0KSB7XG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkID0gbW9tLl9kLFxuICAgICAgICAgICAgaXNVVEMgPSBtb20uX2lzVVRDO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSAnTWlsbGlzZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbGxpc2Vjb25kcygpIDogZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDU2Vjb25kcygpIDogZC5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBjYXNlICdNaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbnV0ZXMoKSA6IGQuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgY2FzZSAnSG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDSG91cnMoKSA6IGQuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRGF0ZSgpIDogZC5nZXREYXRlKCk7XG4gICAgICAgICAgICBjYXNlICdEYXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRGF5KCkgOiBkLmdldERheSgpO1xuICAgICAgICAgICAgY2FzZSAnTW9udGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTW9udGgoKSA6IGQuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIGNhc2UgJ0Z1bGxZZWFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0Z1bGxZZWFyKCkgOiBkLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBOYU47IC8vIEp1c3QgaW4gY2FzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICB2YXIgZCwgaXNVVEMsIHllYXIsIG1vbnRoLCBkYXRlO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGQgPSBtb20uX2Q7XG4gICAgICAgIGlzVVRDID0gbW9tLl9pc1VUQztcblxuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ01pbGxpc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDXG4gICAgICAgICAgICAgICAgICAgID8gZC5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogZC5zZXRNaWxsaXNlY29uZHModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDU2Vjb25kcyh2YWx1ZSkgOiBkLnNldFNlY29uZHModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ01pbnV0ZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDTWludXRlcyh2YWx1ZSkgOiBkLnNldE1pbnV0ZXModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0hvdXJzKHZhbHVlKSA6IGQuc2V0SG91cnModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDRGF0ZSh2YWx1ZSkgOiBkLnNldERhdGUodmFsdWUpKTtcbiAgICAgICAgICAgIC8vIGNhc2UgJ0RheSc6IC8vIE5vdCByZWFsXG4gICAgICAgICAgICAvLyAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0RheSh2YWx1ZSkgOiBkLnNldERheSh2YWx1ZSkpO1xuICAgICAgICAgICAgLy8gY2FzZSAnTW9udGgnOiAvLyBOb3QgdXNlZCBiZWNhdXNlIHdlIG5lZWQgdG8gcGFzcyB0d28gdmFyaWFibGVzXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENNb250aCh2YWx1ZSkgOiBkLnNldE1vbnRoKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdGdWxsWWVhcic6XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIFNlZSBiZWxvdyAuLi5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBKdXN0IGluIGNhc2VcbiAgICAgICAgfVxuXG4gICAgICAgIHllYXIgPSB2YWx1ZTtcbiAgICAgICAgbW9udGggPSBtb20ubW9udGgoKTtcbiAgICAgICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG4gICAgICAgIGRhdGUgPSBkYXRlID09PSAyOSAmJiBtb250aCA9PT0gMSAmJiAhaXNMZWFwWWVhcih5ZWFyKSA/IDI4IDogZGF0ZTtcbiAgICAgICAgdm9pZCAoaXNVVENcbiAgICAgICAgICAgID8gZC5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSlcbiAgICAgICAgICAgIDogZC5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSkpO1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgcHJpb3JpdGl6ZWRMZW4gPSBwcmlvcml0aXplZC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWRMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxXG4gICAgICAgICAgICA/IGlzTGVhcFllYXIoeWVhcilcbiAgICAgICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICAgICAgOiAyOFxuICAgICAgICAgICAgOiAzMSAtICgobW9kTW9udGggJSA3KSAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9XG4gICAgICAgICAgICAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPVxuICAgICAgICAgICAgJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vLFxuICAgICAgICBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1xuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICAgICAodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFtcbiAgICAgICAgICAgICAgICAgIE1PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aChtb20sIHZhbHVlKSB7XG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb250aCA9IHZhbHVlLFxuICAgICAgICAgICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG5cbiAgICAgICAgZGF0ZSA9IGRhdGUgPCAyOSA/IGRhdGUgOiBNYXRoLm1pbihkYXRlLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCBtb250aCkpO1xuICAgICAgICB2b2lkIChtb20uX2lzVVRDXG4gICAgICAgICAgICA/IG1vbS5fZC5zZXRVVENNb250aChtb250aCwgZGF0ZSlcbiAgICAgICAgICAgIDogbW9tLl9kLnNldE1vbnRoKG1vbnRoLCBkYXRlKSk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGgodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIHNob3J0UCxcbiAgICAgICAgICAgIGxvbmdQO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UCA9IHJlZ2V4RXNjYXBlKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1AgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0UCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ1ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25nUCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0UCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSh5KSB7XG4gICAgICAgIHZhciBkYXRlLCBhcmdzO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLFxuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlayxcbiAgICAgICAgICAgIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ3cnLCAnd3cnLCAnVycsICdXVyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID1cbiAgICAgICAgICAgICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1xuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1tcbiAgICAgICAgICAgICAgICAgIG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB3ZWVrZGF5c1ttLmRheSgpXVxuICAgICAgICAgICAgICA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQobSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXVxuICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4obSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldXG4gICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRheSA9IGdldCh0aGlzLCAnRGF5Jyk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIG1pbnAsXG4gICAgICAgICAgICBzaG9ydHAsXG4gICAgICAgICAgICBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c01pbihtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydHAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ3AgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgaEZvcm1hdC5hcHBseSh0aGlzKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICB0aGlzLmhvdXJzKCkgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0odG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKFxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoKSxcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgICBsb3dlcmNhc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0oaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuIChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pLFxuICAgICAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAgICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAgICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgICAgIC8vIHRoaXMgcnVsZS5cbiAgICAgICAgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbShob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlLFxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fSxcbiAgICAgICAgbG9jYWxlRmFtaWxpZXMgPSB7fSxcbiAgICAgICAgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gY29tbW9uUHJlZml4KGFycjEsIGFycjIpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBtaW5sID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1pbmw7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWlubDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBuZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQubGVuZ3RoID49IGogJiZcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uUHJlZml4KHNwbGl0LCBuZXh0KSA+PSBqIC0gMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpIHtcbiAgICAgICAgLy8gUHJldmVudCBuYW1lcyB0aGF0IGxvb2sgbGlrZSBmaWxlc3lzdGVtIHBhdGhzLCBpLmUgY29udGFpbiAnLycgb3IgJ1xcJ1xuICAgICAgICAvLyBFbnN1cmUgbmFtZSBpcyBhdmFpbGFibGUgYW5kIGZ1bmN0aW9uIHJldHVybnMgYm9vbGVhblxuICAgICAgICByZXR1cm4gISEobmFtZSAmJiBuYW1lLm1hdGNoKCdeW14vXFxcXFxcXFxdKiQnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsLFxuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmU7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJlxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgJiZcbiAgICAgICAgICAgIGlzTG9jYWxlTmFtZVNhbmUobmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIG5vdCBmb3VuZCB0byBhdm9pZCByZXBlYXRpbmcgZXhwZW5zaXZlIGZpbGUgcmVxdWlyZSBjYWxsIGNhdXNpbmcgaGlnaCBDUFVcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBmaW5kIGVuLVVTLCBlbl9VUywgZW4tdXMgZm9yIGV2ZXJ5IGZvcm1hdCBjYWxsXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG51bGw7IC8vIG51bGwgbWVhbnMgbm90IGZvdW5kXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZShrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0xvY2FsZSAnICsga2V5ICsgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICAnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcblxuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCAmJiBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNoaWxkIGxvY2FsZSBpbi1wbGFjZSB0byBhdm9pZCBtZW1vcnktbGVha3NcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldChtZXJnZUNvbmZpZ3MobG9jYWxlc1tuYW1lXS5fY29uZmlnLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlTG9jYWxlIGlzIGNhbGxlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBhYmJyIHNvIGl0IHdpbGwgaGF2ZSBhIG5hbWUgKGdldHRlcnMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBvdGhlcndpc2UpLlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdyxcbiAgICAgICAgICAgIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgICAgICA/IE1PTlRIXG4gICAgICAgICAgICAgICAgICAgIDogYVtEQVRFXSA8IDEgfHwgYVtEQVRFXSA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKVxuICAgICAgICAgICAgICAgICAgICAgID8gREFURVxuICAgICAgICAgICAgICAgICAgICAgIDogYVtIT1VSXSA8IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYVtIT1VSXSA+IDI0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbTUlOVVRFXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbU0VDT05EXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdICE9PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gSE9VUlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTlVURV0gPCAwIHx8IGFbTUlOVVRFXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlOVVRFXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYVtTRUNPTkRdIDwgMCB8fCBhW1NFQ09ORF0gPiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gU0VDT05EXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlMTElTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTE7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmXG4gICAgICAgICAgICAgICAgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgYmFzaWNJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkfCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vLFxuICAgICAgICBpc29EYXRlcyA9IFtcbiAgICAgICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NJywgL1xcZHs2fS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWScsIC9cXGR7NH0vLCBmYWxzZV0sXG4gICAgICAgIF0sXG4gICAgICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICAgICAgaXNvVGltZXMgPSBbXG4gICAgICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgWydISCcsIC9cXGRcXGQvXSxcbiAgICAgICAgXSxcbiAgICAgICAgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKCgtP1xcZCspL2ksXG4gICAgICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICAgICAgcmZjMjgyMiA9XG4gICAgICAgICAgICAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvLFxuICAgICAgICBvYnNPZmZzZXRzID0ge1xuICAgICAgICAgICAgVVQ6IDAsXG4gICAgICAgICAgICBHTVQ6IDAsXG4gICAgICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgICAgICBQU1Q6IC04ICogNjAsXG4gICAgICAgIH07XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsXG4gICAgICAgICAgICBkYXRlRm9ybWF0LFxuICAgICAgICAgICAgdGltZUZvcm1hdCxcbiAgICAgICAgICAgIHR6Rm9ybWF0LFxuICAgICAgICAgICAgaXNvRGF0ZXNMZW4gPSBpc29EYXRlcy5sZW5ndGgsXG4gICAgICAgICAgICBpc29UaW1lc0xlbiA9IGlzb1RpbWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICB5ZWFyU3RyLFxuICAgICAgICBtb250aFN0cixcbiAgICAgICAgZGF5U3RyLFxuICAgICAgICBob3VyU3RyLFxuICAgICAgICBtaW51dGVTdHIsXG4gICAgICAgIHNlY29uZFN0clxuICAgICkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApLFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXChbXigpXSpcXCl8W1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcc1xccyovLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW5kZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFswXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMV0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzJdXG4gICAgICAgICAgICAgICAgKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKSxcbiAgICAgICAgICAgICAgICBtID0gaG0gJSAxMDAsXG4gICAgICAgICAgICAgICAgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKSxcbiAgICAgICAgICAgIHBhcnNlZEFycmF5O1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgICAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgICAgICBtYXRjaFszXSxcbiAgICAgICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs2XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs3XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gMSkgQVNQLk5FVCwgMikgSVNPLCAzKSBSRkMgMjgyMiBmb3JtYXRzLCBvciA0KSBvcHRpb25hbCBmYWxsYmFjayBpZiBwYXJzaW5nIGlzbid0IHN0cmljdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX3N0cmljdCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAgICAgJ2Rpc2NvdXJhZ2VkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBpbnB1dCA9IFtdLFxuICAgICAgICAgICAgY3VycmVudERhdGUsXG4gICAgICAgICAgICBleHBlY3RlZFdlZWtkYXksXG4gICAgICAgICAgICB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHxcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPVxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9PSBudWxsID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgICk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDXG4gICAgICAgICAgICA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKVxuICAgICAgICAgICAgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fdyAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdywgY3VyV2VlaztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKFxuICAgICAgICAgICAgICAgIHcuR0csXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdLFxuICAgICAgICAgICAgICAgIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgdG9rZW5zLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwLFxuICAgICAgICAgICAgZXJhLFxuICAgICAgICAgICAgdG9rZW5MZW47XG5cbiAgICAgICAgdG9rZW5zID1cbiAgICAgICAgICAgIGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcbiAgICAgICAgdG9rZW5MZW4gPSB0b2tlbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fFxuICAgICAgICAgICAgICAgIFtdKVswXTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9XG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChcbiAgICAgICAgICAgIGNvbmZpZy5fbG9jYWxlLFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdLFxuICAgICAgICAgICAgY29uZmlnLl9tZXJpZGllbVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlcmFcbiAgICAgICAgZXJhID0gZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhO1xuICAgICAgICBpZiAoZXJhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFzQ29udmVydFllYXIoZXJhLCBjb25maWcuX2FbWUVBUl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSxcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQsXG4gICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlnZkxlbiA9IGNvbmZpZy5fZi5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGNvbmZpZ2ZMZW4gPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWdmTGVuOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKGlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmICghYmVzdEZvcm1hdElzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZEZvcm1hdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSksXG4gICAgICAgICAgICBkYXlPckRhdGUgPSBpLmRheSA9PT0gdW5kZWZpbmVkID8gaS5kYXRlIDogaS5kYXk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChcbiAgICAgICAgICAgIFtpLnllYXIsIGkubW9udGgsIGRheU9yRGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoeyBudWxsSW5wdXQ6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdHJ1ZSB8fCBmb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4KCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICtuZXcgRGF0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbXG4gICAgICAgICd5ZWFyJyxcbiAgICAgICAgJ3F1YXJ0ZXInLFxuICAgICAgICAnbW9udGgnLFxuICAgICAgICAnd2VlaycsXG4gICAgICAgICdkYXknLFxuICAgICAgICAnaG91cicsXG4gICAgICAgICdtaW51dGUnLFxuICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gZmFsc2UsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3JkZXJMZW4gPSBvcmRlcmluZy5sZW5ndGg7XG4gICAgICAgIGZvciAoa2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKG0sIGtleSkgJiZcbiAgICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXJMZW47ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID1cbiAgICAgICAgICAgICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgKyB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgKyBxdWFydGVycyAqIDMgKyB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpLFxuICAgICAgICAgICAgICAgIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgc2lnbiArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fm9mZnNldCAlIDYwLCAyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpLFxuICAgICAgICAgICAgY2h1bmssXG4gICAgICAgICAgICBwYXJ0cyxcbiAgICAgICAgICAgIG1pbnV0ZXM7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY2h1bmsgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHBhcnRzID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgPyAwIDogcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPVxuICAgICAgICAgICAgICAgIChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0KG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0KGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge30sXG4gICAgICAgICAgICBvdGhlcjtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID1cbiAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJiBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXigtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspOihcXGQrKSg/OjooXFxkKykoXFwuXFxkKik/KT8kLyxcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAgICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgICAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgICAgIGlzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbihpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXM6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTTogaW5wdXQuX21vbnRocyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpIHx8ICFpc05hTigraW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSAraW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9ICtpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICBkOiB0b0ludChtYXRjaFtEQVRFXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIGg6IHRvSW50KG1hdGNoW0hPVVJdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbTogdG9JbnQobWF0Y2hbTUlOVVRFXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIHM6IHRvSW50KG1hdGNoW1NFQ09ORF0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtczogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiwgLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgTTogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHc6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG06IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbiksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pXG4gICAgICAgICkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19pc1ZhbGlkJykpIHtcbiAgICAgICAgICAgIHJldC5faXNWYWxpZCA9IGlucHV0Ll9pc1ZhbGlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbiAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28oaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICByZXMubW9udGhzID1cbiAgICAgICAgICAgIG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgKyAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7XG4gICAgICAgICAgICAgICAgdmFsID0gcGVyaW9kO1xuICAgICAgICAgICAgICAgIHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZCA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKSxcbiAgICAgICAgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcbiAgICB9XG5cbiAgICAvLyB0eXBlIE1vbWVudElucHV0ID0gTW9tZW50IHwgRGF0ZSB8IHN0cmluZyB8IG51bWJlciB8IChudW1iZXIgfCBzdHJpbmcpW10gfCBNb21lbnRJbnB1dE9iamVjdCB8IHZvaWQ7IC8vIG51bGwgfCB1bmRlZmluZWRcbiAgICBmdW5jdGlvbiBpc01vbWVudElucHV0KGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpc01vbWVudChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzRGF0ZShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzU3RyaW5nKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXIoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IG51bGwgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSB1bmRlZmluZWRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB7XG4gICAgICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAneWVhcnMnLFxuICAgICAgICAgICAgICAgICd5ZWFyJyxcbiAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgJ21vbnRocycsXG4gICAgICAgICAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgICAgICAgICAnTScsXG4gICAgICAgICAgICAgICAgJ2RheXMnLFxuICAgICAgICAgICAgICAgICdkYXknLFxuICAgICAgICAgICAgICAgICdkJyxcbiAgICAgICAgICAgICAgICAnZGF0ZXMnLFxuICAgICAgICAgICAgICAgICdkYXRlJyxcbiAgICAgICAgICAgICAgICAnRCcsXG4gICAgICAgICAgICAgICAgJ2hvdXJzJyxcbiAgICAgICAgICAgICAgICAnaG91cicsXG4gICAgICAgICAgICAgICAgJ2gnLFxuICAgICAgICAgICAgICAgICdtaW51dGVzJyxcbiAgICAgICAgICAgICAgICAnbWludXRlJyxcbiAgICAgICAgICAgICAgICAnbScsXG4gICAgICAgICAgICAgICAgJ3NlY29uZHMnLFxuICAgICAgICAgICAgICAgICdzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdzJyxcbiAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdtcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgcHJvcGVydHlMZW4gPSBwcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydHlMZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgdmFyIGFycmF5VGVzdCA9IGlzQXJyYXkoaW5wdXQpLFxuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID0gZmFsc2U7XG4gICAgICAgIGlmIChhcnJheVRlc3QpIHtcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9XG4gICAgICAgICAgICAgICAgaW5wdXQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXIoaXRlbSkgJiYgaXNTdHJpbmcoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlUZXN0ICYmIGRhdGFUeXBlVGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NhbGVuZGFyU3BlYyhpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3NhbWVEYXknLFxuICAgICAgICAgICAgICAgICduZXh0RGF5JyxcbiAgICAgICAgICAgICAgICAnbGFzdERheScsXG4gICAgICAgICAgICAgICAgJ25leHRXZWVrJyxcbiAgICAgICAgICAgICAgICAnbGFzdFdlZWsnLFxuICAgICAgICAgICAgICAgICdzYW1lRWxzZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNlxuICAgICAgICAgICAgPyAnc2FtZUVsc2UnXG4gICAgICAgICAgICA6IGRpZmYgPCAtMVxuICAgICAgICAgICAgICA/ICdsYXN0V2VlaydcbiAgICAgICAgICAgICAgOiBkaWZmIDwgMFxuICAgICAgICAgICAgICAgID8gJ2xhc3REYXknXG4gICAgICAgICAgICAgICAgOiBkaWZmIDwgMVxuICAgICAgICAgICAgICAgICAgPyAnc2FtZURheSdcbiAgICAgICAgICAgICAgICAgIDogZGlmZiA8IDJcbiAgICAgICAgICAgICAgICAgICAgPyAnbmV4dERheSdcbiAgICAgICAgICAgICAgICAgICAgOiBkaWZmIDwgN1xuICAgICAgICAgICAgICAgICAgICAgID8gJ25leHRXZWVrJ1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3Igc2luZ2xlIHBhcmFtZXRlciwgZm9ybWF0cyBvbmx5IG92ZXJsb2FkIHRvIHRoZSBjYWxlbmRhciBmdW5jdGlvblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9tZW50SW5wdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDYWxlbmRhclNwZWMoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBmb3JtYXRzICYmXG4gICAgICAgICAgICAgICAgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKVxuICAgICAgICAgICAgICAgICAgICA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdylcbiAgICAgICAgICAgICAgICAgICAgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChcbiAgICAgICAgICAgIG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2Vlbihmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiZcbiAgICAgICAgICAgICAgICBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCwgem9uZURlbHRhLCBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYoYSwgYikge1xuICAgICAgICBpZiAoYS5kYXRlKCkgPCBiLmRhdGUoKSkge1xuICAgICAgICAgICAgLy8gZW5kLW9mLW1vbnRoIGNhbGN1bGF0aW9ucyB3b3JrIGNvcnJlY3Qgd2hlbiB0aGUgc3RhcnQgbW9udGggaGFzIG1vcmVcbiAgICAgICAgICAgIC8vIGRheXMgdGhhbiB0aGUgZW5kIG1vbnRoLlxuICAgICAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgICAgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlLFxuICAgICAgICAgICAgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgdXRjXG4gICAgICAgICAgICAgICAgICAgID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXSdcbiAgICAgICAgICAgICAgICAgICAgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApXG4gICAgICAgICAgICAgICAgICAgIC50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICBtLFxuICAgICAgICAgICAgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCcsXG4gICAgICAgICAgICB6b25lID0gJycsXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgZGF0ZXRpbWUsXG4gICAgICAgICAgICBzdWZmaXg7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB5ZWFyID0gMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5ID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKVxuICAgICAgICAgICAgICAgID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0Y1xuICAgICAgICAgICAgICAgIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyB0bzogdGhpcywgZnJvbTogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZnJvbTogdGhpcywgdG86IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMCxcbiAgICAgICAgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORCxcbiAgICAgICAgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEUsXG4gICAgICAgIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuICgoZGl2aWRlbmQgJSBkaXZpc29yKSArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMykgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9XG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSIC1cbiAgICAgICAgICAgICAgICAgICAgbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgICAgICkgLVxuICAgICAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtLnllYXIoKSxcbiAgICAgICAgICAgIG0ubW9udGgoKSxcbiAgICAgICAgICAgIG0uZGF0ZSgpLFxuICAgICAgICAgICAgbS5ob3VyKCksXG4gICAgICAgICAgICBtLm1pbnV0ZSgpLFxuICAgICAgICAgICAgbS5zZWNvbmQoKSxcbiAgICAgICAgICAgIG0ubWlsbGlzZWNvbmQoKSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMigpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3QsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ04nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk4nLCAwLCAwLCAnZXJhTmFtZScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OTicsIDAsIDAsICdlcmFOYXJyb3cnKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5JywgMV0sICd5bycsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5JywgMl0sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eScsIDNdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXl5JywgNF0sIDAsICdlcmFZZWFyJyk7XG5cbiAgICBhZGRSZWdleFRva2VuKCdOJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OJywgbWF0Y2hFcmFOYW1lKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OTicsIG1hdGNoRXJhTmFycm93KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oXG4gICAgICAgIFsnTicsICdOTicsICdOTk4nLCAnTk5OTicsICdOTk5OTiddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgZXJhID0gY29uZmlnLl9sb2NhbGUuZXJhc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAgICAgaWYgKGVyYSkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYSA9IGVyYTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEVyYSA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3knLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5bycsIG1hdGNoRXJhWWVhck9yZGluYWwpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ3knLCAneXknLCAneXl5JywgJ3l5eXknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3lvJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpIHtcbiAgICAgICAgICAgIG1hdGNoID0gaW5wdXQubWF0Y2goY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UpIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZShpbnB1dCwgbWF0Y2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuX2VyYXMgfHwgZ2V0TG9jYWxlKCdlbicpLl9lcmFzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnNpbmNlKS5zdGFydE9mKCdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5zaW5jZSA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSArSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0udW50aWwpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJhcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzUGFyc2UoZXJhTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFiYnIsXG4gICAgICAgICAgICBuYXJyb3c7XG4gICAgICAgIGVyYU5hbWUgPSBlcmFOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBuYW1lID0gZXJhc1tpXS5uYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBhYmJyID0gZXJhc1tpXS5hYmJyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBuYXJyb3cgPSBlcmFzW2ldLm5hcnJvdy50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmJyID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFycm93ID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtuYW1lLCBhYmJyLCBuYXJyb3ddLmluZGV4T2YoZXJhTmFtZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc0NvbnZlcnRZZWFyKGVyYSwgeWVhcikge1xuICAgICAgICB2YXIgZGlyID0gZXJhLnNpbmNlIDw9IGVyYS51bnRpbCA/ICsxIDogLTE7XG4gICAgICAgIGlmICh5ZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKSArICh5ZWFyIC0gZXJhLm9mZnNldCkgKiBkaXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYW1lKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hcnJvdygpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhQWJicigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFZZWFyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkaXIsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGRpciA9IGVyYXNbaV0uc2luY2UgPD0gZXJhc1tpXS51bnRpbCA/ICsxIDogLTE7XG5cbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHx8XG4gICAgICAgICAgICAgICAgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMueWVhcigpIC0gaG9va3MoZXJhc1tpXS5zaW5jZSkueWVhcigpKSAqIGRpciArXG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0ub2Zmc2V0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYW1lUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYW1lUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc0FiYnJSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzQWJiclJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzQWJiclJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYXJyb3dSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFycm93UmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYXJyb3dSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYUFiYnIoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFtZShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hbWVSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYXJyb3coaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYXJyb3dSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFZZWFyT3JkaW5hbChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXggfHwgbWF0Y2hVbnNpZ25lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlRXJhc1BhcnNlKCkge1xuICAgICAgICB2YXIgYWJiclBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFtZVBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFycm93UGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzTmFtZSxcbiAgICAgICAgICAgIGVyYXNBYmJyLFxuICAgICAgICAgICAgZXJhc05hcnJvdyxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGVyYXNOYW1lID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKTtcbiAgICAgICAgICAgIGVyYXNBYmJyID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKTtcbiAgICAgICAgICAgIGVyYXNOYXJyb3cgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdyk7XG5cbiAgICAgICAgICAgIG5hbWVQaWVjZXMucHVzaChlcmFzTmFtZSk7XG4gICAgICAgICAgICBhYmJyUGllY2VzLnB1c2goZXJhc0FiYnIpO1xuICAgICAgICAgICAgbmFycm93UGllY2VzLnB1c2goZXJhc05hcnJvdyk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNOYW1lKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc0FiYnIpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzTmFycm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VyYXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hbWVSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG5hbWVQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzQWJiclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgYWJiclBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYXJyb3dSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbmFycm93UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSArIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrKCksXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWtkYXkoKSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy5pc29XZWVrWWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLndlZWtZZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsXG4gICAgICAgICAgICA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKVxuICAgICAgICAgICAgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArICh0aGlzLm1vbnRoKCkgJSAzKSk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0XG4gICAgICAgICAgICA/IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZVxuICAgICAgICAgICAgOiBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgICAgICBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1XG4gICAgICAgICAgICApICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZChpbnB1dCAtIGRheU9mWWVhciwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbiwgZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvID0gdG87XG4gICAgcHJvdG8udG9Ob3cgPSB0b05vdztcbiAgICBwcm90by5nZXQgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCA9IGluc3BlY3Q7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5mb3IgIT0gbnVsbCkge1xuICAgICAgICBwcm90b1tTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnTW9tZW50PCcgKyB0aGlzLmZvcm1hdCgpICsgJz4nO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90by50b0pTT04gPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8uZXJhTmFtZSA9IGdldEVyYU5hbWU7XG4gICAgcHJvdG8uZXJhTmFycm93ID0gZ2V0RXJhTmFycm93O1xuICAgIHByb3RvLmVyYUFiYnIgPSBnZXRFcmFBYmJyO1xuICAgIHByb3RvLmVyYVllYXIgPSBnZXRFcmFZZWFyO1xuICAgIHByb3RvLnllYXIgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrID0gcHJvdG8ud2Vla3MgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgPSBwcm90by5pc29XZWVrcyA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by53ZWVrc0luV2Vla1llYXIgPSBnZXRXZWVrc0luV2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXI7XG4gICAgcHJvdG8uZGF0ZSA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ID0gcHJvdG8uZGF5cyA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzID0gZGVwcmVjYXRlKFxuICAgICAgICAnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXREYXlPZk1vbnRoXG4gICAgKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRNb250aFxuICAgICk7XG4gICAgcHJvdG8ueWVhcnMgPSBkZXByZWNhdGUoXG4gICAgICAgICd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0WWVhclxuICAgICk7XG4gICAgcHJvdG8uem9uZSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJyxcbiAgICAgICAgZ2V0U2V0Wm9uZVxuICAgICk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKFxuICAgICAgICAnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsXG4gICAgICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZFxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0KHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCA9IHNldDtcbiAgICBwcm90byQxLmVyYXMgPSBsb2NhbGVFcmFzO1xuICAgIHByb3RvJDEuZXJhc1BhcnNlID0gbG9jYWxlRXJhc1BhcnNlO1xuICAgIHByb3RvJDEuZXJhc0NvbnZlcnRZZWFyID0gbG9jYWxlRXJhc0NvbnZlcnRZZWFyO1xuICAgIHByb3RvJDEuZXJhc0FiYnJSZWdleCA9IGVyYXNBYmJyUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFtZVJlZ2V4ID0gZXJhc05hbWVSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYXJyb3dSZWdleCA9IGVyYXNOYXJyb3dSZWdleDtcblxuICAgIHByb3RvJDEubW9udGhzID0gbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgPSBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlID0gbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyA9IGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gPSBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgPSBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSA9IGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggPSB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ID0gd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCA9IHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDAsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4obG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZXJhczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMS0wMS0wMScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICtJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fubm8gRG9taW5pJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ0FEJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAwLTEyLTMxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQmVmb3JlIENocmlzdCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdCQycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB0b0ludCgobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlXG4gICAgKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLFxuICAgICAgICBnZXRMb2NhbGVcbiAgICApO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicygpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyxcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9kYXRhLFxuICAgICAgICAgICAgc2Vjb25kcyxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIChkYXlzICogNDgwMCkgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIChtb250aHMgKiAxNDYwOTcpIC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzLFxuICAgICAgICAgICAgbW9udGhzLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgLyA3ICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMjQgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMTQ0MCArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyhhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKSxcbiAgICAgICAgYXNTZWNvbmRzID0gbWFrZUFzKCdzJyksXG4gICAgICAgIGFzTWludXRlcyA9IG1ha2VBcygnbScpLFxuICAgICAgICBhc0hvdXJzID0gbWFrZUFzKCdoJyksXG4gICAgICAgIGFzRGF5cyA9IG1ha2VBcygnZCcpLFxuICAgICAgICBhc1dlZWtzID0gbWFrZUFzKCd3JyksXG4gICAgICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJyksXG4gICAgICAgIGFzUXVhcnRlcnMgPSBtYWtlQXMoJ1EnKSxcbiAgICAgICAgYXNZZWFycyA9IG1ha2VBcygneScpLFxuICAgICAgICB2YWx1ZU9mJDEgPSBhc01pbGxpc2Vjb25kcztcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMih1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpLFxuICAgICAgICBzZWNvbmRzID0gbWFrZUdldHRlcignc2Vjb25kcycpLFxuICAgICAgICBtaW51dGVzID0gbWFrZUdldHRlcignbWludXRlcycpLFxuICAgICAgICBob3VycyA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyksXG4gICAgICAgIGRheXMgPSBtYWtlR2V0dGVyKCdkYXlzJyksXG4gICAgICAgIG1vbnRocyA9IG1ha2VHZXR0ZXIoJ21vbnRocycpLFxuICAgICAgICB5ZWFycyA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcygpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgICAgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgICAgIHNzOiA0NCwgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgICAgICBzOiA0NSwgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgICAgIG06IDQ1LCAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgICAgIGg6IDIyLCAvLyBob3VycyB0byBkYXlcbiAgICAgICAgICAgIGQ6IDI2LCAvLyBkYXlzIHRvIG1vbnRoL3dlZWtcbiAgICAgICAgICAgIHc6IG51bGwsIC8vIHdlZWtzIHRvIG1vbnRoXG4gICAgICAgICAgICBNOiAxMSwgLy8gbW9udGhzIHRvIHllYXJcbiAgICAgICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIHRocmVzaG9sZHMsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCksXG4gICAgICAgICAgICBzZWNvbmRzID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksXG4gICAgICAgICAgICBtaW51dGVzID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSksXG4gICAgICAgICAgICBob3VycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpLFxuICAgICAgICAgICAgZGF5cyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLFxuICAgICAgICAgICAgbW9udGhzID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSksXG4gICAgICAgICAgICB3ZWVrcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd3JykpLFxuICAgICAgICAgICAgeWVhcnMgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSxcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzcycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDw9IDEgJiYgWydtJ10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gJiYgWydtbScsIG1pbnV0ZXNdKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8PSAxICYmIFsnaCddKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8IHRocmVzaG9sZHMuaCAmJiBbJ2hoJywgaG91cnNdKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDw9IDEgJiYgWydkJ10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdKTtcblxuICAgICAgICBpZiAodGhyZXNob2xkcy53ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPD0gMSAmJiBbJ3cnXSkgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPCB0aHJlc2hvbGRzLncgJiYgWyd3dycsIHdlZWtzXSk7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEgfHxcbiAgICAgICAgICAgIChtb250aHMgPD0gMSAmJiBbJ00nXSkgfHxcbiAgICAgICAgICAgIChtb250aHMgPCB0aHJlc2hvbGRzLk0gJiYgWydNTScsIG1vbnRoc10pIHx8XG4gICAgICAgICAgICAoeWVhcnMgPD0gMSAmJiBbJ3knXSkgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByb3VuZGluZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZShhcmdXaXRoU3VmZml4LCBhcmdUaHJlc2hvbGRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpdGhTdWZmaXggPSBmYWxzZSxcbiAgICAgICAgICAgIHRoID0gdGhyZXNob2xkcyxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhcmdUaHJlc2hvbGRzID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgICAgIGFyZ1dpdGhTdWZmaXggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgd2l0aFN1ZmZpeCA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdUaHJlc2hvbGRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGggPSBPYmplY3QuYXNzaWduKHt9LCB0aHJlc2hvbGRzLCBhcmdUaHJlc2hvbGRzKTtcbiAgICAgICAgICAgIGlmIChhcmdUaHJlc2hvbGRzLnMgIT0gbnVsbCAmJiBhcmdUaHJlc2hvbGRzLnNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aC5zcyA9IGFyZ1RocmVzaG9sZHMucyAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIHRoLCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoeCA+IDApIC0gKHggPCAwKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwLFxuICAgICAgICAgICAgZGF5cyA9IGFicyQxKHRoaXMuX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzJDEodGhpcy5fbW9udGhzKSxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKSxcbiAgICAgICAgICAgIHRvdGFsU2lnbixcbiAgICAgICAgICAgIHltU2lnbixcbiAgICAgICAgICAgIGRheXNTaWduLFxuICAgICAgICAgICAgaG1zU2lnbjtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuXG4gICAgICAgIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdG90YWxTaWduICtcbiAgICAgICAgICAgICdQJyArXG4gICAgICAgICAgICAoeWVhcnMgPyB5bVNpZ24gKyB5ZWFycyArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAobW9udGhzID8geW1TaWduICsgbW9udGhzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChkYXlzID8gZGF5c1NpZ24gKyBkYXlzICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyB8fCBtaW51dGVzIHx8IHNlY29uZHMgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzID8gaG1zU2lnbiArIGhvdXJzICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtaW51dGVzID8gaG1zU2lnbiArIG1pbnV0ZXMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHNlY29uZHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzID0gYWJzO1xuICAgIHByb3RvJDIuYWRkID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJyxcbiAgICAgICAgdG9JU09TdHJpbmckMVxuICAgICk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vISBtb21lbnQuanNcblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4zMC4xJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiA9IG1pbjtcbiAgICBob29rcy5tYXggPSBtYXg7XG4gICAgaG9va3Mubm93ID0gbm93O1xuICAgIGhvb2tzLnV0YyA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nLCAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuX2dldCA9IF9nZXQ7XG5leHBvcnRzLl9sZW5ndGggPSBfbGVuZ3RoO1xuZXhwb3J0cy5hcnJheXNFcXVhbCA9IGFycmF5c0VxdWFsO1xuZXhwb3J0cy5kZWVwT2JqZWN0Q29tcGFyZSA9IGRlZXBPYmplY3RDb21wYXJlO1xuZXhwb3J0cy5rZXlCeSA9IGtleUJ5O1xuZXhwb3J0cy5ub29wID0gbm9vcDtcblxudmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2guaXNlcXVhbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG4vLyBzbyB3ZSBjb3VsZCB1c2UgYm90aCBpbW11dGFibGUuanMgb2JqZWN0cyBhbmQgcmVndWxhciBvYmplY3RzXG5mdW5jdGlvbiBfZ2V0KG9iamVjdCwga2V5KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0LmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdC5nZXQoa2V5KSA6IG9iamVjdFtrZXldO1xufVxuXG5mdW5jdGlvbiBfbGVuZ3RoKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdC5jb3VudCA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdC5jb3VudCgpIDogb2JqZWN0Lmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoYXJyYXkxLCBhcnJheTIpIHtcbiAgcmV0dXJuIF9sZW5ndGgoYXJyYXkxKSA9PT0gX2xlbmd0aChhcnJheTIpICYmIGFycmF5MS5ldmVyeShmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gZWxlbWVudCA9PT0gX2dldChhcnJheTIsIGluZGV4KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZXBPYmplY3RDb21wYXJlKG9iajEsIG9iajIpIHtcbiAgcmV0dXJuICgwLCBfbG9kYXNoW1wiZGVmYXVsdFwiXSkob2JqMSwgb2JqMik7XG59XG5cbmZ1bmN0aW9uIGtleUJ5KHZhbHVlLCBrZXkpIHtcbiAgdmFyIG9iaiA9IHt9O1xuICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgb2JqW2VsZW1lbnRba2V5XV0gPSBlbGVtZW50O1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbXBvc2VFdmVudHMgPSBjb21wb3NlRXZlbnRzO1xuXG5mdW5jdGlvbiBjb21wb3NlRXZlbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZm5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZuc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZuICYmIGZuLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH0pO1xuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0SXRlbVJlbmRlcmVyID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIGRlZmF1bHRJdGVtUmVuZGVyZXIgPSBmdW5jdGlvbiBkZWZhdWx0SXRlbVJlbmRlcmVyKF9yZWYpIHtcbiAgdmFyIGl0ZW0gPSBfcmVmLml0ZW0sXG4gICAgICBpdGVtQ29udGV4dCA9IF9yZWYuaXRlbUNvbnRleHQsXG4gICAgICBnZXRJdGVtUHJvcHMgPSBfcmVmLmdldEl0ZW1Qcm9wcyxcbiAgICAgIGdldFJlc2l6ZVByb3BzID0gX3JlZi5nZXRSZXNpemVQcm9wcztcblxuICB2YXIgX2dldFJlc2l6ZVByb3BzID0gZ2V0UmVzaXplUHJvcHMoKSxcbiAgICAgIGxlZnRSZXNpemVQcm9wcyA9IF9nZXRSZXNpemVQcm9wcy5sZWZ0LFxuICAgICAgcmlnaHRSZXNpemVQcm9wcyA9IF9nZXRSZXNpemVQcm9wcy5yaWdodDtcblxuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIGdldEl0ZW1Qcm9wcyhpdGVtLml0ZW1Qcm9wcyksIGl0ZW1Db250ZXh0LnVzZVJlc2l6ZUhhbmRsZSA/IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCBsZWZ0UmVzaXplUHJvcHMpIDogJycsIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInJjdC1pdGVtLWNvbnRlbnRcIixcbiAgICBzdHlsZToge1xuICAgICAgbWF4SGVpZ2h0OiBcIlwiLmNvbmNhdChpdGVtQ29udGV4dC5kaW1lbnNpb25zLmhlaWdodClcbiAgICB9XG4gIH0sIGl0ZW1Db250ZXh0LnRpdGxlKSwgaXRlbUNvbnRleHQudXNlUmVzaXplSGFuZGxlID8gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHJpZ2h0UmVzaXplUHJvcHMpIDogJycpO1xufTsgLy8gVE9ETzogdXBkYXRlIHRoaXMgdG8gYWN0dWFsIHByb3AgdHlwZXMuIFRvbyBtdWNoIHRvIGNoYW5nZSBiZWZvcmUgcmVsZWFzZVxuLy8gZnV0dXJlIG1lLCBmb3JnaXZlIG1lLlxuXG5cbmV4cG9ydHMuZGVmYXVsdEl0ZW1SZW5kZXJlciA9IGRlZmF1bHRJdGVtUmVuZGVyZXI7XG5kZWZhdWx0SXRlbVJlbmRlcmVyLnByb3BUeXBlcyA9IHtcbiAgaXRlbTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYW55LFxuICBpdGVtQ29udGV4dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYW55LFxuICBnZXRJdGVtUHJvcHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFueSxcbiAgZ2V0UmVzaXplUHJvcHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFueVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29vcmRpbmF0ZVRvVGltZVJhdGlvID0gY29vcmRpbmF0ZVRvVGltZVJhdGlvO1xuZXhwb3J0cy5jYWxjdWxhdGVYUG9zaXRpb25Gb3JUaW1lID0gY2FsY3VsYXRlWFBvc2l0aW9uRm9yVGltZTtcbmV4cG9ydHMuY2FsY3VsYXRlVGltZUZvclhQb3NpdGlvbiA9IGNhbGN1bGF0ZVRpbWVGb3JYUG9zaXRpb247XG5leHBvcnRzLml0ZXJhdGVUaW1lcyA9IGl0ZXJhdGVUaW1lcztcbmV4cG9ydHMuZ2V0TWluVW5pdCA9IGdldE1pblVuaXQ7XG5leHBvcnRzLmdldE5leHRVbml0ID0gZ2V0TmV4dFVuaXQ7XG5leHBvcnRzLmNhbGN1bGF0ZUludGVyYWN0aW9uTmV3VGltZXMgPSBjYWxjdWxhdGVJbnRlcmFjdGlvbk5ld1RpbWVzO1xuZXhwb3J0cy5jYWxjdWxhdGVEaW1lbnNpb25zID0gY2FsY3VsYXRlRGltZW5zaW9ucztcbmV4cG9ydHMuZ2V0R3JvdXBPcmRlcnMgPSBnZXRHcm91cE9yZGVycztcbmV4cG9ydHMuZ2V0R3JvdXBlZEl0ZW1zID0gZ2V0R3JvdXBlZEl0ZW1zO1xuZXhwb3J0cy5nZXRWaXNpYmxlSXRlbXMgPSBnZXRWaXNpYmxlSXRlbXM7XG5leHBvcnRzLmNvbGxpc2lvbiA9IGNvbGxpc2lvbjtcbmV4cG9ydHMuZ3JvdXBTdGFjayA9IGdyb3VwU3RhY2s7XG5leHBvcnRzLmdyb3VwTm9TdGFjayA9IGdyb3VwTm9TdGFjaztcbmV4cG9ydHMuc3RhY2tBbGwgPSBzdGFja0FsbDtcbmV4cG9ydHMuc3RhY2tHcm91cCA9IHN0YWNrR3JvdXA7XG5leHBvcnRzLnN0YWNrVGltZWxpbmVJdGVtcyA9IHN0YWNrVGltZWxpbmVJdGVtcztcbmV4cG9ydHMuZ2V0Q2FudmFzV2lkdGggPSBnZXRDYW52YXNXaWR0aDtcbmV4cG9ydHMuZ2V0SXRlbURpbWVuc2lvbnMgPSBnZXRJdGVtRGltZW5zaW9ucztcbmV4cG9ydHMuZ2V0SXRlbVdpdGhJbnRlcmFjdGlvbnMgPSBnZXRJdGVtV2l0aEludGVyYWN0aW9ucztcbmV4cG9ydHMuZ2V0Q2FudmFzQm91bmRhcmllc0Zyb21WaXNpYmxlVGltZSA9IGdldENhbnZhc0JvdW5kYXJpZXNGcm9tVmlzaWJsZVRpbWU7XG5leHBvcnRzLmNhbGN1bGF0ZVNjcm9sbENhbnZhcyA9IGNhbGN1bGF0ZVNjcm9sbENhbnZhcztcbmV4cG9ydHMubWluQ2VsbFdpZHRoID0gdm9pZCAwO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfZ2VuZXJpYyA9IHJlcXVpcmUoXCIuL2dlbmVyaWNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyBpZiAoaSAlIDIpIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYXJndW1lbnRzW2ldKSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgbXMgLyBwaXhlbCByYXRpbyBvZiB0aGUgdGltZWxpbmUgc3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNUaW1lU3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNUaW1lRW5kXG4gKiBAcGFyYW0ge251bWJlcn0gY2FudmFzV2lkdGhcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNvb3JkaW5hdGVUb1RpbWVSYXRpbyhjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGNhbnZhc1dpZHRoKSB7XG4gIHJldHVybiAoY2FudmFzVGltZUVuZCAtIGNhbnZhc1RpbWVTdGFydCkgLyBjYW52YXNXaWR0aDtcbn1cbi8qKlxuICogRm9yIGEgZ2l2ZW4gdGltZSwgY2FsY3VsYXRlIHRoZSBwaXhlbCBwb3NpdGlvbiBnaXZlbiB0aW1lbGluZSBzdGF0ZVxuICogKHRpbWVsaW5lIHdpZHRoIGluIHB4LCBjYW52YXMgdGltZSByYW5nZSlcbiAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNUaW1lU3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNUaW1lRW5kXG4gKiBAcGFyYW0ge251bWJlcn0gY2FudmFzV2lkdGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5cblxuZnVuY3Rpb24gY2FsY3VsYXRlWFBvc2l0aW9uRm9yVGltZShjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGNhbnZhc1dpZHRoLCB0aW1lKSB7XG4gIHZhciB3aWR0aFRvWm9vbVJhdGlvID0gY2FudmFzV2lkdGggLyAoY2FudmFzVGltZUVuZCAtIGNhbnZhc1RpbWVTdGFydCk7XG4gIHZhciB0aW1lT2Zmc2V0ID0gdGltZSAtIGNhbnZhc1RpbWVTdGFydDtcbiAgcmV0dXJuIHRpbWVPZmZzZXQgKiB3aWR0aFRvWm9vbVJhdGlvO1xufVxuLyoqXG4gKiBGb3IgYSBnaXZlbiB4IHBvc2l0aW9uIChsZWZ0T2Zmc2V0KSBpbiBwaXhlbHMsIGNhbGN1bGF0ZSB0aW1lIGJhc2VkIG9uXG4gKiB0aW1lbGluZSBzdGF0ZSAodGltZWxpbmUgd2lkdGggaW4gcHgsIGNhbnZhcyB0aW1lIHJhbmdlKVxuICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc1RpbWVTdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc1RpbWVFbmRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNXaWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IGxlZnRPZmZzZXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBjYWxjdWxhdGVUaW1lRm9yWFBvc2l0aW9uKGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCwgY2FudmFzV2lkdGgsIGxlZnRPZmZzZXQpIHtcbiAgdmFyIHRpbWVUb1B4UmF0aW8gPSAoY2FudmFzVGltZUVuZCAtIGNhbnZhc1RpbWVTdGFydCkgLyBjYW52YXNXaWR0aDtcbiAgdmFyIHRpbWVGcm9tQ2FudmFzVGltZVN0YXJ0ID0gdGltZVRvUHhSYXRpbyAqIGxlZnRPZmZzZXQ7XG4gIHJldHVybiB0aW1lRnJvbUNhbnZhc1RpbWVTdGFydCArIGNhbnZhc1RpbWVTdGFydDtcbn1cblxuZnVuY3Rpb24gaXRlcmF0ZVRpbWVzKHN0YXJ0LCBlbmQsIHVuaXQsIHRpbWVTdGVwcywgY2FsbGJhY2spIHtcbiAgdmFyIHRpbWUgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKHN0YXJ0KS5zdGFydE9mKHVuaXQpO1xuXG4gIGlmICh0aW1lU3RlcHNbdW5pdF0gJiYgdGltZVN0ZXBzW3VuaXRdID4gMSkge1xuICAgIHZhciB2YWx1ZSA9IHRpbWUuZ2V0KHVuaXQpO1xuICAgIHRpbWUuc2V0KHVuaXQsIHZhbHVlIC0gdmFsdWUgJSB0aW1lU3RlcHNbdW5pdF0pO1xuICB9XG5cbiAgd2hpbGUgKHRpbWUudmFsdWVPZigpIDwgZW5kKSB7XG4gICAgdmFyIG5leHRUaW1lID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSh0aW1lKS5hZGQodGltZVN0ZXBzW3VuaXRdIHx8IDEsIFwiXCIuY29uY2F0KHVuaXQsIFwic1wiKSk7XG4gICAgY2FsbGJhY2sodGltZSwgbmV4dFRpbWUpO1xuICAgIHRpbWUgPSBuZXh0VGltZTtcbiAgfVxufSAvLyB0aGlzIGZ1bmN0aW9uIGlzIFZFUlkgSE9UIGFzIGl0cyB1c2VkIGluIFRpbWVsaW5lLmpzIHJlbmRlciBmdW5jdGlvblxuLy8gVE9ETzogY2hlY2sgaWYgdGhlcmUgYXJlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucyBoZXJlXG4vLyB3aGVuIFwid2Vla3NcIiBmZWF0dXJlIGlzIGltcGxlbWVudGVkLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgbW9kaWZpZWQgaGVhdmlseVxuXG4vKiogZGV0ZXJtaW5lIHRoZSBjdXJyZW50IHJlbmRlcmVkIHRpbWUgdW5pdCBiYXNlZCBvbiB0aW1lbGluZSB0aW1lIHNwYW5cbiAqXG4gKiB6b29tOiAoaW4gbWlsbGlzZWNvbmRzKSBkaWZmZXJlbmNlIGJldHdlZW4gdGltZSBzdGFydCBhbmQgdGltZSBlbmQgb2YgdGltZWxpbmUgY2FudmFzXG4gKiB3aWR0aDogKGluIHBpeGVscykgcGl4ZWwgd2lkdGggb2YgdGltZWxpbmUgY2FudmFzXG4gKiB0aW1lU3RlcHM6IG1hcCBvZiB0aW1lRGl2aWRlcnMgd2l0aCBudW1iZXIgdG8gaW5kaWNhdGUgc3RlcCBvZiBlYWNoIGRpdmlkZXJcbiAqL1xuLy8gdGhlIHNtYWxsZXN0IGNlbGwgd2Ugd2FudCB0byByZW5kZXIgaXMgMTdweFxuLy8gdGhpcyBjYW4gYmUgbWFuaXB1bGF0ZWQgdG8gbWFrZSB0aGUgYnJlYWtwb2ludHMgY2hhbmdlIG1vcmUvbGVzc1xuLy8gaS5lLiBvbiB6b29tIGhvdyBvZnRlbiBkbyB3ZSBzd2l0Y2ggdG8gdGhlIG5leHQgdW5pdCBvZiB0aW1lXG4vLyBpIHRoaW5rIHRoaXMgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gY2VsbCBsaW5lc1xuXG5cbnZhciBtaW5DZWxsV2lkdGggPSAxNztcbmV4cG9ydHMubWluQ2VsbFdpZHRoID0gbWluQ2VsbFdpZHRoO1xuXG5mdW5jdGlvbiBnZXRNaW5Vbml0KHpvb20sIHdpZHRoLCB0aW1lU3RlcHMpIHtcbiAgLy8gZm9yIHN1cHBvcnRpbmcgd2Vla3MsIGl0cyBpbXBvcnRhbnQgdG8gcmVtZW1iZXIgdGhhdCBlYWNoIG9mIHRoZXNlXG4gIC8vIHVuaXRzIGhhcyBhIG5hdHVyYWwgcHJvZ3Jlc3Npb24gdG8gdGhlIG90aGVyLiBpLmUuIGEgeWVhciBpcyAxMiBtb250aHNcbiAgLy8gYSBtb250aCBpcyAyNCBkYXlzLCBhIGRheSBpcyAyNCBob3Vycy5cbiAgLy8gd2l0aCB3ZWVrcyB0aGlzIGlzbnQgdGhlIGNhc2Ugc28gd2Vla3MgbmVlZHMgdG8gYmUgaGFuZGxlZCBzcGVjaWFsbHlcbiAgdmFyIHRpbWVEaXZpZGVycyA9IHtcbiAgICBzZWNvbmQ6IDEwMDAsXG4gICAgbWludXRlOiA2MCxcbiAgICBob3VyOiA2MCxcbiAgICBkYXk6IDI0LFxuICAgIG1vbnRoOiAzMCxcbiAgICB5ZWFyOiAxMlxuICB9O1xuICB2YXIgbWluVW5pdCA9ICd5ZWFyJzsgLy8gdGhpcyB0aW1lc3BhbiBpcyBpbiBtcyBpbml0aWFsbHlcblxuICB2YXIgbmV4dFRpbWVTcGFuSW5Vbml0Q29udGV4dCA9IHpvb207XG4gIE9iamVjdC5rZXlzKHRpbWVEaXZpZGVycykuc29tZShmdW5jdGlvbiAodW5pdCkge1xuICAgIC8vIGNvbnZlcnRzIHByZXZpb3VzIHRpbWUgc3BhbiB0byBjdXJyZW50IHVuaXRcbiAgICAvLyAoZS5nLiBtaWxsaXNlY29uZHMgdG8gc2Vjb25kcywgc2Vjb25kcyB0byBtaW51dGVzLCBldGMpXG4gICAgbmV4dFRpbWVTcGFuSW5Vbml0Q29udGV4dCA9IG5leHRUaW1lU3BhbkluVW5pdENvbnRleHQgLyB0aW1lRGl2aWRlcnNbdW5pdF07IC8vIHRpbWVTdGVwcyBpcyBcIlxuICAgIC8vIFdpdGggd2hhdCBzdGVwIHRvIGRpc3BsYXkgZGlmZmVyZW50IHVuaXRzLiBFLmcuIDE1IGZvciBtaW51dGUgbWVhbnMgb25seSBtaW51dGVzIDAsIDE1LCAzMCBhbmQgNDUgd2lsbCBiZSBzaG93bi5cIlxuICAgIC8vIGhvdyBtYW55IGNlbGxzIHdvdWxkIGJlIHJlbmRlcmVkIGdpdmVuIHRoaXMgdGltZSBzcGFuLCBmb3IgdGhpcyB1bml0P1xuICAgIC8vIGUuZy4gZm9yIHRpbWUgc3BhbiBvZiA2MCBtaW51dGVzLCBhbmQgdGltZSBzdGVwIG9mIDEsIHdlIHdvdWxkIHJlbmRlciA2MCBjZWxsc1xuXG4gICAgdmFyIGNlbGxzVG9CZVJlbmRlcmVkRm9yQ3VycmVudFVuaXQgPSBuZXh0VGltZVNwYW5JblVuaXRDb250ZXh0IC8gdGltZVN0ZXBzW3VuaXRdOyAvLyB3aGF0IGlzIGhhcHBlbmluZyBoZXJlPyB3aHkgMyBpZiB0aW1lIHN0ZXBzIGFyZSBncmVhdGVyIHRoYW4gMT8/XG5cbiAgICB2YXIgY2VsbFdpZHRoVG9Vc2UgPSB0aW1lU3RlcHNbdW5pdF0gJiYgdGltZVN0ZXBzW3VuaXRdID4gMSA/IDMgKiBtaW5DZWxsV2lkdGggOiBtaW5DZWxsV2lkdGg7IC8vIGZvciB0aGUgbWluV2lkdGggb2YgYSBjZWxsLCBob3cgbWFueSBjZWxscyB3b3VsZCBiZSByZW5kZXJlZCBnaXZlblxuICAgIC8vIHRoZSBjdXJyZW50IHBpeGVsIHdpZHRoXG4gICAgLy8gaS5lLiBmXG5cbiAgICB2YXIgbWluaW11bUNlbGxzVG9SZW5kZXJVbml0ID0gd2lkdGggLyBjZWxsV2lkdGhUb1VzZTtcblxuICAgIGlmIChjZWxsc1RvQmVSZW5kZXJlZEZvckN1cnJlbnRVbml0IDwgbWluaW11bUNlbGxzVG9SZW5kZXJVbml0KSB7XG4gICAgICAvLyBmb3IgdGhlIGN1cnJlbnQgem9vbSwgdGhlIG51bWJlciBvZiBjZWxscyB3ZSdkIG5lZWQgdG8gcmVuZGVyIGFsbCBwYXJ0cyBvZiB0aGlzIHVuaXRcbiAgICAgIC8vIGlzIGxlc3MgdGhhbiB0aGUgbWluaW11bSBudW1iZXIgb2YgY2VsbHMgbmVlZGVkIGF0IG1pbmltdW0gY2VsbCB3aWR0aFxuICAgICAgbWluVW5pdCA9IHVuaXQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWluVW5pdDtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dFVuaXQodW5pdCkge1xuICB2YXIgbmV4dFVuaXRzID0ge1xuICAgIHNlY29uZDogJ21pbnV0ZScsXG4gICAgbWludXRlOiAnaG91cicsXG4gICAgaG91cjogJ2RheScsXG4gICAgZGF5OiAnbW9udGgnLFxuICAgIG1vbnRoOiAneWVhcicsXG4gICAgeWVhcjogJ3llYXInXG4gIH07XG5cbiAgaWYgKCFuZXh0VW5pdHNbdW5pdF0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bml0IFwiLmNvbmNhdCh1bml0LCBcIiBpbiBub3QgYWNjZXB0YWJsZVwiKSk7XG4gIH1cblxuICByZXR1cm4gbmV4dFVuaXRzW3VuaXRdO1xufVxuLyoqXG4gKiBnZXQgdGhlIG5ldyBzdGFydCBhbmQgbmV3IGVuZCB0aW1lIG9mIGl0ZW0gdGhhdCBpcyBiZWluZ1xuICogZHJhZ2dlZCBvciByZXNpemVkXG4gKiBAcGFyYW0geyp9IGl0ZW1UaW1lU3RhcnQgb3JpZ2luYWwgaXRlbSB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIHsqfSBpdGVtVGltZUVuZCBvcmlnaW5hbCBpdGVtIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcGFyYW0geyp9IGRyYWdUaW1lIG5ldyBzdGFydCB0aW1lIGlmIGl0ZW0gaXMgZHJhZ2dlZCBpbiBtaWxsaXNlY29uZHNcbiAqIEBwYXJhbSB7Kn0gaXNEcmFnZ2luZyBpcyBpdGVtIGJlaW5nIGRyYWdnZWRcbiAqIEBwYXJhbSB7Kn0gaXNSZXNpemluZyBpcyBpdGVtIGJlaW5nIHJlc2l6ZWRcbiAqIEBwYXJhbSB7YHJpZ2h0YCBvciBgbGVmdGB9IHJlc2l6aW5nRWRnZSByZXNpemUgZWRnZVxuICogQHBhcmFtIHsqfSByZXNpemVUaW1lIG5ldyByZXNpemUgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUludGVyYWN0aW9uTmV3VGltZXMoX3JlZikge1xuICB2YXIgaXRlbVRpbWVTdGFydCA9IF9yZWYuaXRlbVRpbWVTdGFydCxcbiAgICAgIGl0ZW1UaW1lRW5kID0gX3JlZi5pdGVtVGltZUVuZCxcbiAgICAgIGRyYWdUaW1lID0gX3JlZi5kcmFnVGltZSxcbiAgICAgIGlzRHJhZ2dpbmcgPSBfcmVmLmlzRHJhZ2dpbmcsXG4gICAgICBpc1Jlc2l6aW5nID0gX3JlZi5pc1Jlc2l6aW5nLFxuICAgICAgcmVzaXppbmdFZGdlID0gX3JlZi5yZXNpemluZ0VkZ2UsXG4gICAgICByZXNpemVUaW1lID0gX3JlZi5yZXNpemVUaW1lO1xuICB2YXIgb3JpZ2luYWxJdGVtUmFuZ2UgPSBpdGVtVGltZUVuZCAtIGl0ZW1UaW1lU3RhcnQ7XG4gIHZhciBpdGVtU3RhcnQgPSBpc1Jlc2l6aW5nICYmIHJlc2l6aW5nRWRnZSA9PT0gJ2xlZnQnID8gcmVzaXplVGltZSA6IGl0ZW1UaW1lU3RhcnQ7XG4gIHZhciBpdGVtRW5kID0gaXNSZXNpemluZyAmJiByZXNpemluZ0VkZ2UgPT09ICdyaWdodCcgPyByZXNpemVUaW1lIDogaXRlbVRpbWVFbmQ7XG4gIHJldHVybiBbaXNEcmFnZ2luZyA/IGRyYWdUaW1lIDogaXRlbVN0YXJ0LCBpc0RyYWdnaW5nID8gZHJhZ1RpbWUgKyBvcmlnaW5hbEl0ZW1SYW5nZSA6IGl0ZW1FbmRdO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVEaW1lbnNpb25zKF9yZWYyKSB7XG4gIHZhciBpdGVtVGltZVN0YXJ0ID0gX3JlZjIuaXRlbVRpbWVTdGFydCxcbiAgICAgIGl0ZW1UaW1lRW5kID0gX3JlZjIuaXRlbVRpbWVFbmQsXG4gICAgICBjYW52YXNUaW1lU3RhcnQgPSBfcmVmMi5jYW52YXNUaW1lU3RhcnQsXG4gICAgICBjYW52YXNUaW1lRW5kID0gX3JlZjIuY2FudmFzVGltZUVuZCxcbiAgICAgIGNhbnZhc1dpZHRoID0gX3JlZjIuY2FudmFzV2lkdGg7XG4gIHZhciBpdGVtVGltZVJhbmdlID0gaXRlbVRpbWVFbmQgLSBpdGVtVGltZVN0YXJ0OyAvLyByZXN0cmljdCBzdGFydFRpbWUgYW5kIGVuZFRpbWUgdG8gYmUgYm91bmRlZCBieSBjYW52YXNUaW1lU3RhcnQgYW5kIGNhbnZhc1RpbWVFbmRcblxuICB2YXIgZWZmZWN0aXZlU3RhcnRUaW1lID0gTWF0aC5tYXgoaXRlbVRpbWVTdGFydCwgY2FudmFzVGltZVN0YXJ0KTtcbiAgdmFyIGVmZmVjdGl2ZUVuZFRpbWUgPSBNYXRoLm1pbihpdGVtVGltZUVuZCwgY2FudmFzVGltZUVuZCk7XG4gIHZhciBsZWZ0ID0gY2FsY3VsYXRlWFBvc2l0aW9uRm9yVGltZShjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGNhbnZhc1dpZHRoLCBlZmZlY3RpdmVTdGFydFRpbWUpO1xuICB2YXIgcmlnaHQgPSBjYWxjdWxhdGVYUG9zaXRpb25Gb3JUaW1lKGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCwgY2FudmFzV2lkdGgsIGVmZmVjdGl2ZUVuZFRpbWUpO1xuICB2YXIgaXRlbVdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB2YXIgZGltZW5zaW9ucyA9IHtcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHdpZHRoOiBNYXRoLm1heChpdGVtV2lkdGgsIDMpLFxuICAgIGNvbGxpc2lvbkxlZnQ6IGl0ZW1UaW1lU3RhcnQsXG4gICAgY29sbGlzaW9uV2lkdGg6IGl0ZW1UaW1lUmFuZ2VcbiAgfTtcbiAgcmV0dXJuIGRpbWVuc2lvbnM7XG59XG4vKipcbiAqIEdldCB0aGUgb3JkZXIgb2YgZ3JvdXBzIGJhc2VkIG9uIHRoZWlyIGtleXNcbiAqIEBwYXJhbSB7Kn0gZ3JvdXBzIGFycmF5IG9mIGdyb3Vwc1xuICogQHBhcmFtIHsqfSBrZXlzIHRoZSBrZXlzIG9iamVjdFxuICogQHJldHVybnMgT3JkZXJlZCBoYXNoIG9mIG9iamVjdHMgd2l0aCB0aGVpciBhcnJheSBpbmRleCBhbmQgZ3JvdXBcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEdyb3VwT3JkZXJzKGdyb3Vwcywga2V5cykge1xuICB2YXIgZ3JvdXBJZEtleSA9IGtleXMuZ3JvdXBJZEtleTtcbiAgdmFyIGdyb3VwT3JkZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICBncm91cE9yZGVyc1soMCwgX2dlbmVyaWMuX2dldCkoZ3JvdXBzW2ldLCBncm91cElkS2V5KV0gPSB7XG4gICAgICBpbmRleDogaSxcbiAgICAgIGdyb3VwOiBncm91cHNbaV1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGdyb3VwT3JkZXJzO1xufVxuLyoqXG4gKiBBZGRzIGl0ZW1zIHJlbGV2YW50IHRvIGVhY2ggZ3JvdXAgdG8gdGhlIHJlc3VsdCBvZiBnZXRHcm91cE9yZGVyc1xuICogQHBhcmFtIHsqfSBpdGVtcyBsaXN0IG9mIGFsbCBpdGVtc1xuICogQHBhcmFtIHsqfSBncm91cE9yZGVycyB0aGUgcmVzdWx0IG9mIGdldEdyb3VwT3JkZXJzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRHcm91cGVkSXRlbXMoaXRlbXMsIGdyb3VwT3JkZXJzKSB7XG4gIHZhciBncm91cGVkSXRlbXMgPSB7fTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhncm91cE9yZGVycyk7IC8vIEluaXRpYWxpemUgd2l0aCByZXN1bHQgb2JqZWN0IGZvciBlYWNoIGdyb3VwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGdyb3VwT3JkZXIgPSBncm91cE9yZGVyc1trZXlzW2ldXTtcbiAgICBncm91cGVkSXRlbXNbaV0gPSB7XG4gICAgICBpbmRleDogZ3JvdXBPcmRlci5pbmRleCxcbiAgICAgIGdyb3VwOiBncm91cE9yZGVyLmdyb3VwLFxuICAgICAgaXRlbXM6IFtdXG4gICAgfTtcbiAgfSAvLyBQb3B1bGF0ZSBncm91cHNcblxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBpdGVtcy5sZW5ndGg7IF9pKyspIHtcbiAgICBpZiAoaXRlbXNbX2ldLmRpbWVuc2lvbnMub3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGdyb3VwSXRlbSA9IGdyb3VwZWRJdGVtc1tpdGVtc1tfaV0uZGltZW5zaW9ucy5vcmRlci5pbmRleF07XG5cbiAgICAgIGlmIChncm91cEl0ZW0pIHtcbiAgICAgICAgZ3JvdXBJdGVtLml0ZW1zLnB1c2goaXRlbXNbX2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ3JvdXBlZEl0ZW1zO1xufVxuXG5mdW5jdGlvbiBnZXRWaXNpYmxlSXRlbXMoaXRlbXMsIGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCwga2V5cykge1xuICB2YXIgaXRlbVRpbWVTdGFydEtleSA9IGtleXMuaXRlbVRpbWVTdGFydEtleSxcbiAgICAgIGl0ZW1UaW1lRW5kS2V5ID0ga2V5cy5pdGVtVGltZUVuZEtleTtcbiAgcmV0dXJuIGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgaXRlbVRpbWVTdGFydEtleSkgPD0gY2FudmFzVGltZUVuZCAmJiAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgaXRlbVRpbWVFbmRLZXkpID49IGNhbnZhc1RpbWVTdGFydDtcbiAgfSk7XG59XG5cbnZhciBFUFNJTE9OID0gMC4wMDE7XG5cbmZ1bmN0aW9uIGNvbGxpc2lvbihhLCBiLCBsaW5lSGVpZ2h0KSB7XG4gIHZhciBjb2xsaXNpb25QYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBFUFNJTE9OO1xuICAvLyAyZCBjb2xsaXNpb25zIGRldGVjdGlvbiAtIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2FtZXMvVGVjaG5pcXVlcy8yRF9jb2xsaXNpb25fZGV0ZWN0aW9uXG4gIHZhciB2ZXJ0aWNhbE1hcmdpbiA9IDA7XG4gIHJldHVybiBhLmNvbGxpc2lvbkxlZnQgKyBjb2xsaXNpb25QYWRkaW5nIDwgYi5jb2xsaXNpb25MZWZ0ICsgYi5jb2xsaXNpb25XaWR0aCAmJiBhLmNvbGxpc2lvbkxlZnQgKyBhLmNvbGxpc2lvbldpZHRoIC0gY29sbGlzaW9uUGFkZGluZyA+IGIuY29sbGlzaW9uTGVmdCAmJiBhLnRvcCAtIHZlcnRpY2FsTWFyZ2luICsgY29sbGlzaW9uUGFkZGluZyA8IGIudG9wICsgYi5oZWlnaHQgJiYgYS50b3AgKyBhLmhlaWdodCArIHZlcnRpY2FsTWFyZ2luIC0gY29sbGlzaW9uUGFkZGluZyA+IGIudG9wO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIGEgZ2l2ZW4gaXRlbSBmb3IgYSBncm91cCB0aGF0XG4gKiBpcyBiZWluZyBzdGFja2VkXG4gKi9cblxuXG5mdW5jdGlvbiBncm91cFN0YWNrKGxpbmVIZWlnaHQsIGl0ZW0sIGdyb3VwLCBncm91cEhlaWdodCwgZ3JvdXBUb3AsIGl0ZW1JbmRleCkge1xuICAvLyBjYWxjdWxhdGUgbm9uLW92ZXJsYXBwaW5nIHBvc2l0aW9uc1xuICB2YXIgY3VySGVpZ2h0ID0gZ3JvdXBIZWlnaHQ7XG4gIHZhciB2ZXJ0aWNhbE1hcmdpbiA9IChsaW5lSGVpZ2h0IC0gaXRlbS5kaW1lbnNpb25zLmhlaWdodCkgLyAyO1xuXG4gIGlmIChpdGVtLmRpbWVuc2lvbnMuc3RhY2sgJiYgaXRlbS5kaW1lbnNpb25zLnRvcCA9PT0gbnVsbCkge1xuICAgIGl0ZW0uZGltZW5zaW9ucy50b3AgPSBncm91cFRvcCArIHZlcnRpY2FsTWFyZ2luO1xuICAgIGN1ckhlaWdodCA9IE1hdGgubWF4KGN1ckhlaWdodCwgbGluZUhlaWdodCk7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgY29sbGlkaW5nSXRlbSA9IG51bGw7IC8vSXRlbXMgYXJlIHBsYWNlZCBmcm9tIGk9MCBvbndhcmRzLCBvbmx5IGNoZWNrIGl0ZW1zIHdpdGggaW5kZXggPCBpXG5cbiAgICAgIGZvciAodmFyIGogPSBpdGVtSW5kZXggLSAxLCBqaiA9IDA7IGogPj0gamo7IGotLSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBncm91cFtqXTtcblxuICAgICAgICBpZiAob3RoZXIuZGltZW5zaW9ucy50b3AgIT09IG51bGwgJiYgb3RoZXIuZGltZW5zaW9ucy5zdGFjayAmJiBjb2xsaXNpb24oaXRlbS5kaW1lbnNpb25zLCBvdGhlci5kaW1lbnNpb25zLCBsaW5lSGVpZ2h0KSkge1xuICAgICAgICAgIGNvbGxpZGluZ0l0ZW0gPSBvdGhlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHsvLyBjb25zb2xlLmxvZygnZG9udCB0ZXN0Jywgb3RoZXIudG9wICE9PSBudWxsLCBvdGhlciAhPT0gaXRlbSwgb3RoZXIuc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2xsaWRpbmdJdGVtICE9IG51bGwpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgYSBjb2xsaXNpb24uIFJlcG9zaXRpb24gdGhlIGl0ZW1zIGFib3ZlIHRoZSBjb2xsaWRpbmcgZWxlbWVudFxuICAgICAgICBpdGVtLmRpbWVuc2lvbnMudG9wID0gY29sbGlkaW5nSXRlbS5kaW1lbnNpb25zLnRvcCArIGxpbmVIZWlnaHQ7XG4gICAgICAgIGN1ckhlaWdodCA9IE1hdGgubWF4KGN1ckhlaWdodCwgaXRlbS5kaW1lbnNpb25zLnRvcCArIGl0ZW0uZGltZW5zaW9ucy5oZWlnaHQgKyB2ZXJ0aWNhbE1hcmdpbiAtIGdyb3VwVG9wKTtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChjb2xsaWRpbmdJdGVtKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ3JvdXBIZWlnaHQ6IGN1ckhlaWdodCxcbiAgICB2ZXJ0aWNhbE1hcmdpbjogdmVydGljYWxNYXJnaW4sXG4gICAgaXRlbVRvcDogaXRlbS5kaW1lbnNpb25zLnRvcFxuICB9O1xufSAvLyBDYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoaXMgaXRlbSBmb3IgYSBncm91cCB0aGF0IGlzIG5vdCBiZWluZyBzdGFja2VkXG5cblxuZnVuY3Rpb24gZ3JvdXBOb1N0YWNrKGxpbmVIZWlnaHQsIGl0ZW0sIGdyb3VwSGVpZ2h0LCBncm91cFRvcCkge1xuICB2YXIgdmVydGljYWxNYXJnaW4gPSAobGluZUhlaWdodCAtIGl0ZW0uZGltZW5zaW9ucy5oZWlnaHQpIC8gMjtcblxuICBpZiAoaXRlbS5kaW1lbnNpb25zLnRvcCA9PT0gbnVsbCkge1xuICAgIGl0ZW0uZGltZW5zaW9ucy50b3AgPSBncm91cFRvcCArIHZlcnRpY2FsTWFyZ2luO1xuICAgIGdyb3VwSGVpZ2h0ID0gTWF0aC5tYXgoZ3JvdXBIZWlnaHQsIGxpbmVIZWlnaHQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBncm91cEhlaWdodDogZ3JvdXBIZWlnaHQsXG4gICAgdmVydGljYWxNYXJnaW46IDAsXG4gICAgaXRlbVRvcDogaXRlbS5kaW1lbnNpb25zLnRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBzdW0oKSB7XG4gIHZhciBhcnIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpKSB7XG4gICAgcmV0dXJuIGFjYyArIGk7XG4gIH0sIDApO1xufVxuLyoqXG4gKiBTdGFjayBhbGwgZ3JvdXBzXG4gKiBAcGFyYW0geyp9IGl0ZW1zIGl0ZW1zIHRvIGJlIHN0YWNrZWRcbiAqIEBwYXJhbSB7Kn0gZ3JvdXBPcmRlcnMgdGhlIGdyb3VwT3JkZXJzIG9iamVjdFxuICogQHBhcmFtIHsqfSBsaW5lSGVpZ2h0XG4gKiBAcGFyYW0geyp9IHN0YWNrSXRlbXMgc2hvdWxkIGl0ZW1zIGJlIHN0YWNrZWQ/XG4gKi9cblxuXG5mdW5jdGlvbiBzdGFja0FsbChpdGVtc0RpbWVuc2lvbnMsIGdyb3VwT3JkZXJzLCBsaW5lSGVpZ2h0LCBzdGFja0l0ZW1zKSB7XG4gIHZhciBncm91cEhlaWdodHMgPSBbXTtcbiAgdmFyIGdyb3VwVG9wcyA9IFtdO1xuICB2YXIgZ3JvdXBlZEl0ZW1zID0gZ2V0R3JvdXBlZEl0ZW1zKGl0ZW1zRGltZW5zaW9ucywgZ3JvdXBPcmRlcnMpO1xuXG4gIGZvciAodmFyIGluZGV4IGluIGdyb3VwZWRJdGVtcykge1xuICAgIHZhciBncm91cEl0ZW1zID0gZ3JvdXBlZEl0ZW1zW2luZGV4XTtcbiAgICB2YXIgX2l0ZW1zRGltZW5zaW9ucyA9IGdyb3VwSXRlbXMuaXRlbXMsXG4gICAgICAgIGdyb3VwID0gZ3JvdXBJdGVtcy5ncm91cDtcbiAgICB2YXIgZ3JvdXBUb3AgPSBzdW0oZ3JvdXBIZWlnaHRzKTsgLy8gSXMgZ3JvdXAgYmVpbmcgc3RhY2tlZD9cblxuICAgIHZhciBpc0dyb3VwU3RhY2tlZCA9IGdyb3VwLnN0YWNrSXRlbXMgIT09IHVuZGVmaW5lZCA/IGdyb3VwLnN0YWNrSXRlbXMgOiBzdGFja0l0ZW1zO1xuXG4gICAgdmFyIF9zdGFja0dyb3VwID0gc3RhY2tHcm91cChfaXRlbXNEaW1lbnNpb25zLCBpc0dyb3VwU3RhY2tlZCwgbGluZUhlaWdodCwgZ3JvdXBUb3ApLFxuICAgICAgICBncm91cEhlaWdodCA9IF9zdGFja0dyb3VwLmdyb3VwSGVpZ2h0OyAvLyBJZiBncm91cCBoZWlnaHQgaXMgb3ZlcnJpZGRlbiwgcHVzaCBuZXcgaGVpZ2h0XG4gICAgLy8gRG8gdGhpcyBsYXRlIGFzIGl0ZW0gcG9zaXRpb24gc3RpbGwgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZFxuXG5cbiAgICBncm91cFRvcHMucHVzaChncm91cFRvcCk7XG5cbiAgICBpZiAoZ3JvdXAuaGVpZ2h0KSB7XG4gICAgICBncm91cEhlaWdodHMucHVzaChncm91cC5oZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cEhlaWdodHMucHVzaChNYXRoLm1heChncm91cEhlaWdodCwgbGluZUhlaWdodCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBzdW0oZ3JvdXBIZWlnaHRzKSxcbiAgICBncm91cEhlaWdodHM6IGdyb3VwSGVpZ2h0cyxcbiAgICBncm91cFRvcHM6IGdyb3VwVG9wc1xuICB9O1xufVxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7Kn0gaXRlbXNEaW1lbnNpb25zIFxuICogQHBhcmFtIHsqfSBpc0dyb3VwU3RhY2tlZCBcbiAqIEBwYXJhbSB7Kn0gbGluZUhlaWdodCBcbiAqIEBwYXJhbSB7Kn0gZ3JvdXBUb3AgXG4gKi9cblxuXG5mdW5jdGlvbiBzdGFja0dyb3VwKGl0ZW1zRGltZW5zaW9ucywgaXNHcm91cFN0YWNrZWQsIGxpbmVIZWlnaHQsIGdyb3VwVG9wKSB7XG4gIHZhciBncm91cEhlaWdodCA9IDA7XG4gIHZhciB2ZXJ0aWNhbE1hcmdpbiA9IDA7IC8vIEZpbmQgcG9zaXRpb25zIGZvciBlYWNoIGl0ZW0gaW4gZ3JvdXBcblxuICBmb3IgKHZhciBpdGVtSW5kZXggPSAwOyBpdGVtSW5kZXggPCBpdGVtc0RpbWVuc2lvbnMubGVuZ3RoOyBpdGVtSW5kZXgrKykge1xuICAgIHZhciByID0ge307XG5cbiAgICBpZiAoaXNHcm91cFN0YWNrZWQpIHtcbiAgICAgIHIgPSBncm91cFN0YWNrKGxpbmVIZWlnaHQsIGl0ZW1zRGltZW5zaW9uc1tpdGVtSW5kZXhdLCBpdGVtc0RpbWVuc2lvbnMsIGdyb3VwSGVpZ2h0LCBncm91cFRvcCwgaXRlbUluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgciA9IGdyb3VwTm9TdGFjayhsaW5lSGVpZ2h0LCBpdGVtc0RpbWVuc2lvbnNbaXRlbUluZGV4XSwgZ3JvdXBIZWlnaHQsIGdyb3VwVG9wKTtcbiAgICB9XG5cbiAgICBncm91cEhlaWdodCA9IHIuZ3JvdXBIZWlnaHQ7XG4gICAgdmVydGljYWxNYXJnaW4gPSByLnZlcnRpY2FsTWFyZ2luO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBncm91cEhlaWdodDogZ3JvdXBIZWlnaHQsXG4gICAgdmVydGljYWxNYXJnaW46IHZlcnRpY2FsTWFyZ2luXG4gIH07XG59XG4vKipcbiAqIFN0YWNrIHRoZSBpdGVtcyB0aGF0IHdpbGwgYmUgdmlzaWJsZVxuICogd2l0aGluIHRoZSBjYW52YXMgYXJlYVxuICogQHBhcmFtIHtpdGVtW119IGl0ZW1zXG4gKiBAcGFyYW0ge2dyb3VwW119IGdyb3Vwc1xuICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc1dpZHRoXG4gKiBAcGFyYW0ge251bWJlcn0gY2FudmFzVGltZVN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gY2FudmFzVGltZUVuZFxuICogQHBhcmFtIHsqfSBrZXlzXG4gKiBAcGFyYW0ge251bWJlcn0gbGluZUhlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IGl0ZW1IZWlnaHRSYXRpb1xuICogQHBhcmFtIHtib29sZWFufSBzdGFja0l0ZW1zXG4gKiBAcGFyYW0geyp9IGRyYWdnaW5nSXRlbVxuICogQHBhcmFtIHsqfSByZXNpemluZ0l0ZW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBkcmFnVGltZVxuICogQHBhcmFtIHtsZWZ0IG9yIHJpZ2h0fSByZXNpemluZ0VkZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXNpemVUaW1lXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3R3JvdXBPcmRlclxuICovXG5cblxuZnVuY3Rpb24gc3RhY2tUaW1lbGluZUl0ZW1zKGl0ZW1zLCBncm91cHMsIGNhbnZhc1dpZHRoLCBjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGtleXMsIGxpbmVIZWlnaHQsIGl0ZW1IZWlnaHRSYXRpbywgc3RhY2tJdGVtcywgZHJhZ2dpbmdJdGVtLCByZXNpemluZ0l0ZW0sIGRyYWdUaW1lLCByZXNpemluZ0VkZ2UsIHJlc2l6ZVRpbWUsIG5ld0dyb3VwT3JkZXIpIHtcbiAgdmFyIHZpc2libGVJdGVtcyA9IGdldFZpc2libGVJdGVtcyhpdGVtcywgY2FudmFzVGltZVN0YXJ0LCBjYW52YXNUaW1lRW5kLCBrZXlzKTtcbiAgdmFyIHZpc2libGVJdGVtc1dpdGhJbnRlcmFjdGlvbiA9IHZpc2libGVJdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gZ2V0SXRlbVdpdGhJbnRlcmFjdGlvbnMoe1xuICAgICAgaXRlbTogaXRlbSxcbiAgICAgIGtleXM6IGtleXMsXG4gICAgICBkcmFnZ2luZ0l0ZW06IGRyYWdnaW5nSXRlbSxcbiAgICAgIHJlc2l6aW5nSXRlbTogcmVzaXppbmdJdGVtLFxuICAgICAgZHJhZ1RpbWU6IGRyYWdUaW1lLFxuICAgICAgcmVzaXppbmdFZGdlOiByZXNpemluZ0VkZ2UsXG4gICAgICByZXNpemVUaW1lOiByZXNpemVUaW1lLFxuICAgICAgZ3JvdXBzOiBncm91cHMsXG4gICAgICBuZXdHcm91cE9yZGVyOiBuZXdHcm91cE9yZGVyXG4gICAgfSk7XG4gIH0pOyAvLyBpZiB0aGVyZSBhcmUgbm8gZ3JvdXBzIHJldHVybiBhbiBlbXB0eSBhcnJheSBvZiBkaW1lbnNpb25zXG5cbiAgaWYgKGdyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGltZW5zaW9uSXRlbXM6IFtdLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgZ3JvdXBIZWlnaHRzOiBbXSxcbiAgICAgIGdyb3VwVG9wczogW11cbiAgICB9O1xuICB9IC8vIEdldCB0aGUgb3JkZXIgb2YgZ3JvdXBzIGJhc2VkIG9uIHRoZWlyIGlkIGtleVxuXG5cbiAgdmFyIGdyb3VwT3JkZXJzID0gZ2V0R3JvdXBPcmRlcnMoZ3JvdXBzLCBrZXlzKTtcbiAgdmFyIGRpbWVuc2lvbkl0ZW1zID0gdmlzaWJsZUl0ZW1zV2l0aEludGVyYWN0aW9uLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBnZXRJdGVtRGltZW5zaW9ucyh7XG4gICAgICBpdGVtOiBpdGVtLFxuICAgICAga2V5czoga2V5cyxcbiAgICAgIGNhbnZhc1RpbWVTdGFydDogY2FudmFzVGltZVN0YXJ0LFxuICAgICAgY2FudmFzVGltZUVuZDogY2FudmFzVGltZUVuZCxcbiAgICAgIGNhbnZhc1dpZHRoOiBjYW52YXNXaWR0aCxcbiAgICAgIGdyb3VwT3JkZXJzOiBncm91cE9yZGVycyxcbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHQsXG4gICAgICBpdGVtSGVpZ2h0UmF0aW86IGl0ZW1IZWlnaHRSYXRpb1xuICAgIH0pO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gISFpdGVtO1xuICB9KTsgLy8gR2V0IGEgbmV3IGFycmF5IG9mIGdyb3VwT3JkZXJzIGhvbGRpbmcgdGhlIHN0YWNrZWQgaXRlbXNcblxuICB2YXIgX3N0YWNrQWxsID0gc3RhY2tBbGwoZGltZW5zaW9uSXRlbXMsIGdyb3VwT3JkZXJzLCBsaW5lSGVpZ2h0LCBzdGFja0l0ZW1zKSxcbiAgICAgIGhlaWdodCA9IF9zdGFja0FsbC5oZWlnaHQsXG4gICAgICBncm91cEhlaWdodHMgPSBfc3RhY2tBbGwuZ3JvdXBIZWlnaHRzLFxuICAgICAgZ3JvdXBUb3BzID0gX3N0YWNrQWxsLmdyb3VwVG9wcztcblxuICByZXR1cm4ge1xuICAgIGRpbWVuc2lvbkl0ZW1zOiBkaW1lbnNpb25JdGVtcyxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBncm91cEhlaWdodHM6IGdyb3VwSGVpZ2h0cyxcbiAgICBncm91cFRvcHM6IGdyb3VwVG9wc1xuICB9O1xufVxuLyoqXG4gKiBnZXQgY2FudmFzIHdpZHRoIGZyb20gdmlzaWJsZSB3aWR0aFxuICogQHBhcmFtIHsqfSB3aWR0aFxuICogQHBhcmFtIHsqfSBidWZmZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENhbnZhc1dpZHRoKHdpZHRoLCBidWZmZXIpIHtcbiAgcmV0dXJuIHdpZHRoICogYnVmZmVyO1xufVxuLyoqXG4gKiBnZXQgaXRlbSdzIHBvc2l0aW9uLCBkaW1lbnNpb25zIGFuZCBjb2xsaXNpb25zXG4gKiBAcGFyYW0geyp9IGl0ZW1cbiAqIEBwYXJhbSB7Kn0ga2V5c1xuICogQHBhcmFtIHsqfSBjYW52YXNUaW1lU3RhcnRcbiAqIEBwYXJhbSB7Kn0gY2FudmFzVGltZUVuZFxuICogQHBhcmFtIHsqfSBjYW52YXNXaWR0aFxuICogQHBhcmFtIHsqfSBncm91cE9yZGVyc1xuICogQHBhcmFtIHsqfSBsaW5lSGVpZ2h0XG4gKiBAcGFyYW0geyp9IGl0ZW1IZWlnaHRSYXRpb1xuICovXG5cblxuZnVuY3Rpb24gZ2V0SXRlbURpbWVuc2lvbnMoX3JlZjMpIHtcbiAgdmFyIGl0ZW0gPSBfcmVmMy5pdGVtLFxuICAgICAga2V5cyA9IF9yZWYzLmtleXMsXG4gICAgICBjYW52YXNUaW1lU3RhcnQgPSBfcmVmMy5jYW52YXNUaW1lU3RhcnQsXG4gICAgICBjYW52YXNUaW1lRW5kID0gX3JlZjMuY2FudmFzVGltZUVuZCxcbiAgICAgIGNhbnZhc1dpZHRoID0gX3JlZjMuY2FudmFzV2lkdGgsXG4gICAgICBncm91cE9yZGVycyA9IF9yZWYzLmdyb3VwT3JkZXJzLFxuICAgICAgbGluZUhlaWdodCA9IF9yZWYzLmxpbmVIZWlnaHQsXG4gICAgICBpdGVtSGVpZ2h0UmF0aW8gPSBfcmVmMy5pdGVtSGVpZ2h0UmF0aW87XG4gIHZhciBpdGVtSWQgPSAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwga2V5cy5pdGVtSWRLZXkpO1xuICB2YXIgZGltZW5zaW9uID0gY2FsY3VsYXRlRGltZW5zaW9ucyh7XG4gICAgaXRlbVRpbWVTdGFydDogKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sIGtleXMuaXRlbVRpbWVTdGFydEtleSksXG4gICAgaXRlbVRpbWVFbmQ6ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBrZXlzLml0ZW1UaW1lRW5kS2V5KSxcbiAgICBjYW52YXNUaW1lU3RhcnQ6IGNhbnZhc1RpbWVTdGFydCxcbiAgICBjYW52YXNUaW1lRW5kOiBjYW52YXNUaW1lRW5kLFxuICAgIGNhbnZhc1dpZHRoOiBjYW52YXNXaWR0aFxuICB9KTtcblxuICBpZiAoZGltZW5zaW9uKSB7XG4gICAgZGltZW5zaW9uLnRvcCA9IG51bGw7XG4gICAgZGltZW5zaW9uLm9yZGVyID0gZ3JvdXBPcmRlcnNbKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sIGtleXMuaXRlbUdyb3VwS2V5KV07XG4gICAgZGltZW5zaW9uLnN0YWNrID0gIWl0ZW0uaXNPdmVybGF5O1xuICAgIGRpbWVuc2lvbi5oZWlnaHQgPSBsaW5lSGVpZ2h0ICogaXRlbUhlaWdodFJhdGlvO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogaXRlbUlkLFxuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9uXG4gICAgfTtcbiAgfVxufVxuLyoqXG4gKiBnZXQgbmV3IGl0ZW0gd2l0aCBjaGFuZ2VkICBgaXRlbVRpbWVTdGFydGAgLCBgaXRlbVRpbWVFbmRgIGFuZCBgaXRlbUdyb3VwS2V5YCBhY2NvcmRpbmcgdG8gdXNlciBpbnRlcmFjdGlvblxuICogdXNlciBpbnRlcmFjdGlvbiBpcyBkcmFnZ2luZyBhbiBpdGVtIGFuZCByZXNpemUgbGVmdCBhbmQgcmlnaHRcbiAqIEBwYXJhbSB7Kn0gaXRlbVxuICogQHBhcmFtIHsqfSBrZXlzXG4gKiBAcGFyYW0geyp9IGRyYWdnaW5nSXRlbVxuICogQHBhcmFtIHsqfSByZXNpemluZ0l0ZW1cbiAqIEBwYXJhbSB7Kn0gZHJhZ1RpbWVcbiAqIEBwYXJhbSB7Kn0gcmVzaXppbmdFZGdlXG4gKiBAcGFyYW0geyp9IHJlc2l6ZVRpbWVcbiAqIEBwYXJhbSB7Kn0gZ3JvdXBzXG4gKiBAcGFyYW0geyp9IG5ld0dyb3VwT3JkZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEl0ZW1XaXRoSW50ZXJhY3Rpb25zKF9yZWY0KSB7XG4gIHZhciBfb2JqZWN0U3ByZWFkMjtcblxuICB2YXIgaXRlbSA9IF9yZWY0Lml0ZW0sXG4gICAgICBrZXlzID0gX3JlZjQua2V5cyxcbiAgICAgIGRyYWdnaW5nSXRlbSA9IF9yZWY0LmRyYWdnaW5nSXRlbSxcbiAgICAgIHJlc2l6aW5nSXRlbSA9IF9yZWY0LnJlc2l6aW5nSXRlbSxcbiAgICAgIGRyYWdUaW1lID0gX3JlZjQuZHJhZ1RpbWUsXG4gICAgICByZXNpemluZ0VkZ2UgPSBfcmVmNC5yZXNpemluZ0VkZ2UsXG4gICAgICByZXNpemVUaW1lID0gX3JlZjQucmVzaXplVGltZSxcbiAgICAgIGdyb3VwcyA9IF9yZWY0Lmdyb3VwcyxcbiAgICAgIG5ld0dyb3VwT3JkZXIgPSBfcmVmNC5uZXdHcm91cE9yZGVyO1xuICBpZiAoIXJlc2l6aW5nSXRlbSAmJiAhZHJhZ2dpbmdJdGVtKSByZXR1cm4gaXRlbTtcbiAgdmFyIGl0ZW1JZCA9ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBrZXlzLml0ZW1JZEtleSk7XG4gIHZhciBpc0RyYWdnaW5nID0gaXRlbUlkID09PSBkcmFnZ2luZ0l0ZW07XG4gIHZhciBpc1Jlc2l6aW5nID0gaXRlbUlkID09PSByZXNpemluZ0l0ZW07XG5cbiAgdmFyIF9jYWxjdWxhdGVJbnRlcmFjdGlvbiA9IGNhbGN1bGF0ZUludGVyYWN0aW9uTmV3VGltZXMoe1xuICAgIGl0ZW1UaW1lU3RhcnQ6ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBrZXlzLml0ZW1UaW1lU3RhcnRLZXkpLFxuICAgIGl0ZW1UaW1lRW5kOiAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwga2V5cy5pdGVtVGltZUVuZEtleSksXG4gICAgaXNEcmFnZ2luZzogaXNEcmFnZ2luZyxcbiAgICBpc1Jlc2l6aW5nOiBpc1Jlc2l6aW5nLFxuICAgIGRyYWdUaW1lOiBkcmFnVGltZSxcbiAgICByZXNpemluZ0VkZ2U6IHJlc2l6aW5nRWRnZSxcbiAgICByZXNpemVUaW1lOiByZXNpemVUaW1lXG4gIH0pLFxuICAgICAgX2NhbGN1bGF0ZUludGVyYWN0aW9uMiA9IF9zbGljZWRUb0FycmF5KF9jYWxjdWxhdGVJbnRlcmFjdGlvbiwgMiksXG4gICAgICBpdGVtVGltZVN0YXJ0ID0gX2NhbGN1bGF0ZUludGVyYWN0aW9uMlswXSxcbiAgICAgIGl0ZW1UaW1lRW5kID0gX2NhbGN1bGF0ZUludGVyYWN0aW9uMlsxXTtcblxuICB2YXIgbmV3SXRlbSA9IF9vYmplY3RTcHJlYWQoe30sIGl0ZW0sIChfb2JqZWN0U3ByZWFkMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDIsIGtleXMuaXRlbVRpbWVTdGFydEtleSwgaXRlbVRpbWVTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfb2JqZWN0U3ByZWFkMiwga2V5cy5pdGVtVGltZUVuZEtleSwgaXRlbVRpbWVFbmQpLCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDIsIGtleXMuaXRlbUdyb3VwS2V5LCBpc0RyYWdnaW5nID8gKDAsIF9nZW5lcmljLl9nZXQpKGdyb3Vwc1tuZXdHcm91cE9yZGVyXSwga2V5cy5ncm91cElkS2V5KSA6ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBrZXlzLml0ZW1Hcm91cEtleSkpLCBfb2JqZWN0U3ByZWFkMikpO1xuXG4gIHJldHVybiBuZXdJdGVtO1xufVxuLyoqXG4gKiBnZXQgY2FudmFzIHN0YXJ0IGFuZCBlbmQgdGltZSBmcm9tIHZpc2libGUgc3RhcnQgYW5kIGVuZCB0aW1lXG4gKiBAcGFyYW0ge251bWJlcn0gdmlzaWJsZVRpbWVTdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IHZpc2libGVUaW1lRW5kXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDYW52YXNCb3VuZGFyaWVzRnJvbVZpc2libGVUaW1lKHZpc2libGVUaW1lU3RhcnQsIHZpc2libGVUaW1lRW5kLCBidWZmZXIpIHtcbiAgdmFyIHpvb20gPSB2aXNpYmxlVGltZUVuZCAtIHZpc2libGVUaW1lU3RhcnQ7IC8vIGJ1ZmZlciAtIDEgKDEgaXMgdmlzaWJsZSBhcmVhKSBkaXZpZGVkIGJ5IDIgKDIgaXMgdGhlIGJ1ZmZlciBzcGxpdCBvbiB0aGUgcmlnaHQgYW5kIGxlZnQgb2YgdGhlIHRpbWVsaW5lKVxuXG4gIHZhciBjYW52YXNUaW1lU3RhcnQgPSB2aXNpYmxlVGltZVN0YXJ0IC0gem9vbSAqIChidWZmZXIgLSAxKSAvIDI7XG4gIHZhciBjYW52YXNUaW1lRW5kID0gY2FudmFzVGltZVN0YXJ0ICsgem9vbSAqIGJ1ZmZlcjtcbiAgcmV0dXJuIFtjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmRdO1xufVxuLyoqXG4gKiBHZXQgdGhlIHRoZSBjYW52YXMgYXJlYSBmb3IgYSBnaXZlbiB2aXNpYmxlIHRpbWVcbiAqIFdpbGwgc2hpZnQgdGhlIHN0YXJ0L2VuZCBvZiB0aGUgY2FudmFzIGlmIHRoZSB2aXNpYmxlIHRpbWVcbiAqIGRvZXMgbm90IGZpdCB3aXRoaW4gdGhlIGV4aXN0aW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdmlzaWJsZVRpbWVTdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IHZpc2libGVUaW1lRW5kXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlVXBkYXRlRGltZW5zaW9uc1xuICogQHBhcmFtIHsqfSBpdGVtc1xuICogQHBhcmFtIHsqfSBncm91cHNcbiAqIEBwYXJhbSB7Kn0gcHJvcHNcbiAqIEBwYXJhbSB7Kn0gc3RhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVNjcm9sbENhbnZhcyh2aXNpYmxlVGltZVN0YXJ0LCB2aXNpYmxlVGltZUVuZCwgZm9yY2VVcGRhdGVEaW1lbnNpb25zLCBpdGVtcywgZ3JvdXBzLCBwcm9wcywgc3RhdGUpIHtcbiAgdmFyIGJ1ZmZlciA9IHByb3BzLmJ1ZmZlcjtcbiAgdmFyIG9sZENhbnZhc1RpbWVTdGFydCA9IHN0YXRlLmNhbnZhc1RpbWVTdGFydDtcbiAgdmFyIG9sZENhbnZhc1RpbWVFbmQgPSBzdGF0ZS5jYW52YXNUaW1lRW5kO1xuICB2YXIgb2xkWm9vbSA9IHN0YXRlLnZpc2libGVUaW1lRW5kIC0gc3RhdGUudmlzaWJsZVRpbWVTdGFydDtcbiAgdmFyIG5ld1pvb20gPSB2aXNpYmxlVGltZUVuZCAtIHZpc2libGVUaW1lU3RhcnQ7XG4gIHZhciBuZXdTdGF0ZSA9IHtcbiAgICB2aXNpYmxlVGltZVN0YXJ0OiB2aXNpYmxlVGltZVN0YXJ0LFxuICAgIHZpc2libGVUaW1lRW5kOiB2aXNpYmxlVGltZUVuZCAvLyBDaGVjayBpZiB0aGUgY3VycmVudCBjYW52YXMgY292ZXJzIHRoZSBuZXcgdGltZXNcblxuICB9O1xuICB2YXIgY2FuS2VlcENhbnZhcyA9IG5ld1pvb20gPT09IG9sZFpvb20gJiYgdmlzaWJsZVRpbWVTdGFydCA+PSBvbGRDYW52YXNUaW1lU3RhcnQgKyBvbGRab29tICogMC41ICYmIHZpc2libGVUaW1lU3RhcnQgPD0gb2xkQ2FudmFzVGltZUVuZCAtIG9sZFpvb20gKiAxLjUgJiYgdmlzaWJsZVRpbWVFbmQgPj0gb2xkQ2FudmFzVGltZVN0YXJ0ICsgb2xkWm9vbSAqIDEuNSAmJiB2aXNpYmxlVGltZUVuZCA8PSBvbGRDYW52YXNUaW1lRW5kIC0gb2xkWm9vbSAqIDAuNTtcblxuICBpZiAoIWNhbktlZXBDYW52YXMgfHwgZm9yY2VVcGRhdGVEaW1lbnNpb25zKSB7XG4gICAgdmFyIF9nZXRDYW52YXNCb3VuZGFyaWVzRiA9IGdldENhbnZhc0JvdW5kYXJpZXNGcm9tVmlzaWJsZVRpbWUodmlzaWJsZVRpbWVTdGFydCwgdmlzaWJsZVRpbWVFbmQsIGJ1ZmZlciksXG4gICAgICAgIF9nZXRDYW52YXNCb3VuZGFyaWVzRjIgPSBfc2xpY2VkVG9BcnJheShfZ2V0Q2FudmFzQm91bmRhcmllc0YsIDIpLFxuICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfZ2V0Q2FudmFzQm91bmRhcmllc0YyWzBdLFxuICAgICAgICBjYW52YXNUaW1lRW5kID0gX2dldENhbnZhc0JvdW5kYXJpZXNGMlsxXTtcblxuICAgIG5ld1N0YXRlLmNhbnZhc1RpbWVTdGFydCA9IGNhbnZhc1RpbWVTdGFydDtcbiAgICBuZXdTdGF0ZS5jYW52YXNUaW1lRW5kID0gY2FudmFzVGltZUVuZDtcblxuICAgIHZhciBtZXJnZWRTdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7fSwgbmV3U3RhdGUpO1xuXG4gICAgdmFyIGNhbnZhc1dpZHRoID0gZ2V0Q2FudmFzV2lkdGgobWVyZ2VkU3RhdGUud2lkdGgsIHByb3BzLmJ1ZmZlcik7IC8vIFRoZSBjYW52YXMgY2Fubm90IGJlIGtlcHQsIHNvIGNhbGN1bGF0ZSB0aGUgbmV3IGl0ZW1zIHBvc2l0aW9uXG5cbiAgICBPYmplY3QuYXNzaWduKG5ld1N0YXRlLCBzdGFja1RpbWVsaW5lSXRlbXMoaXRlbXMsIGdyb3VwcywgY2FudmFzV2lkdGgsIG1lcmdlZFN0YXRlLmNhbnZhc1RpbWVTdGFydCwgbWVyZ2VkU3RhdGUuY2FudmFzVGltZUVuZCwgcHJvcHMua2V5cywgcHJvcHMubGluZUhlaWdodCwgcHJvcHMuaXRlbUhlaWdodFJhdGlvLCBwcm9wcy5zdGFja0l0ZW1zLCBtZXJnZWRTdGF0ZS5kcmFnZ2luZ0l0ZW0sIG1lcmdlZFN0YXRlLnJlc2l6aW5nSXRlbSwgbWVyZ2VkU3RhdGUuZHJhZ1RpbWUsIG1lcmdlZFN0YXRlLnJlc2l6aW5nRWRnZSwgbWVyZ2VkU3RhdGUucmVzaXplVGltZSwgbWVyZ2VkU3RhdGUubmV3R3JvdXBPcmRlcikpO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0YXRlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRQYXJlbnRQb3NpdGlvbiA9IGdldFBhcmVudFBvc2l0aW9uO1xuZXhwb3J0cy5nZXRTdW1TY3JvbGwgPSBnZXRTdW1TY3JvbGw7XG5leHBvcnRzLmdldFN1bU9mZnNldCA9IGdldFN1bU9mZnNldDtcblxuLy8gVE9ETzogY2FuIHdlIHVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5zdGVhZD8/XG4vLyBsYXN0IHBsYWNlIHRoaXMgaXMgdXNlZCBpcyBpbiBcImhhbmRsZVdoZWVsXCIgaW4gU2Nyb2xsRWxlbWVudFxuZnVuY3Rpb24gZ2V0UGFyZW50UG9zaXRpb24oZWxlbWVudCkge1xuICB2YXIgeFBvc2l0aW9uID0gMDtcbiAgdmFyIHlQb3NpdGlvbiA9IDA7XG4gIHZhciBmaXJzdCA9IHRydWU7XG5cbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQub2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknICYmIGVsZW1lbnQuc2Nyb2xsTGVmdCA9PT0gMCAmJiBlbGVtZW50LnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgZWxlbWVudCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZWxlbWVudDtcbiAgICB9XG5cbiAgICB4UG9zaXRpb24gKz0gZWxlbWVudC5vZmZzZXRMZWZ0IC0gKGZpcnN0ID8gMCA6IGVsZW1lbnQuc2Nyb2xsTGVmdCkgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gICAgeVBvc2l0aW9uICs9IGVsZW1lbnQub2Zmc2V0VG9wIC0gKGZpcnN0ID8gMCA6IGVsZW1lbnQuc2Nyb2xsVG9wKSArIGVsZW1lbnQuY2xpZW50VG9wO1xuICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgICBmaXJzdCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiB4UG9zaXRpb24sXG4gICAgeTogeVBvc2l0aW9uXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN1bVNjcm9sbChub2RlKSB7XG4gIGlmIChub2RlID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgICBzY3JvbGxUb3A6IDBcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSBnZXRTdW1TY3JvbGwobm9kZS5wYXJlbnROb2RlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2Nyb2xsTGVmdDogbm9kZS5zY3JvbGxMZWZ0ICsgcGFyZW50LnNjcm9sbExlZnQsXG4gICAgICBzY3JvbGxUb3A6IG5vZGUuc2Nyb2xsVG9wICsgcGFyZW50LnNjcm9sbFRvcFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3VtT2Zmc2V0KG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGRvY3VtZW50LmJvZHkgfHwgIW5vZGUub2Zmc2V0UGFyZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9mZnNldExlZnQ6IDAsXG4gICAgICBvZmZzZXRUb3A6IDBcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSBnZXRTdW1PZmZzZXQobm9kZS5vZmZzZXRQYXJlbnQpO1xuICAgIHJldHVybiB7XG4gICAgICBvZmZzZXRMZWZ0OiBub2RlLm9mZnNldExlZnQgKyBwYXJlbnQub2Zmc2V0TGVmdCxcbiAgICAgIG9mZnNldFRvcDogbm9kZS5vZmZzZXRUb3AgKyBwYXJlbnQub2Zmc2V0VG9wXG4gICAgfTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yaWdodFJlc2l6ZVN0eWxlID0gZXhwb3J0cy5sZWZ0UmVzaXplU3R5bGUgPSBleHBvcnRzLnNlbGVjdGVkQW5kQ2FuUmVzaXplUmlnaHRBbmREcmFnUmlnaHQgPSBleHBvcnRzLnNlbGVjdGVkQW5kQ2FuUmVzaXplUmlnaHQgPSBleHBvcnRzLnNlbGVjdGVkQW5kQ2FuUmVzaXplTGVmdEFuZERyYWdMZWZ0ID0gZXhwb3J0cy5zZWxlY3RlZEFuZENhblJlc2l6ZUxlZnQgPSBleHBvcnRzLnNlbGVjdGVkQW5kQ2FuTW92ZSA9IGV4cG9ydHMuc2VsZWN0ZWRTdHlsZSA9IGV4cG9ydHMub3ZlcnJpZGFibGVTdHlsZXMgPSB2b2lkIDA7XG52YXIgb3ZlcnJpZGFibGVTdHlsZXMgPSB7XG4gIGZvbnRTaXplOiAxMixcbiAgY29sb3I6ICd3aGl0ZScsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBiYWNrZ3JvdW5kOiAnIzIxOTZmMycsXG4gIGJvcmRlcjogJzFweCBzb2xpZCAjMWE2ZmIzJyxcbiAgekluZGV4OiA4MFxufTtcbmV4cG9ydHMub3ZlcnJpZGFibGVTdHlsZXMgPSBvdmVycmlkYWJsZVN0eWxlcztcbnZhciBzZWxlY3RlZFN0eWxlID0ge1xuICBiYWNrZ3JvdW5kOiAnI2ZmYzEwNycsXG4gIGJvcmRlcjogJzFweCBzb2xpZCAjZmY5ODAwJyxcbiAgekluZGV4OiA4MlxufTtcbmV4cG9ydHMuc2VsZWN0ZWRTdHlsZSA9IHNlbGVjdGVkU3R5bGU7XG52YXIgc2VsZWN0ZWRBbmRDYW5Nb3ZlID0ge1xuICBjdXJzb3I6ICdtb3ZlJ1xufTtcbmV4cG9ydHMuc2VsZWN0ZWRBbmRDYW5Nb3ZlID0gc2VsZWN0ZWRBbmRDYW5Nb3ZlO1xudmFyIHNlbGVjdGVkQW5kQ2FuUmVzaXplTGVmdCA9IHtcbiAgYm9yZGVyTGVmdFdpZHRoOiAzXG59O1xuZXhwb3J0cy5zZWxlY3RlZEFuZENhblJlc2l6ZUxlZnQgPSBzZWxlY3RlZEFuZENhblJlc2l6ZUxlZnQ7XG52YXIgc2VsZWN0ZWRBbmRDYW5SZXNpemVMZWZ0QW5kRHJhZ0xlZnQgPSB7XG4gIGN1cnNvcjogJ3ctcmVzaXplJ1xufTtcbmV4cG9ydHMuc2VsZWN0ZWRBbmRDYW5SZXNpemVMZWZ0QW5kRHJhZ0xlZnQgPSBzZWxlY3RlZEFuZENhblJlc2l6ZUxlZnRBbmREcmFnTGVmdDtcbnZhciBzZWxlY3RlZEFuZENhblJlc2l6ZVJpZ2h0ID0ge1xuICBib3JkZXJSaWdodFdpZHRoOiAzXG59O1xuZXhwb3J0cy5zZWxlY3RlZEFuZENhblJlc2l6ZVJpZ2h0ID0gc2VsZWN0ZWRBbmRDYW5SZXNpemVSaWdodDtcbnZhciBzZWxlY3RlZEFuZENhblJlc2l6ZVJpZ2h0QW5kRHJhZ1JpZ2h0ID0ge1xuICBjdXJzb3I6ICdlLXJlc2l6ZSdcbn07XG5leHBvcnRzLnNlbGVjdGVkQW5kQ2FuUmVzaXplUmlnaHRBbmREcmFnUmlnaHQgPSBzZWxlY3RlZEFuZENhblJlc2l6ZVJpZ2h0QW5kRHJhZ1JpZ2h0O1xudmFyIGxlZnRSZXNpemVTdHlsZSA9IHtcbiAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgd2lkdGg6IDI0LFxuICBtYXhXaWR0aDogXCIyMCVcIixcbiAgbWluV2lkdGg6IDIsXG4gIGhlaWdodDogXCIxMDAlXCIsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgekluZGV4OiA4OFxufTtcbmV4cG9ydHMubGVmdFJlc2l6ZVN0eWxlID0gbGVmdFJlc2l6ZVN0eWxlO1xudmFyIHJpZ2h0UmVzaXplU3R5bGUgPSB7XG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHdpZHRoOiAyNCxcbiAgbWF4V2lkdGg6IFwiMjAlXCIsXG4gIG1pbldpZHRoOiAyLFxuICBoZWlnaHQ6IFwiMTAwJVwiLFxuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICB6SW5kZXg6IDg4XG59O1xuZXhwb3J0cy5yaWdodFJlc2l6ZVN0eWxlID0gcmlnaHRSZXNpemVTdHlsZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2ludGVyYWN0anMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbnRlcmFjdGpzXCIpKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2dlbmVyaWMgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9nZW5lcmljXCIpO1xuXG52YXIgX2V2ZW50cyA9IHJlcXVpcmUoXCIuLi91dGlsaXR5L2V2ZW50c1wiKTtcblxudmFyIF9kZWZhdWx0SXRlbVJlbmRlcmVyID0gcmVxdWlyZShcIi4vZGVmYXVsdEl0ZW1SZW5kZXJlclwiKTtcblxudmFyIF9jYWxlbmRhciA9IHJlcXVpcmUoXCIuLi91dGlsaXR5L2NhbGVuZGFyXCIpO1xuXG52YXIgX2RvbUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9kb20taGVscGVyc1wiKTtcblxudmFyIF9zdHlsZXMgPSByZXF1aXJlKFwiLi9zdHlsZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEl0ZW0sIF9Db21wb25lbnQpO1xuXG4gIC8vIHJlbW92ZWQgcHJvcCB0eXBlIGNoZWNrIGZvciBTUEVFRCFcbiAgLy8gdGhleSBhcmUgY29taW5nIGZyb20gYSB0cnVzdGVkIGNvbXBvbmVudCBhbnl3YXlcbiAgLy8gKHRoaXMgY29tcGxpY2F0ZXMgcGVyZm9ybWFuY2UgZGVidWdnaW5nIG90aGVyd2lzZSlcbiAgZnVuY3Rpb24gSXRlbShfcHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSXRlbSk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihJdGVtKS5jYWxsKHRoaXMsIF9wcm9wcykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTW91c2VEb3duXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmludGVyYWN0TW91bnRlZCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnN0YXJ0ZWRDbGlja2luZyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Nb3VzZVVwXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmludGVyYWN0TW91bnRlZCAmJiBfdGhpcy5zdGFydGVkQ2xpY2tpbmcpIHtcbiAgICAgICAgX3RoaXMuc3RhcnRlZENsaWNraW5nID0gZmFsc2U7XG5cbiAgICAgICAgX3RoaXMuYWN0dWFsQ2xpY2soZSwgJ2NsaWNrJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Ub3VjaFN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmludGVyYWN0TW91bnRlZCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnN0YXJ0ZWRUb3VjaGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Ub3VjaEVuZFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5pbnRlcmFjdE1vdW50ZWQgJiYgX3RoaXMuc3RhcnRlZFRvdWNoaW5nKSB7XG4gICAgICAgIF90aGlzLnN0YXJ0ZWRUb3VjaGluZyA9IGZhbHNlO1xuXG4gICAgICAgIF90aGlzLmFjdHVhbENsaWNrKGUsICd0b3VjaCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURvdWJsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25JdGVtRG91YmxlQ2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25JdGVtRG91YmxlQ2xpY2soX3RoaXMuaXRlbUlkLCBlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDb250ZXh0TWVudVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ29udGV4dE1lbnUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIF90aGlzLnByb3BzLm9uQ29udGV4dE1lbnUoX3RoaXMuaXRlbUlkLCBlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRJdGVtUmVmXCIsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzLml0ZW0gPSBlbDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXREcmFnTGVmdFJlZlwiLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpcy5kcmFnTGVmdCA9IGVsO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldERyYWdSaWdodFJlZlwiLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpcy5kcmFnUmlnaHQgPSBlbDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRJdGVtUHJvcHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIC8vVE9ETzogbWF5YmUgc2hvdWxkbnQgaW5jbHVkZSBhbGwgb2YgdGhlc2UgY2xhc3Nlc1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSAncmN0LWl0ZW0nICsgKF90aGlzLnByb3BzLml0ZW0uY2xhc3NOYW1lID8gXCIgXCIuY29uY2F0KF90aGlzLnByb3BzLml0ZW0uY2xhc3NOYW1lKSA6ICcnKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogX3RoaXMuaXRlbUlkLFxuICAgICAgICByZWY6IF90aGlzLmdldEl0ZW1SZWYsXG4gICAgICAgIHRpdGxlOiBfdGhpcy5pdGVtRGl2VGl0bGUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyArIFwiIFwiLmNvbmNhdChwcm9wcy5jbGFzc05hbWUgPyBwcm9wcy5jbGFzc05hbWUgOiAnJyksXG4gICAgICAgIG9uTW91c2VEb3duOiAoMCwgX2V2ZW50cy5jb21wb3NlRXZlbnRzKShfdGhpcy5vbk1vdXNlRG93biwgcHJvcHMub25Nb3VzZURvd24pLFxuICAgICAgICBvbk1vdXNlVXA6ICgwLCBfZXZlbnRzLmNvbXBvc2VFdmVudHMpKF90aGlzLm9uTW91c2VVcCwgcHJvcHMub25Nb3VzZVVwKSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiAoMCwgX2V2ZW50cy5jb21wb3NlRXZlbnRzKShfdGhpcy5vblRvdWNoU3RhcnQsIHByb3BzLm9uVG91Y2hTdGFydCksXG4gICAgICAgIG9uVG91Y2hFbmQ6ICgwLCBfZXZlbnRzLmNvbXBvc2VFdmVudHMpKF90aGlzLm9uVG91Y2hFbmQsIHByb3BzLm9uVG91Y2hFbmQpLFxuICAgICAgICBvbkRvdWJsZUNsaWNrOiAoMCwgX2V2ZW50cy5jb21wb3NlRXZlbnRzKShfdGhpcy5oYW5kbGVEb3VibGVDbGljaywgcHJvcHMub25Eb3VibGVDbGljayksXG4gICAgICAgIG9uQ29udGV4dE1lbnU6ICgwLCBfZXZlbnRzLmNvbXBvc2VFdmVudHMpKF90aGlzLmhhbmRsZUNvbnRleHRNZW51LCBwcm9wcy5vbkNvbnRleHRNZW51KSxcbiAgICAgICAgc3R5bGU6IE9iamVjdC5hc3NpZ24oe30sIF90aGlzLmdldEl0ZW1TdHlsZShwcm9wcykpXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFJlc2l6ZVByb3BzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgbGVmdE5hbWUgPSBcInJjdC1pdGVtLWhhbmRsZXIgcmN0LWl0ZW0taGFuZGxlci1sZWZ0IHJjdC1pdGVtLWhhbmRsZXItcmVzaXplLWxlZnRcIjtcblxuICAgICAgaWYgKHByb3BzLmxlZnRDbGFzc05hbWUpIHtcbiAgICAgICAgbGVmdE5hbWUgKz0gXCIgXCIuY29uY2F0KHByb3BzLmxlZnRDbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmlnaHROYW1lID0gXCJyY3QtaXRlbS1oYW5kbGVyIHJjdC1pdGVtLWhhbmRsZXItcmlnaHQgcmN0LWl0ZW0taGFuZGxlci1yZXNpemUtcmlnaHRcIjtcblxuICAgICAgaWYgKHByb3BzLnJpZ2h0Q2xhc3NOYW1lKSB7XG4gICAgICAgIHJpZ2h0TmFtZSArPSBcIiBcIi5jb25jYXQocHJvcHMucmlnaHRDbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAgcmVmOiBfdGhpcy5nZXREcmFnTGVmdFJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IGxlZnROYW1lLFxuICAgICAgICAgIHN0eWxlOiBPYmplY3QuYXNzaWduKHt9LCBfc3R5bGVzLmxlZnRSZXNpemVTdHlsZSwgcHJvcHMubGVmdFN0eWxlKVxuICAgICAgICB9LFxuICAgICAgICByaWdodDoge1xuICAgICAgICAgIHJlZjogX3RoaXMuZ2V0RHJhZ1JpZ2h0UmVmLFxuICAgICAgICAgIGNsYXNzTmFtZTogcmlnaHROYW1lLFxuICAgICAgICAgIHN0eWxlOiBPYmplY3QuYXNzaWduKHt9LCBfc3R5bGVzLnJpZ2h0UmVzaXplU3R5bGUsIHByb3BzLnJpZ2h0U3R5bGUpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfdGhpcy5jYWNoZURhdGFGcm9tUHJvcHMoX3Byb3BzKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaW50ZXJhY3RNb3VudGVkOiBmYWxzZSxcbiAgICAgIGRyYWdnaW5nOiBudWxsLFxuICAgICAgZHJhZ1N0YXJ0OiBudWxsLFxuICAgICAgcHJlRHJhZ1Bvc2l0aW9uOiBudWxsLFxuICAgICAgZHJhZ1RpbWU6IG51bGwsXG4gICAgICBkcmFnR3JvdXBEZWx0YTogbnVsbCxcbiAgICAgIHJlc2l6aW5nOiBudWxsLFxuICAgICAgcmVzaXplRWRnZTogbnVsbCxcbiAgICAgIHJlc2l6ZVN0YXJ0OiBudWxsLFxuICAgICAgcmVzaXplVGltZTogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEl0ZW0sIFt7XG4gICAga2V5OiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgIHZhciBzaG91bGRVcGRhdGUgPSBuZXh0U3RhdGUuZHJhZ2dpbmcgIT09IHRoaXMuc3RhdGUuZHJhZ2dpbmcgfHwgbmV4dFN0YXRlLmRyYWdUaW1lICE9PSB0aGlzLnN0YXRlLmRyYWdUaW1lIHx8IG5leHRTdGF0ZS5kcmFnR3JvdXBEZWx0YSAhPT0gdGhpcy5zdGF0ZS5kcmFnR3JvdXBEZWx0YSB8fCBuZXh0U3RhdGUucmVzaXppbmcgIT09IHRoaXMuc3RhdGUucmVzaXppbmcgfHwgbmV4dFN0YXRlLnJlc2l6ZVRpbWUgIT09IHRoaXMuc3RhdGUucmVzaXplVGltZSB8fCBuZXh0UHJvcHMua2V5cyAhPT0gdGhpcy5wcm9wcy5rZXlzIHx8ICEoMCwgX2dlbmVyaWMuZGVlcE9iamVjdENvbXBhcmUpKG5leHRQcm9wcy5pdGVtUHJvcHMsIHRoaXMucHJvcHMuaXRlbVByb3BzKSB8fCBuZXh0UHJvcHMuc2VsZWN0ZWQgIT09IHRoaXMucHJvcHMuc2VsZWN0ZWQgfHwgbmV4dFByb3BzLml0ZW0gIT09IHRoaXMucHJvcHMuaXRlbSB8fCBuZXh0UHJvcHMuY2FudmFzVGltZVN0YXJ0ICE9PSB0aGlzLnByb3BzLmNhbnZhc1RpbWVTdGFydCB8fCBuZXh0UHJvcHMuY2FudmFzVGltZUVuZCAhPT0gdGhpcy5wcm9wcy5jYW52YXNUaW1lRW5kIHx8IG5leHRQcm9wcy5jYW52YXNXaWR0aCAhPT0gdGhpcy5wcm9wcy5jYW52YXNXaWR0aCB8fCAobmV4dFByb3BzLm9yZGVyID8gbmV4dFByb3BzLm9yZGVyLmluZGV4IDogdW5kZWZpbmVkKSAhPT0gKHRoaXMucHJvcHMub3JkZXIgPyB0aGlzLnByb3BzLm9yZGVyLmluZGV4IDogdW5kZWZpbmVkKSB8fCBuZXh0UHJvcHMuZHJhZ1NuYXAgIT09IHRoaXMucHJvcHMuZHJhZ1NuYXAgfHwgbmV4dFByb3BzLm1pblJlc2l6ZVdpZHRoICE9PSB0aGlzLnByb3BzLm1pblJlc2l6ZVdpZHRoIHx8IG5leHRQcm9wcy5jYW5DaGFuZ2VHcm91cCAhPT0gdGhpcy5wcm9wcy5jYW5DaGFuZ2VHcm91cCB8fCBuZXh0UHJvcHMuY2FuU2VsZWN0ICE9PSB0aGlzLnByb3BzLmNhblNlbGVjdCB8fCBuZXh0UHJvcHMuY2FuTW92ZSAhPT0gdGhpcy5wcm9wcy5jYW5Nb3ZlIHx8IG5leHRQcm9wcy5jYW5SZXNpemVMZWZ0ICE9PSB0aGlzLnByb3BzLmNhblJlc2l6ZUxlZnQgfHwgbmV4dFByb3BzLmNhblJlc2l6ZVJpZ2h0ICE9PSB0aGlzLnByb3BzLmNhblJlc2l6ZVJpZ2h0IHx8IG5leHRQcm9wcy5kaW1lbnNpb25zICE9PSB0aGlzLnByb3BzLmRpbWVuc2lvbnM7XG4gICAgICByZXR1cm4gc2hvdWxkVXBkYXRlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjYWNoZURhdGFGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FjaGVEYXRhRnJvbVByb3BzKHByb3BzKSB7XG4gICAgICB0aGlzLml0ZW1JZCA9ICgwLCBfZ2VuZXJpYy5fZ2V0KShwcm9wcy5pdGVtLCBwcm9wcy5rZXlzLml0ZW1JZEtleSk7XG4gICAgICB0aGlzLml0ZW1UaXRsZSA9ICgwLCBfZ2VuZXJpYy5fZ2V0KShwcm9wcy5pdGVtLCBwcm9wcy5rZXlzLml0ZW1UaXRsZUtleSk7XG4gICAgICB0aGlzLml0ZW1EaXZUaXRsZSA9IHByb3BzLmtleXMuaXRlbURpdlRpdGxlS2V5ID8gKDAsIF9nZW5lcmljLl9nZXQpKHByb3BzLml0ZW0sIHByb3BzLmtleXMuaXRlbURpdlRpdGxlS2V5KSA6IHRoaXMuaXRlbVRpdGxlO1xuICAgICAgdGhpcy5pdGVtVGltZVN0YXJ0ID0gKDAsIF9nZW5lcmljLl9nZXQpKHByb3BzLml0ZW0sIHByb3BzLmtleXMuaXRlbVRpbWVTdGFydEtleSk7XG4gICAgICB0aGlzLml0ZW1UaW1lRW5kID0gKDAsIF9nZW5lcmljLl9nZXQpKHByb3BzLml0ZW0sIHByb3BzLmtleXMuaXRlbVRpbWVFbmRLZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRUaW1lUmF0aW9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGltZVJhdGlvKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRwcm9wcy5jYW52YXNUaW1lU3RhcnQsXG4gICAgICAgICAgY2FudmFzVGltZUVuZCA9IF90aGlzJHByb3BzLmNhbnZhc1RpbWVFbmQsXG4gICAgICAgICAgY2FudmFzV2lkdGggPSBfdGhpcyRwcm9wcy5jYW52YXNXaWR0aDtcbiAgICAgIHJldHVybiAoMCwgX2NhbGVuZGFyLmNvb3JkaW5hdGVUb1RpbWVSYXRpbykoY2FudmFzVGltZVN0YXJ0LCBjYW52YXNUaW1lRW5kLCBjYW52YXNXaWR0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRyYWdUaW1lU25hcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmFnVGltZVNuYXAoZHJhZ1RpbWUsIGNvbnNpZGVyT2Zmc2V0KSB7XG4gICAgICB2YXIgZHJhZ1NuYXAgPSB0aGlzLnByb3BzLmRyYWdTbmFwO1xuXG4gICAgICBpZiAoZHJhZ1NuYXApIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IGNvbnNpZGVyT2Zmc2V0ID8gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpLnV0Y09mZnNldCgpICogNjAgKiAxMDAwIDogMDtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZHJhZ1RpbWUgLyBkcmFnU25hcCkgKiBkcmFnU25hcCAtIG9mZnNldCAlIGRyYWdTbmFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRyYWdUaW1lO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNpemVUaW1lU25hcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemVUaW1lU25hcChkcmFnVGltZSkge1xuICAgICAgdmFyIGRyYWdTbmFwID0gdGhpcy5wcm9wcy5kcmFnU25hcDtcblxuICAgICAgaWYgKGRyYWdTbmFwKSB7XG4gICAgICAgIHZhciBlbmRUaW1lID0gdGhpcy5pdGVtVGltZUVuZCAlIGRyYWdTbmFwO1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZHJhZ1RpbWUgLSBlbmRUaW1lKSAvIGRyYWdTbmFwKSAqIGRyYWdTbmFwICsgZW5kVGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkcmFnVGltZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZHJhZ1RpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhZ1RpbWUoZSkge1xuICAgICAgdmFyIHN0YXJ0VGltZSA9ICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkodGhpcy5pdGVtVGltZVN0YXJ0KTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJhZ1RpbWVTbmFwKHRoaXMudGltZUZvcihlKSArIHRoaXMuc3RhdGUuZHJhZ1N0YXJ0Lm9mZnNldCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RhcnRUaW1lO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lRm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVGb3IoZSkge1xuICAgICAgdmFyIHJhdGlvID0gKDAsIF9jYWxlbmRhci5jb29yZGluYXRlVG9UaW1lUmF0aW8pKHRoaXMucHJvcHMuY2FudmFzVGltZVN0YXJ0LCB0aGlzLnByb3BzLmNhbnZhc1RpbWVFbmQsIHRoaXMucHJvcHMuY2FudmFzV2lkdGgpO1xuICAgICAgdmFyIG9mZnNldCA9ICgwLCBfZG9tSGVscGVycy5nZXRTdW1PZmZzZXQpKHRoaXMucHJvcHMuc2Nyb2xsUmVmKS5vZmZzZXRMZWZ0O1xuICAgICAgdmFyIHNjcm9sbHMgPSAoMCwgX2RvbUhlbHBlcnMuZ2V0U3VtU2Nyb2xsKSh0aGlzLnByb3BzLnNjcm9sbFJlZik7XG4gICAgICByZXR1cm4gKGUucGFnZVggLSBvZmZzZXQgKyBzY3JvbGxzLnNjcm9sbExlZnQpICogcmF0aW8gKyB0aGlzLnByb3BzLmNhbnZhc1RpbWVTdGFydDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZHJhZ0dyb3VwRGVsdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhZ0dyb3VwRGVsdGEoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZ3JvdXBUb3BzID0gX3RoaXMkcHJvcHMyLmdyb3VwVG9wcyxcbiAgICAgICAgICBvcmRlciA9IF90aGlzJHByb3BzMi5vcmRlcjtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmNhbkNoYW5nZUdyb3VwKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ3JvdXBEZWx0YSA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAoMCwgX2RvbUhlbHBlcnMuZ2V0U3VtT2Zmc2V0KSh0aGlzLnByb3BzLnNjcm9sbFJlZikub2Zmc2V0VG9wO1xuICAgICAgICB2YXIgc2Nyb2xscyA9ICgwLCBfZG9tSGVscGVycy5nZXRTdW1TY3JvbGwpKHRoaXMucHJvcHMuc2Nyb2xsUmVmKTtcblxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKGdyb3VwVG9wcyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHZhciBrZXkgPSBfT2JqZWN0JGtleXNbX2ldO1xuICAgICAgICAgIHZhciBncm91cFRvcCA9IGdyb3VwVG9wc1trZXldO1xuXG4gICAgICAgICAgaWYgKGUucGFnZVkgLSBvZmZzZXQgKyBzY3JvbGxzLnNjcm9sbFRvcCA+IGdyb3VwVG9wKSB7XG4gICAgICAgICAgICBncm91cERlbHRhID0gcGFyc2VJbnQoa2V5LCAxMCkgLSBvcmRlci5pbmRleDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub3JkZXIuaW5kZXggKyBncm91cERlbHRhIDwgMCkge1xuICAgICAgICAgIHJldHVybiAwIC0gdGhpcy5wcm9wcy5vcmRlci5pbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZ3JvdXBEZWx0YTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVRpbWVEZWx0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemVUaW1lRGVsdGEoZSwgcmVzaXplRWRnZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuaXRlbVRpbWVFbmQgLSB0aGlzLml0ZW1UaW1lU3RhcnQ7XG4gICAgICB2YXIgdGltZURlbHRhID0gdGhpcy5kcmFnVGltZVNuYXAoKGUucGFnZVggLSB0aGlzLnN0YXRlLnJlc2l6ZVN0YXJ0KSAqIHRoaXMuZ2V0VGltZVJhdGlvKCkpO1xuXG4gICAgICBpZiAobGVuZ3RoICsgKHJlc2l6ZUVkZ2UgPT09ICdsZWZ0JyA/IC10aW1lRGVsdGEgOiB0aW1lRGVsdGEpIDwgKHRoaXMucHJvcHMuZHJhZ1NuYXAgfHwgMTAwMCkpIHtcbiAgICAgICAgaWYgKHJlc2l6ZUVkZ2UgPT09ICdsZWZ0Jykge1xuICAgICAgICAgIHJldHVybiBsZW5ndGggLSAodGhpcy5wcm9wcy5kcmFnU25hcCB8fCAxMDAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gKHRoaXMucHJvcHMuZHJhZ1NuYXAgfHwgMTAwMCkgLSBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aW1lRGVsdGE7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1vdW50SW50ZXJhY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnRJbnRlcmFjdCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgbGVmdFJlc2l6ZSA9IHRoaXMucHJvcHMudXNlUmVzaXplSGFuZGxlID8gXCIucmN0LWl0ZW0taGFuZGxlci1yZXNpemUtbGVmdFwiIDogdHJ1ZTtcbiAgICAgIHZhciByaWdodFJlc2l6ZSA9IHRoaXMucHJvcHMudXNlUmVzaXplSGFuZGxlID8gXCIucmN0LWl0ZW0taGFuZGxlci1yZXNpemUtcmlnaHRcIiA6IHRydWU7XG4gICAgICAoMCwgX2ludGVyYWN0anNbXCJkZWZhdWx0XCJdKSh0aGlzLml0ZW0pLnJlc2l6YWJsZSh7XG4gICAgICAgIGVkZ2VzOiB7XG4gICAgICAgICAgbGVmdDogdGhpcy5jYW5SZXNpemVMZWZ0KCkgJiYgbGVmdFJlc2l6ZSxcbiAgICAgICAgICByaWdodDogdGhpcy5jYW5SZXNpemVSaWdodCgpICYmIHJpZ2h0UmVzaXplLFxuICAgICAgICAgIHRvcDogZmFsc2UsXG4gICAgICAgICAgYm90dG9tOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBlbmFibGVkOiB0aGlzLnByb3BzLnNlbGVjdGVkICYmICh0aGlzLmNhblJlc2l6ZUxlZnQoKSB8fCB0aGlzLmNhblJlc2l6ZVJpZ2h0KCkpXG4gICAgICB9KS5kcmFnZ2FibGUoe1xuICAgICAgICBlbmFibGVkOiB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHRoaXMuY2FuTW92ZSgpXG4gICAgICB9KS5zdHlsZUN1cnNvcihmYWxzZSkub24oJ2RyYWdzdGFydCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfdGhpczIucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgY2xpY2tUaW1lID0gX3RoaXMyLnRpbWVGb3IoZSk7XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZHJhZ2dpbmc6IHRydWUsXG4gICAgICAgICAgICBkcmFnU3RhcnQ6IHtcbiAgICAgICAgICAgICAgeDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgeTogZS5wYWdlWSxcbiAgICAgICAgICAgICAgb2Zmc2V0OiBfdGhpczIuaXRlbVRpbWVTdGFydCAtIGNsaWNrVGltZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZURyYWdQb3NpdGlvbjoge1xuICAgICAgICAgICAgICB4OiBlLnRhcmdldC5vZmZzZXRMZWZ0LFxuICAgICAgICAgICAgICB5OiBlLnRhcmdldC5vZmZzZXRUb3BcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcmFnVGltZTogX3RoaXMyLml0ZW1UaW1lU3RhcnQsXG4gICAgICAgICAgICBkcmFnR3JvdXBEZWx0YTogMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ2RyYWdtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zdGF0ZS5kcmFnZ2luZykge1xuICAgICAgICAgIHZhciBkcmFnVGltZSA9IF90aGlzMi5kcmFnVGltZShlKTtcblxuICAgICAgICAgIHZhciBkcmFnR3JvdXBEZWx0YSA9IF90aGlzMi5kcmFnR3JvdXBEZWx0YShlKTtcblxuICAgICAgICAgIGlmIChfdGhpczIucHJvcHMubW92ZVJlc2l6ZVZhbGlkYXRvcikge1xuICAgICAgICAgICAgZHJhZ1RpbWUgPSBfdGhpczIucHJvcHMubW92ZVJlc2l6ZVZhbGlkYXRvcignbW92ZScsIF90aGlzMi5wcm9wcy5pdGVtLCBkcmFnVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5vbkRyYWcpIHtcbiAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkRyYWcoX3RoaXMyLml0ZW1JZCwgZHJhZ1RpbWUsIF90aGlzMi5wcm9wcy5vcmRlci5pbmRleCArIGRyYWdHcm91cERlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZHJhZ1RpbWU6IGRyYWdUaW1lLFxuICAgICAgICAgICAgZHJhZ0dyb3VwRGVsdGE6IGRyYWdHcm91cERlbHRhXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdkcmFnZW5kJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zdGF0ZS5kcmFnZ2luZykge1xuICAgICAgICAgIGlmIChfdGhpczIucHJvcHMub25Ecm9wKSB7XG4gICAgICAgICAgICB2YXIgZHJhZ1RpbWUgPSBfdGhpczIuZHJhZ1RpbWUoZSk7XG5cbiAgICAgICAgICAgIGlmIChfdGhpczIucHJvcHMubW92ZVJlc2l6ZVZhbGlkYXRvcikge1xuICAgICAgICAgICAgICBkcmFnVGltZSA9IF90aGlzMi5wcm9wcy5tb3ZlUmVzaXplVmFsaWRhdG9yKCdtb3ZlJywgX3RoaXMyLnByb3BzLml0ZW0sIGRyYWdUaW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uRHJvcChfdGhpczIuaXRlbUlkLCBkcmFnVGltZSwgX3RoaXMyLnByb3BzLm9yZGVyLmluZGV4ICsgX3RoaXMyLmRyYWdHcm91cERlbHRhKGUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgZHJhZ1N0YXJ0OiBudWxsLFxuICAgICAgICAgICAgcHJlRHJhZ1Bvc2l0aW9uOiBudWxsLFxuICAgICAgICAgICAgZHJhZ1RpbWU6IG51bGwsXG4gICAgICAgICAgICBkcmFnR3JvdXBEZWx0YTogbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KS5vbigncmVzaXplc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX3RoaXMyLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJlc2l6aW5nOiB0cnVlLFxuICAgICAgICAgICAgcmVzaXplRWRnZTogbnVsbCxcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IGtub3cgeWV0XG4gICAgICAgICAgICByZXNpemVTdGFydDogZS5wYWdlWCxcbiAgICAgICAgICAgIHJlc2l6ZVRpbWU6IDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdyZXNpemVtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zdGF0ZS5yZXNpemluZykge1xuICAgICAgICAgIHZhciByZXNpemVFZGdlID0gX3RoaXMyLnN0YXRlLnJlc2l6ZUVkZ2U7XG5cbiAgICAgICAgICBpZiAoIXJlc2l6ZUVkZ2UpIHtcbiAgICAgICAgICAgIHJlc2l6ZUVkZ2UgPSBlLmRlbHRhUmVjdC5sZWZ0ICE9PSAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgcmVzaXplRWRnZTogcmVzaXplRWRnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlc2l6ZVRpbWUgPSBfdGhpczIucmVzaXplVGltZVNuYXAoX3RoaXMyLnRpbWVGb3IoZSkpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5tb3ZlUmVzaXplVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICByZXNpemVUaW1lID0gX3RoaXMyLnByb3BzLm1vdmVSZXNpemVWYWxpZGF0b3IoJ3Jlc2l6ZScsIF90aGlzMi5wcm9wcy5pdGVtLCByZXNpemVUaW1lLCByZXNpemVFZGdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXMyLnByb3BzLm9uUmVzaXppbmcpIHtcbiAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlc2l6aW5nKF90aGlzMi5pdGVtSWQsIHJlc2l6ZVRpbWUsIHJlc2l6ZUVkZ2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICByZXNpemVUaW1lOiByZXNpemVUaW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdyZXNpemVlbmQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX3RoaXMyLnN0YXRlLnJlc2l6aW5nKSB7XG4gICAgICAgICAgdmFyIHJlc2l6ZUVkZ2UgPSBfdGhpczIuc3RhdGUucmVzaXplRWRnZTtcblxuICAgICAgICAgIHZhciByZXNpemVUaW1lID0gX3RoaXMyLnJlc2l6ZVRpbWVTbmFwKF90aGlzMi50aW1lRm9yKGUpKTtcblxuICAgICAgICAgIGlmIChfdGhpczIucHJvcHMubW92ZVJlc2l6ZVZhbGlkYXRvcikge1xuICAgICAgICAgICAgcmVzaXplVGltZSA9IF90aGlzMi5wcm9wcy5tb3ZlUmVzaXplVmFsaWRhdG9yKCdyZXNpemUnLCBfdGhpczIucHJvcHMuaXRlbSwgcmVzaXplVGltZSwgcmVzaXplRWRnZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5vblJlc2l6ZWQpIHtcbiAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlc2l6ZWQoX3RoaXMyLml0ZW1JZCwgcmVzaXplVGltZSwgcmVzaXplRWRnZSwgX3RoaXMyLnJlc2l6ZVRpbWVEZWx0YShlLCByZXNpemVFZGdlKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJlc2l6aW5nOiBudWxsLFxuICAgICAgICAgICAgcmVzaXplU3RhcnQ6IG51bGwsXG4gICAgICAgICAgICByZXNpemVFZGdlOiBudWxsLFxuICAgICAgICAgICAgcmVzaXplVGltZTogbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KS5vbigndGFwJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMyLmFjdHVhbENsaWNrKGUsIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScgPyAnY2xpY2snIDogJ3RvdWNoJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbnRlcmFjdE1vdW50ZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjYW5SZXNpemVMZWZ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhblJlc2l6ZUxlZnQoKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmICghcHJvcHMuY2FuUmVzaXplTGVmdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciB3aWR0aCA9IHBhcnNlSW50KHByb3BzLmRpbWVuc2lvbnMud2lkdGgsIDEwKTtcbiAgICAgIHJldHVybiB3aWR0aCA+PSBwcm9wcy5taW5SZXNpemVXaWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuUmVzaXplUmlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuUmVzaXplUmlnaHQoKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmICghcHJvcHMuY2FuUmVzaXplUmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2lkdGggPSBwYXJzZUludChwcm9wcy5kaW1lbnNpb25zLndpZHRoLCAxMCk7XG4gICAgICByZXR1cm4gd2lkdGggPj0gcHJvcHMubWluUmVzaXplV2lkdGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhbk1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuTW92ZSgpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiAhIXByb3BzLmNhbk1vdmU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB0aGlzLmNhY2hlRGF0YUZyb21Qcm9wcyh0aGlzLnByb3BzKTtcbiAgICAgIHZhciBpbnRlcmFjdE1vdW50ZWQgPSB0aGlzLnN0YXRlLmludGVyYWN0TW91bnRlZDtcbiAgICAgIHZhciBjb3VsZERyYWcgPSBwcmV2UHJvcHMuc2VsZWN0ZWQgJiYgdGhpcy5jYW5Nb3ZlKHByZXZQcm9wcyk7XG4gICAgICB2YXIgY291bGRSZXNpemVMZWZ0ID0gcHJldlByb3BzLnNlbGVjdGVkICYmIHRoaXMuY2FuUmVzaXplTGVmdChwcmV2UHJvcHMpO1xuICAgICAgdmFyIGNvdWxkUmVzaXplUmlnaHQgPSBwcmV2UHJvcHMuc2VsZWN0ZWQgJiYgdGhpcy5jYW5SZXNpemVSaWdodChwcmV2UHJvcHMpO1xuICAgICAgdmFyIHdpbGxCZUFibGVUb0RyYWcgPSB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHRoaXMuY2FuTW92ZSh0aGlzLnByb3BzKTtcbiAgICAgIHZhciB3aWxsQmVBYmxlVG9SZXNpemVMZWZ0ID0gdGhpcy5wcm9wcy5zZWxlY3RlZCAmJiB0aGlzLmNhblJlc2l6ZUxlZnQodGhpcy5wcm9wcyk7XG4gICAgICB2YXIgd2lsbEJlQWJsZVRvUmVzaXplUmlnaHQgPSB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHRoaXMuY2FuUmVzaXplUmlnaHQodGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICghIXRoaXMuaXRlbSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZCAmJiAhaW50ZXJhY3RNb3VudGVkKSB7XG4gICAgICAgICAgdGhpcy5tb3VudEludGVyYWN0KCk7XG4gICAgICAgICAgaW50ZXJhY3RNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcmFjdE1vdW50ZWQgJiYgKGNvdWxkUmVzaXplTGVmdCAhPT0gd2lsbEJlQWJsZVRvUmVzaXplTGVmdCB8fCBjb3VsZFJlc2l6ZVJpZ2h0ICE9PSB3aWxsQmVBYmxlVG9SZXNpemVSaWdodCkpIHtcbiAgICAgICAgICB2YXIgbGVmdFJlc2l6ZSA9IHRoaXMucHJvcHMudXNlUmVzaXplSGFuZGxlID8gdGhpcy5kcmFnTGVmdCA6IHRydWU7XG4gICAgICAgICAgdmFyIHJpZ2h0UmVzaXplID0gdGhpcy5wcm9wcy51c2VSZXNpemVIYW5kbGUgPyB0aGlzLmRyYWdSaWdodCA6IHRydWU7XG4gICAgICAgICAgKDAsIF9pbnRlcmFjdGpzW1wiZGVmYXVsdFwiXSkodGhpcy5pdGVtKS5yZXNpemFibGUoe1xuICAgICAgICAgICAgZW5hYmxlZDogd2lsbEJlQWJsZVRvUmVzaXplTGVmdCB8fCB3aWxsQmVBYmxlVG9SZXNpemVSaWdodCxcbiAgICAgICAgICAgIGVkZ2VzOiB7XG4gICAgICAgICAgICAgIHRvcDogZmFsc2UsXG4gICAgICAgICAgICAgIGJvdHRvbTogZmFsc2UsXG4gICAgICAgICAgICAgIGxlZnQ6IHdpbGxCZUFibGVUb1Jlc2l6ZUxlZnQgJiYgbGVmdFJlc2l6ZSxcbiAgICAgICAgICAgICAgcmlnaHQ6IHdpbGxCZUFibGVUb1Jlc2l6ZVJpZ2h0ICYmIHJpZ2h0UmVzaXplXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJhY3RNb3VudGVkICYmIGNvdWxkRHJhZyAhPT0gd2lsbEJlQWJsZVRvRHJhZykge1xuICAgICAgICAgICgwLCBfaW50ZXJhY3Rqc1tcImRlZmF1bHRcIl0pKHRoaXMuaXRlbSkuZHJhZ2dhYmxlKHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHdpbGxCZUFibGVUb0RyYWdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW50ZXJhY3RNb3VudGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbnRlcmFjdE1vdW50ZWQ6IGludGVyYWN0TW91bnRlZFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFjdHVhbENsaWNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFjdHVhbENsaWNrKGUsIGNsaWNrVHlwZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2FuU2VsZWN0ICYmIHRoaXMucHJvcHMub25TZWxlY3QpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdCh0aGlzLml0ZW1JZCwgY2xpY2tUeXBlLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0SXRlbVN0eWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEl0ZW1TdHlsZShwcm9wcykge1xuICAgICAgdmFyIGRpbWVuc2lvbnMgPSB0aGlzLnByb3BzLmRpbWVuc2lvbnM7XG4gICAgICB2YXIgYmFzZVN0eWxlcyA9IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBsZWZ0OiBcIlwiLmNvbmNhdChkaW1lbnNpb25zLmxlZnQsIFwicHhcIiksXG4gICAgICAgIHRvcDogXCJcIi5jb25jYXQoZGltZW5zaW9ucy50b3AsIFwicHhcIiksXG4gICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdChkaW1lbnNpb25zLndpZHRoLCBcInB4XCIpLFxuICAgICAgICBoZWlnaHQ6IFwiXCIuY29uY2F0KGRpbWVuc2lvbnMuaGVpZ2h0LCBcInB4XCIpLFxuICAgICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChkaW1lbnNpb25zLmhlaWdodCwgXCJweFwiKVxuICAgICAgfTtcbiAgICAgIHZhciBmaW5hbFN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgX3N0eWxlcy5vdmVycmlkYWJsZVN0eWxlcywgdGhpcy5wcm9wcy5zZWxlY3RlZCA/IF9zdHlsZXMuc2VsZWN0ZWRTdHlsZSA6IHt9LCB0aGlzLnByb3BzLnNlbGVjdGVkICYgdGhpcy5jYW5Nb3ZlKHRoaXMucHJvcHMpID8gX3N0eWxlcy5zZWxlY3RlZEFuZENhbk1vdmUgOiB7fSwgdGhpcy5wcm9wcy5zZWxlY3RlZCAmIHRoaXMuY2FuUmVzaXplTGVmdCh0aGlzLnByb3BzKSA/IF9zdHlsZXMuc2VsZWN0ZWRBbmRDYW5SZXNpemVMZWZ0IDoge30sIHRoaXMucHJvcHMuc2VsZWN0ZWQgJiB0aGlzLmNhblJlc2l6ZUxlZnQodGhpcy5wcm9wcykgJiB0aGlzLnN0YXRlLmRyYWdnaW5nID8gX3N0eWxlcy5zZWxlY3RlZEFuZENhblJlc2l6ZUxlZnRBbmREcmFnTGVmdCA6IHt9LCB0aGlzLnByb3BzLnNlbGVjdGVkICYgdGhpcy5jYW5SZXNpemVSaWdodCh0aGlzLnByb3BzKSA/IF9zdHlsZXMuc2VsZWN0ZWRBbmRDYW5SZXNpemVSaWdodCA6IHt9LCB0aGlzLnByb3BzLnNlbGVjdGVkICYgdGhpcy5jYW5SZXNpemVSaWdodCh0aGlzLnByb3BzKSAmIHRoaXMuc3RhdGUuZHJhZ2dpbmcgPyBfc3R5bGVzLnNlbGVjdGVkQW5kQ2FuUmVzaXplUmlnaHRBbmREcmFnUmlnaHQgOiB7fSwgcHJvcHMuc3R5bGUsIGJhc2VTdHlsZXMpO1xuICAgICAgcmV0dXJuIGZpbmFsU3R5bGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMub3JkZXIgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMucHJvcHMub3JkZXIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lbGluZUNvbnRleHQgPSB0aGlzLmNvbnRleHQuZ2V0VGltZWxpbmVDb250ZXh0KCk7XG4gICAgICB2YXIgaXRlbUNvbnRleHQgPSB7XG4gICAgICAgIGRpbWVuc2lvbnM6IHRoaXMucHJvcHMuZGltZW5zaW9ucyxcbiAgICAgICAgdXNlUmVzaXplSGFuZGxlOiB0aGlzLnByb3BzLnVzZVJlc2l6ZUhhbmRsZSxcbiAgICAgICAgdGl0bGU6IHRoaXMuaXRlbVRpdGxlLFxuICAgICAgICBjYW5Nb3ZlOiB0aGlzLmNhbk1vdmUodGhpcy5wcm9wcyksXG4gICAgICAgIGNhblJlc2l6ZUxlZnQ6IHRoaXMuY2FuUmVzaXplTGVmdCh0aGlzLnByb3BzKSxcbiAgICAgICAgY2FuUmVzaXplUmlnaHQ6IHRoaXMuY2FuUmVzaXplUmlnaHQodGhpcy5wcm9wcyksXG4gICAgICAgIHNlbGVjdGVkOiB0aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICBkcmFnZ2luZzogdGhpcy5zdGF0ZS5kcmFnZ2luZyxcbiAgICAgICAgZHJhZ1N0YXJ0OiB0aGlzLnN0YXRlLmRyYWdTdGFydCxcbiAgICAgICAgZHJhZ1RpbWU6IHRoaXMuc3RhdGUuZHJhZ1RpbWUsXG4gICAgICAgIGRyYWdHcm91cERlbHRhOiB0aGlzLnN0YXRlLmRyYWdHcm91cERlbHRhLFxuICAgICAgICByZXNpemluZzogdGhpcy5zdGF0ZS5yZXNpemluZyxcbiAgICAgICAgcmVzaXplRWRnZTogdGhpcy5zdGF0ZS5yZXNpemVFZGdlLFxuICAgICAgICByZXNpemVTdGFydDogdGhpcy5zdGF0ZS5yZXNpemVTdGFydCxcbiAgICAgICAgcmVzaXplVGltZTogdGhpcy5zdGF0ZS5yZXNpemVUaW1lLFxuICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy5kaW1lbnNpb25zLndpZHRoXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXRlbVJlbmRlcmVyKHtcbiAgICAgICAgaXRlbTogdGhpcy5wcm9wcy5pdGVtLFxuICAgICAgICB0aW1lbGluZUNvbnRleHQ6IHRpbWVsaW5lQ29udGV4dCxcbiAgICAgICAgaXRlbUNvbnRleHQ6IGl0ZW1Db250ZXh0LFxuICAgICAgICBnZXRJdGVtUHJvcHM6IHRoaXMuZ2V0SXRlbVByb3BzLFxuICAgICAgICBnZXRSZXNpemVQcm9wczogdGhpcy5nZXRSZXNpemVQcm9wc1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEl0ZW07XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEl0ZW07XG5cbl9kZWZpbmVQcm9wZXJ0eShJdGVtLCBcInByb3BUeXBlc1wiLCB7XG4gIGNhbnZhc1RpbWVTdGFydDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGNhbnZhc1RpbWVFbmQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBjYW52YXNXaWR0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGRyYWdTbmFwOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG1pblJlc2l6ZVdpZHRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIHNlbGVjdGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBjYW5DaGFuZ2VHcm91cDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbC5pc1JlcXVpcmVkLFxuICBjYW5Nb3ZlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLmlzUmVxdWlyZWQsXG4gIGNhblJlc2l6ZUxlZnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wuaXNSZXF1aXJlZCxcbiAgY2FuUmVzaXplUmlnaHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wuaXNSZXF1aXJlZCxcbiAga2V5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGl0ZW06IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvblNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EcmFnOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRyb3A6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uUmVzaXppbmc6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uUmVzaXplZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25Db250ZXh0TWVudTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXRlbVJlbmRlcmVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpdGVtUHJvcHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgY2FuU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBkaW1lbnNpb25zOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGdyb3VwVG9wczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYXJyYXksXG4gIHVzZVJlc2l6ZUhhbmRsZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbW92ZVJlc2l6ZVZhbGlkYXRvcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25JdGVtRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHNjcm9sbFJlZjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XG59KTtcblxuX2RlZmluZVByb3BlcnR5KEl0ZW0sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgc2VsZWN0ZWQ6IGZhbHNlLFxuICBpdGVtUmVuZGVyZXI6IF9kZWZhdWx0SXRlbVJlbmRlcmVyLmRlZmF1bHRJdGVtUmVuZGVyZXJcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoSXRlbSwgXCJjb250ZXh0VHlwZXNcIiwge1xuICBnZXRUaW1lbGluZUNvbnRleHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX0l0ZW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0l0ZW1cIikpO1xuXG52YXIgX2dlbmVyaWMgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9nZW5lcmljXCIpO1xuXG52YXIgX2NhbGVuZGFyID0gcmVxdWlyZShcIi4uL3V0aWxpdHkvY2FsZW5kYXJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBjYW5SZXNpemVMZWZ0ID0gZnVuY3Rpb24gY2FuUmVzaXplTGVmdChpdGVtLCBjYW5SZXNpemUpIHtcbiAgdmFyIHZhbHVlID0gKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sICdjYW5SZXNpemUnKSAhPT0gdW5kZWZpbmVkID8gKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sICdjYW5SZXNpemUnKSA6IGNhblJlc2l6ZTtcbiAgcmV0dXJuIHZhbHVlID09PSAnbGVmdCcgfHwgdmFsdWUgPT09ICdib3RoJztcbn07XG5cbnZhciBjYW5SZXNpemVSaWdodCA9IGZ1bmN0aW9uIGNhblJlc2l6ZVJpZ2h0KGl0ZW0sIGNhblJlc2l6ZSkge1xuICB2YXIgdmFsdWUgPSAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgJ2NhblJlc2l6ZScpICE9PSB1bmRlZmluZWQgPyAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgJ2NhblJlc2l6ZScpIDogY2FuUmVzaXplO1xuICByZXR1cm4gdmFsdWUgPT09ICdyaWdodCcgfHwgdmFsdWUgPT09ICdib3RoJyB8fCB2YWx1ZSA9PT0gdHJ1ZTtcbn07XG5cbnZhciBJdGVtcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSXRlbXMsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEl0ZW1zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJdGVtcyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEl0ZW1zKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJdGVtcywgW3tcbiAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiAhKCgwLCBfZ2VuZXJpYy5hcnJheXNFcXVhbCkobmV4dFByb3BzLmdyb3VwcywgdGhpcy5wcm9wcy5ncm91cHMpICYmICgwLCBfZ2VuZXJpYy5hcnJheXNFcXVhbCkobmV4dFByb3BzLml0ZW1zLCB0aGlzLnByb3BzLml0ZW1zKSAmJiAoMCwgX2dlbmVyaWMuYXJyYXlzRXF1YWwpKG5leHRQcm9wcy5kaW1lbnNpb25JdGVtcywgdGhpcy5wcm9wcy5kaW1lbnNpb25JdGVtcykgJiYgbmV4dFByb3BzLmtleXMgPT09IHRoaXMucHJvcHMua2V5cyAmJiBuZXh0UHJvcHMuY2FudmFzVGltZVN0YXJ0ID09PSB0aGlzLnByb3BzLmNhbnZhc1RpbWVTdGFydCAmJiBuZXh0UHJvcHMuY2FudmFzVGltZUVuZCA9PT0gdGhpcy5wcm9wcy5jYW52YXNUaW1lRW5kICYmIG5leHRQcm9wcy5jYW52YXNXaWR0aCA9PT0gdGhpcy5wcm9wcy5jYW52YXNXaWR0aCAmJiBuZXh0UHJvcHMuc2VsZWN0ZWRJdGVtID09PSB0aGlzLnByb3BzLnNlbGVjdGVkSXRlbSAmJiBuZXh0UHJvcHMuc2VsZWN0ZWQgPT09IHRoaXMucHJvcHMuc2VsZWN0ZWQgJiYgbmV4dFByb3BzLmRyYWdTbmFwID09PSB0aGlzLnByb3BzLmRyYWdTbmFwICYmIG5leHRQcm9wcy5taW5SZXNpemVXaWR0aCA9PT0gdGhpcy5wcm9wcy5taW5SZXNpemVXaWR0aCAmJiBuZXh0UHJvcHMuY2FuQ2hhbmdlR3JvdXAgPT09IHRoaXMucHJvcHMuY2FuQ2hhbmdlR3JvdXAgJiYgbmV4dFByb3BzLmNhbk1vdmUgPT09IHRoaXMucHJvcHMuY2FuTW92ZSAmJiBuZXh0UHJvcHMuY2FuUmVzaXplID09PSB0aGlzLnByb3BzLmNhblJlc2l6ZSAmJiBuZXh0UHJvcHMuY2FuU2VsZWN0ID09PSB0aGlzLnByb3BzLmNhblNlbGVjdCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU2VsZWN0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTZWxlY3RlZChpdGVtLCBpdGVtSWRLZXkpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW0gPT09ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBpdGVtSWRLZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhcmdldCA9ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBpdGVtSWRLZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RlZC5pbmNsdWRlcyh0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRWaXNpYmxlSXRlbXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlzaWJsZUl0ZW1zKGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBrZXlzID0gX3RoaXMkcHJvcHMua2V5cyxcbiAgICAgICAgICBpdGVtcyA9IF90aGlzJHByb3BzLml0ZW1zO1xuICAgICAgcmV0dXJuICgwLCBfY2FsZW5kYXIuZ2V0VmlzaWJsZUl0ZW1zKShpdGVtcywgY2FudmFzVGltZVN0YXJ0LCBjYW52YXNUaW1lRW5kLCBrZXlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhbnZhc1RpbWVTdGFydCA9IF90aGlzJHByb3BzMi5jYW52YXNUaW1lU3RhcnQsXG4gICAgICAgICAgY2FudmFzVGltZUVuZCA9IF90aGlzJHByb3BzMi5jYW52YXNUaW1lRW5kLFxuICAgICAgICAgIGRpbWVuc2lvbkl0ZW1zID0gX3RoaXMkcHJvcHMyLmRpbWVuc2lvbkl0ZW1zLFxuICAgICAgICAgIGtleXMgPSBfdGhpcyRwcm9wczIua2V5cyxcbiAgICAgICAgICBncm91cHMgPSBfdGhpcyRwcm9wczIuZ3JvdXBzO1xuICAgICAgdmFyIGl0ZW1JZEtleSA9IGtleXMuaXRlbUlkS2V5LFxuICAgICAgICAgIGl0ZW1Hcm91cEtleSA9IGtleXMuaXRlbUdyb3VwS2V5O1xuICAgICAgdmFyIGdyb3VwT3JkZXJzID0gKDAsIF9jYWxlbmRhci5nZXRHcm91cE9yZGVycykoZ3JvdXBzLCBrZXlzKTtcbiAgICAgIHZhciB2aXNpYmxlSXRlbXMgPSB0aGlzLmdldFZpc2libGVJdGVtcyhjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGdyb3VwT3JkZXJzKTtcbiAgICAgIHZhciBzb3J0ZWREaW1lbnNpb25JdGVtcyA9ICgwLCBfZ2VuZXJpYy5rZXlCeSkoZGltZW5zaW9uSXRlbXMsICdpZCcpO1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyY3QtaXRlbXNcIlxuICAgICAgfSwgdmlzaWJsZUl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gc29ydGVkRGltZW5zaW9uSXRlbXNbKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sIGl0ZW1JZEtleSldO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0l0ZW1bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAga2V5OiAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgaXRlbUlkS2V5KSxcbiAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgIGtleXM6IF90aGlzLnByb3BzLmtleXMsXG4gICAgICAgICAgb3JkZXI6IGdyb3VwT3JkZXJzWygwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCBpdGVtR3JvdXBLZXkpXSxcbiAgICAgICAgICBkaW1lbnNpb25zOiBzb3J0ZWREaW1lbnNpb25JdGVtc1soMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgaXRlbUlkS2V5KV0uZGltZW5zaW9ucyxcbiAgICAgICAgICBzZWxlY3RlZDogX3RoaXMuaXNTZWxlY3RlZChpdGVtLCBpdGVtSWRLZXkpLFxuICAgICAgICAgIGNhbkNoYW5nZUdyb3VwOiAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgJ2NhbkNoYW5nZUdyb3VwJykgIT09IHVuZGVmaW5lZCA/ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCAnY2FuQ2hhbmdlR3JvdXAnKSA6IF90aGlzLnByb3BzLmNhbkNoYW5nZUdyb3VwLFxuICAgICAgICAgIGNhbk1vdmU6ICgwLCBfZ2VuZXJpYy5fZ2V0KShpdGVtLCAnY2FuTW92ZScpICE9PSB1bmRlZmluZWQgPyAoMCwgX2dlbmVyaWMuX2dldCkoaXRlbSwgJ2Nhbk1vdmUnKSA6IF90aGlzLnByb3BzLmNhbk1vdmUsXG4gICAgICAgICAgY2FuUmVzaXplTGVmdDogY2FuUmVzaXplTGVmdChpdGVtLCBfdGhpcy5wcm9wcy5jYW5SZXNpemUpLFxuICAgICAgICAgIGNhblJlc2l6ZVJpZ2h0OiBjYW5SZXNpemVSaWdodChpdGVtLCBfdGhpcy5wcm9wcy5jYW5SZXNpemUpLFxuICAgICAgICAgIGNhblNlbGVjdDogKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sICdjYW5TZWxlY3QnKSAhPT0gdW5kZWZpbmVkID8gKDAsIF9nZW5lcmljLl9nZXQpKGl0ZW0sICdjYW5TZWxlY3QnKSA6IF90aGlzLnByb3BzLmNhblNlbGVjdCxcbiAgICAgICAgICB1c2VSZXNpemVIYW5kbGU6IF90aGlzLnByb3BzLnVzZVJlc2l6ZUhhbmRsZSxcbiAgICAgICAgICBncm91cFRvcHM6IF90aGlzLnByb3BzLmdyb3VwVG9wcyxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQ6IF90aGlzLnByb3BzLmNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgICBjYW52YXNUaW1lRW5kOiBfdGhpcy5wcm9wcy5jYW52YXNUaW1lRW5kLFxuICAgICAgICAgIGNhbnZhc1dpZHRoOiBfdGhpcy5wcm9wcy5jYW52YXNXaWR0aCxcbiAgICAgICAgICBkcmFnU25hcDogX3RoaXMucHJvcHMuZHJhZ1NuYXAsXG4gICAgICAgICAgbWluUmVzaXplV2lkdGg6IF90aGlzLnByb3BzLm1pblJlc2l6ZVdpZHRoLFxuICAgICAgICAgIG9uUmVzaXppbmc6IF90aGlzLnByb3BzLml0ZW1SZXNpemluZyxcbiAgICAgICAgICBvblJlc2l6ZWQ6IF90aGlzLnByb3BzLml0ZW1SZXNpemVkLFxuICAgICAgICAgIG1vdmVSZXNpemVWYWxpZGF0b3I6IF90aGlzLnByb3BzLm1vdmVSZXNpemVWYWxpZGF0b3IsXG4gICAgICAgICAgb25EcmFnOiBfdGhpcy5wcm9wcy5pdGVtRHJhZyxcbiAgICAgICAgICBvbkRyb3A6IF90aGlzLnByb3BzLml0ZW1Ecm9wLFxuICAgICAgICAgIG9uSXRlbURvdWJsZUNsaWNrOiBfdGhpcy5wcm9wcy5vbkl0ZW1Eb3VibGVDbGljayxcbiAgICAgICAgICBvbkNvbnRleHRNZW51OiBfdGhpcy5wcm9wcy5vbkl0ZW1Db250ZXh0TWVudSxcbiAgICAgICAgICBvblNlbGVjdDogX3RoaXMucHJvcHMuaXRlbVNlbGVjdCxcbiAgICAgICAgICBpdGVtUmVuZGVyZXI6IF90aGlzLnByb3BzLml0ZW1SZW5kZXJlcixcbiAgICAgICAgICBzY3JvbGxSZWY6IF90aGlzLnByb3BzLnNjcm9sbFJlZlxuICAgICAgICB9KTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSXRlbXM7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEl0ZW1zO1xuXG5fZGVmaW5lUHJvcGVydHkoSXRlbXMsIFwicHJvcFR5cGVzXCIsIHtcbiAgZ3JvdXBzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5LCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpdGVtczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hcnJheSwgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgY2FudmFzVGltZVN0YXJ0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY2FudmFzVGltZUVuZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGNhbnZhc1dpZHRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZHJhZ1NuYXA6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgbWluUmVzaXplV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgc2VsZWN0ZWRJdGVtOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyXSksXG4gIGNhbkNoYW5nZUdyb3VwOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLmlzUmVxdWlyZWQsXG4gIGNhbk1vdmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wuaXNSZXF1aXJlZCxcbiAgY2FuUmVzaXplOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbdHJ1ZSwgZmFsc2UsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdGgnXSksXG4gIGNhblNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAga2V5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LmlzUmVxdWlyZWQsXG4gIG1vdmVSZXNpemVWYWxpZGF0b3I6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGl0ZW1TZWxlY3Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGl0ZW1EcmFnOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpdGVtRHJvcDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXRlbVJlc2l6aW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpdGVtUmVzaXplZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25JdGVtRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uSXRlbUNvbnRleHRNZW51OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpdGVtUmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHNlbGVjdGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hcnJheSxcbiAgZGltZW5zaW9uSXRlbXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5LFxuICBncm91cFRvcHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5LFxuICB1c2VSZXNpemVIYW5kbGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNjcm9sbFJlZjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XG59KTtcblxuX2RlZmluZVByb3BlcnR5KEl0ZW1zLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIHNlbGVjdGVkOiBbXVxufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZ2VuZXJpYyA9IHJlcXVpcmUoXCIuLi91dGlsaXR5L2dlbmVyaWNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBTaWRlYmFyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTaWRlYmFyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTaWRlYmFyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaWRlYmFyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2lkZWJhcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2lkZWJhciwgW3tcbiAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiAhKG5leHRQcm9wcy5rZXlzID09PSB0aGlzLnByb3BzLmtleXMgJiYgbmV4dFByb3BzLndpZHRoID09PSB0aGlzLnByb3BzLndpZHRoICYmIG5leHRQcm9wcy5oZWlnaHQgPT09IHRoaXMucHJvcHMuaGVpZ2h0ICYmICgwLCBfZ2VuZXJpYy5hcnJheXNFcXVhbCkobmV4dFByb3BzLmdyb3VwcywgdGhpcy5wcm9wcy5ncm91cHMpICYmICgwLCBfZ2VuZXJpYy5hcnJheXNFcXVhbCkobmV4dFByb3BzLmdyb3VwSGVpZ2h0cywgdGhpcy5wcm9wcy5ncm91cEhlaWdodHMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyR3JvdXBDb250ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckdyb3VwQ29udGVudChncm91cCwgaXNSaWdodFNpZGViYXIsIGdyb3VwVGl0bGVLZXksIGdyb3VwUmlnaHRUaXRsZUtleSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuZ3JvdXBSZW5kZXJlcikge1xuICAgICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuZ3JvdXBSZW5kZXJlciwge1xuICAgICAgICAgIGdyb3VwOiBncm91cCxcbiAgICAgICAgICBpc1JpZ2h0U2lkZWJhcjogaXNSaWdodFNpZGViYXJcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKDAsIF9nZW5lcmljLl9nZXQpKGdyb3VwLCBpc1JpZ2h0U2lkZWJhciA/IGdyb3VwUmlnaHRUaXRsZUtleSA6IGdyb3VwVGl0bGVLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzLndpZHRoLFxuICAgICAgICAgIGdyb3VwSGVpZ2h0cyA9IF90aGlzJHByb3BzLmdyb3VwSGVpZ2h0cyxcbiAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wcy5oZWlnaHQsXG4gICAgICAgICAgaXNSaWdodFNpZGViYXIgPSBfdGhpcyRwcm9wcy5pc1JpZ2h0U2lkZWJhcjtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRrZXlzID0gdGhpcy5wcm9wcy5rZXlzLFxuICAgICAgICAgIGdyb3VwSWRLZXkgPSBfdGhpcyRwcm9wcyRrZXlzLmdyb3VwSWRLZXksXG4gICAgICAgICAgZ3JvdXBUaXRsZUtleSA9IF90aGlzJHByb3BzJGtleXMuZ3JvdXBUaXRsZUtleSxcbiAgICAgICAgICBncm91cFJpZ2h0VGl0bGVLZXkgPSBfdGhpcyRwcm9wcyRrZXlzLmdyb3VwUmlnaHRUaXRsZUtleTtcbiAgICAgIHZhciBzaWRlYmFyU3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCh3aWR0aCwgXCJweFwiKSxcbiAgICAgICAgaGVpZ2h0OiBcIlwiLmNvbmNhdChoZWlnaHQsIFwicHhcIilcbiAgICAgIH07XG4gICAgICB2YXIgZ3JvdXBzU3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCh3aWR0aCwgXCJweFwiKVxuICAgICAgfTtcbiAgICAgIHZhciBncm91cExpbmVzID0gdGhpcy5wcm9wcy5ncm91cHMubWFwKGZ1bmN0aW9uIChncm91cCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRTdHlsZSA9IHtcbiAgICAgICAgICBoZWlnaHQ6IFwiXCIuY29uY2F0KGdyb3VwSGVpZ2h0c1tpbmRleF0sIFwicHhcIiksXG4gICAgICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQoZ3JvdXBIZWlnaHRzW2luZGV4XSwgXCJweFwiKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBrZXk6ICgwLCBfZ2VuZXJpYy5fZ2V0KShncm91cCwgZ3JvdXBJZEtleSksXG4gICAgICAgICAgY2xhc3NOYW1lOiAncmN0LXNpZGViYXItcm93IHJjdC1zaWRlYmFyLXJvdy0nICsgKGluZGV4ICUgMiA9PT0gMCA/ICdldmVuJyA6ICdvZGQnKSxcbiAgICAgICAgICBzdHlsZTogZWxlbWVudFN0eWxlXG4gICAgICAgIH0sIF90aGlzLnJlbmRlckdyb3VwQ29udGVudChncm91cCwgaXNSaWdodFNpZGViYXIsIGdyb3VwVGl0bGVLZXksIGdyb3VwUmlnaHRUaXRsZUtleSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAncmN0LXNpZGViYXInICsgKGlzUmlnaHRTaWRlYmFyID8gJyByY3Qtc2lkZWJhci1yaWdodCcgOiAnJyksXG4gICAgICAgIHN0eWxlOiBzaWRlYmFyU3R5bGVcbiAgICAgIH0sIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiBncm91cHNTdHlsZVxuICAgICAgfSwgZ3JvdXBMaW5lcykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaWRlYmFyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTaWRlYmFyO1xuXG5fZGVmaW5lUHJvcGVydHkoU2lkZWJhciwgXCJwcm9wVHlwZXNcIiwge1xuICBncm91cHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYXJyYXksIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIHdpZHRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaGVpZ2h0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZ3JvdXBIZWlnaHRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hcnJheS5pc1JlcXVpcmVkLFxuICBrZXlzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QuaXNSZXF1aXJlZCxcbiAgZ3JvdXBSZW5kZXJlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNSaWdodFNpZGViYXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2xcbn0pOyIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZ3VkID0gcmVxdWlyZSgnZ3VkJyk7XG5cbnZhciBfZ3VkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2d1ZCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xuXG4vLyBJbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbC5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgKDAsIF9ndWQyLmRlZmF1bHQpKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwOyAvLyBObyBjaGFuZ2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHMoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90ZW1wMiwgX3RoaXMyLCBfcmV0MjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnN1bWVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldDIgPSAoX3RlbXAyID0gKF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQyLmNhbGwuYXBwbHkoX0NvbXBvbmVudDIsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMyKSwgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH0sIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKSB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgX3RlbXAyKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMyLCBfcmV0Mik7XG4gICAgfVxuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVJlYWN0Q29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltcGxlbWVudGF0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNvbnRleHQgfHwgX2ltcGxlbWVudGF0aW9uMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRpbWVsaW5lU3RhdGVDb25zdW1lciA9IGV4cG9ydHMuVGltZWxpbmVTdGF0ZVByb3ZpZGVyID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q29udGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjcmVhdGUtcmVhY3QtY29udGV4dFwiKSk7XG5cbnZhciBfY2FsZW5kYXIgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9jYWxlbmRhclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKiB0aGlzIGNvbnRleHQgd2lsbCBob2xkIGFsbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGltZWxpbmUgc3RhdGU6XG4gIDEuIHRpbWVsaW5lIHdpZHRoXG4gIDIuIHZpc2libGUgdGltZSBzdGFydCBhbmQgZW5kXG4gIDMuIGNhbnZhcyB0aW1lIHN0YXJ0IGFuZCBlbmRcbiAgNC4gaGVscGVycyBmb3IgY2FsY3VsYXRpbmcgbGVmdCBvZmZzZXQgb2YgaXRlbXMgKGFuZCByZWFsbHkuLi5hbnl0aGluZylcbiovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciBkZWZhdWx0Q29udGV4dFN0YXRlID0ge1xuICBnZXRUaW1lbGluZVN0YXRlOiBmdW5jdGlvbiBnZXRUaW1lbGluZVN0YXRlKCkge1xuICAgIGNvbnNvbGUud2FybignXCJnZXRUaW1lbGluZVN0YXRlXCIgZGVmYXVsdCBmdW5jIGlzIGJlaW5nIHVzZWQnKTtcbiAgfSxcbiAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBmdW5jdGlvbiBnZXRMZWZ0T2Zmc2V0RnJvbURhdGUoKSB7XG4gICAgY29uc29sZS53YXJuKCdcImdldExlZnRPZmZzZXRGcm9tRGF0ZVwiIGRlZmF1bHQgZnVuYyBpcyBiZWluZyB1c2VkJyk7XG4gIH0sXG4gIGdldERhdGVGcm9tTGVmdE9mZnNldFBvc2l0aW9uOiBmdW5jdGlvbiBnZXREYXRlRnJvbUxlZnRPZmZzZXRQb3NpdGlvbigpIHtcbiAgICBjb25zb2xlLndhcm4oJ1wiZ2V0RGF0ZUZyb21MZWZ0T2Zmc2V0UG9zaXRpb25cIiBkZWZhdWx0IGZ1bmMgaXMgYmVpbmcgdXNlZCcpO1xuICB9LFxuICBzaG93UGVyaW9kOiBmdW5jdGlvbiBzaG93UGVyaW9kKCkge1xuICAgIGNvbnNvbGUud2FybignXCJzaG93UGVyaW9kXCIgZGVmYXVsdCBmdW5jIGlzIGJlaW5nIHVzZWQnKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbn07XG5cbnZhciBfY3JlYXRlUmVhY3RDb250ZXh0ID0gKDAsIF9jcmVhdGVSZWFjdENvbnRleHQyW1wiZGVmYXVsdFwiXSkoZGVmYXVsdENvbnRleHRTdGF0ZSksXG4gICAgQ29uc3VtZXIgPSBfY3JlYXRlUmVhY3RDb250ZXh0LkNvbnN1bWVyLFxuICAgIFByb3ZpZGVyID0gX2NyZWF0ZVJlYWN0Q29udGV4dC5Qcm92aWRlcjtcblxudmFyIFRpbWVsaW5lU3RhdGVQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGltZWxpbmVTdGF0ZVByb3ZpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlcyAqL1xuICBmdW5jdGlvbiBUaW1lbGluZVN0YXRlUHJvdmlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZWxpbmVTdGF0ZVByb3ZpZGVyKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRpbWVsaW5lU3RhdGVQcm92aWRlcikuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFRpbWVsaW5lU3RhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdmlzaWJsZVRpbWVTdGFydCA9IF90aGlzJHByb3BzLnZpc2libGVUaW1lU3RhcnQsXG4gICAgICAgICAgdmlzaWJsZVRpbWVFbmQgPSBfdGhpcyRwcm9wcy52aXNpYmxlVGltZUVuZCxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRwcm9wcy5jYW52YXNUaW1lU3RhcnQsXG4gICAgICAgICAgY2FudmFzVGltZUVuZCA9IF90aGlzJHByb3BzLmNhbnZhc1RpbWVFbmQsXG4gICAgICAgICAgY2FudmFzV2lkdGggPSBfdGhpcyRwcm9wcy5jYW52YXNXaWR0aCxcbiAgICAgICAgICB0aW1lbGluZVVuaXQgPSBfdGhpcyRwcm9wcy50aW1lbGluZVVuaXQsXG4gICAgICAgICAgdGltZWxpbmVXaWR0aCA9IF90aGlzJHByb3BzLnRpbWVsaW5lV2lkdGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2aXNpYmxlVGltZVN0YXJ0OiB2aXNpYmxlVGltZVN0YXJ0LFxuICAgICAgICB2aXNpYmxlVGltZUVuZDogdmlzaWJsZVRpbWVFbmQsXG4gICAgICAgIGNhbnZhc1RpbWVTdGFydDogY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICBjYW52YXNUaW1lRW5kOiBjYW52YXNUaW1lRW5kLFxuICAgICAgICBjYW52YXNXaWR0aDogY2FudmFzV2lkdGgsXG4gICAgICAgIHRpbWVsaW5lVW5pdDogdGltZWxpbmVVbml0LFxuICAgICAgICB0aW1lbGluZVdpZHRoOiB0aW1lbGluZVdpZHRoIC8vIFJFVklFVyxcblxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRMZWZ0T2Zmc2V0RnJvbURhdGVcIiwgZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRwcm9wczIuY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICAgIGNhbnZhc1RpbWVFbmQgPSBfdGhpcyRwcm9wczIuY2FudmFzVGltZUVuZCxcbiAgICAgICAgICBjYW52YXNXaWR0aCA9IF90aGlzJHByb3BzMi5jYW52YXNXaWR0aDtcbiAgICAgIHJldHVybiAoMCwgX2NhbGVuZGFyLmNhbGN1bGF0ZVhQb3NpdGlvbkZvclRpbWUpKGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCwgY2FudmFzV2lkdGgsIGRhdGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldERhdGVGcm9tTGVmdE9mZnNldFBvc2l0aW9uXCIsIGZ1bmN0aW9uIChsZWZ0T2Zmc2V0KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2FudmFzVGltZVN0YXJ0ID0gX3RoaXMkcHJvcHMzLmNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgICBjYW52YXNUaW1lRW5kID0gX3RoaXMkcHJvcHMzLmNhbnZhc1RpbWVFbmQsXG4gICAgICAgICAgY2FudmFzV2lkdGggPSBfdGhpcyRwcm9wczMuY2FudmFzV2lkdGg7XG4gICAgICByZXR1cm4gKDAsIF9jYWxlbmRhci5jYWxjdWxhdGVUaW1lRm9yWFBvc2l0aW9uKShjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGNhbnZhc1dpZHRoLCBsZWZ0T2Zmc2V0KTtcbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdGltZWxpbmVDb250ZXh0OiB7XG4gICAgICAgIGdldFRpbWVsaW5lU3RhdGU6IF90aGlzLmdldFRpbWVsaW5lU3RhdGUsXG4gICAgICAgIGdldExlZnRPZmZzZXRGcm9tRGF0ZTogX3RoaXMuZ2V0TGVmdE9mZnNldEZyb21EYXRlLFxuICAgICAgICBnZXREYXRlRnJvbUxlZnRPZmZzZXRQb3NpdGlvbjogX3RoaXMuZ2V0RGF0ZUZyb21MZWZ0T2Zmc2V0UG9zaXRpb24sXG4gICAgICAgIHNob3dQZXJpb2Q6IF90aGlzLnByb3BzLnNob3dQZXJpb2RcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUaW1lbGluZVN0YXRlUHJvdmlkZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnRpbWVsaW5lQ29udGV4dFxuICAgICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVsaW5lU3RhdGVQcm92aWRlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzLlRpbWVsaW5lU3RhdGVQcm92aWRlciA9IFRpbWVsaW5lU3RhdGVQcm92aWRlcjtcblxuX2RlZmluZVByb3BlcnR5KFRpbWVsaW5lU3RhdGVQcm92aWRlciwgXCJwcm9wVHlwZXNcIiwge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZWxlbWVudC5pc1JlcXVpcmVkLFxuICB2aXNpYmxlVGltZVN0YXJ0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgdmlzaWJsZVRpbWVFbmQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBjYW52YXNUaW1lU3RhcnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBjYW52YXNUaW1lRW5kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY2FudmFzV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBzaG93UGVyaW9kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHRpbWVsaW5lVW5pdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRpbWVsaW5lV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkXG59KTtcblxudmFyIFRpbWVsaW5lU3RhdGVDb25zdW1lciA9IENvbnN1bWVyO1xuZXhwb3J0cy5UaW1lbGluZVN0YXRlQ29uc3VtZXIgPSBUaW1lbGluZVN0YXRlQ29uc3VtZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2FsZW5kYXIgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9jYWxlbmRhclwiKTtcblxudmFyIF9UaW1lbGluZVN0YXRlQ29udGV4dCA9IHJlcXVpcmUoXCIuLi90aW1lbGluZS9UaW1lbGluZVN0YXRlQ29udGV4dFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyBpZiAoaSAlIDIpIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYXJndW1lbnRzW2ldKSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgcGFzc1Rocm91Z2hQcm9wVHlwZXMgPSB7XG4gIGNhbnZhc1RpbWVTdGFydDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGNhbnZhc1RpbWVFbmQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBjYW52YXNXaWR0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGxpbmVDb3VudDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG1pblVuaXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0aW1lU3RlcHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdC5pc1JlcXVpcmVkLFxuICBoZWlnaHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICB2ZXJ0aWNhbExpbmVDbGFzc05hbWVzRm9yVGltZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuY1xufTtcblxudmFyIENvbHVtbnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbHVtbnMsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbHVtbnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbHVtbnMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDb2x1bW5zKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2x1bW5zLCBbe1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgcmV0dXJuICEobmV4dFByb3BzLmNhbnZhc1RpbWVTdGFydCA9PT0gdGhpcy5wcm9wcy5jYW52YXNUaW1lU3RhcnQgJiYgbmV4dFByb3BzLmNhbnZhc1RpbWVFbmQgPT09IHRoaXMucHJvcHMuY2FudmFzVGltZUVuZCAmJiBuZXh0UHJvcHMuY2FudmFzV2lkdGggPT09IHRoaXMucHJvcHMuY2FudmFzV2lkdGggJiYgbmV4dFByb3BzLmxpbmVDb3VudCA9PT0gdGhpcy5wcm9wcy5saW5lQ291bnQgJiYgbmV4dFByb3BzLm1pblVuaXQgPT09IHRoaXMucHJvcHMubWluVW5pdCAmJiBuZXh0UHJvcHMudGltZVN0ZXBzID09PSB0aGlzLnByb3BzLnRpbWVTdGVwcyAmJiBuZXh0UHJvcHMuaGVpZ2h0ID09PSB0aGlzLnByb3BzLmhlaWdodCAmJiBuZXh0UHJvcHMudmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWUgPT09IHRoaXMucHJvcHMudmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRwcm9wcy5jYW52YXNUaW1lU3RhcnQsXG4gICAgICAgICAgY2FudmFzVGltZUVuZCA9IF90aGlzJHByb3BzLmNhbnZhc1RpbWVFbmQsXG4gICAgICAgICAgY2FudmFzV2lkdGggPSBfdGhpcyRwcm9wcy5jYW52YXNXaWR0aCxcbiAgICAgICAgICBtaW5Vbml0ID0gX3RoaXMkcHJvcHMubWluVW5pdCxcbiAgICAgICAgICB0aW1lU3RlcHMgPSBfdGhpcyRwcm9wcy50aW1lU3RlcHMsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0LFxuICAgICAgICAgIHZlcnRpY2FsTGluZUNsYXNzTmFtZXNGb3JUaW1lID0gX3RoaXMkcHJvcHMudmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWUsXG4gICAgICAgICAgZ2V0TGVmdE9mZnNldEZyb21EYXRlID0gX3RoaXMkcHJvcHMuZ2V0TGVmdE9mZnNldEZyb21EYXRlO1xuICAgICAgdmFyIHJhdGlvID0gY2FudmFzV2lkdGggLyAoY2FudmFzVGltZUVuZCAtIGNhbnZhc1RpbWVTdGFydCk7XG4gICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICgwLCBfY2FsZW5kYXIuaXRlcmF0ZVRpbWVzKShjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIG1pblVuaXQsIHRpbWVTdGVwcywgZnVuY3Rpb24gKHRpbWUsIG5leHRUaW1lKSB7XG4gICAgICAgIHZhciBtaW5Vbml0VmFsdWUgPSB0aW1lLmdldChtaW5Vbml0ID09PSAnZGF5JyA/ICdkYXRlJyA6IG1pblVuaXQpO1xuICAgICAgICB2YXIgZmlyc3RPZlR5cGUgPSBtaW5Vbml0VmFsdWUgPT09IChtaW5Vbml0ID09PSAnZGF5JyA/IDEgOiAwKTtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXNGb3JUaW1lID0gW107XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsTGluZUNsYXNzTmFtZXNGb3JUaW1lKSB7XG4gICAgICAgICAgY2xhc3NOYW1lc0ZvclRpbWUgPSB2ZXJ0aWNhbExpbmVDbGFzc05hbWVzRm9yVGltZSh0aW1lLnVuaXgoKSAqIDEwMDAsIC8vIHR1cm4gaW50byBtcywgd2hpY2ggaXMgd2hhdCB2ZXJ0aWNhbExpbmVDbGFzc05hbWVzRm9yVGltZSBleHBlY3RzXG4gICAgICAgICAgbmV4dFRpbWUudW5peCgpICogMTAwMCAtIDEpO1xuICAgICAgICB9IC8vIFRPRE86IHJlbmFtZSBvciByZW1vdmUgY2xhc3MgdGhhdCBoYXMgcmVmZXJlbmNlIHRvIHZlcnRpY2FsLWxpbmVcblxuXG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gJ3JjdC12bCcgKyAoZmlyc3RPZlR5cGUgPyAnIHJjdC12bC1maXJzdCcgOiAnJykgKyAobWluVW5pdCA9PT0gJ2RheScgfHwgbWluVW5pdCA9PT0gJ2hvdXInIHx8IG1pblVuaXQgPT09ICdtaW51dGUnID8gXCIgcmN0LWRheS1cIi5jb25jYXQodGltZS5kYXkoKSwgXCIgXCIpIDogJyAnKSArIGNsYXNzTmFtZXNGb3JUaW1lLmpvaW4oJyAnKTtcbiAgICAgICAgdmFyIGxlZnQgPSBnZXRMZWZ0T2Zmc2V0RnJvbURhdGUodGltZS52YWx1ZU9mKCkpO1xuICAgICAgICB2YXIgcmlnaHQgPSBnZXRMZWZ0T2Zmc2V0RnJvbURhdGUobmV4dFRpbWUudmFsdWVPZigpKTtcbiAgICAgICAgbGluZXMucHVzaChfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGtleTogXCJsaW5lLVwiLmNvbmNhdCh0aW1lLnZhbHVlT2YoKSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICB0b3A6ICcwcHgnLFxuICAgICAgICAgICAgbGVmdDogXCJcIi5jb25jYXQobGVmdCwgXCJweFwiKSxcbiAgICAgICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdChyaWdodCAtIGxlZnQsIFwicHhcIiksXG4gICAgICAgICAgICBoZWlnaHQ6IFwiXCIuY29uY2F0KGhlaWdodCwgXCJweFwiKVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJjdC12ZXJ0aWNhbC1saW5lc1wiXG4gICAgICB9LCBsaW5lcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbHVtbnM7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoQ29sdW1ucywgXCJwcm9wVHlwZXNcIiwgX29iamVjdFNwcmVhZCh7fSwgcGFzc1Rocm91Z2hQcm9wVHlwZXMsIHtcbiAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWRcbn0pKTtcblxudmFyIENvbHVtbnNXcmFwcGVyID0gZnVuY3Rpb24gQ29sdW1uc1dyYXBwZXIoX3JlZikge1xuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgX3JlZik7XG5cbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfVGltZWxpbmVTdGF0ZUNvbnRleHQuVGltZWxpbmVTdGF0ZUNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgZ2V0TGVmdE9mZnNldEZyb21EYXRlID0gX3JlZjIuZ2V0TGVmdE9mZnNldEZyb21EYXRlO1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoQ29sdW1ucywgX2V4dGVuZHMoe1xuICAgICAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBnZXRMZWZ0T2Zmc2V0RnJvbURhdGVcbiAgICB9LCBwcm9wcykpO1xuICB9KTtcbn07XG5cbkNvbHVtbnNXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IF9vYmplY3RTcHJlYWQoe30sIHBhc3NUaHJvdWdoUHJvcFR5cGVzKTtcbnZhciBfZGVmYXVsdCA9IENvbHVtbnNXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFByZXZlbnRDbGlja09uRHJhZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJldmVudENsaWNrT25EcmFnLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcmV2ZW50Q2xpY2tPbkRyYWcoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJldmVudENsaWNrT25EcmFnKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFByZXZlbnRDbGlja09uRHJhZykpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlRG93blwiLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBfdGhpcy5vcmlnaW5DbGlja1ggPSBldnQuY2xpZW50WDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVNb3VzZVVwXCIsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGlmIChNYXRoLmFicyhfdGhpcy5vcmlnaW5DbGlja1ggLSBldnQuY2xpZW50WCkgPiBfdGhpcy5wcm9wcy5jbGlja1RvbGVyYW5jZSkge1xuICAgICAgICBfdGhpcy5jYW5jZWxDbGljayA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgaWYgKCFfdGhpcy5jYW5jZWxDbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2dCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNhbmNlbENsaWNrID0gZmFsc2U7XG4gICAgICBfdGhpcy5vcmlnaW5DbGlja1ggPSBudWxsO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByZXZlbnRDbGlja09uRHJhZywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjaGlsZEVsZW1lbnQgPSBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudChjaGlsZEVsZW1lbnQsIHtcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW91c2VVcCxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByZXZlbnRDbGlja09uRHJhZztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShQcmV2ZW50Q2xpY2tPbkRyYWcsIFwicHJvcFR5cGVzXCIsIHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgb25DbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBjbGlja1RvbGVyYW5jZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWRcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBQcmV2ZW50Q2xpY2tPbkRyYWc7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1ByZXZlbnRDbGlja09uRHJhZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVyYWN0aW9uL1ByZXZlbnRDbGlja09uRHJhZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBHcm91cFJvdyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoR3JvdXBSb3csIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEdyb3VwUm93KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcm91cFJvdyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEdyb3VwUm93KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhHcm91cFJvdywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25Db250ZXh0TWVudSA9IF90aGlzJHByb3BzLm9uQ29udGV4dE1lbnUsXG4gICAgICAgICAgb25Eb3VibGVDbGljayA9IF90aGlzJHByb3BzLm9uRG91YmxlQ2xpY2ssXG4gICAgICAgICAgaXNFdmVuUm93ID0gX3RoaXMkcHJvcHMuaXNFdmVuUm93LFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgY2xpY2tUb2xlcmFuY2UgPSBfdGhpcyRwcm9wcy5jbGlja1RvbGVyYW5jZSxcbiAgICAgICAgICBob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cCA9IF90aGlzJHByb3BzLmhvcml6b250YWxMaW5lQ2xhc3NOYW1lc0Zvckdyb3VwLFxuICAgICAgICAgIGdyb3VwID0gX3RoaXMkcHJvcHMuZ3JvdXA7XG4gICAgICB2YXIgY2xhc3NOYW1lc0Zvckdyb3VwID0gW107XG5cbiAgICAgIGlmIChob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cCkge1xuICAgICAgICBjbGFzc05hbWVzRm9yR3JvdXAgPSBob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cChncm91cCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1ByZXZlbnRDbGlja09uRHJhZ1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY2xpY2tUb2xlcmFuY2U6IGNsaWNrVG9sZXJhbmNlLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICB9LCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBvbkNvbnRleHRNZW51OiBvbkNvbnRleHRNZW51LFxuICAgICAgICBvbkRvdWJsZUNsaWNrOiBvbkRvdWJsZUNsaWNrLFxuICAgICAgICBjbGFzc05hbWU6IChpc0V2ZW5Sb3cgPyAncmN0LWhsLWV2ZW4gJyA6ICdyY3QtaGwtb2RkICcpICsgKGNsYXNzTmFtZXNGb3JHcm91cCA/IGNsYXNzTmFtZXNGb3JHcm91cC5qb2luKCcgJykgOiAnJyksXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcm91cFJvdztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShHcm91cFJvdywgXCJwcm9wVHlwZXNcIiwge1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Db250ZXh0TWVudTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBpc0V2ZW5Sb3c6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wuaXNSZXF1aXJlZCxcbiAgc3R5bGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjbGlja1RvbGVyYW5jZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGdyb3VwOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QuaXNSZXF1aXJlZCxcbiAgaG9yaXpvbnRhbExpbmVDbGFzc05hbWVzRm9yR3JvdXA6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBHcm91cFJvdztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfR3JvdXBSb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyb3VwUm93XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIEdyb3VwUm93cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoR3JvdXBSb3dzLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBHcm91cFJvd3MoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyb3VwUm93cyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEdyb3VwUm93cykuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoR3JvdXBSb3dzLCBbe1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgcmV0dXJuICEobmV4dFByb3BzLmNhbnZhc1dpZHRoID09PSB0aGlzLnByb3BzLmNhbnZhc1dpZHRoICYmIG5leHRQcm9wcy5saW5lQ291bnQgPT09IHRoaXMucHJvcHMubGluZUNvdW50ICYmIG5leHRQcm9wcy5ncm91cEhlaWdodHMgPT09IHRoaXMucHJvcHMuZ3JvdXBIZWlnaHRzICYmIG5leHRQcm9wcy5ncm91cHMgPT09IHRoaXMucHJvcHMuZ3JvdXBzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2FudmFzV2lkdGggPSBfdGhpcyRwcm9wcy5jYW52YXNXaWR0aCxcbiAgICAgICAgICBsaW5lQ291bnQgPSBfdGhpcyRwcm9wcy5saW5lQ291bnQsXG4gICAgICAgICAgZ3JvdXBIZWlnaHRzID0gX3RoaXMkcHJvcHMuZ3JvdXBIZWlnaHRzLFxuICAgICAgICAgIG9uUm93Q2xpY2sgPSBfdGhpcyRwcm9wcy5vblJvd0NsaWNrLFxuICAgICAgICAgIG9uUm93RG91YmxlQ2xpY2sgPSBfdGhpcyRwcm9wcy5vblJvd0RvdWJsZUNsaWNrLFxuICAgICAgICAgIGNsaWNrVG9sZXJhbmNlID0gX3RoaXMkcHJvcHMuY2xpY2tUb2xlcmFuY2UsXG4gICAgICAgICAgZ3JvdXBzID0gX3RoaXMkcHJvcHMuZ3JvdXBzLFxuICAgICAgICAgIGhvcml6b250YWxMaW5lQ2xhc3NOYW1lc0Zvckdyb3VwID0gX3RoaXMkcHJvcHMuaG9yaXpvbnRhbExpbmVDbGFzc05hbWVzRm9yR3JvdXAsXG4gICAgICAgICAgb25Sb3dDb250ZXh0Q2xpY2sgPSBfdGhpcyRwcm9wcy5vblJvd0NvbnRleHRDbGljaztcbiAgICAgIHZhciBsaW5lcyA9IFtdO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICAgIGxpbmVzLnB1c2goX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9Hcm91cFJvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICBjbGlja1RvbGVyYW5jZTogY2xpY2tUb2xlcmFuY2UsXG4gICAgICAgICAgb25Db250ZXh0TWVudTogZnVuY3Rpb24gb25Db250ZXh0TWVudShldnQpIHtcbiAgICAgICAgICAgIHJldHVybiBvblJvd0NvbnRleHRDbGljayhldnQsIGkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldnQpIHtcbiAgICAgICAgICAgIHJldHVybiBvblJvd0NsaWNrKGV2dCwgaSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkRvdWJsZUNsaWNrOiBmdW5jdGlvbiBvbkRvdWJsZUNsaWNrKGV2dCkge1xuICAgICAgICAgICAgcmV0dXJuIG9uUm93RG91YmxlQ2xpY2soZXZ0LCBpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGtleTogXCJob3Jpem9udGFsLWxpbmUtXCIuY29uY2F0KGkpLFxuICAgICAgICAgIGlzRXZlblJvdzogaSAlIDIgPT09IDAsXG4gICAgICAgICAgZ3JvdXA6IGdyb3Vwc1tpXSxcbiAgICAgICAgICBob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cDogaG9yaXpvbnRhbExpbmVDbGFzc05hbWVzRm9yR3JvdXAsXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdChjYW52YXNXaWR0aCwgXCJweFwiKSxcbiAgICAgICAgICAgIGhlaWdodDogXCJcIi5jb25jYXQoZ3JvdXBIZWlnaHRzW2ldLCBcInB4XCIpXG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVDb3VudDsgaSsrKSB7XG4gICAgICAgIF9sb29wKGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJjdC1ob3Jpem9udGFsLWxpbmVzXCJcbiAgICAgIH0sIGxpbmVzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JvdXBSb3dzO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBHcm91cFJvd3M7XG5cbl9kZWZpbmVQcm9wZXJ0eShHcm91cFJvd3MsIFwicHJvcFR5cGVzXCIsIHtcbiAgY2FudmFzV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBsaW5lQ291bnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBncm91cEhlaWdodHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5LmlzUmVxdWlyZWQsXG4gIG9uUm93Q2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Sb3dEb3VibGVDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBjbGlja1RvbGVyYW5jZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGdyb3VwczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYXJyYXkuaXNSZXF1aXJlZCxcbiAgaG9yaXpvbnRhbExpbmVDbGFzc05hbWVzRm9yR3JvdXA6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uUm93Q29udGV4dENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2RvbUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9kb20taGVscGVyc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFNjcm9sbEVsZW1lbnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNjcm9sbEVsZW1lbnQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbEVsZW1lbnQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbEVsZW1lbnQpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2Nyb2xsRWxlbWVudCkuY2FsbCh0aGlzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlU2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzY3JvbGxYID0gX3RoaXMuc2Nyb2xsQ29tcG9uZW50LnNjcm9sbExlZnQ7XG5cbiAgICAgIF90aGlzLnByb3BzLm9uU2Nyb2xsKHNjcm9sbFgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZkhhbmRsZXJcIiwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBfdGhpcy5zY3JvbGxDb21wb25lbnQgPSBlbDtcblxuICAgICAgX3RoaXMucHJvcHMuc2Nyb2xsUmVmKGVsKTtcblxuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgX3RoaXMuaGFuZGxlV2hlZWwsIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVXaGVlbFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHRyYWRpdGlvbmFsWm9vbSA9IF90aGlzLnByb3BzLnRyYWRpdGlvbmFsWm9vbTsgLy8gem9vbSBpbiB0aGUgdGltZSBkaW1lbnNpb25cblxuICAgICAgaWYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5hbHRLZXkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgcGFyZW50UG9zaXRpb24gPSAoMCwgX2RvbUhlbHBlcnMuZ2V0UGFyZW50UG9zaXRpb24pKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgIHZhciB4UG9zaXRpb24gPSBlLmNsaWVudFggLSBwYXJlbnRQb3NpdGlvbi54O1xuICAgICAgICB2YXIgc3BlZWQgPSBlLmN0cmxLZXkgPyAxMCA6IGUubWV0YUtleSA/IDMgOiAxOyAvLyBjb252ZXJ0IHZlcnRpY2FsIHpvb20gdG8gaG9yaXppb250YWxcblxuICAgICAgICBfdGhpcy5wcm9wcy5vbldoZWVsWm9vbShzcGVlZCwgeFBvc2l0aW9uLCBlLmRlbHRhWSk7XG4gICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBzaGlmdCtzY3JvbGwgZXZlbnQgZnJvbSBhIHRvdWNocGFkIGhhcyBkZWx0YVkgcHJvcGVydHkgcG9wdWxhdGVkOyBzaGlmdCtzY3JvbGwgZXZlbnQgZnJvbSBhIG1vdXNlIGhhcyBkZWx0YVhcblxuICAgICAgICBfdGhpcy5wcm9wcy5vblNjcm9sbChfdGhpcy5zY3JvbGxDb21wb25lbnQuc2Nyb2xsTGVmdCArIChlLmRlbHRhWSB8fCBlLmRlbHRhWCkpOyAvLyBubyBtb2RpZmllciBwcmVzc2VkPyB3ZSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgZXZlbnQsIHNvIHNjcm9sbCBvciB6b29tIGFzIG5lZWRlZFxuXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VEb3duXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5idXR0b24gPT09IDApIHtcbiAgICAgICAgX3RoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gPSBlLnBhZ2VYO1xuICAgICAgICBfdGhpcy5kcmFnTGFzdFBvc2l0aW9uID0gZS5wYWdlWDtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNEcmFnZ2luZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVNb3VzZU1vdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIHRoaXMucHJvcHMub25Nb3VzZU1vdmUoZSlcbiAgICAgIC8vd2h5IGlzIGludGVyYWN0aW5nIHdpdGggaXRlbSBpbXBvcnRhbnQ/XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuaXNEcmFnZ2luZyAmJiAhX3RoaXMucHJvcHMuaXNJbnRlcmFjdGluZ1dpdGhJdGVtKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uU2Nyb2xsKF90aGlzLnNjcm9sbENvbXBvbmVudC5zY3JvbGxMZWZ0ICsgX3RoaXMuZHJhZ0xhc3RQb3NpdGlvbiAtIGUucGFnZVgpO1xuXG4gICAgICAgIF90aGlzLmRyYWdMYXN0UG9zaXRpb24gPSBlLnBhZ2VYO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlVXBcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gPSBudWxsO1xuICAgICAgX3RoaXMuZHJhZ0xhc3RQb3NpdGlvbiA9IG51bGw7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNEcmFnZ2luZzogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlTGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoZSlcbiAgICAgIF90aGlzLmRyYWdTdGFydFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIF90aGlzLmRyYWdMYXN0UG9zaXRpb24gPSBudWxsO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUb3VjaFN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLmxhc3RUb3VjaERpc3RhbmNlID0gTWF0aC5hYnMoZS50b3VjaGVzWzBdLnNjcmVlblggLSBlLnRvdWNoZXNbMV0uc2NyZWVuWCk7XG4gICAgICAgIF90aGlzLnNpbmdsZVRvdWNoU3RhcnQgPSBudWxsO1xuICAgICAgICBfdGhpcy5sYXN0U2luZ2xlVG91Y2ggPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChlLnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHggPSBlLnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgdmFyIHkgPSBlLnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgX3RoaXMubGFzdFRvdWNoRGlzdGFuY2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5zaW5nbGVUb3VjaFN0YXJ0ID0ge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICBzY3JlZW5ZOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubGFzdFNpbmdsZVRvdWNoID0ge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeSxcbiAgICAgICAgICBzY3JlZW5ZOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUb3VjaE1vdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGlzSW50ZXJhY3RpbmdXaXRoSXRlbSA9IF90aGlzJHByb3BzLmlzSW50ZXJhY3RpbmdXaXRoSXRlbSxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzLndpZHRoLFxuICAgICAgICAgIG9uWm9vbSA9IF90aGlzJHByb3BzLm9uWm9vbTtcblxuICAgICAgaWYgKGlzSW50ZXJhY3RpbmdXaXRoSXRlbSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmxhc3RUb3VjaERpc3RhbmNlICYmIGUudG91Y2hlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgdG91Y2hEaXN0YW5jZSA9IE1hdGguYWJzKGUudG91Y2hlc1swXS5zY3JlZW5YIC0gZS50b3VjaGVzWzFdLnNjcmVlblgpO1xuICAgICAgICB2YXIgcGFyZW50UG9zaXRpb24gPSAoMCwgX2RvbUhlbHBlcnMuZ2V0UGFyZW50UG9zaXRpb24pKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgIHZhciB4UG9zaXRpb24gPSAoZS50b3VjaGVzWzBdLnNjcmVlblggKyBlLnRvdWNoZXNbMV0uc2NyZWVuWCkgLyAyIC0gcGFyZW50UG9zaXRpb24ueDtcblxuICAgICAgICBpZiAodG91Y2hEaXN0YW5jZSAhPT0gMCAmJiBfdGhpcy5sYXN0VG91Y2hEaXN0YW5jZSAhPT0gMCkge1xuICAgICAgICAgIG9uWm9vbShfdGhpcy5sYXN0VG91Y2hEaXN0YW5jZSAvIHRvdWNoRGlzdGFuY2UsIHhQb3NpdGlvbiAvIHdpZHRoKTtcbiAgICAgICAgICBfdGhpcy5sYXN0VG91Y2hEaXN0YW5jZSA9IHRvdWNoRGlzdGFuY2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMubGFzdFNpbmdsZVRvdWNoICYmIGUudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICB2YXIgeSA9IGUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICB2YXIgZGVsdGFYID0geCAtIF90aGlzLmxhc3RTaW5nbGVUb3VjaC54O1xuICAgICAgICB2YXIgZGVsdGFYMCA9IHggLSBfdGhpcy5zaW5nbGVUb3VjaFN0YXJ0Lng7XG4gICAgICAgIHZhciBkZWx0YVkwID0geSAtIF90aGlzLnNpbmdsZVRvdWNoU3RhcnQueTtcbiAgICAgICAgX3RoaXMubGFzdFNpbmdsZVRvdWNoID0ge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbW92ZVggPSBNYXRoLmFicyhkZWx0YVgwKSAqIDMgPiBNYXRoLmFicyhkZWx0YVkwKTtcbiAgICAgICAgdmFyIG1vdmVZID0gTWF0aC5hYnMoZGVsdGFZMCkgKiAzID4gTWF0aC5hYnMoZGVsdGFYMCk7XG5cbiAgICAgICAgaWYgKGRlbHRhWCAhPT0gMCAmJiBtb3ZlWCkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uU2Nyb2xsKF90aGlzLnNjcm9sbENvbXBvbmVudC5zY3JvbGxMZWZ0IC0gZGVsdGFYKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3ZlWSkge1xuICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh3aW5kb3cucGFnZVhPZmZzZXQsIF90aGlzLnNpbmdsZVRvdWNoU3RhcnQuc2NyZWVuWSAtIGRlbHRhWTApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlVG91Y2hFbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmxhc3RUb3VjaERpc3RhbmNlKSB7XG4gICAgICAgIF90aGlzLmxhc3RUb3VjaERpc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmxhc3RTaW5nbGVUb3VjaCkge1xuICAgICAgICBfdGhpcy5sYXN0U2luZ2xlVG91Y2ggPSBudWxsO1xuICAgICAgICBfdGhpcy5zaW5nbGVUb3VjaFN0YXJ0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNEcmFnZ2luZzogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogbmVlZGVkIHRvIGhhbmRsZSBzY3JvbGxpbmcgd2l0aCB0cmFja3BhZFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxFbGVtZW50LCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnNjcm9sbENvbXBvbmVudCkge1xuICAgICAgICB0aGlzLnNjcm9sbENvbXBvbmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlV2hlZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczIud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMyLmhlaWdodCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbjtcbiAgICAgIHZhciBpc0RyYWdnaW5nID0gdGhpcy5zdGF0ZS5pc0RyYWdnaW5nO1xuICAgICAgdmFyIHNjcm9sbENvbXBvbmVudFN0eWxlID0ge1xuICAgICAgICB3aWR0aDogXCJcIi5jb25jYXQod2lkdGgsIFwicHhcIiksXG4gICAgICAgIGhlaWdodDogXCJcIi5jb25jYXQoaGVpZ2h0ICsgMjAsIFwicHhcIiksXG4gICAgICAgIC8vMjBweCB0byBwdXNoIHRoZSBzY3JvbGwgZWxlbWVudCBkb3duIG9mZiBzY3JlZW4uLi4/XG4gICAgICAgIGN1cnNvcjogaXNEcmFnZ2luZyA/ICdtb3ZlJyA6ICdkZWZhdWx0JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgcmVmOiB0aGlzLnJlZkhhbmRsZXIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJyY3Qtc2Nyb2xsXCIsXG4gICAgICAgIHN0eWxlOiBzY3JvbGxDb21wb25lbnRTdHlsZSxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlTW92ZTogdGhpcy5oYW5kbGVNb3VzZU1vdmUsXG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVNb3VzZVVwLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcbiAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCxcbiAgICAgICAgb25TY3JvbGw6IHRoaXMuaGFuZGxlU2Nyb2xsXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbEVsZW1lbnQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2Nyb2xsRWxlbWVudCwgXCJwcm9wVHlwZXNcIiwge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZWxlbWVudC5pc1JlcXVpcmVkLFxuICB3aWR0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGhlaWdodDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHRyYWRpdGlvbmFsWm9vbTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbC5pc1JlcXVpcmVkLFxuICBzY3JvbGxSZWY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNJbnRlcmFjdGluZ1dpdGhJdGVtOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLmlzUmVxdWlyZWQsXG4gIG9uWm9vbTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBvbldoZWVsWm9vbTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBvblNjcm9sbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkXG59KTtcblxudmFyIF9kZWZhdWx0ID0gU2Nyb2xsRWxlbWVudDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1hcmtlckNhbnZhc0NvbnN1bWVyID0gZXhwb3J0cy5NYXJrZXJDYW52YXNQcm92aWRlciA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVSZWFjdENvbnRleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY3JlYXRlLXJlYWN0LWNvbnRleHRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIGRlZmF1bHRDb250ZXh0U3RhdGUgPSB7XG4gIHN1YnNjcmliZVRvTW91c2VPdmVyOiBmdW5jdGlvbiBzdWJzY3JpYmVUb01vdXNlT3ZlcigpIHtcbiAgICBjb25zb2xlLndhcm4oJ1wic3Vic2NyaWJlVG9Nb3VzZU92ZXJcIiBkZWZhdWx0IGZ1bmMgaXMgYmVpbmcgdXNlZCcpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxufTtcblxudmFyIF9jcmVhdGVSZWFjdENvbnRleHQgPSAoMCwgX2NyZWF0ZVJlYWN0Q29udGV4dDJbXCJkZWZhdWx0XCJdKShkZWZhdWx0Q29udGV4dFN0YXRlKSxcbiAgICBDb25zdW1lciA9IF9jcmVhdGVSZWFjdENvbnRleHQuQ29uc3VtZXIsXG4gICAgUHJvdmlkZXIgPSBfY3JlYXRlUmVhY3RDb250ZXh0LlByb3ZpZGVyO1xuXG52YXIgTWFya2VyQ2FudmFzUHJvdmlkZXIgPSBQcm92aWRlcjtcbmV4cG9ydHMuTWFya2VyQ2FudmFzUHJvdmlkZXIgPSBNYXJrZXJDYW52YXNQcm92aWRlcjtcbnZhciBNYXJrZXJDYW52YXNDb25zdW1lciA9IENvbnN1bWVyO1xuZXhwb3J0cy5NYXJrZXJDYW52YXNDb25zdW1lciA9IE1hcmtlckNhbnZhc0NvbnN1bWVyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UaW1lbGluZU1hcmtlcnNDb25zdW1lciA9IGV4cG9ydHMuVGltZWxpbmVNYXJrZXJzUHJvdmlkZXIgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY3JlYXRlUmVhY3RDb250ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNyZWF0ZS1yZWFjdC1jb250ZXh0XCIpKTtcblxudmFyIF9nZW5lcmljID0gcmVxdWlyZShcIi4uL3V0aWxpdHkvZ2VuZXJpY1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IGlmIChpICUgMikgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhhcmd1bWVudHNbaV0pKTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBkZWZhdWx0Q29udGV4dFN0YXRlID0ge1xuICBtYXJrZXJzOiBbXSxcbiAgc3Vic2NyaWJlTWFya2VyOiBmdW5jdGlvbiBzdWJzY3JpYmVNYXJrZXIoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgY29uc29sZS53YXJuKCdkZWZhdWx0IHN1YnNjcmliZSBtYXJrZXIgdXNlZCcpO1xuICAgIHJldHVybiBfZ2VuZXJpYy5ub29wO1xuICB9XG59O1xuXG52YXIgX2NyZWF0ZVJlYWN0Q29udGV4dCA9ICgwLCBfY3JlYXRlUmVhY3RDb250ZXh0MltcImRlZmF1bHRcIl0pKGRlZmF1bHRDb250ZXh0U3RhdGUpLFxuICAgIENvbnN1bWVyID0gX2NyZWF0ZVJlYWN0Q29udGV4dC5Db25zdW1lcixcbiAgICBQcm92aWRlciA9IF9jcmVhdGVSZWFjdENvbnRleHQuUHJvdmlkZXI7IC8vIFJFVklFVzogaXMgdGhpcyB0aGUgYmVzdCB3YXkgdG8gbWFuYWdlIGlkcz9cblxuXG52YXIgX2lkID0gMDtcblxudmFyIGNyZWF0ZUlkID0gZnVuY3Rpb24gY3JlYXRlSWQoKSB7XG4gIF9pZCArPSAxO1xuICByZXR1cm4gX2lkICsgMTtcbn07XG5cbnZhciBUaW1lbGluZU1hcmtlcnNQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGltZWxpbmVNYXJrZXJzUHJvdmlkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRpbWVsaW5lTWFya2Vyc1Byb3ZpZGVyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVsaW5lTWFya2Vyc1Byb3ZpZGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFRpbWVsaW5lTWFya2Vyc1Byb3ZpZGVyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlU3Vic2NyaWJlVG9NYXJrZXJcIiwgZnVuY3Rpb24gKG5ld01hcmtlcikge1xuICAgICAgbmV3TWFya2VyID0gX29iamVjdFNwcmVhZCh7fSwgbmV3TWFya2VyLCB7XG4gICAgICAgIC8vIFJFVklFVzogaW4gdGhlIGV2ZW50IHRoYXQgd2UgYWNjZXB0IGlkIHRvIGJlIHBhc3NlZCB0byB0aGUgTWFya2VyIGNvbXBvbmVudHMsIHRoaXMgbGluZSB3b3VsZCBvdmVycmlkZSB0aG9zZVxuICAgICAgICBpZDogY3JlYXRlSWQoKVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hcmtlcnM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3RhdGUubWFya2VycyksIFtuZXdNYXJrZXJdKVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG1hcmtlcnM6IHN0YXRlLm1hcmtlcnMuZmlsdGVyKGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyLmlkICE9PSBuZXdNYXJrZXIuaWQ7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXRNYXJrZXI6IGZ1bmN0aW9uIGdldE1hcmtlcigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3TWFya2VyO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVVwZGF0ZU1hcmtlclwiLCBmdW5jdGlvbiAodXBkYXRlTWFya2VyKSB7XG4gICAgICB2YXIgbWFya2VySW5kZXggPSBfdGhpcy5zdGF0ZS5tYXJrZXJzLmZpbmRJbmRleChmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgIHJldHVybiBtYXJrZXIuaWQgPT09IHVwZGF0ZU1hcmtlci5pZDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobWFya2VySW5kZXggPCAwKSByZXR1cm47XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hcmtlcnM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3RhdGUubWFya2Vycy5zbGljZSgwLCBtYXJrZXJJbmRleCkpLCBbdXBkYXRlTWFya2VyXSwgX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLm1hcmtlcnMuc2xpY2UobWFya2VySW5kZXggKyAxKSkpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBtYXJrZXJzOiBbXSxcbiAgICAgIHN1YnNjcmliZU1hcmtlcjogX3RoaXMuaGFuZGxlU3Vic2NyaWJlVG9NYXJrZXIsXG4gICAgICB1cGRhdGVNYXJrZXI6IF90aGlzLmhhbmRsZVVwZGF0ZU1hcmtlclxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRpbWVsaW5lTWFya2Vyc1Byb3ZpZGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChQcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZVxuICAgICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVsaW5lTWFya2Vyc1Byb3ZpZGVyO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuVGltZWxpbmVNYXJrZXJzUHJvdmlkZXIgPSBUaW1lbGluZU1hcmtlcnNQcm92aWRlcjtcblxuX2RlZmluZVByb3BlcnR5KFRpbWVsaW5lTWFya2Vyc1Byb3ZpZGVyLCBcInByb3BUeXBlc1wiLCB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5lbGVtZW50LmlzUmVxdWlyZWRcbn0pO1xuXG52YXIgVGltZWxpbmVNYXJrZXJzQ29uc3VtZXIgPSBDb25zdW1lcjtcbmV4cG9ydHMuVGltZWxpbmVNYXJrZXJzQ29uc3VtZXIgPSBUaW1lbGluZU1hcmtlcnNDb25zdW1lcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVGltZWxpbmVNYXJrZXJUeXBlID0gdm9pZCAwO1xudmFyIFRpbWVsaW5lTWFya2VyVHlwZSA9IHtcbiAgVG9kYXk6ICdUb2RheScsXG4gIEN1c3RvbTogJ0N1c3RvbScsXG4gIEN1cnNvcjogJ0N1cnNvcidcbn07XG5leHBvcnRzLlRpbWVsaW5lTWFya2VyVHlwZSA9IFRpbWVsaW5lTWFya2VyVHlwZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdFJlbmRlcmVyID0gZXhwb3J0cy5jcmVhdGVNYXJrZXJTdHlsZXNXaXRoTGVmdE9mZnNldCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IGlmIChpICUgMikgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhhcmd1bWVudHNbaV0pKTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBCYXNlbGluZSBzdHlsZXMgdG8gZ2V0IHRoZSBtYXJrZXIgdG8gcmVuZGVyIGNvcnJlY3RseVxuICovXG52YXIgY3JpdGljYWxTdHlsZXMgPSB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGJvdHRvbTogMCxcbiAgd2lkdGg6ICcycHgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycsXG4gIC8vIGJ5IGRlZmF1bHQsIHBvaW50ZXIgZXZlbnRzIChzcGVjaWZpY2FsbHkgY2xpY2spIHdpbGxcbiAgLy8gXCJwYXNzIHRocm91Z2hcIi4gIFRoaXMgaXMgYWRkZWQgc28gdGhhdCBDdXJzb3JNYXJrZXJcbiAgLy8gd2lsbCBub3QgZ2V0IGluIHRoZSB3YXkgb2YgY2FudmFzIGNsaWNrXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBGSVhNRTogdGhpcyBjcmVhdGVzIGEgbmV3IG9iamVjdCBlYWNoIHRpbWUgaW4gcmVuZGVyXG4gIC8vIG1pZ2h0IHdhbnQgdG8gbWVtb2l6ZSB0aGlzP1xuXG59O1xuXG52YXIgY3JlYXRlTWFya2VyU3R5bGVzV2l0aExlZnRPZmZzZXQgPSBmdW5jdGlvbiBjcmVhdGVNYXJrZXJTdHlsZXNXaXRoTGVmdE9mZnNldChsZWZ0T2Zmc2V0KSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBjcml0aWNhbFN0eWxlcywge1xuICAgIGxlZnQ6IGxlZnRPZmZzZXRcbiAgfSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZU1hcmtlclN0eWxlc1dpdGhMZWZ0T2Zmc2V0ID0gY3JlYXRlTWFya2VyU3R5bGVzV2l0aExlZnRPZmZzZXQ7XG5cbnZhciBjcmVhdGVEZWZhdWx0UmVuZGVyZXIgPSBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0UmVuZGVyZXIoZGF0YVRlc3RpZFZhbHVlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICByZXR1cm4gZnVuY3Rpb24gRGVmYXVsdE1hcmtlclJlbmRlcmVyKF9yZWYpIHtcbiAgICB2YXIgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBzdHlsZTogc3R5bGVzXG4gICAgfSk7XG4gIH07XG59O1xuXG5leHBvcnRzLmNyZWF0ZURlZmF1bHRSZW5kZXJlciA9IGNyZWF0ZURlZmF1bHRSZW5kZXJlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3NoYXJlZCA9IHJlcXVpcmUoXCIuL3NoYXJlZFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmYXVsdFJlbmRlcmVyID0gKDAsIF9zaGFyZWQuY3JlYXRlRGVmYXVsdFJlbmRlcmVyKSgnZGVmYXVsdC10b2RheS1saW5lJyk7XG4vKiogTWFya2VyIHRoYXQgaXMgcGxhY2VkIGJhc2VkIG9uIGN1cnJlbnQgZGF0ZS4gIFRoaXMgY29tcG9uZW50IHVwZGF0ZXMgaXRzZWxmIG9uXG4gKiBhIHNldCBpbnRlcnZhbCwgZGljdGF0ZWQgYnkgdGhlICdpbnRlcnZhbCcgcHJvcC5cbiAqL1xuXG52YXIgVG9kYXlNYXJrZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRvZGF5TWFya2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb2RheU1hcmtlcigpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb2RheU1hcmtlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUb2RheU1hcmtlcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGRhdGU6IERhdGUubm93KClcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUb2RheU1hcmtlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmludGVydmFsVG9rZW4gPSB0aGlzLmNyZWF0ZUludGVydmFsVXBkYXRlcih0aGlzLnByb3BzLmludGVydmFsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChwcmV2UHJvcHMuaW50ZXJ2YWwgIT09IHRoaXMucHJvcHMuaW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsVG9rZW4pO1xuICAgICAgICB0aGlzLmludGVydmFsVG9rZW4gPSB0aGlzLmNyZWF0ZUludGVydmFsVXBkYXRlcih0aGlzLnByb3BzLmludGVydmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlSW50ZXJ2YWxVcGRhdGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUludGVydmFsVXBkYXRlcihpbnRlcnZhbCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0ZTogRGF0ZS5ub3coKSAvLyBGSVhNRTogdXNlIGRhdGUgdXRpbHMgcGFzcyBpbiBhcyBwcm9wc1xuXG4gICAgICAgIH0pO1xuICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbFRva2VuKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBkYXRlID0gdGhpcy5zdGF0ZS5kYXRlO1xuICAgICAgdmFyIGxlZnRPZmZzZXQgPSB0aGlzLnByb3BzLmdldExlZnRPZmZzZXRGcm9tRGF0ZShkYXRlKTtcbiAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3NoYXJlZC5jcmVhdGVNYXJrZXJTdHlsZXNXaXRoTGVmdE9mZnNldCkobGVmdE9mZnNldCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5yZW5kZXJlcih7XG4gICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICBkYXRlOiBkYXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG9kYXlNYXJrZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFRvZGF5TWFya2VyLCBcInByb3BUeXBlc1wiLCB7XG4gIGdldExlZnRPZmZzZXRGcm9tRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICByZW5kZXJlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaW50ZXJ2YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFRvZGF5TWFya2VyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIHJlbmRlcmVyOiBkZWZhdWx0UmVuZGVyZXJcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBUb2RheU1hcmtlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9zaGFyZWQgPSByZXF1aXJlKFwiLi9zaGFyZWRcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGRlZmF1bHRDdXN0b21NYXJrZXJSZW5kZXJlciA9ICgwLCBfc2hhcmVkLmNyZWF0ZURlZmF1bHRSZW5kZXJlcikoJ2RlZmF1bHQtY3VzdG9tZXItbWFya2VyLWlkJyk7XG4vKipcbiAqIEN1c3RvbU1hcmtlciB0aGF0IGlzIHBsYWNlZCBiYXNlZCBvbiBwYXNzZWQgaW4gZGF0ZSBwcm9wXG4gKi9cblxudmFyIEN1c3RvbU1hcmtlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ3VzdG9tTWFya2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDdXN0b21NYXJrZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEN1c3RvbU1hcmtlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEN1c3RvbU1hcmtlcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ3VzdG9tTWFya2VyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRhdGUgPSB0aGlzLnByb3BzLmRhdGU7XG4gICAgICB2YXIgbGVmdE9mZnNldCA9IHRoaXMucHJvcHMuZ2V0TGVmdE9mZnNldEZyb21EYXRlKGRhdGUpO1xuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfc2hhcmVkLmNyZWF0ZU1hcmtlclN0eWxlc1dpdGhMZWZ0T2Zmc2V0KShsZWZ0T2Zmc2V0KTtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnJlbmRlcmVyKHtcbiAgICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICAgIGRhdGU6IGRhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDdXN0b21NYXJrZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KEN1c3RvbU1hcmtlciwgXCJwcm9wVHlwZXNcIiwge1xuICBnZXRMZWZ0T2Zmc2V0RnJvbURhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGRhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkXG59KTtcblxuX2RlZmluZVByb3BlcnR5KEN1c3RvbU1hcmtlciwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICByZW5kZXJlcjogZGVmYXVsdEN1c3RvbU1hcmtlclJlbmRlcmVyXG59KTtcblxudmFyIF9kZWZhdWx0ID0gQ3VzdG9tTWFya2VyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3NoYXJlZCA9IHJlcXVpcmUoXCIuL3NoYXJlZFwiKTtcblxudmFyIF9NYXJrZXJDYW52YXNDb250ZXh0ID0gcmVxdWlyZShcIi4uL01hcmtlckNhbnZhc0NvbnRleHRcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmYXVsdFJlbmRlcmVyID0gKDAsIF9zaGFyZWQuY3JlYXRlRGVmYXVsdFJlbmRlcmVyKSgnZGVmYXVsdC1jdXJzb3ItbWFya2VyJyk7XG4vKipcbiAqIEN1cnNvck1hcmtlciBpbXBsZW1lbnRhdGlvbiBzdWJzY3JpYmVzIHRvICdzdWJzY3JpYmVUb0NhbnZhc01vdXNlT3Zlcicgb24gbW91bnQuXG4gKiBUaGlzIHN1YnNjcmlwdGlvbiBpcyBwYXNzZWQgaW4gdmlhIE1hcmtlckNhbnZhc0NvbnN1bWVyLCB3aGljaCBpcyB3aXJlZCB1cCB0b1xuICogTWFya2VyQ2FudmFzUHJvdmlkZXIgaW4gdGhlIE1hcmtlckNhbnZhcyBjb21wb25lbnQuIFdoZW4gdGhlIHVzZXIgbW91c2VzIG92ZXIgTWFya2VyQ2FudmFzLFxuICogdGhlIGNhbGxiYWNrIHJlZ2lzdGVyZWQgaW4gQ3Vyc29yTWFya2VyICh0aGlzIGNvbXBvbmVudCkgaXMgcGFzc2VkOlxuICogIGxlZnRPZmZzZXQgLSBwaXhlbHMgZnJvbSBsZWZ0IGVkZ2Ugb2YgY2FudmFzLCB1c2VkIHRvIHBvc2l0aW9uIHRoaXMgZWxlbWVudFxuICogIGRhdGUgLSB0aGUgZGF0ZSB0aGUgY3Vyc29yIHBlcnRhaW5zIHRvXG4gKiAgaXNDdXJzb3JPdmVyQ2FudmFzIC0gd2hldGhlciB0aGUgdXNlciBjdXJzb3IgaXMgb3ZlciB0aGUgY2FudmFzLiBUaGlzIGlzIHNldCB0byAnZmFsc2UnXG4gKiAgd2hlbiB0aGUgdXNlciBtb3VzZWxlYXZlcyB0aGUgZWxlbWVudFxuICovXG5cbnZhciBDdXJzb3JNYXJrZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEN1cnNvck1hcmtlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yTWFya2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDdXJzb3JNYXJrZXIpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ3Vyc29yTWFya2VyKS5jYWxsKHRoaXMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDYW52YXNNb3VzZU92ZXJcIiwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBsZWZ0T2Zmc2V0ID0gX3JlZi5sZWZ0T2Zmc2V0LFxuICAgICAgICAgIGRhdGUgPSBfcmVmLmRhdGUsXG4gICAgICAgICAgaXNDdXJzb3JPdmVyQ2FudmFzID0gX3JlZi5pc0N1cnNvck92ZXJDYW52YXM7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbGVmdE9mZnNldDogbGVmdE9mZnNldCxcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgaXNTaG93aW5nQ3Vyc29yOiBpc0N1cnNvck92ZXJDYW52YXNcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsZWZ0T2Zmc2V0OiAwLFxuICAgICAgZGF0ZTogMCxcbiAgICAgIGlzU2hvd2luZ0N1cnNvcjogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDdXJzb3JNYXJrZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucHJvcHMuc3Vic2NyaWJlVG9DYW52YXNNb3VzZU92ZXIodGhpcy5oYW5kbGVDYW52YXNNb3VzZU92ZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTaG93aW5nQ3Vyc29yID0gX3RoaXMkc3RhdGUuaXNTaG93aW5nQ3Vyc29yLFxuICAgICAgICAgIGxlZnRPZmZzZXQgPSBfdGhpcyRzdGF0ZS5sZWZ0T2Zmc2V0LFxuICAgICAgICAgIGRhdGUgPSBfdGhpcyRzdGF0ZS5kYXRlO1xuICAgICAgaWYgKCFpc1Nob3dpbmdDdXJzb3IpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfc2hhcmVkLmNyZWF0ZU1hcmtlclN0eWxlc1dpdGhMZWZ0T2Zmc2V0KShsZWZ0T2Zmc2V0KTtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnJlbmRlcmVyKHtcbiAgICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICAgIGRhdGU6IGRhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDdXJzb3JNYXJrZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTsgLy8gVE9ETzogdHVybiBpbnRvIEhPQz9cblxuXG5fZGVmaW5lUHJvcGVydHkoQ3Vyc29yTWFya2VyLCBcInByb3BUeXBlc1wiLCB7XG4gIHN1YnNjcmliZVRvQ2FudmFzTW91c2VPdmVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHJlbmRlcmVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXG59KTtcblxuX2RlZmluZVByb3BlcnR5KEN1cnNvck1hcmtlciwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICByZW5kZXJlcjogZGVmYXVsdFJlbmRlcmVyXG59KTtcblxudmFyIEN1cnNvck1hcmtlcldyYXBwZXIgPSBmdW5jdGlvbiBDdXJzb3JNYXJrZXJXcmFwcGVyKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX01hcmtlckNhbnZhc0NvbnRleHQuTWFya2VyQ2FudmFzQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBzdWJzY3JpYmVUb01vdXNlT3ZlciA9IF9yZWYyLnN1YnNjcmliZVRvTW91c2VPdmVyO1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoQ3Vyc29yTWFya2VyLCBfZXh0ZW5kcyh7XG4gICAgICBzdWJzY3JpYmVUb0NhbnZhc01vdXNlT3Zlcjogc3Vic2NyaWJlVG9Nb3VzZU92ZXJcbiAgICB9LCBwcm9wcykpO1xuICB9KTtcbn07XG5cbkN1cnNvck1hcmtlcldyYXBwZXIuZGlzcGxheU5hbWUgPSAnQ3Vyc29yTWFya2VyV3JhcHBlcic7XG52YXIgX2RlZmF1bHQgPSBDdXJzb3JNYXJrZXJXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQgPSByZXF1aXJlKFwiLi9UaW1lbGluZU1hcmtlcnNDb250ZXh0XCIpO1xuXG52YXIgX21hcmtlclR5cGUgPSByZXF1aXJlKFwiLi9tYXJrZXJUeXBlXCIpO1xuXG52YXIgX1RvZGF5TWFya2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbXBsZW1lbnRhdGlvbnMvVG9kYXlNYXJrZXJcIikpO1xuXG52YXIgX0N1c3RvbU1hcmtlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW1wbGVtZW50YXRpb25zL0N1c3RvbU1hcmtlclwiKSk7XG5cbnZhciBfVGltZWxpbmVTdGF0ZUNvbnRleHQgPSByZXF1aXJlKFwiLi4vdGltZWxpbmUvVGltZWxpbmVTdGF0ZUNvbnRleHRcIik7XG5cbnZhciBfQ3Vyc29yTWFya2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbXBsZW1lbnRhdGlvbnMvQ3Vyc29yTWFya2VyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbi8qKiBJbnRlcm5hbCBjb21wb25lbnQgdXNlZCBpbiB0aW1lbGluZSB0byByZW5kZXIgbWFya2VycyByZWdpc3RlcmVkICovXG52YXIgVGltZWxpbmVNYXJrZXJzUmVuZGVyZXIgPSBmdW5jdGlvbiBUaW1lbGluZU1hcmtlcnNSZW5kZXJlcigpIHtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfVGltZWxpbmVTdGF0ZUNvbnRleHQuVGltZWxpbmVTdGF0ZUNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBnZXRMZWZ0T2Zmc2V0RnJvbURhdGUgPSBfcmVmLmdldExlZnRPZmZzZXRGcm9tRGF0ZSxcbiAgICAgICAgZ2V0VGltZWxpbmVTdGF0ZSA9IF9yZWYuZ2V0VGltZWxpbmVTdGF0ZTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9UaW1lbGluZU1hcmtlcnNDb250ZXh0LlRpbWVsaW5lTWFya2Vyc0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciBtYXJrZXJzID0gX3JlZjIubWFya2VycztcbiAgICAgIHZhciB0aW1lbGluZVN0YXRlID0gZ2V0VGltZWxpbmVTdGF0ZSgpO1xuICAgICAgcmV0dXJuIG1hcmtlcnMubWFwKGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgc3dpdGNoIChtYXJrZXIudHlwZSkge1xuICAgICAgICAgIGNhc2UgX21hcmtlclR5cGUuVGltZWxpbmVNYXJrZXJUeXBlLlRvZGF5OlxuICAgICAgICAgICAgaWYgKCEobmV3IERhdGUoKS52YWx1ZU9mKCkgPj0gdGltZWxpbmVTdGF0ZS5jYW52YXNUaW1lU3RhcnQgJiYgbmV3IERhdGUoKS52YWx1ZU9mKCkgPD0gdGltZWxpbmVTdGF0ZS5jYW52YXNUaW1lRW5kKSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9Ub2RheU1hcmtlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICAgICAga2V5OiBtYXJrZXIuaWQsXG4gICAgICAgICAgICAgIGdldExlZnRPZmZzZXRGcm9tRGF0ZTogZ2V0TGVmdE9mZnNldEZyb21EYXRlLFxuICAgICAgICAgICAgICByZW5kZXJlcjogbWFya2VyLnJlbmRlcmVyLFxuICAgICAgICAgICAgICBpbnRlcnZhbDogbWFya2VyLmludGVydmFsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgX21hcmtlclR5cGUuVGltZWxpbmVNYXJrZXJUeXBlLkN1c3RvbTpcbiAgICAgICAgICAgIC8vZmlsdGVyIG91dCBjdXJzb3JzIG91dHNpZGUgY2FudmFzIHN0YXJ0L2VuZFxuICAgICAgICAgICAgaWYgKCEobWFya2VyLmRhdGUgPj0gdGltZWxpbmVTdGF0ZS5jYW52YXNUaW1lU3RhcnQgJiYgbWFya2VyLmRhdGUgPD0gdGltZWxpbmVTdGF0ZS5jYW52YXNUaW1lRW5kKSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DdXN0b21NYXJrZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgICAgIGtleTogbWFya2VyLmlkLFxuICAgICAgICAgICAgICByZW5kZXJlcjogbWFya2VyLnJlbmRlcmVyLFxuICAgICAgICAgICAgICBkYXRlOiBtYXJrZXIuZGF0ZSxcbiAgICAgICAgICAgICAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBnZXRMZWZ0T2Zmc2V0RnJvbURhdGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBfbWFya2VyVHlwZS5UaW1lbGluZU1hcmtlclR5cGUuQ3Vyc29yOlxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ3Vyc29yTWFya2VyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAgICBrZXk6IG1hcmtlci5pZCxcbiAgICAgICAgICAgICAgcmVuZGVyZXI6IG1hcmtlci5yZW5kZXJlcixcbiAgICAgICAgICAgICAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBnZXRMZWZ0T2Zmc2V0RnJvbURhdGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBUaW1lbGluZU1hcmtlcnNSZW5kZXJlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9NYXJrZXJDYW52YXNDb250ZXh0ID0gcmVxdWlyZShcIi4vTWFya2VyQ2FudmFzQ29udGV4dFwiKTtcblxudmFyIF9UaW1lbGluZU1hcmtlcnNSZW5kZXJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGltZWxpbmVNYXJrZXJzUmVuZGVyZXJcIikpO1xuXG52YXIgX1RpbWVsaW5lU3RhdGVDb250ZXh0ID0gcmVxdWlyZShcIi4uL3RpbWVsaW5lL1RpbWVsaW5lU3RhdGVDb250ZXh0XCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLy8gZXhwYW5kIHRvIGZpbGwgZW50aXJlIHBhcmVudCBjb250YWluZXIgKFNjcm9sbEVsZW1lbnQpXG52YXIgc3RhdGljU3R5bGVzID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogMCxcbiAgYm90dG9tOiAwXG4gIC8qKlxuICAgKiBSZW5kZXJzIHJlZ2lzdGVyZWQgbWFya2VycyBhbmQgZXhwb3NlcyBhIG1vdXNlIG92ZXIgbGlzdGVuZXIgZm9yXG4gICAqIEN1cnNvck1hcmtlcnMgdG8gc3Vic2NyaWJlIHRvXG4gICAqL1xuXG59O1xuXG52YXIgTWFya2VyQ2FudmFzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNYXJrZXJDYW52YXMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1hcmtlckNhbnZhcygpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXJrZXJDYW52YXMpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoTWFya2VyQ2FudmFzKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VNb3ZlXCIsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGlmIChfdGhpcy5zdWJzY3JpcHRpb24gIT0gbnVsbCkge1xuICAgICAgICB2YXIgcGFnZVggPSBldnQucGFnZVg7IC8vIEZJWE1FOiBkb250IHVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QuIFVzZSBwYXNzZWQgaW4gc2Nyb2xsIGFtb3VudFxuXG4gICAgICAgIHZhciBfdGhpcyRjb250YWluZXJFbCRnZXQgPSBfdGhpcy5jb250YWluZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIGNvbnRhaW5lckxlZnQgPSBfdGhpcyRjb250YWluZXJFbCRnZXQubGVmdDsgLy8gbnVtYmVyIG9mIHBpeGVscyBmcm9tIGxlZnQgd2UgYXJlIG9uIGNhbnZhc1xuICAgICAgICAvLyB3ZSBkbyB0aGlzIGNhbGN1bGF0aW9uIGFzIHBhZ2VYIGlzIGJhc2VkIG9uIHggZnJvbSB2aWV3cG9ydCB3aGVyZWFzXG4gICAgICAgIC8vIG91ciBjYW52YXMgY2FuIGJlIHNjcm9sbGVkIGxlZnQgYW5kIHJpZ2h0IGFuZCBpcyBnZW5lcmFsbHkgb3V0c2lkZVxuICAgICAgICAvLyBvZiB0aGUgdmlld3BvcnQuICBUaGlzIGNhbGN1bGF0aW9uIGlzIHRvIGdldCBob3cgbWFueSBwaXhlbHMgdGhlIGN1cnNvclxuICAgICAgICAvLyBpcyBmcm9tIGxlZnQgb2YgdGhpcyBlbGVtZW50XG5cblxuICAgICAgICB2YXIgY2FudmFzWCA9IHBhZ2VYIC0gY29udGFpbmVyTGVmdDtcblxuICAgICAgICB2YXIgZGF0ZSA9IF90aGlzLnByb3BzLmdldERhdGVGcm9tTGVmdE9mZnNldFBvc2l0aW9uKGNhbnZhc1gpO1xuXG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbih7XG4gICAgICAgICAgbGVmdE9mZnNldDogY2FudmFzWCxcbiAgICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICAgIGlzQ3Vyc29yT3ZlckNhbnZhczogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVNb3VzZUxlYXZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdWJzY3JpcHRpb24gIT0gbnVsbCkge1xuICAgICAgICAvLyB0ZWxsIHN1YnNjcmliZXIgdGhhdCB3ZSdyZSBub3Qgb24gY2FudmFzXG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbih7XG4gICAgICAgICAgbGVmdE9mZnNldDogMCxcbiAgICAgICAgICBkYXRlOiAwLFxuICAgICAgICAgIGlzQ3Vyc29yT3ZlckNhbnZhczogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VNb3ZlU3Vic2NyaWJlXCIsIGZ1bmN0aW9uIChzdWIpIHtcbiAgICAgIF90aGlzLnN1YnNjcmlwdGlvbiA9IHN1YjtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIHN1YnNjcmliZVRvTW91c2VPdmVyOiBfdGhpcy5oYW5kbGVNb3VzZU1vdmVTdWJzY3JpYmVcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNYXJrZXJDYW52YXMsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfTWFya2VyQ2FudmFzQ29udGV4dC5NYXJrZXJDYW52YXNQcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZVxuICAgICAgfSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IHN0YXRpY1N0eWxlcyxcbiAgICAgICAgb25Nb3VzZU1vdmU6IHRoaXMuaGFuZGxlTW91c2VNb3ZlLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZWwpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmNvbnRhaW5lckVsID0gZWw7XG4gICAgICAgIH1cbiAgICAgIH0sIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfVGltZWxpbmVNYXJrZXJzUmVuZGVyZXJbXCJkZWZhdWx0XCJdLCBudWxsKSwgdGhpcy5wcm9wcy5jaGlsZHJlbikpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYXJrZXJDYW52YXM7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1hcmtlckNhbnZhcywgXCJwcm9wVHlwZXNcIiwge1xuICBnZXREYXRlRnJvbUxlZnRPZmZzZXRQb3NpdGlvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZVxufSk7XG5cbnZhciBNYXJrZXJDYW52YXNXcmFwcGVyID0gZnVuY3Rpb24gTWFya2VyQ2FudmFzV3JhcHBlcihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9UaW1lbGluZVN0YXRlQ29udGV4dC5UaW1lbGluZVN0YXRlQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldERhdGVGcm9tTGVmdE9mZnNldFBvc2l0aW9uID0gX3JlZi5nZXREYXRlRnJvbUxlZnRPZmZzZXRQb3NpdGlvbjtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KE1hcmtlckNhbnZhcywgX2V4dGVuZHMoe1xuICAgICAgZ2V0RGF0ZUZyb21MZWZ0T2Zmc2V0UG9zaXRpb246IGdldERhdGVGcm9tTGVmdE9mZnNldFBvc2l0aW9uXG4gICAgfSwgcHJvcHMpKTtcbiAgfSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBNYXJrZXJDYW52YXNXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihjb21wb25lbnQpIHtcbiAgY29tcG9uZW50Ll9yZXNpemVFdmVudExpc3RlbmVyID0ge1xuICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiBoYW5kbGVFdmVudCgpIHtcbiAgICAgIGNvbXBvbmVudC5yZXNpemUoKTtcbiAgICB9XG4gIH07XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjb21wb25lbnQuX3Jlc2l6ZUV2ZW50TGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihjb21wb25lbnQpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGNvbXBvbmVudC5fcmVzaXplRXZlbnRMaXN0ZW5lcik7XG59XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICByZW1vdmVMaXN0ZW5lcjogcmVtb3ZlTGlzdGVuZXJcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0SGVhZGVyRm9ybWF0cyA9IGV4cG9ydHMuZGVmYXVsdFRpbWVTdGVwcyA9IGV4cG9ydHMuZGVmYXVsdEtleXMgPSB2b2lkIDA7XG52YXIgZGVmYXVsdEtleXMgPSB7XG4gIGdyb3VwSWRLZXk6ICdpZCcsXG4gIGdyb3VwVGl0bGVLZXk6ICd0aXRsZScsXG4gIGdyb3VwUmlnaHRUaXRsZUtleTogJ3JpZ2h0VGl0bGUnLFxuICBncm91cExhYmVsS2V5OiAndGl0bGUnLFxuICBpdGVtSWRLZXk6ICdpZCcsXG4gIGl0ZW1UaXRsZUtleTogJ3RpdGxlJyxcbiAgaXRlbURpdlRpdGxlS2V5OiAndGl0bGUnLFxuICBpdGVtR3JvdXBLZXk6ICdncm91cCcsXG4gIGl0ZW1UaW1lU3RhcnRLZXk6ICdzdGFydF90aW1lJyxcbiAgaXRlbVRpbWVFbmRLZXk6ICdlbmRfdGltZSdcbn07XG5leHBvcnRzLmRlZmF1bHRLZXlzID0gZGVmYXVsdEtleXM7XG52YXIgZGVmYXVsdFRpbWVTdGVwcyA9IHtcbiAgc2Vjb25kOiAxLFxuICBtaW51dGU6IDEsXG4gIGhvdXI6IDEsXG4gIGRheTogMSxcbiAgbW9udGg6IDEsXG4gIHllYXI6IDFcbn07XG5leHBvcnRzLmRlZmF1bHRUaW1lU3RlcHMgPSBkZWZhdWx0VGltZVN0ZXBzO1xudmFyIGRlZmF1bHRIZWFkZXJGb3JtYXRzID0ge1xuICB5ZWFyOiB7XG4gICAgXCJsb25nXCI6ICdZWVlZJyxcbiAgICBtZWRpdW1Mb25nOiAnWVlZWScsXG4gICAgbWVkaXVtOiAnWVlZWScsXG4gICAgXCJzaG9ydFwiOiAnWVknXG4gIH0sXG4gIG1vbnRoOiB7XG4gICAgXCJsb25nXCI6ICdNTU1NIFlZWVknLFxuICAgIG1lZGl1bUxvbmc6ICdNTU1NJyxcbiAgICBtZWRpdW06ICdNTU1NJyxcbiAgICBcInNob3J0XCI6ICdNTS9ZWSdcbiAgfSxcbiAgd2Vlazoge1xuICAgIFwibG9uZ1wiOiAndycsXG4gICAgbWVkaXVtTG9uZzogJ3cnLFxuICAgIG1lZGl1bTogJ3cnLFxuICAgIFwic2hvcnRcIjogJ3cnXG4gIH0sXG4gIGRheToge1xuICAgIFwibG9uZ1wiOiAnZGRkZCwgTEwnLFxuICAgIG1lZGl1bUxvbmc6ICdkZGRkLCBMTCcsXG4gICAgbWVkaXVtOiAnZGQgRCcsXG4gICAgXCJzaG9ydFwiOiAnRCdcbiAgfSxcbiAgaG91cjoge1xuICAgIFwibG9uZ1wiOiAnZGRkZCwgTEwsIEhIOjAwJyxcbiAgICBtZWRpdW1Mb25nOiAnTCwgSEg6MDAnLFxuICAgIG1lZGl1bTogJ0hIOjAwJyxcbiAgICBcInNob3J0XCI6ICdISCdcbiAgfSxcbiAgbWludXRlOiB7XG4gICAgXCJsb25nXCI6ICdISDptbScsXG4gICAgbWVkaXVtTG9uZzogJ0hIOm1tJyxcbiAgICBtZWRpdW06ICdISDptbScsXG4gICAgXCJzaG9ydFwiOiAnbW0nXG4gIH0sXG4gIHNlY29uZDoge1xuICAgIFwibG9uZ1wiOiAnbW06c3MnLFxuICAgIG1lZGl1bUxvbmc6ICdtbTpzcycsXG4gICAgbWVkaXVtOiAnbW06c3MnLFxuICAgIFwic2hvcnRcIjogJ3NzJ1xuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0SGVhZGVyRm9ybWF0cyA9IGRlZmF1bHRIZWFkZXJGb3JtYXRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UaW1lbGluZUhlYWRlcnNDb25zdW1lciA9IGV4cG9ydHMuVGltZWxpbmVIZWFkZXJzUHJvdmlkZXIgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY3JlYXRlUmVhY3RDb250ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNyZWF0ZS1yZWFjdC1jb250ZXh0XCIpKTtcblxudmFyIF9nZW5lcmljID0gcmVxdWlyZShcIi4uL3V0aWxpdHkvZ2VuZXJpY1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmYXVsdENvbnRleHRTdGF0ZSA9IHtcbiAgcmVnaXN0ZXJTY3JvbGw6IGZ1bmN0aW9uIHJlZ2lzdGVyU2Nyb2xsKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGNvbnNvbGUud2FybignZGVmYXVsdCByZWdpc3RlclNjcm9sbCBoZWFkZXIgdXNlZCcpO1xuICAgIHJldHVybiBfZ2VuZXJpYy5ub29wO1xuICB9LFxuICByaWdodFNpZGViYXJXaWR0aDogMCxcbiAgbGVmdFNpZGViYXJXaWR0aDogMTUwLFxuICB0aW1lU3RlcHM6IHt9XG59O1xuXG52YXIgX2NyZWF0ZVJlYWN0Q29udGV4dCA9ICgwLCBfY3JlYXRlUmVhY3RDb250ZXh0MltcImRlZmF1bHRcIl0pKGRlZmF1bHRDb250ZXh0U3RhdGUpLFxuICAgIENvbnN1bWVyID0gX2NyZWF0ZVJlYWN0Q29udGV4dC5Db25zdW1lcixcbiAgICBQcm92aWRlciA9IF9jcmVhdGVSZWFjdENvbnRleHQuUHJvdmlkZXI7XG5cbnZhciBUaW1lbGluZUhlYWRlcnNQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGltZWxpbmVIZWFkZXJzUHJvdmlkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRpbWVsaW5lSGVhZGVyc1Byb3ZpZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaW1lbGluZUhlYWRlcnNQcm92aWRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRpbWVsaW5lSGVhZGVyc1Byb3ZpZGVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUaW1lbGluZUhlYWRlcnNQcm92aWRlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB7XG4gICAgICAgIHJpZ2h0U2lkZWJhcldpZHRoOiB0aGlzLnByb3BzLnJpZ2h0U2lkZWJhcldpZHRoLFxuICAgICAgICBsZWZ0U2lkZWJhcldpZHRoOiB0aGlzLnByb3BzLmxlZnRTaWRlYmFyV2lkdGgsXG4gICAgICAgIHRpbWVTdGVwczogdGhpcy5wcm9wcy50aW1lU3RlcHMsXG4gICAgICAgIHJlZ2lzdGVyU2Nyb2xsOiB0aGlzLnByb3BzLnJlZ2lzdGVyU2Nyb2xsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChQcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGltZWxpbmVIZWFkZXJzUHJvdmlkZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5UaW1lbGluZUhlYWRlcnNQcm92aWRlciA9IFRpbWVsaW5lSGVhZGVyc1Byb3ZpZGVyO1xuXG5fZGVmaW5lUHJvcGVydHkoVGltZWxpbmVIZWFkZXJzUHJvdmlkZXIsIFwicHJvcFR5cGVzXCIsIHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgcmlnaHRTaWRlYmFyV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgbGVmdFNpZGViYXJXaWR0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8vVE9ETzogbWF5YmUgdGhpcyBzaG91bGQgYmUgc2tpcHBlZD9cbiAgdGltZVN0ZXBzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QuaXNSZXF1aXJlZCxcbiAgcmVnaXN0ZXJTY3JvbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbnZhciBUaW1lbGluZUhlYWRlcnNDb25zdW1lciA9IENvbnN1bWVyO1xuZXhwb3J0cy5UaW1lbGluZUhlYWRlcnNDb25zdW1lciA9IFRpbWVsaW5lSGVhZGVyc0NvbnN1bWVyOyIsIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9ICcnO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoYXJnKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBwYXJzZVZhbHVlKGFyZykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VWYWx1ZSAoYXJnKSB7XG5cdFx0aWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gYXJnO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgYXJnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZy50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAmJiAhYXJnLnRvU3RyaW5nLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ1tuYXRpdmUgY29kZV0nKSkge1xuXHRcdFx0cmV0dXJuIGFyZy50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdHZhciBjbGFzc2VzID0gJyc7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXBwZW5kQ2xhc3MgKHZhbHVlLCBuZXdDbGFzcykge1xuXHRcdGlmICghbmV3Q2xhc3MpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlICsgJyAnICsgbmV3Q2xhc3M7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdmFsdWUgKyBuZXdDbGFzcztcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SSUdIVF9WQVJJQU5UID0gZXhwb3J0cy5MRUZUX1ZBUklBTlQgPSB2b2lkIDA7XG52YXIgTEVGVF9WQVJJQU5UID0gJ2xlZnQnO1xuZXhwb3J0cy5MRUZUX1ZBUklBTlQgPSBMRUZUX1ZBUklBTlQ7XG52YXIgUklHSFRfVkFSSUFOVCA9ICdyaWdodCc7XG5leHBvcnRzLlJJR0hUX1ZBUklBTlQgPSBSSUdIVF9WQVJJQU5UOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfSGVhZGVyc0NvbnRleHQgPSByZXF1aXJlKFwiLi9IZWFkZXJzQ29udGV4dFwiKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyBpZiAoaSAlIDIpIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYXJndW1lbnRzW2ldKSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgU2lkZWJhckhlYWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNpZGViYXJIZWFkZXIsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTaWRlYmFySGVhZGVyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpZGViYXJIZWFkZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoU2lkZWJhckhlYWRlcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFJvb3RQcm9wc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIHN0eWxlID0gcHJvcHMuc3R5bGU7XG4gICAgICB2YXIgd2lkdGggPSBfdGhpcy5wcm9wcy52YXJpYW50ID09PSBfY29uc3RhbnRzLlJJR0hUX1ZBUklBTlQgPyBfdGhpcy5wcm9wcy5yaWdodFNpZGViYXJXaWR0aCA6IF90aGlzLnByb3BzLmxlZnRTaWRlYmFyV2lkdGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7fSwgc3R5bGUsIHtcbiAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0U3RhdGVBbmRIZWxwZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldFJvb3RQcm9wczogX3RoaXMuZ2V0Um9vdFByb3BzLFxuICAgICAgICBkYXRhOiBfdGhpcy5wcm9wcy5oZWFkZXJEYXRhXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNpZGViYXJIZWFkZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLmdldFN0YXRlQW5kSGVscGVycygpO1xuICAgICAgdmFyIFJlbmRlcmVyID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoUmVuZGVyZXIsIHByb3BzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2lkZWJhckhlYWRlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFNpZGViYXJIZWFkZXIsIFwicHJvcFR5cGVzXCIsIHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgcmlnaHRTaWRlYmFyV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgbGVmdFNpZGViYXJXaWR0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaGVhZGVyRGF0YTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XG59KTtcblxudmFyIFNpZGViYXJXcmFwcGVyID0gZnVuY3Rpb24gU2lkZWJhcldyYXBwZXIoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgdmFyaWFudCA9IF9yZWYudmFyaWFudCxcbiAgICAgIGhlYWRlckRhdGEgPSBfcmVmLmhlYWRlckRhdGE7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0hlYWRlcnNDb250ZXh0LlRpbWVsaW5lSGVhZGVyc0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgbGVmdFNpZGViYXJXaWR0aCA9IF9yZWYyLmxlZnRTaWRlYmFyV2lkdGgsXG4gICAgICAgIHJpZ2h0U2lkZWJhcldpZHRoID0gX3JlZjIucmlnaHRTaWRlYmFyV2lkdGg7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChTaWRlYmFySGVhZGVyLCB7XG4gICAgICBsZWZ0U2lkZWJhcldpZHRoOiBsZWZ0U2lkZWJhcldpZHRoLFxuICAgICAgcmlnaHRTaWRlYmFyV2lkdGg6IHJpZ2h0U2lkZWJhcldpZHRoLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIGhlYWRlckRhdGE6IGhlYWRlckRhdGFcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5TaWRlYmFyV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaGVhZGVyRGF0YTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XG59O1xuU2lkZWJhcldyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICB2YXJpYW50OiBfY29uc3RhbnRzLkxFRlRfVkFSSUFOVCxcbiAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYzKSB7XG4gICAgdmFyIGdldFJvb3RQcm9wcyA9IF9yZWYzLmdldFJvb3RQcm9wcztcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIGdldFJvb3RQcm9wcygpKTtcbiAgfVxufTtcblNpZGViYXJXcmFwcGVyLnNlY3JldEtleSA9IFwiU2lkZWJhckhlYWRlclwiO1xudmFyIF9kZWZhdWx0ID0gU2lkZWJhcldyYXBwZXI7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX0hlYWRlcnNDb250ZXh0ID0gcmVxdWlyZShcIi4vSGVhZGVyc0NvbnRleHRcIik7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfU2lkZWJhckhlYWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2lkZWJhckhlYWRlclwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgaWYgKGkgJSAyKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGFyZ3VtZW50c1tpXSkpOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFRpbWVsaW5lSGVhZGVycyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGltZWxpbmVIZWFkZXJzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaW1lbGluZUhlYWRlcnMocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZWxpbmVIZWFkZXJzKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRpbWVsaW5lSGVhZGVycykuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFJvb3RTdHlsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMuc3R5bGUsIHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRDYWxlbmRhckhlYWRlclN0eWxlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGxlZnRTaWRlYmFyV2lkdGggPSBfdGhpcyRwcm9wcy5sZWZ0U2lkZWJhcldpZHRoLFxuICAgICAgICAgIHJpZ2h0U2lkZWJhcldpZHRoID0gX3RoaXMkcHJvcHMucmlnaHRTaWRlYmFyV2lkdGgsXG4gICAgICAgICAgY2FsZW5kYXJIZWFkZXJTdHlsZSA9IF90aGlzJHByb3BzLmNhbGVuZGFySGVhZGVyU3R5bGU7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgY2FsZW5kYXJIZWFkZXJTdHlsZSwge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHdpZHRoOiBcImNhbGMoMTAwJSAtIFwiLmNvbmNhdChsZWZ0U2lkZWJhcldpZHRoICsgcmlnaHRTaWRlYmFyV2lkdGgsIFwicHgpXCIpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVSb290UmVmXCIsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuaGVhZGVyUmVmKSB7XG4gICAgICAgIF90aGlzLnByb3BzLmhlYWRlclJlZihlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpc1NpZGViYXJIZWFkZXJcIiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gY2hpbGQudHlwZS5zZWNyZXRLZXkgPT09IF9TaWRlYmFySGVhZGVyW1wiZGVmYXVsdFwiXS5zZWNyZXRLZXk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGltZWxpbmVIZWFkZXJzLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciByaWdodFNpZGViYXJIZWFkZXI7XG4gICAgICB2YXIgbGVmdFNpZGViYXJIZWFkZXI7XG4gICAgICB2YXIgY2FsZW5kYXJIZWFkZXJzID0gW107XG4gICAgICB2YXIgY2hpbGRyZW4gPSBBcnJheS5pc0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pID8gdGhpcy5wcm9wcy5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9KSA6IFt0aGlzLnByb3BzLmNoaWxkcmVuXTtcblxuICAgICAgX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoX3RoaXMyLmlzU2lkZWJhckhlYWRlcihjaGlsZCkpIHtcbiAgICAgICAgICBpZiAoY2hpbGQucHJvcHMudmFyaWFudCA9PT0gX2NvbnN0YW50cy5SSUdIVF9WQVJJQU5UKSB7XG4gICAgICAgICAgICByaWdodFNpZGViYXJIZWFkZXIgPSBjaGlsZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVmdFNpZGViYXJIZWFkZXIgPSBjaGlsZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsZW5kYXJIZWFkZXJzLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFsZWZ0U2lkZWJhckhlYWRlcikge1xuICAgICAgICBsZWZ0U2lkZWJhckhlYWRlciA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfU2lkZWJhckhlYWRlcltcImRlZmF1bHRcIl0sIG51bGwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJpZ2h0U2lkZWJhckhlYWRlciAmJiB0aGlzLnByb3BzLnJpZ2h0U2lkZWJhcldpZHRoKSB7XG4gICAgICAgIHJpZ2h0U2lkZWJhckhlYWRlciA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfU2lkZWJhckhlYWRlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICB2YXJpYW50OiBcInJpZ2h0XCJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlUm9vdFJlZixcbiAgICAgICAgc3R5bGU6IHRoaXMuZ2V0Um9vdFN0eWxlKCksXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoJ3JjdC1oZWFkZXItcm9vdCcsIHRoaXMucHJvcHMuY2xhc3NOYW1lKVxuICAgICAgfSwgbGVmdFNpZGViYXJIZWFkZXIsIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJlZjogdGhpcy5wcm9wcy5yZWdpc3RlclNjcm9sbCxcbiAgICAgICAgc3R5bGU6IHRoaXMuZ2V0Q2FsZW5kYXJIZWFkZXJTdHlsZSgpLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKCdyY3QtY2FsZW5kYXItaGVhZGVyJywgdGhpcy5wcm9wcy5jYWxlbmRhckhlYWRlckNsYXNzTmFtZSlcbiAgICAgIH0sIGNhbGVuZGFySGVhZGVycyksIHJpZ2h0U2lkZWJhckhlYWRlcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVsaW5lSGVhZGVycztcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoVGltZWxpbmVIZWFkZXJzLCBcInByb3BUeXBlc1wiLCB7XG4gIHJlZ2lzdGVyU2Nyb2xsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGxlZnRTaWRlYmFyV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICByaWdodFNpZGViYXJXaWR0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHN0eWxlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgY2FsZW5kYXJIZWFkZXJTdHlsZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBjYWxlbmRhckhlYWRlckNsYXNzTmFtZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBoZWFkZXJSZWY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNcbn0pO1xuXG52YXIgVGltZWxpbmVIZWFkZXJzV3JhcHBlciA9IGZ1bmN0aW9uIFRpbWVsaW5lSGVhZGVyc1dyYXBwZXIoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjYWxlbmRhckhlYWRlclN0eWxlID0gX3JlZi5jYWxlbmRhckhlYWRlclN0eWxlLFxuICAgICAgY2FsZW5kYXJIZWFkZXJDbGFzc05hbWUgPSBfcmVmLmNhbGVuZGFySGVhZGVyQ2xhc3NOYW1lO1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9IZWFkZXJzQ29udGV4dC5UaW1lbGluZUhlYWRlcnNDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIGxlZnRTaWRlYmFyV2lkdGggPSBfcmVmMi5sZWZ0U2lkZWJhcldpZHRoLFxuICAgICAgICByaWdodFNpZGViYXJXaWR0aCA9IF9yZWYyLnJpZ2h0U2lkZWJhcldpZHRoLFxuICAgICAgICByZWdpc3RlclNjcm9sbCA9IF9yZWYyLnJlZ2lzdGVyU2Nyb2xsO1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoVGltZWxpbmVIZWFkZXJzLCB7XG4gICAgICBsZWZ0U2lkZWJhcldpZHRoOiBsZWZ0U2lkZWJhcldpZHRoLFxuICAgICAgcmlnaHRTaWRlYmFyV2lkdGg6IHJpZ2h0U2lkZWJhcldpZHRoLFxuICAgICAgcmVnaXN0ZXJTY3JvbGw6IHJlZ2lzdGVyU2Nyb2xsLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBjYWxlbmRhckhlYWRlclN0eWxlOiBjYWxlbmRhckhlYWRlclN0eWxlLFxuICAgICAgY2FsZW5kYXJIZWFkZXJDbGFzc05hbWU6IGNhbGVuZGFySGVhZGVyQ2xhc3NOYW1lXG4gICAgfSwgY2hpbGRyZW4pO1xuICB9KTtcbn07XG5cblRpbWVsaW5lSGVhZGVyc1dyYXBwZXIucHJvcFR5cGVzID0ge1xuICBzdHlsZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGNhbGVuZGFySGVhZGVyU3R5bGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgY2FsZW5kYXJIZWFkZXJDbGFzc05hbWU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xufTtcblRpbWVsaW5lSGVhZGVyc1dyYXBwZXIuc2VjcmV0S2V5ID0gXCJUaW1lbGluZUhlYWRlcnNcIjtcbnZhciBfZGVmYXVsdCA9IFRpbWVsaW5lSGVhZGVyc1dyYXBwZXI7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLkN1c3RvbUhlYWRlciA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9IZWFkZXJzQ29udGV4dCA9IHJlcXVpcmUoXCIuL0hlYWRlcnNDb250ZXh0XCIpO1xuXG52YXIgX1RpbWVsaW5lU3RhdGVDb250ZXh0ID0gcmVxdWlyZShcIi4uL3RpbWVsaW5lL1RpbWVsaW5lU3RhdGVDb250ZXh0XCIpO1xuXG52YXIgX2NhbGVuZGFyID0gcmVxdWlyZShcIi4uL3V0aWxpdHkvY2FsZW5kYXJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyBpZiAoaSAlIDIpIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYXJndW1lbnRzW2ldKSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgQ3VzdG9tSGVhZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDdXN0b21IZWFkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEN1c3RvbUhlYWRlcihfcHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3VzdG9tSGVhZGVyKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEN1c3RvbUhlYWRlcikuY2FsbCh0aGlzLCBfcHJvcHMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRIZWFkZXJJbnRlcnZhbHNcIiwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBjYW52YXNUaW1lU3RhcnQgPSBfcmVmLmNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgICBjYW52YXNUaW1lRW5kID0gX3JlZi5jYW52YXNUaW1lRW5kLFxuICAgICAgICAgIHVuaXQgPSBfcmVmLnVuaXQsXG4gICAgICAgICAgdGltZVN0ZXBzID0gX3JlZi50aW1lU3RlcHMsXG4gICAgICAgICAgZ2V0TGVmdE9mZnNldEZyb21EYXRlID0gX3JlZi5nZXRMZWZ0T2Zmc2V0RnJvbURhdGU7XG4gICAgICB2YXIgaW50ZXJ2YWxzID0gW107XG4gICAgICAoMCwgX2NhbGVuZGFyLml0ZXJhdGVUaW1lcykoY2FudmFzVGltZVN0YXJ0LCBjYW52YXNUaW1lRW5kLCB1bml0LCB0aW1lU3RlcHMsIGZ1bmN0aW9uIChzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAgICAgdmFyIGxlZnQgPSBnZXRMZWZ0T2Zmc2V0RnJvbURhdGUoc3RhcnRUaW1lLnZhbHVlT2YoKSk7XG4gICAgICAgIHZhciByaWdodCA9IGdldExlZnRPZmZzZXRGcm9tRGF0ZShlbmRUaW1lLnZhbHVlT2YoKSk7XG4gICAgICAgIHZhciB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICAgICAgaW50ZXJ2YWxzLnB1c2goe1xuICAgICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICAgIGVuZFRpbWU6IGVuZFRpbWUsXG4gICAgICAgICAgbGFiZWxXaWR0aDogd2lkdGgsXG4gICAgICAgICAgbGVmdDogbGVmdFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGludGVydmFscztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRSb290UHJvcHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3R5bGU6IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlID8gc3R5bGUgOiB7fSwge1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIHdpZHRoOiBfdGhpcy5wcm9wcy5jYW52YXNXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IF90aGlzLnByb3BzLmhlaWdodFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRJbnRlcnZhbFByb3BzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgaW50ZXJ2YWwgPSBwcm9wcy5pbnRlcnZhbCxcbiAgICAgICAgICBzdHlsZSA9IHByb3BzLnN0eWxlO1xuICAgICAgaWYgKCFpbnRlcnZhbCkgdGhyb3cgbmV3IEVycm9yKCd5b3Ugc2hvdWxkIHByb3ZpZGUgaW50ZXJ2YWwgdG8gdGhlIHByb3AgZ2V0dGVyJyk7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gaW50ZXJ2YWwuc3RhcnRUaW1lLFxuICAgICAgICAgIGxhYmVsV2lkdGggPSBpbnRlcnZhbC5sYWJlbFdpZHRoLFxuICAgICAgICAgIGxlZnQgPSBpbnRlcnZhbC5sZWZ0O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3R5bGU6IF90aGlzLmdldEludGVydmFsU3R5bGUoe1xuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoLFxuICAgICAgICAgIGNhbnZhc1RpbWVTdGFydDogX3RoaXMucHJvcHMuY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICAgIHVuaXQ6IF90aGlzLnByb3BzLnVuaXQsXG4gICAgICAgICAgbGVmdDogbGVmdFxuICAgICAgICB9KSxcbiAgICAgICAga2V5OiBcImxhYmVsLVwiLmNvbmNhdChzdGFydFRpbWUudmFsdWVPZigpKVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRJbnRlcnZhbFN0eWxlXCIsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGxlZnQgPSBfcmVmMi5sZWZ0LFxuICAgICAgICAgIGxhYmVsV2lkdGggPSBfcmVmMi5sYWJlbFdpZHRoLFxuICAgICAgICAgIHN0eWxlID0gX3JlZjIuc3R5bGU7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3R5bGUsIHtcbiAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgd2lkdGg6IGxhYmVsV2lkdGgsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRTdGF0ZUFuZEhlbHBlcnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2FudmFzVGltZVN0YXJ0ID0gX3RoaXMkcHJvcHMuY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICAgIGNhbnZhc1RpbWVFbmQgPSBfdGhpcyRwcm9wcy5jYW52YXNUaW1lRW5kLFxuICAgICAgICAgIHVuaXQgPSBfdGhpcyRwcm9wcy51bml0LFxuICAgICAgICAgIHNob3dQZXJpb2QgPSBfdGhpcyRwcm9wcy5zaG93UGVyaW9kLFxuICAgICAgICAgIHRpbWVsaW5lV2lkdGggPSBfdGhpcyRwcm9wcy50aW1lbGluZVdpZHRoLFxuICAgICAgICAgIHZpc2libGVUaW1lU3RhcnQgPSBfdGhpcyRwcm9wcy52aXNpYmxlVGltZVN0YXJ0LFxuICAgICAgICAgIHZpc2libGVUaW1lRW5kID0gX3RoaXMkcHJvcHMudmlzaWJsZVRpbWVFbmQsXG4gICAgICAgICAgaGVhZGVyRGF0YSA9IF90aGlzJHByb3BzLmhlYWRlckRhdGE7IC8vVE9ETzogb25seSBldmFsdWF0ZSBvbiBjaGFuZ2luZyBwYXJhbXNcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGltZWxpbmVDb250ZXh0OiB7XG4gICAgICAgICAgdGltZWxpbmVXaWR0aDogdGltZWxpbmVXaWR0aCxcbiAgICAgICAgICB2aXNpYmxlVGltZVN0YXJ0OiB2aXNpYmxlVGltZVN0YXJ0LFxuICAgICAgICAgIHZpc2libGVUaW1lRW5kOiB2aXNpYmxlVGltZUVuZCxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQ6IGNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgICBjYW52YXNUaW1lRW5kOiBjYW52YXNUaW1lRW5kXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlckNvbnRleHQ6IHtcbiAgICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICAgIGludGVydmFsczogX3RoaXMuc3RhdGUuaW50ZXJ2YWxzXG4gICAgICAgIH0sXG4gICAgICAgIGdldFJvb3RQcm9wczogX3RoaXMuZ2V0Um9vdFByb3BzLFxuICAgICAgICBnZXRJbnRlcnZhbFByb3BzOiBfdGhpcy5nZXRJbnRlcnZhbFByb3BzLFxuICAgICAgICBzaG93UGVyaW9kOiBzaG93UGVyaW9kLFxuICAgICAgICBkYXRhOiBoZWFkZXJEYXRhXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdmFyIF9jYW52YXNUaW1lU3RhcnQgPSBfcHJvcHMuY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICBfY2FudmFzVGltZUVuZCA9IF9wcm9wcy5jYW52YXNUaW1lRW5kLFxuICAgICAgICBjYW52YXNXaWR0aCA9IF9wcm9wcy5jYW52YXNXaWR0aCxcbiAgICAgICAgX3VuaXQgPSBfcHJvcHMudW5pdCxcbiAgICAgICAgX3RpbWVTdGVwcyA9IF9wcm9wcy50aW1lU3RlcHMsXG4gICAgICAgIF9zaG93UGVyaW9kID0gX3Byb3BzLnNob3dQZXJpb2QsXG4gICAgICAgIF9nZXRMZWZ0T2Zmc2V0RnJvbURhdGUgPSBfcHJvcHMuZ2V0TGVmdE9mZnNldEZyb21EYXRlO1xuXG4gICAgdmFyIF9pbnRlcnZhbHMgPSBfdGhpcy5nZXRIZWFkZXJJbnRlcnZhbHMoe1xuICAgICAgY2FudmFzVGltZVN0YXJ0OiBfY2FudmFzVGltZVN0YXJ0LFxuICAgICAgY2FudmFzVGltZUVuZDogX2NhbnZhc1RpbWVFbmQsXG4gICAgICBjYW52YXNXaWR0aDogY2FudmFzV2lkdGgsXG4gICAgICB1bml0OiBfdW5pdCxcbiAgICAgIHRpbWVTdGVwczogX3RpbWVTdGVwcyxcbiAgICAgIHNob3dQZXJpb2Q6IF9zaG93UGVyaW9kLFxuICAgICAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBfZ2V0TGVmdE9mZnNldEZyb21EYXRlXG4gICAgfSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGludGVydmFsczogX2ludGVydmFsc1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEN1c3RvbUhlYWRlciwgW3tcbiAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuY2FudmFzVGltZVN0YXJ0ICE9PSB0aGlzLnByb3BzLmNhbnZhc1RpbWVTdGFydCB8fCBuZXh0UHJvcHMuY2FudmFzVGltZUVuZCAhPT0gdGhpcy5wcm9wcy5jYW52YXNUaW1lRW5kIHx8IG5leHRQcm9wcy5jYW52YXNXaWR0aCAhPT0gdGhpcy5wcm9wcy5jYW52YXNXaWR0aCB8fCBuZXh0UHJvcHMudW5pdCAhPT0gdGhpcy5wcm9wcy51bml0IHx8IG5leHRQcm9wcy50aW1lU3RlcHMgIT09IHRoaXMucHJvcHMudGltZVN0ZXBzIHx8IG5leHRQcm9wcy5zaG93UGVyaW9kICE9PSB0aGlzLnByb3BzLnNob3dQZXJpb2QgfHwgbmV4dFByb3BzLmNoaWxkcmVuICE9PSB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG5leHRQcm9wcy5oZWFkZXJEYXRhICE9PSB0aGlzLnByb3BzLmhlYWRlckRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5jYW52YXNUaW1lU3RhcnQgIT09IHRoaXMucHJvcHMuY2FudmFzVGltZVN0YXJ0IHx8IG5leHRQcm9wcy5jYW52YXNUaW1lRW5kICE9PSB0aGlzLnByb3BzLmNhbnZhc1RpbWVFbmQgfHwgbmV4dFByb3BzLmNhbnZhc1dpZHRoICE9PSB0aGlzLnByb3BzLmNhbnZhc1dpZHRoIHx8IG5leHRQcm9wcy51bml0ICE9PSB0aGlzLnByb3BzLnVuaXQgfHwgbmV4dFByb3BzLnRpbWVTdGVwcyAhPT0gdGhpcy5wcm9wcy50aW1lU3RlcHMgfHwgbmV4dFByb3BzLnNob3dQZXJpb2QgIT09IHRoaXMucHJvcHMuc2hvd1BlcmlvZCkge1xuICAgICAgICB2YXIgY2FudmFzVGltZVN0YXJ0ID0gbmV4dFByb3BzLmNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgICAgIGNhbnZhc1RpbWVFbmQgPSBuZXh0UHJvcHMuY2FudmFzVGltZUVuZCxcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoID0gbmV4dFByb3BzLmNhbnZhc1dpZHRoLFxuICAgICAgICAgICAgdW5pdCA9IG5leHRQcm9wcy51bml0LFxuICAgICAgICAgICAgdGltZVN0ZXBzID0gbmV4dFByb3BzLnRpbWVTdGVwcyxcbiAgICAgICAgICAgIHNob3dQZXJpb2QgPSBuZXh0UHJvcHMuc2hvd1BlcmlvZCxcbiAgICAgICAgICAgIGdldExlZnRPZmZzZXRGcm9tRGF0ZSA9IG5leHRQcm9wcy5nZXRMZWZ0T2Zmc2V0RnJvbURhdGU7XG4gICAgICAgIHZhciBpbnRlcnZhbHMgPSB0aGlzLmdldEhlYWRlckludGVydmFscyh7XG4gICAgICAgICAgY2FudmFzVGltZVN0YXJ0OiBjYW52YXNUaW1lU3RhcnQsXG4gICAgICAgICAgY2FudmFzVGltZUVuZDogY2FudmFzVGltZUVuZCxcbiAgICAgICAgICBjYW52YXNXaWR0aDogY2FudmFzV2lkdGgsXG4gICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICB0aW1lU3RlcHM6IHRpbWVTdGVwcyxcbiAgICAgICAgICBzaG93UGVyaW9kOiBzaG93UGVyaW9kLFxuICAgICAgICAgIGdldExlZnRPZmZzZXRGcm9tRGF0ZTogZ2V0TGVmdE9mZnNldEZyb21EYXRlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbnRlcnZhbHM6IGludGVydmFsc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMuZ2V0U3RhdGVBbmRIZWxwZXJzKCk7XG4gICAgICB2YXIgUmVuZGVyZXIgPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChSZW5kZXJlciwgcHJvcHMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDdXN0b21IZWFkZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5DdXN0b21IZWFkZXIgPSBDdXN0b21IZWFkZXI7XG5cbl9kZWZpbmVQcm9wZXJ0eShDdXN0b21IZWFkZXIsIFwicHJvcFR5cGVzXCIsIHtcbiAgLy9jb21wb25lbnQgcHJvcHNcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdW5pdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIC8vVGltZWxpbmUgY29udGV4dFxuICB0aW1lU3RlcHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdC5pc1JlcXVpcmVkLFxuICB2aXNpYmxlVGltZVN0YXJ0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgdmlzaWJsZVRpbWVFbmQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBjYW52YXNUaW1lU3RhcnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBjYW52YXNUaW1lRW5kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY2FudmFzV2lkdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICBzaG93UGVyaW9kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGhlYWRlckRhdGE6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgZ2V0TGVmdE9mZnNldEZyb21EYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGhlaWdodDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWRcbn0pO1xuXG52YXIgQ3VzdG9tSGVhZGVyV3JhcHBlciA9IGZ1bmN0aW9uIEN1c3RvbUhlYWRlcldyYXBwZXIoX3JlZjMpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgICB1bml0ID0gX3JlZjMudW5pdCxcbiAgICAgIGhlYWRlckRhdGEgPSBfcmVmMy5oZWFkZXJEYXRhLFxuICAgICAgaGVpZ2h0ID0gX3JlZjMuaGVpZ2h0O1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9UaW1lbGluZVN0YXRlQ29udGV4dC5UaW1lbGluZVN0YXRlQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmNCkge1xuICAgIHZhciBnZXRUaW1lbGluZVN0YXRlID0gX3JlZjQuZ2V0VGltZWxpbmVTdGF0ZSxcbiAgICAgICAgc2hvd1BlcmlvZCA9IF9yZWY0LnNob3dQZXJpb2QsXG4gICAgICAgIGdldExlZnRPZmZzZXRGcm9tRGF0ZSA9IF9yZWY0LmdldExlZnRPZmZzZXRGcm9tRGF0ZTtcbiAgICB2YXIgdGltZWxpbmVTdGF0ZSA9IGdldFRpbWVsaW5lU3RhdGUoKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9IZWFkZXJzQ29udGV4dC5UaW1lbGluZUhlYWRlcnNDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICB2YXIgdGltZVN0ZXBzID0gX3JlZjUudGltZVN0ZXBzO1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChDdXN0b21IZWFkZXIsIF9leHRlbmRzKHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB0aW1lU3RlcHM6IHRpbWVTdGVwcyxcbiAgICAgICAgc2hvd1BlcmlvZDogc2hvd1BlcmlvZCxcbiAgICAgICAgdW5pdDogdW5pdCA/IHVuaXQgOiB0aW1lbGluZVN0YXRlLnRpbWVsaW5lVW5pdFxuICAgICAgfSwgdGltZWxpbmVTdGF0ZSwge1xuICAgICAgICBoZWFkZXJEYXRhOiBoZWFkZXJEYXRhLFxuICAgICAgICBnZXRMZWZ0T2Zmc2V0RnJvbURhdGU6IGdldExlZnRPZmZzZXRGcm9tRGF0ZSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5DdXN0b21IZWFkZXJXcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdW5pdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBoZWFkZXJEYXRhOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGhlaWdodDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyXG59O1xuQ3VzdG9tSGVhZGVyV3JhcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGhlaWdodDogMzBcbn07XG52YXIgX2RlZmF1bHQgPSBDdXN0b21IZWFkZXJXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJ2YXIgc2FmZUlzTmFOID0gTnVtYmVyLmlzTmFOIHx8XG4gICAgZnVuY3Rpb24gcG9ueWZpbGwodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlO1xuICAgIH07XG5mdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNhZmVJc05hTihmaXJzdCkgJiYgc2FmZUlzTmFOKHNlY29uZCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNFcXVhbChuZXdJbnB1dHNbaV0sIGxhc3RJbnB1dHNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBsYXN0VGhpcztcbiAgICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3QXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZWRPbmNlICYmIGxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgbGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgIGNhbGxlZE9uY2UgPSB0cnVlO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZU9uZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2FsZW5kYXIgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9jYWxlbmRhclwiKTtcblxudmFyIF9ldmVudHMgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9ldmVudHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyBpZiAoaSAlIDIpIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYXJndW1lbnRzW2ldKSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSW50ZXJ2YWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbnRlcnZhbCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEludGVydmFsKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludGVydmFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEludGVydmFsKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25JbnRlcnZhbENsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHByaW1hcnlIZWFkZXIgPSBfdGhpcyRwcm9wcy5wcmltYXJ5SGVhZGVyLFxuICAgICAgICAgIGludGVydmFsID0gX3RoaXMkcHJvcHMuaW50ZXJ2YWwsXG4gICAgICAgICAgdW5pdCA9IF90aGlzJHByb3BzLnVuaXQsXG4gICAgICAgICAgc2hvd1BlcmlvZCA9IF90aGlzJHByb3BzLnNob3dQZXJpb2Q7XG5cbiAgICAgIGlmIChwcmltYXJ5SGVhZGVyKSB7XG4gICAgICAgIHZhciBuZXh0VW5pdCA9ICgwLCBfY2FsZW5kYXIuZ2V0TmV4dFVuaXQpKHVuaXQpO1xuICAgICAgICB2YXIgbmV3U3RhcnRUaW1lID0gaW50ZXJ2YWwuc3RhcnRUaW1lLmNsb25lKCkuc3RhcnRPZihuZXh0VW5pdCk7XG4gICAgICAgIHZhciBuZXdFbmRUaW1lID0gaW50ZXJ2YWwuc3RhcnRUaW1lLmNsb25lKCkuZW5kT2YobmV4dFVuaXQpO1xuICAgICAgICBzaG93UGVyaW9kKG5ld1N0YXJ0VGltZSwgbmV3RW5kVGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaG93UGVyaW9kKGludGVydmFsLnN0YXJ0VGltZSwgaW50ZXJ2YWwuZW5kVGltZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0SW50ZXJ2YWxQcm9wc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLmdldEludGVydmFsUHJvcHMoX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGludGVydmFsOiBfdGhpcy5wcm9wcy5pbnRlcnZhbFxuICAgICAgfSwgcHJvcHMpKSwge1xuICAgICAgICBvbkNsaWNrOiAoMCwgX2V2ZW50cy5jb21wb3NlRXZlbnRzKShfdGhpcy5vbkludGVydmFsQ2xpY2ssIHByb3BzLm9uQ2xpY2spXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJbnRlcnZhbCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGludGVydmFsVGV4dCA9IF90aGlzJHByb3BzMi5pbnRlcnZhbFRleHQsXG4gICAgICAgICAgaW50ZXJ2YWwgPSBfdGhpcyRwcm9wczIuaW50ZXJ2YWwsXG4gICAgICAgICAgaW50ZXJ2YWxSZW5kZXJlciA9IF90aGlzJHByb3BzMi5pbnRlcnZhbFJlbmRlcmVyLFxuICAgICAgICAgIGhlYWRlckRhdGEgPSBfdGhpcyRwcm9wczIuaGVhZGVyRGF0YTtcbiAgICAgIHZhciBSZW5kZXJlciA9IGludGVydmFsUmVuZGVyZXI7XG5cbiAgICAgIGlmIChSZW5kZXJlcikge1xuICAgICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFJlbmRlcmVyLCB7XG4gICAgICAgICAgZ2V0SW50ZXJ2YWxQcm9wczogdGhpcy5nZXRJbnRlcnZhbFByb3BzLFxuICAgICAgICAgIGludGVydmFsQ29udGV4dDoge1xuICAgICAgICAgICAgaW50ZXJ2YWw6IGludGVydmFsLFxuICAgICAgICAgICAgaW50ZXJ2YWxUZXh0OiBpbnRlcnZhbFRleHRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGE6IGhlYWRlckRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHRoaXMuZ2V0SW50ZXJ2YWxQcm9wcyh7fSksIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJjdC1kYXRlSGVhZGVyIFwiLmNvbmNhdCh0aGlzLnByb3BzLnByaW1hcnlIZWFkZXIgPyAncmN0LWRhdGVIZWFkZXItcHJpbWFyeScgOiAnJylcbiAgICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGludGVydmFsVGV4dCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbnRlcnZhbDtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KEludGVydmFsLCBcInByb3BUeXBlc1wiLCB7XG4gIGludGVydmFsUmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHVuaXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpbnRlcnZhbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHNob3dQZXJpb2Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaW50ZXJ2YWxUZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcHJpbWFyeUhlYWRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbC5pc1JlcXVpcmVkLFxuICBnZXRJbnRlcnZhbFByb3BzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGhlYWRlckRhdGE6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdFxufSk7XG5cbnZhciBfZGVmYXVsdCA9IEludGVydmFsO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ3VzdG9tRGF0ZUhlYWRlciA9IEN1c3RvbURhdGVIZWFkZXI7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfSW50ZXJ2YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ludGVydmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIEN1c3RvbURhdGVIZWFkZXIoX3JlZikge1xuICB2YXIgX3JlZiRoZWFkZXJDb250ZXh0ID0gX3JlZi5oZWFkZXJDb250ZXh0LFxuICAgICAgaW50ZXJ2YWxzID0gX3JlZiRoZWFkZXJDb250ZXh0LmludGVydmFscyxcbiAgICAgIHVuaXQgPSBfcmVmJGhlYWRlckNvbnRleHQudW5pdCxcbiAgICAgIGdldFJvb3RQcm9wcyA9IF9yZWYuZ2V0Um9vdFByb3BzLFxuICAgICAgZ2V0SW50ZXJ2YWxQcm9wcyA9IF9yZWYuZ2V0SW50ZXJ2YWxQcm9wcyxcbiAgICAgIHNob3dQZXJpb2QgPSBfcmVmLnNob3dQZXJpb2QsXG4gICAgICBfcmVmJGRhdGEgPSBfcmVmLmRhdGEsXG4gICAgICBzdHlsZSA9IF9yZWYkZGF0YS5zdHlsZSxcbiAgICAgIGludGVydmFsUmVuZGVyZXIgPSBfcmVmJGRhdGEuaW50ZXJ2YWxSZW5kZXJlcixcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkZGF0YS5jbGFzc05hbWUsXG4gICAgICBnZXRMYWJlbEZvcm1hdCA9IF9yZWYkZGF0YS5nZXRMYWJlbEZvcm1hdCxcbiAgICAgIHVuaXRQcm9wID0gX3JlZiRkYXRhLnVuaXRQcm9wLFxuICAgICAgaGVhZGVyRGF0YSA9IF9yZWYkZGF0YS5oZWFkZXJEYXRhO1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBnZXRSb290UHJvcHMoe1xuICAgIHN0eWxlOiBzdHlsZVxuICB9KSksIGludGVydmFscy5tYXAoZnVuY3Rpb24gKGludGVydmFsKSB7XG4gICAgdmFyIGludGVydmFsVGV4dCA9IGdldExhYmVsRm9ybWF0KFtpbnRlcnZhbC5zdGFydFRpbWUsIGludGVydmFsLmVuZFRpbWVdLCB1bml0LCBpbnRlcnZhbC5sYWJlbFdpZHRoKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9JbnRlcnZhbFtcImRlZmF1bHRcIl0sIHtcbiAgICAgIGtleTogXCJsYWJlbC1cIi5jb25jYXQoaW50ZXJ2YWwuc3RhcnRUaW1lLnZhbHVlT2YoKSksXG4gICAgICB1bml0OiB1bml0LFxuICAgICAgaW50ZXJ2YWw6IGludGVydmFsLFxuICAgICAgc2hvd1BlcmlvZDogc2hvd1BlcmlvZCxcbiAgICAgIGludGVydmFsVGV4dDogaW50ZXJ2YWxUZXh0LFxuICAgICAgcHJpbWFyeUhlYWRlcjogdW5pdFByb3AgPT09ICdwcmltYXJ5SGVhZGVyJyxcbiAgICAgIGdldEludGVydmFsUHJvcHM6IGdldEludGVydmFsUHJvcHMsXG4gICAgICBpbnRlcnZhbFJlbmRlcmVyOiBpbnRlcnZhbFJlbmRlcmVyLFxuICAgICAgaGVhZGVyRGF0YTogaGVhZGVyRGF0YVxuICAgIH0pO1xuICB9KSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9UaW1lbGluZVN0YXRlQ29udGV4dCA9IHJlcXVpcmUoXCIuLi90aW1lbGluZS9UaW1lbGluZVN0YXRlQ29udGV4dFwiKTtcblxudmFyIF9DdXN0b21IZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0N1c3RvbUhlYWRlclwiKSk7XG5cbnZhciBfY2FsZW5kYXIgPSByZXF1aXJlKFwiLi4vdXRpbGl0eS9jYWxlbmRhclwiKTtcblxudmFyIF9kZWZhdWx0Q29uZmlnID0gcmVxdWlyZShcIi4uL2RlZmF1bHQtY29uZmlnXCIpO1xuXG52YXIgX21lbW9pemVPbmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtZW1vaXplLW9uZVwiKSk7XG5cbnZhciBfQ3VzdG9tRGF0ZUhlYWRlciA9IHJlcXVpcmUoXCIuL0N1c3RvbURhdGVIZWFkZXJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgaWYgKGkgJSAyKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGFyZ3VtZW50c1tpXSkpOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIERhdGVIZWFkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERhdGVIZWFkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERhdGVIZWFkZXIoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZUhlYWRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihEYXRlSGVhZGVyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0SGVhZGVyVW5pdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudW5pdCA9PT0gJ3ByaW1hcnlIZWFkZXInKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2NhbGVuZGFyLmdldE5leHRVbml0KShfdGhpcy5wcm9wcy50aW1lbGluZVVuaXQpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy51bml0KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy51bml0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMudGltZWxpbmVVbml0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFJvb3RTdHlsZVwiLCAoMCwgX21lbW9pemVPbmVbXCJkZWZhdWx0XCJdKShmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgaGVpZ2h0OiAzMFxuICAgICAgfSwgc3R5bGUpO1xuICAgIH0pKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRMYWJlbEZvcm1hdFwiLCBmdW5jdGlvbiAoaW50ZXJ2YWwsIHVuaXQsIGxhYmVsV2lkdGgpIHtcbiAgICAgIHZhciBsYWJlbEZvcm1hdCA9IF90aGlzLnByb3BzLmxhYmVsRm9ybWF0O1xuXG4gICAgICBpZiAodHlwZW9mIGxhYmVsRm9ybWF0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgc3RhcnRUaW1lID0gaW50ZXJ2YWxbMF07XG4gICAgICAgIHJldHVybiBzdGFydFRpbWUuZm9ybWF0KGxhYmVsRm9ybWF0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxhYmVsRm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBsYWJlbEZvcm1hdChpbnRlcnZhbCwgdW5pdCwgbGFiZWxXaWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xhYmVsRm9ybWF0IHNob3VsZCBiZSBmdW5jdGlvbiBvciBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRIZWFkZXJEYXRhXCIsICgwLCBfbWVtb2l6ZU9uZVtcImRlZmF1bHRcIl0pKGZ1bmN0aW9uIChpbnRlcnZhbFJlbmRlcmVyLCBzdHlsZSwgY2xhc3NOYW1lLCBnZXRMYWJlbEZvcm1hdCwgdW5pdFByb3AsIGhlYWRlckRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGludGVydmFsUmVuZGVyZXI6IGludGVydmFsUmVuZGVyZXIsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGdldExhYmVsRm9ybWF0OiBnZXRMYWJlbEZvcm1hdCxcbiAgICAgICAgdW5pdFByb3A6IHVuaXRQcm9wLFxuICAgICAgICBoZWFkZXJEYXRhOiBoZWFkZXJEYXRhXG4gICAgICB9O1xuICAgIH0pKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEYXRlSGVhZGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHVuaXQgPSB0aGlzLmdldEhlYWRlclVuaXQoKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaGVhZGVyRGF0YSA9IF90aGlzJHByb3BzLmhlYWRlckRhdGEsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0O1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ3VzdG9tSGVhZGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgaGVhZGVyRGF0YTogdGhpcy5nZXRIZWFkZXJEYXRhKHRoaXMucHJvcHMuaW50ZXJ2YWxSZW5kZXJlciwgdGhpcy5nZXRSb290U3R5bGUodGhpcy5wcm9wcy5zdHlsZSksIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB0aGlzLmdldExhYmVsRm9ybWF0LCB0aGlzLnByb3BzLnVuaXQsIHRoaXMucHJvcHMuaGVhZGVyRGF0YSksXG4gICAgICAgIGNoaWxkcmVuOiBfQ3VzdG9tRGF0ZUhlYWRlci5DdXN0b21EYXRlSGVhZGVyXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGF0ZUhlYWRlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoRGF0ZUhlYWRlciwgXCJwcm9wVHlwZXNcIiwge1xuICB1bml0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICB0aW1lbGluZVVuaXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgbGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0T2YoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0T2YoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nKSksIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ10pLmlzUmVxdWlyZWQsXG4gIGludGVydmFsUmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGhlYWRlckRhdGE6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgaGVpZ2h0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXJcbn0pO1xuXG52YXIgRGF0ZUhlYWRlcldyYXBwZXIgPSBmdW5jdGlvbiBEYXRlSGVhZGVyV3JhcHBlcihfcmVmKSB7XG4gIHZhciB1bml0ID0gX3JlZi51bml0LFxuICAgICAgbGFiZWxGb3JtYXQgPSBfcmVmLmxhYmVsRm9ybWF0LFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbnRlcnZhbFJlbmRlcmVyID0gX3JlZi5pbnRlcnZhbFJlbmRlcmVyLFxuICAgICAgaGVhZGVyRGF0YSA9IF9yZWYuaGVhZGVyRGF0YSxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9UaW1lbGluZVN0YXRlQ29udGV4dC5UaW1lbGluZVN0YXRlQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBnZXRUaW1lbGluZVN0YXRlID0gX3JlZjIuZ2V0VGltZWxpbmVTdGF0ZTtcbiAgICB2YXIgdGltZWxpbmVTdGF0ZSA9IGdldFRpbWVsaW5lU3RhdGUoKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KERhdGVIZWFkZXIsIHtcbiAgICAgIHRpbWVsaW5lVW5pdDogdGltZWxpbmVTdGF0ZS50aW1lbGluZVVuaXQsXG4gICAgICB1bml0OiB1bml0LFxuICAgICAgbGFiZWxGb3JtYXQ6IGxhYmVsRm9ybWF0LFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBpbnRlcnZhbFJlbmRlcmVyOiBpbnRlcnZhbFJlbmRlcmVyLFxuICAgICAgaGVhZGVyRGF0YTogaGVhZGVyRGF0YSxcbiAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgfSk7XG4gIH0pO1xufTtcblxuRGF0ZUhlYWRlcldyYXBwZXIucHJvcFR5cGVzID0ge1xuICBzdHlsZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgdW5pdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBsYWJlbEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3RPZihfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3RPZihfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcpKSwgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nXSksXG4gIGludGVydmFsUmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGhlYWRlckRhdGE6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgaGVpZ2h0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXJcbn07XG5EYXRlSGVhZGVyV3JhcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGxhYmVsRm9ybWF0OiBmb3JtYXRMYWJlbFxufTtcblxuZnVuY3Rpb24gZm9ybWF0TGFiZWwoX3JlZjMsIHVuaXQsIGxhYmVsV2lkdGgpIHtcbiAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLFxuICAgICAgdGltZVN0YXJ0ID0gX3JlZjRbMF0sXG4gICAgICB0aW1lRW5kID0gX3JlZjRbMV07XG5cbiAgdmFyIGZvcm1hdE9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IF9kZWZhdWx0Q29uZmlnLmRlZmF1bHRIZWFkZXJGb3JtYXRzO1xuICB2YXIgZm9ybWF0O1xuXG4gIGlmIChsYWJlbFdpZHRoID49IDE1MCkge1xuICAgIGZvcm1hdCA9IGZvcm1hdE9wdGlvbnNbdW5pdF1bJ2xvbmcnXTtcbiAgfSBlbHNlIGlmIChsYWJlbFdpZHRoID49IDEwMCkge1xuICAgIGZvcm1hdCA9IGZvcm1hdE9wdGlvbnNbdW5pdF1bJ21lZGl1bUxvbmcnXTtcbiAgfSBlbHNlIGlmIChsYWJlbFdpZHRoID49IDUwKSB7XG4gICAgZm9ybWF0ID0gZm9ybWF0T3B0aW9uc1t1bml0XVsnbWVkaXVtJ107XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0ID0gZm9ybWF0T3B0aW9uc1t1bml0XVsnc2hvcnQnXTtcbiAgfVxuXG4gIHJldHVybiB0aW1lU3RhcnQuZm9ybWF0KGZvcm1hdCk7XG59XG5cbnZhciBfZGVmYXVsdCA9IERhdGVIZWFkZXJXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9JdGVtcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXRlbXMvSXRlbXNcIikpO1xuXG52YXIgX1NpZGViYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xheW91dC9TaWRlYmFyXCIpKTtcblxudmFyIF9Db2x1bW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb2x1bW5zL0NvbHVtbnNcIikpO1xuXG52YXIgX0dyb3VwUm93cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcm93L0dyb3VwUm93c1wiKSk7XG5cbnZhciBfU2Nyb2xsRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsL1Njcm9sbEVsZW1lbnRcIikpO1xuXG52YXIgX01hcmtlckNhbnZhcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWFya2Vycy9NYXJrZXJDYW52YXNcIikpO1xuXG52YXIgX3dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3Jlc2l6ZS1kZXRlY3Rvci93aW5kb3dcIikpO1xuXG52YXIgX2NhbGVuZGFyID0gcmVxdWlyZShcIi4vdXRpbGl0eS9jYWxlbmRhclwiKTtcblxudmFyIF9nZW5lcmljID0gcmVxdWlyZShcIi4vdXRpbGl0eS9nZW5lcmljXCIpO1xuXG52YXIgX2RlZmF1bHRDb25maWcgPSByZXF1aXJlKFwiLi9kZWZhdWx0LWNvbmZpZ1wiKTtcblxudmFyIF9UaW1lbGluZVN0YXRlQ29udGV4dCA9IHJlcXVpcmUoXCIuL3RpbWVsaW5lL1RpbWVsaW5lU3RhdGVDb250ZXh0XCIpO1xuXG52YXIgX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQgPSByZXF1aXJlKFwiLi9tYXJrZXJzL1RpbWVsaW5lTWFya2Vyc0NvbnRleHRcIik7XG5cbnZhciBfSGVhZGVyc0NvbnRleHQgPSByZXF1aXJlKFwiLi9oZWFkZXJzL0hlYWRlcnNDb250ZXh0XCIpO1xuXG52YXIgX1RpbWVsaW5lSGVhZGVycyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGVhZGVycy9UaW1lbGluZUhlYWRlcnNcIikpO1xuXG52YXIgX0RhdGVIZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hlYWRlcnMvRGF0ZUhlYWRlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgUmVhY3RDYWxlbmRhclRpbWVsaW5lID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWFjdENhbGVuZGFyVGltZWxpbmUsIF9Db21wb25lbnQpO1xuXG4gIF9jcmVhdGVDbGFzcyhSZWFjdENhbGVuZGFyVGltZWxpbmUsIFt7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0VGltZWxpbmVDb250ZXh0OiBmdW5jdGlvbiBnZXRUaW1lbGluZUNvbnRleHQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5nZXRUaW1lbGluZUNvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBSZWFjdENhbGVuZGFyVGltZWxpbmUoX3Byb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0Q2FsZW5kYXJUaW1lbGluZSk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihSZWFjdENhbGVuZGFyVGltZWxpbmUpLmNhbGwodGhpcywgX3Byb3BzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0VGltZWxpbmVDb250ZXh0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkc3RhdGUud2lkdGgsXG4gICAgICAgICAgdmlzaWJsZVRpbWVTdGFydCA9IF90aGlzJHN0YXRlLnZpc2libGVUaW1lU3RhcnQsXG4gICAgICAgICAgdmlzaWJsZVRpbWVFbmQgPSBfdGhpcyRzdGF0ZS52aXNpYmxlVGltZUVuZCxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRzdGF0ZS5jYW52YXNUaW1lU3RhcnQsXG4gICAgICAgICAgY2FudmFzVGltZUVuZCA9IF90aGlzJHN0YXRlLmNhbnZhc1RpbWVFbmQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aW1lbGluZVdpZHRoOiB3aWR0aCxcbiAgICAgICAgdmlzaWJsZVRpbWVTdGFydDogdmlzaWJsZVRpbWVTdGFydCxcbiAgICAgICAgdmlzaWJsZVRpbWVFbmQ6IHZpc2libGVUaW1lRW5kLFxuICAgICAgICBjYW52YXNUaW1lU3RhcnQ6IGNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgY2FudmFzVGltZUVuZDogY2FudmFzVGltZUVuZFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRUaW1lbGluZVVuaXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkc3RhdGUyLndpZHRoLFxuICAgICAgICAgIHZpc2libGVUaW1lU3RhcnQgPSBfdGhpcyRzdGF0ZTIudmlzaWJsZVRpbWVTdGFydCxcbiAgICAgICAgICB2aXNpYmxlVGltZUVuZCA9IF90aGlzJHN0YXRlMi52aXNpYmxlVGltZUVuZDtcbiAgICAgIHZhciB0aW1lU3RlcHMgPSBfdGhpcy5wcm9wcy50aW1lU3RlcHM7XG4gICAgICB2YXIgem9vbSA9IHZpc2libGVUaW1lRW5kIC0gdmlzaWJsZVRpbWVTdGFydDtcbiAgICAgIHZhciBtaW5Vbml0ID0gKDAsIF9jYWxlbmRhci5nZXRNaW5Vbml0KSh6b29tLCB3aWR0aCwgdGltZVN0ZXBzKTtcbiAgICAgIHJldHVybiBtaW5Vbml0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF90aGlzLnByb3BzO1xuXG4gICAgICB2YXIgX3RoaXMkY29udGFpbmVyJGdldEJvID0gX3RoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgIGNvbnRhaW5lcldpZHRoID0gX3RoaXMkY29udGFpbmVyJGdldEJvLndpZHRoO1xuXG4gICAgICB2YXIgd2lkdGggPSBjb250YWluZXJXaWR0aCAtIHByb3BzLnNpZGViYXJXaWR0aCAtIHByb3BzLnJpZ2h0U2lkZWJhcldpZHRoO1xuICAgICAgdmFyIGNhbnZhc1dpZHRoID0gKDAsIF9jYWxlbmRhci5nZXRDYW52YXNXaWR0aCkod2lkdGgsIHByb3BzLmJ1ZmZlcik7XG5cbiAgICAgIHZhciBfc3RhY2tUaW1lbGluZUl0ZW1zID0gKDAsIF9jYWxlbmRhci5zdGFja1RpbWVsaW5lSXRlbXMpKHByb3BzLml0ZW1zLCBwcm9wcy5ncm91cHMsIGNhbnZhc1dpZHRoLCBfdGhpcy5zdGF0ZS5jYW52YXNUaW1lU3RhcnQsIF90aGlzLnN0YXRlLmNhbnZhc1RpbWVFbmQsIHByb3BzLmtleXMsIHByb3BzLmxpbmVIZWlnaHQsIHByb3BzLml0ZW1IZWlnaHRSYXRpbywgcHJvcHMuc3RhY2tJdGVtcywgX3RoaXMuc3RhdGUuZHJhZ2dpbmdJdGVtLCBfdGhpcy5zdGF0ZS5yZXNpemluZ0l0ZW0sIF90aGlzLnN0YXRlLmRyYWdUaW1lLCBfdGhpcy5zdGF0ZS5yZXNpemluZ0VkZ2UsIF90aGlzLnN0YXRlLnJlc2l6ZVRpbWUsIF90aGlzLnN0YXRlLm5ld0dyb3VwT3JkZXIpLFxuICAgICAgICAgIGRpbWVuc2lvbkl0ZW1zID0gX3N0YWNrVGltZWxpbmVJdGVtcy5kaW1lbnNpb25JdGVtcyxcbiAgICAgICAgICBoZWlnaHQgPSBfc3RhY2tUaW1lbGluZUl0ZW1zLmhlaWdodCxcbiAgICAgICAgICBncm91cEhlaWdodHMgPSBfc3RhY2tUaW1lbGluZUl0ZW1zLmdyb3VwSGVpZ2h0cyxcbiAgICAgICAgICBncm91cFRvcHMgPSBfc3RhY2tUaW1lbGluZUl0ZW1zLmdyb3VwVG9wczsgLy8gdGhpcyBpcyBuZWVkZWQgYnkgZHJhZ0l0ZW0gc2luY2UgaXQgdXNlcyBwYWdlWSBmcm9tIHRoZSBkcmFnIGV2ZW50c1xuICAgICAgLy8gaWYgdGhpcyB3YXMgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHNjcm9sbEVsZW1lbnQsIHRoaXMgd291bGQgbm90IGJlIG5lY2Vzc2FyeVxuXG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBkaW1lbnNpb25JdGVtczogZGltZW5zaW9uSXRlbXMsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBncm91cEhlaWdodHM6IGdyb3VwSGVpZ2h0cyxcbiAgICAgICAgZ3JvdXBUb3BzOiBncm91cFRvcHNcbiAgICAgIH0pOyAvL2luaXRpYWwgc2Nyb2xsIGxlZnQgaXMgdGhlIGJ1ZmZlciAtIDEgKDEgaXMgdmlzaWJsZSBhcmVhKSBkaXZpZGVkIGJ5IDIgKDIgaXMgdGhlIGJ1ZmZlciBzcGxpdCBvbiB0aGUgcmlnaHQgYW5kIGxlZnQgb2YgdGhlIHRpbWVsaW5lKVxuXG5cbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gd2lkdGggKiAoKHByb3BzLmJ1ZmZlciAtIDEpIC8gMik7XG4gICAgICBfdGhpcy5zY3JvbGxDb21wb25lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICBfdGhpcy5zY3JvbGxIZWFkZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25TY3JvbGxcIiwgZnVuY3Rpb24gKHNjcm9sbFgpIHtcbiAgICAgIHZhciB3aWR0aCA9IF90aGlzLnN0YXRlLndpZHRoO1xuICAgICAgdmFyIGNhbnZhc1RpbWVTdGFydCA9IF90aGlzLnN0YXRlLmNhbnZhc1RpbWVTdGFydDtcbiAgICAgIHZhciB6b29tID0gX3RoaXMuc3RhdGUudmlzaWJsZVRpbWVFbmQgLSBfdGhpcy5zdGF0ZS52aXNpYmxlVGltZVN0YXJ0O1xuICAgICAgdmFyIHZpc2libGVUaW1lU3RhcnQgPSBjYW52YXNUaW1lU3RhcnQgKyB6b29tICogc2Nyb2xsWCAvIHdpZHRoO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdGUudmlzaWJsZVRpbWVTdGFydCAhPT0gdmlzaWJsZVRpbWVTdGFydCB8fCBfdGhpcy5zdGF0ZS52aXNpYmxlVGltZUVuZCAhPT0gdmlzaWJsZVRpbWVTdGFydCArIHpvb20pIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25UaW1lQ2hhbmdlKHZpc2libGVUaW1lU3RhcnQsIHZpc2libGVUaW1lU3RhcnQgKyB6b29tLCBfdGhpcy51cGRhdGVTY3JvbGxDYW52YXMsIF90aGlzLmdldFRpbWVsaW5lVW5pdCgpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1cGRhdGVTY3JvbGxDYW52YXNcIiwgZnVuY3Rpb24gKHZpc2libGVUaW1lU3RhcnQsIHZpc2libGVUaW1lRW5kLCBmb3JjZVVwZGF0ZURpbWVuc2lvbnMpIHtcbiAgICAgIHZhciBpdGVtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogX3RoaXMucHJvcHMuaXRlbXM7XG4gICAgICB2YXIgZ3JvdXBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBfdGhpcy5wcm9wcy5ncm91cHM7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKCgwLCBfY2FsZW5kYXIuY2FsY3VsYXRlU2Nyb2xsQ2FudmFzKSh2aXNpYmxlVGltZVN0YXJ0LCB2aXNpYmxlVGltZUVuZCwgZm9yY2VVcGRhdGVEaW1lbnNpb25zLCBpdGVtcywgZ3JvdXBzLCBfdGhpcy5wcm9wcywgX3RoaXMuc3RhdGUpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVXaGVlbFpvb21cIiwgZnVuY3Rpb24gKHNwZWVkLCB4UG9zaXRpb24sIGRlbHRhWSkge1xuICAgICAgX3RoaXMuY2hhbmdlWm9vbSgxLjAgKyBzcGVlZCAqIGRlbHRhWSAvIDUwMCwgeFBvc2l0aW9uIC8gX3RoaXMuc3RhdGUud2lkdGgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNoYW5nZVpvb21cIiwgZnVuY3Rpb24gKHNjYWxlKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjU7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtaW5ab29tID0gX3RoaXMkcHJvcHMubWluWm9vbSxcbiAgICAgICAgICBtYXhab29tID0gX3RoaXMkcHJvcHMubWF4Wm9vbTtcbiAgICAgIHZhciBvbGRab29tID0gX3RoaXMuc3RhdGUudmlzaWJsZVRpbWVFbmQgLSBfdGhpcy5zdGF0ZS52aXNpYmxlVGltZVN0YXJ0O1xuICAgICAgdmFyIG5ld1pvb20gPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLnJvdW5kKG9sZFpvb20gKiBzY2FsZSksIG1pblpvb20pLCBtYXhab29tKTsgLy8gbWluIDEgbWluLCBtYXggMjAgeWVhcnNcblxuICAgICAgdmFyIG5ld1Zpc2libGVUaW1lU3RhcnQgPSBNYXRoLnJvdW5kKF90aGlzLnN0YXRlLnZpc2libGVUaW1lU3RhcnQgKyAob2xkWm9vbSAtIG5ld1pvb20pICogb2Zmc2V0KTtcblxuICAgICAgX3RoaXMucHJvcHMub25UaW1lQ2hhbmdlKG5ld1Zpc2libGVUaW1lU3RhcnQsIG5ld1Zpc2libGVUaW1lU3RhcnQgKyBuZXdab29tLCBfdGhpcy51cGRhdGVTY3JvbGxDYW52YXMsIF90aGlzLmdldFRpbWVsaW5lVW5pdCgpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzaG93UGVyaW9kXCIsIGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgdmFyIHZpc2libGVUaW1lU3RhcnQgPSBmcm9tLnZhbHVlT2YoKTtcbiAgICAgIHZhciB2aXNpYmxlVGltZUVuZCA9IHRvLnZhbHVlT2YoKTtcbiAgICAgIHZhciB6b29tID0gdmlzaWJsZVRpbWVFbmQgLSB2aXNpYmxlVGltZVN0YXJ0OyAvLyBjYW4ndCB6b29tIGluIG1vcmUgdGhhbiB0byBzaG93IG9uZSBob3VyXG5cbiAgICAgIGlmICh6b29tIDwgX3RoaXMucHJvcHMubWluWm9vbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnByb3BzLm9uVGltZUNoYW5nZSh2aXNpYmxlVGltZVN0YXJ0LCB2aXNpYmxlVGltZVN0YXJ0ICsgem9vbSwgX3RoaXMudXBkYXRlU2Nyb2xsQ2FudmFzLCBfdGhpcy5nZXRUaW1lbGluZVVuaXQoKSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2VsZWN0SXRlbVwiLCBmdW5jdGlvbiAoaXRlbSwgY2xpY2tUeXBlLCBlKSB7XG4gICAgICBpZiAoX3RoaXMuaXNJdGVtU2VsZWN0ZWQoaXRlbSkgfHwgX3RoaXMucHJvcHMuaXRlbVRvdWNoU2VuZHNDbGljayAmJiBjbGlja1R5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgICAgaWYgKGl0ZW0gJiYgX3RoaXMucHJvcHMub25JdGVtQ2xpY2spIHtcbiAgICAgICAgICB2YXIgdGltZSA9IF90aGlzLnRpbWVGcm9tSXRlbUV2ZW50KGUpO1xuXG4gICAgICAgICAgX3RoaXMucHJvcHMub25JdGVtQ2xpY2soaXRlbSwgZSwgdGltZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWxlY3RlZEl0ZW06IGl0ZW1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGl0ZW0gJiYgX3RoaXMucHJvcHMub25JdGVtU2VsZWN0KSB7XG4gICAgICAgICAgdmFyIF90aW1lID0gX3RoaXMudGltZUZyb21JdGVtRXZlbnQoZSk7XG5cbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkl0ZW1TZWxlY3QoaXRlbSwgZSwgX3RpbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gPT09IG51bGwgJiYgX3RoaXMucHJvcHMub25JdGVtRGVzZWxlY3QpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkl0ZW1EZXNlbGVjdChlKTsgLy8gdGhpcyBpc250IGluIHRoZSBkb2NzLiBJcyB0aGlzIGZ1bmN0aW9uIGV2ZW4gdXNlZD9cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZG91YmxlQ2xpY2tJdGVtXCIsIGZ1bmN0aW9uIChpdGVtLCBlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25JdGVtRG91YmxlQ2xpY2spIHtcbiAgICAgICAgdmFyIHRpbWUgPSBfdGhpcy50aW1lRnJvbUl0ZW1FdmVudChlKTtcblxuICAgICAgICBfdGhpcy5wcm9wcy5vbkl0ZW1Eb3VibGVDbGljayhpdGVtLCBlLCB0aW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb250ZXh0TWVudUNsaWNrSXRlbVwiLCBmdW5jdGlvbiAoaXRlbSwgZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uSXRlbUNvbnRleHRNZW51KSB7XG4gICAgICAgIHZhciB0aW1lID0gX3RoaXMudGltZUZyb21JdGVtRXZlbnQoZSk7XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25JdGVtQ29udGV4dE1lbnUoaXRlbSwgZSwgdGltZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0VGltZUZyb21Sb3dDbGlja0V2ZW50XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZHJhZ1NuYXAgPSBfdGhpcyRwcm9wczIuZHJhZ1NuYXAsXG4gICAgICAgICAgYnVmZmVyID0gX3RoaXMkcHJvcHMyLmJ1ZmZlcjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHN0YXRlMy53aWR0aCxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRzdGF0ZTMuY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICAgIGNhbnZhc1RpbWVFbmQgPSBfdGhpcyRzdGF0ZTMuY2FudmFzVGltZUVuZDsgLy8gdGhpcyBnaXZlcyB1cyBkaXN0YW5jZSBmcm9tIGxlZnQgb2Ygcm93IGVsZW1lbnQsIHNvIGV2ZW50IGlzIGluXG4gICAgICAvLyBjb250ZXh0IG9mIHRoZSByb3cgZWxlbWVudCwgbm90IGNsaWVudCBvciBwYWdlXG5cbiAgICAgIHZhciBvZmZzZXRYID0gZS5uYXRpdmVFdmVudC5vZmZzZXRYO1xuICAgICAgdmFyIHRpbWUgPSAoMCwgX2NhbGVuZGFyLmNhbGN1bGF0ZVRpbWVGb3JYUG9zaXRpb24pKGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCwgKDAsIF9jYWxlbmRhci5nZXRDYW52YXNXaWR0aCkod2lkdGgsIGJ1ZmZlciksIG9mZnNldFgpO1xuICAgICAgdGltZSA9IE1hdGguZmxvb3IodGltZSAvIGRyYWdTbmFwKSAqIGRyYWdTbmFwO1xuICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidGltZUZyb21JdGVtRXZlbnRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTQgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHN0YXRlNC53aWR0aCxcbiAgICAgICAgICB2aXNpYmxlVGltZVN0YXJ0ID0gX3RoaXMkc3RhdGU0LnZpc2libGVUaW1lU3RhcnQsXG4gICAgICAgICAgdmlzaWJsZVRpbWVFbmQgPSBfdGhpcyRzdGF0ZTQudmlzaWJsZVRpbWVFbmQ7XG4gICAgICB2YXIgZHJhZ1NuYXAgPSBfdGhpcy5wcm9wcy5kcmFnU25hcDtcbiAgICAgIHZhciBzY3JvbGxDb21wb25lbnQgPSBfdGhpcy5zY3JvbGxDb21wb25lbnQ7XG5cbiAgICAgIHZhciBfc2Nyb2xsQ29tcG9uZW50JGdldEIgPSBzY3JvbGxDb21wb25lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgc2Nyb2xsWCA9IF9zY3JvbGxDb21wb25lbnQkZ2V0Qi5sZWZ0O1xuXG4gICAgICB2YXIgeFJlbGF0aXZlVG9UaW1lbGluZSA9IGUuY2xpZW50WCAtIHNjcm9sbFg7XG4gICAgICB2YXIgcmVsYXRpdmVJdGVtUG9zaXRpb24gPSB4UmVsYXRpdmVUb1RpbWVsaW5lIC8gd2lkdGg7XG4gICAgICB2YXIgem9vbSA9IHZpc2libGVUaW1lRW5kIC0gdmlzaWJsZVRpbWVTdGFydDtcbiAgICAgIHZhciB0aW1lT2Zmc2V0ID0gcmVsYXRpdmVJdGVtUG9zaXRpb24gKiB6b29tO1xuICAgICAgdmFyIHRpbWUgPSBNYXRoLnJvdW5kKHZpc2libGVUaW1lU3RhcnQgKyB0aW1lT2Zmc2V0KTtcbiAgICAgIHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyBkcmFnU25hcCkgKiBkcmFnU25hcDtcbiAgICAgIHJldHVybiB0aW1lO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRyYWdJdGVtXCIsIGZ1bmN0aW9uIChpdGVtLCBkcmFnVGltZSwgbmV3R3JvdXBPcmRlcikge1xuICAgICAgdmFyIG5ld0dyb3VwID0gX3RoaXMucHJvcHMuZ3JvdXBzW25ld0dyb3VwT3JkZXJdO1xuICAgICAgdmFyIGtleXMgPSBfdGhpcy5wcm9wcy5rZXlzO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRyYWdnaW5nSXRlbTogaXRlbSxcbiAgICAgICAgZHJhZ1RpbWU6IGRyYWdUaW1lLFxuICAgICAgICBuZXdHcm91cE9yZGVyOiBuZXdHcm91cE9yZGVyLFxuICAgICAgICBkcmFnR3JvdXBUaXRsZTogbmV3R3JvdXAgPyAoMCwgX2dlbmVyaWMuX2dldCkobmV3R3JvdXAsIGtleXMuZ3JvdXBMYWJlbEtleSkgOiAnJ1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnVwZGF0aW5nSXRlbSh7XG4gICAgICAgIGV2ZW50VHlwZTogJ21vdmUnLFxuICAgICAgICBpdGVtSWQ6IGl0ZW0sXG4gICAgICAgIHRpbWU6IGRyYWdUaW1lLFxuICAgICAgICBuZXdHcm91cE9yZGVyOiBuZXdHcm91cE9yZGVyXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkcm9wSXRlbVwiLCBmdW5jdGlvbiAoaXRlbSwgZHJhZ1RpbWUsIG5ld0dyb3VwT3JkZXIpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJhZ2dpbmdJdGVtOiBudWxsLFxuICAgICAgICBkcmFnVGltZTogbnVsbCxcbiAgICAgICAgZHJhZ0dyb3VwVGl0bGU6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25JdGVtTW92ZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkl0ZW1Nb3ZlKGl0ZW0sIGRyYWdUaW1lLCBuZXdHcm91cE9yZGVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZXNpemluZ0l0ZW1cIiwgZnVuY3Rpb24gKGl0ZW0sIHJlc2l6ZVRpbWUsIGVkZ2UpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcmVzaXppbmdJdGVtOiBpdGVtLFxuICAgICAgICByZXNpemluZ0VkZ2U6IGVkZ2UsXG4gICAgICAgIHJlc2l6ZVRpbWU6IHJlc2l6ZVRpbWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy51cGRhdGluZ0l0ZW0oe1xuICAgICAgICBldmVudFR5cGU6ICdyZXNpemUnLFxuICAgICAgICBpdGVtSWQ6IGl0ZW0sXG4gICAgICAgIHRpbWU6IHJlc2l6ZVRpbWUsXG4gICAgICAgIGVkZ2U6IGVkZ2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlc2l6ZWRJdGVtXCIsIGZ1bmN0aW9uIChpdGVtLCByZXNpemVUaW1lLCBlZGdlLCB0aW1lRGVsdGEpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcmVzaXppbmdJdGVtOiBudWxsLFxuICAgICAgICByZXNpemluZ0VkZ2U6IG51bGwsXG4gICAgICAgIHJlc2l6ZVRpbWU6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25JdGVtUmVzaXplICYmIHRpbWVEZWx0YSAhPT0gMCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkl0ZW1SZXNpemUoaXRlbSwgcmVzaXplVGltZSwgZWRnZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidXBkYXRpbmdJdGVtXCIsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZXZlbnRUeXBlID0gX3JlZi5ldmVudFR5cGUsXG4gICAgICAgICAgaXRlbUlkID0gX3JlZi5pdGVtSWQsXG4gICAgICAgICAgdGltZSA9IF9yZWYudGltZSxcbiAgICAgICAgICBlZGdlID0gX3JlZi5lZGdlLFxuICAgICAgICAgIG5ld0dyb3VwT3JkZXIgPSBfcmVmLm5ld0dyb3VwT3JkZXI7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkl0ZW1EcmFnKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uSXRlbURyYWcoe1xuICAgICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxuICAgICAgICAgIGl0ZW1JZDogaXRlbUlkLFxuICAgICAgICAgIHRpbWU6IHRpbWUsXG4gICAgICAgICAgZWRnZTogZWRnZSxcbiAgICAgICAgICBuZXdHcm91cE9yZGVyOiBuZXdHcm91cE9yZGVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVJvd0NsaWNrXCIsIGZ1bmN0aW9uIChlLCByb3dJbmRleCkge1xuICAgICAgLy8gc2hvdWxkbnQgdGhpcyBiZSBoYW5kbGVkIGJ5IHRoZSB1c2VyLCBhcyBmYXIgYXMgd2hlbiB0byBkZXNlbGVjdCBhbiBpdGVtP1xuICAgICAgaWYgKF90aGlzLmhhc1NlbGVjdGVkSXRlbSgpKSB7XG4gICAgICAgIF90aGlzLnNlbGVjdEl0ZW0obnVsbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrID09IG51bGwpIHJldHVybjtcblxuICAgICAgdmFyIHRpbWUgPSBfdGhpcy5nZXRUaW1lRnJvbVJvd0NsaWNrRXZlbnQoZSk7XG5cbiAgICAgIHZhciBncm91cElkID0gKDAsIF9nZW5lcmljLl9nZXQpKF90aGlzLnByb3BzLmdyb3Vwc1tyb3dJbmRleF0sIF90aGlzLnByb3BzLmtleXMuZ3JvdXBJZEtleSk7XG5cbiAgICAgIF90aGlzLnByb3BzLm9uQ2FudmFzQ2xpY2soZ3JvdXBJZCwgdGltZSwgZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUm93RG91YmxlQ2xpY2tcIiwgZnVuY3Rpb24gKGUsIHJvd0luZGV4KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DYW52YXNEb3VibGVDbGljayA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgIHZhciB0aW1lID0gX3RoaXMuZ2V0VGltZUZyb21Sb3dDbGlja0V2ZW50KGUpO1xuXG4gICAgICB2YXIgZ3JvdXBJZCA9ICgwLCBfZ2VuZXJpYy5fZ2V0KShfdGhpcy5wcm9wcy5ncm91cHNbcm93SW5kZXhdLCBfdGhpcy5wcm9wcy5rZXlzLmdyb3VwSWRLZXkpO1xuXG4gICAgICBfdGhpcy5wcm9wcy5vbkNhbnZhc0RvdWJsZUNsaWNrKGdyb3VwSWQsIHRpbWUsIGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVNjcm9sbENvbnRleHRNZW51XCIsIGZ1bmN0aW9uIChlLCByb3dJbmRleCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2FudmFzQ29udGV4dE1lbnUgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICB2YXIgdGltZVBvc2l0aW9uID0gX3RoaXMuZ2V0VGltZUZyb21Sb3dDbGlja0V2ZW50KGUpO1xuXG4gICAgICB2YXIgZ3JvdXBJZCA9ICgwLCBfZ2VuZXJpYy5fZ2V0KShfdGhpcy5wcm9wcy5ncm91cHNbcm93SW5kZXhdLCBfdGhpcy5wcm9wcy5rZXlzLmdyb3VwSWRLZXkpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DYW52YXNDb250ZXh0TWVudSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25DYW52YXNDb250ZXh0TWVudShncm91cElkLCB0aW1lUG9zaXRpb24sIGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUhlYWRlclJlZlwiLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIF90aGlzLnNjcm9sbEhlYWRlclJlZiA9IGVsO1xuXG4gICAgICBfdGhpcy5wcm9wcy5oZWFkZXJSZWYoZWwpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImlzVGltZWxpbmVIZWFkZXJcIiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gY2hpbGQudHlwZS5zZWNyZXRLZXkgPT09IF9UaW1lbGluZUhlYWRlcnNbXCJkZWZhdWx0XCJdLnNlY3JldEtleTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJIZWFkZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICB2YXIgaGVhZGVyUmVuZGVyZXI7XG5cbiAgICAgICAgX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5tYXAoX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGlmIChfdGhpcy5pc1RpbWVsaW5lSGVhZGVyKGNoaWxkKSkge1xuICAgICAgICAgICAgaGVhZGVyUmVuZGVyZXIgPSBjaGlsZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChoZWFkZXJSZW5kZXJlcikge1xuICAgICAgICAgIHJldHVybiBoZWFkZXJSZW5kZXJlcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9UaW1lbGluZUhlYWRlcnNbXCJkZWZhdWx0XCJdLCBudWxsLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RhdGVIZWFkZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHVuaXQ6IFwicHJpbWFyeUhlYWRlclwiXG4gICAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9EYXRlSGVhZGVyW1wiZGVmYXVsdFwiXSwgbnVsbCkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFNjcm9sbEVsZW1lbnRSZWZcIiwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBfdGhpcy5wcm9wcy5zY3JvbGxSZWYoZWwpO1xuXG4gICAgICBfdGhpcy5zY3JvbGxDb21wb25lbnQgPSBlbDtcbiAgICB9KTtcblxuICAgIF90aGlzLmdldFNlbGVjdGVkID0gX3RoaXMuZ2V0U2VsZWN0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMuaGFzU2VsZWN0ZWRJdGVtID0gX3RoaXMuaGFzU2VsZWN0ZWRJdGVtLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLmlzSXRlbVNlbGVjdGVkID0gX3RoaXMuaXNJdGVtU2VsZWN0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIF92aXNpYmxlVGltZVN0YXJ0ID0gbnVsbDtcbiAgICB2YXIgX3Zpc2libGVUaW1lRW5kID0gbnVsbDtcblxuICAgIGlmIChfdGhpcy5wcm9wcy5kZWZhdWx0VGltZVN0YXJ0ICYmIF90aGlzLnByb3BzLmRlZmF1bHRUaW1lRW5kKSB7XG4gICAgICBfdmlzaWJsZVRpbWVTdGFydCA9IF90aGlzLnByb3BzLmRlZmF1bHRUaW1lU3RhcnQudmFsdWVPZigpO1xuICAgICAgX3Zpc2libGVUaW1lRW5kID0gX3RoaXMucHJvcHMuZGVmYXVsdFRpbWVFbmQudmFsdWVPZigpO1xuICAgIH0gZWxzZSBpZiAoX3RoaXMucHJvcHMudmlzaWJsZVRpbWVTdGFydCAmJiBfdGhpcy5wcm9wcy52aXNpYmxlVGltZUVuZCkge1xuICAgICAgX3Zpc2libGVUaW1lU3RhcnQgPSBfdGhpcy5wcm9wcy52aXNpYmxlVGltZVN0YXJ0O1xuICAgICAgX3Zpc2libGVUaW1lRW5kID0gX3RoaXMucHJvcHMudmlzaWJsZVRpbWVFbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vdGhyb3dpbmcgYW4gZXJyb3IgYmVjYXVzZSBuZWl0aGVyIGRlZmF1bHQgb3IgdmlzaWJsZSB0aW1lIHByb3BzIHByb3ZpZGVkXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHByb3ZpZGUgZWl0aGVyIFwiZGVmYXVsdFRpbWVTdGFydFwiIGFuZCBcImRlZmF1bHRUaW1lRW5kXCIgb3IgXCJ2aXNpYmxlVGltZVN0YXJ0XCIgYW5kIFwidmlzaWJsZVRpbWVFbmRcIiB0byBpbml0aWFsaXplIHRoZSBUaW1lbGluZScpO1xuICAgIH1cblxuICAgIHZhciBfZ2V0Q2FudmFzQm91bmRhcmllc0YgPSAoMCwgX2NhbGVuZGFyLmdldENhbnZhc0JvdW5kYXJpZXNGcm9tVmlzaWJsZVRpbWUpKF92aXNpYmxlVGltZVN0YXJ0LCBfdmlzaWJsZVRpbWVFbmQsIF9wcm9wcy5idWZmZXIpLFxuICAgICAgICBfZ2V0Q2FudmFzQm91bmRhcmllc0YyID0gX3NsaWNlZFRvQXJyYXkoX2dldENhbnZhc0JvdW5kYXJpZXNGLCAyKSxcbiAgICAgICAgX2NhbnZhc1RpbWVTdGFydCA9IF9nZXRDYW52YXNCb3VuZGFyaWVzRjJbMF0sXG4gICAgICAgIF9jYW52YXNUaW1lRW5kID0gX2dldENhbnZhc0JvdW5kYXJpZXNGMlsxXTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgd2lkdGg6IDEwMDAsXG4gICAgICB2aXNpYmxlVGltZVN0YXJ0OiBfdmlzaWJsZVRpbWVTdGFydCxcbiAgICAgIHZpc2libGVUaW1lRW5kOiBfdmlzaWJsZVRpbWVFbmQsXG4gICAgICBjYW52YXNUaW1lU3RhcnQ6IF9jYW52YXNUaW1lU3RhcnQsXG4gICAgICBjYW52YXNUaW1lRW5kOiBfY2FudmFzVGltZUVuZCxcbiAgICAgIHNlbGVjdGVkSXRlbTogbnVsbCxcbiAgICAgIGRyYWdUaW1lOiBudWxsLFxuICAgICAgZHJhZ0dyb3VwVGl0bGU6IG51bGwsXG4gICAgICByZXNpemVUaW1lOiBudWxsLFxuICAgICAgcmVzaXppbmdJdGVtOiBudWxsLFxuICAgICAgcmVzaXppbmdFZGdlOiBudWxsXG4gICAgfTtcblxuICAgIHZhciBfY2FudmFzV2lkdGggPSAoMCwgX2NhbGVuZGFyLmdldENhbnZhc1dpZHRoKShfdGhpcy5zdGF0ZS53aWR0aCwgX3Byb3BzLmJ1ZmZlcik7XG5cbiAgICB2YXIgX3N0YWNrVGltZWxpbmVJdGVtczIgPSAoMCwgX2NhbGVuZGFyLnN0YWNrVGltZWxpbmVJdGVtcykoX3Byb3BzLml0ZW1zLCBfcHJvcHMuZ3JvdXBzLCBfY2FudmFzV2lkdGgsIF90aGlzLnN0YXRlLmNhbnZhc1RpbWVTdGFydCwgX3RoaXMuc3RhdGUuY2FudmFzVGltZUVuZCwgX3Byb3BzLmtleXMsIF9wcm9wcy5saW5lSGVpZ2h0LCBfcHJvcHMuaXRlbUhlaWdodFJhdGlvLCBfcHJvcHMuc3RhY2tJdGVtcywgX3RoaXMuc3RhdGUuZHJhZ2dpbmdJdGVtLCBfdGhpcy5zdGF0ZS5yZXNpemluZ0l0ZW0sIF90aGlzLnN0YXRlLmRyYWdUaW1lLCBfdGhpcy5zdGF0ZS5yZXNpemluZ0VkZ2UsIF90aGlzLnN0YXRlLnJlc2l6ZVRpbWUsIF90aGlzLnN0YXRlLm5ld0dyb3VwT3JkZXIpLFxuICAgICAgICBfZGltZW5zaW9uSXRlbXMgPSBfc3RhY2tUaW1lbGluZUl0ZW1zMi5kaW1lbnNpb25JdGVtcyxcbiAgICAgICAgX2hlaWdodCA9IF9zdGFja1RpbWVsaW5lSXRlbXMyLmhlaWdodCxcbiAgICAgICAgX2dyb3VwSGVpZ2h0cyA9IF9zdGFja1RpbWVsaW5lSXRlbXMyLmdyb3VwSGVpZ2h0cyxcbiAgICAgICAgX2dyb3VwVG9wcyA9IF9zdGFja1RpbWVsaW5lSXRlbXMyLmdyb3VwVG9wcztcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1kaXJlY3QtbXV0YXRpb24tc3RhdGUgKi9cblxuXG4gICAgX3RoaXMuc3RhdGUuZGltZW5zaW9uSXRlbXMgPSBfZGltZW5zaW9uSXRlbXM7XG4gICAgX3RoaXMuc3RhdGUuaGVpZ2h0ID0gX2hlaWdodDtcbiAgICBfdGhpcy5zdGF0ZS5ncm91cEhlaWdodHMgPSBfZ3JvdXBIZWlnaHRzO1xuICAgIF90aGlzLnN0YXRlLmdyb3VwVG9wcyA9IF9ncm91cFRvcHM7XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlYWN0Q2FsZW5kYXJUaW1lbGluZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlc2l6ZSh0aGlzLnByb3BzKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMucmVzaXplRGV0ZWN0b3IgJiYgdGhpcy5wcm9wcy5yZXNpemVEZXRlY3Rvci5hZGRMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnByb3BzLnJlc2l6ZURldGVjdG9yLmFkZExpc3RlbmVyKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBfd2luZG93W1wiZGVmYXVsdFwiXS5hZGRMaXN0ZW5lcih0aGlzKTtcblxuICAgICAgdGhpcy5sYXN0VG91Y2hEaXN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMucmVzaXplRGV0ZWN0b3IgJiYgdGhpcy5wcm9wcy5yZXNpemVEZXRlY3Rvci5hZGRMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnByb3BzLnJlc2l6ZURldGVjdG9yLnJlbW92ZUxpc3RlbmVyKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBfd2luZG93W1wiZGVmYXVsdFwiXS5yZW1vdmVMaXN0ZW5lcih0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgdmFyIG5ld1pvb20gPSB0aGlzLnN0YXRlLnZpc2libGVUaW1lRW5kIC0gdGhpcy5zdGF0ZS52aXNpYmxlVGltZVN0YXJ0O1xuICAgICAgdmFyIG9sZFpvb20gPSBwcmV2U3RhdGUudmlzaWJsZVRpbWVFbmQgLSBwcmV2U3RhdGUudmlzaWJsZVRpbWVTdGFydDsgLy8gYXJlIHdlIGNoYW5naW5nIHpvb20/IFJlcG9ydCBpdCFcblxuICAgICAgaWYgKHRoaXMucHJvcHMub25ab29tICYmIG5ld1pvb20gIT09IG9sZFpvb20pIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblpvb20odGhpcy5nZXRUaW1lbGluZUNvbnRleHQoKSwgdGhpcy5nZXRUaW1lbGluZVVuaXQoKSk7XG4gICAgICB9IC8vIFRoZSBib3VuZHMgaGF2ZSBjaGFuZ2VkPyBSZXBvcnQgaXQhXG5cblxuICAgICAgaWYgKHRoaXMucHJvcHMub25Cb3VuZHNDaGFuZ2UgJiYgdGhpcy5zdGF0ZS5jYW52YXNUaW1lU3RhcnQgIT09IHByZXZTdGF0ZS5jYW52YXNUaW1lU3RhcnQpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkJvdW5kc0NoYW5nZSh0aGlzLnN0YXRlLmNhbnZhc1RpbWVTdGFydCwgdGhpcy5zdGF0ZS5jYW52YXNUaW1lU3RhcnQgKyBuZXdab29tICogMyk7XG4gICAgICB9IC8vIENoZWNrIHRoZSBzY3JvbGwgaXMgY29ycmVjdFxuXG5cbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gTWF0aC5yb3VuZCh0aGlzLnN0YXRlLndpZHRoICogKHRoaXMuc3RhdGUudmlzaWJsZVRpbWVTdGFydCAtIHRoaXMuc3RhdGUuY2FudmFzVGltZVN0YXJ0KSAvIG5ld1pvb20pO1xuICAgICAgdmFyIGNvbXBvbmVudFNjcm9sbExlZnQgPSBNYXRoLnJvdW5kKHByZXZTdGF0ZS53aWR0aCAqIChwcmV2U3RhdGUudmlzaWJsZVRpbWVTdGFydCAtIHByZXZTdGF0ZS5jYW52YXNUaW1lU3RhcnQpIC8gb2xkWm9vbSk7XG5cbiAgICAgIGlmIChjb21wb25lbnRTY3JvbGxMZWZ0ICE9PSBzY3JvbGxMZWZ0KSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsQ29tcG9uZW50LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgICB0aGlzLnNjcm9sbEhlYWRlclJlZi5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29sdW1uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb2x1bW5zKGNhbnZhc1RpbWVTdGFydCwgY2FudmFzVGltZUVuZCwgY2FudmFzV2lkdGgsIG1pblVuaXQsIHRpbWVTdGVwcywgaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9Db2x1bW5zW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBjYW52YXNUaW1lU3RhcnQ6IGNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgY2FudmFzVGltZUVuZDogY2FudmFzVGltZUVuZCxcbiAgICAgICAgY2FudmFzV2lkdGg6IGNhbnZhc1dpZHRoLFxuICAgICAgICBsaW5lQ291bnQ6ICgwLCBfZ2VuZXJpYy5fbGVuZ3RoKSh0aGlzLnByb3BzLmdyb3VwcyksXG4gICAgICAgIG1pblVuaXQ6IG1pblVuaXQsXG4gICAgICAgIHRpbWVTdGVwczogdGltZVN0ZXBzLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgdmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWU6IHRoaXMucHJvcHMudmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyb3dzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJvd3MoY2FudmFzV2lkdGgsIGdyb3VwSGVpZ2h0cywgZ3JvdXBzKSB7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9Hcm91cFJvd3NbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGdyb3VwczogZ3JvdXBzLFxuICAgICAgICBjYW52YXNXaWR0aDogY2FudmFzV2lkdGgsXG4gICAgICAgIGxpbmVDb3VudDogKDAsIF9nZW5lcmljLl9sZW5ndGgpKHRoaXMucHJvcHMuZ3JvdXBzKSxcbiAgICAgICAgZ3JvdXBIZWlnaHRzOiBncm91cEhlaWdodHMsXG4gICAgICAgIGNsaWNrVG9sZXJhbmNlOiB0aGlzLnByb3BzLmNsaWNrVG9sZXJhbmNlLFxuICAgICAgICBvblJvd0NsaWNrOiB0aGlzLmhhbmRsZVJvd0NsaWNrLFxuICAgICAgICBvblJvd0RvdWJsZUNsaWNrOiB0aGlzLmhhbmRsZVJvd0RvdWJsZUNsaWNrLFxuICAgICAgICBob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cDogdGhpcy5wcm9wcy5ob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cCxcbiAgICAgICAgb25Sb3dDb250ZXh0Q2xpY2s6IHRoaXMuaGFuZGxlU2Nyb2xsQ29udGV4dE1lbnVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpdGVtc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpdGVtcyhjYW52YXNUaW1lU3RhcnQsIHpvb20sIGNhbnZhc1RpbWVFbmQsIGNhbnZhc1dpZHRoLCBtaW5Vbml0LCBkaW1lbnNpb25JdGVtcywgZ3JvdXBIZWlnaHRzLCBncm91cFRvcHMpIHtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0l0ZW1zW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBjYW52YXNUaW1lU3RhcnQ6IGNhbnZhc1RpbWVTdGFydCxcbiAgICAgICAgY2FudmFzVGltZUVuZDogY2FudmFzVGltZUVuZCxcbiAgICAgICAgY2FudmFzV2lkdGg6IGNhbnZhc1dpZHRoLFxuICAgICAgICBkaW1lbnNpb25JdGVtczogZGltZW5zaW9uSXRlbXMsXG4gICAgICAgIGdyb3VwVG9wczogZ3JvdXBUb3BzLFxuICAgICAgICBpdGVtczogdGhpcy5wcm9wcy5pdGVtcyxcbiAgICAgICAgZ3JvdXBzOiB0aGlzLnByb3BzLmdyb3VwcyxcbiAgICAgICAga2V5czogdGhpcy5wcm9wcy5rZXlzLFxuICAgICAgICBzZWxlY3RlZEl0ZW06IHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtLFxuICAgICAgICBkcmFnU25hcDogdGhpcy5wcm9wcy5kcmFnU25hcCxcbiAgICAgICAgbWluUmVzaXplV2lkdGg6IHRoaXMucHJvcHMubWluUmVzaXplV2lkdGgsXG4gICAgICAgIGNhbkNoYW5nZUdyb3VwOiB0aGlzLnByb3BzLmNhbkNoYW5nZUdyb3VwLFxuICAgICAgICBjYW5Nb3ZlOiB0aGlzLnByb3BzLmNhbk1vdmUsXG4gICAgICAgIGNhblJlc2l6ZTogdGhpcy5wcm9wcy5jYW5SZXNpemUsXG4gICAgICAgIHVzZVJlc2l6ZUhhbmRsZTogdGhpcy5wcm9wcy51c2VSZXNpemVIYW5kbGUsXG4gICAgICAgIGNhblNlbGVjdDogdGhpcy5wcm9wcy5jYW5TZWxlY3QsXG4gICAgICAgIG1vdmVSZXNpemVWYWxpZGF0b3I6IHRoaXMucHJvcHMubW92ZVJlc2l6ZVZhbGlkYXRvcixcbiAgICAgICAgaXRlbVNlbGVjdDogdGhpcy5zZWxlY3RJdGVtLFxuICAgICAgICBpdGVtRHJhZzogdGhpcy5kcmFnSXRlbSxcbiAgICAgICAgaXRlbURyb3A6IHRoaXMuZHJvcEl0ZW0sXG4gICAgICAgIG9uSXRlbURvdWJsZUNsaWNrOiB0aGlzLmRvdWJsZUNsaWNrSXRlbSxcbiAgICAgICAgb25JdGVtQ29udGV4dE1lbnU6IHRoaXMucHJvcHMub25JdGVtQ29udGV4dE1lbnUgPyB0aGlzLmNvbnRleHRNZW51Q2xpY2tJdGVtIDogdW5kZWZpbmVkLFxuICAgICAgICBpdGVtUmVzaXppbmc6IHRoaXMucmVzaXppbmdJdGVtLFxuICAgICAgICBpdGVtUmVzaXplZDogdGhpcy5yZXNpemVkSXRlbSxcbiAgICAgICAgaXRlbVJlbmRlcmVyOiB0aGlzLnByb3BzLml0ZW1SZW5kZXJlcixcbiAgICAgICAgc2VsZWN0ZWQ6IHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgIHNjcm9sbFJlZjogdGhpcy5zY3JvbGxDb21wb25lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaWRlYmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNpZGViYXIoaGVpZ2h0LCBncm91cEhlaWdodHMpIHtcbiAgICAgIHZhciBzaWRlYmFyV2lkdGggPSB0aGlzLnByb3BzLnNpZGViYXJXaWR0aDtcbiAgICAgIHJldHVybiBzaWRlYmFyV2lkdGggJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9TaWRlYmFyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBncm91cHM6IHRoaXMucHJvcHMuZ3JvdXBzLFxuICAgICAgICBncm91cFJlbmRlcmVyOiB0aGlzLnByb3BzLmdyb3VwUmVuZGVyZXIsXG4gICAgICAgIGtleXM6IHRoaXMucHJvcHMua2V5cyxcbiAgICAgICAgd2lkdGg6IHNpZGViYXJXaWR0aCxcbiAgICAgICAgZ3JvdXBIZWlnaHRzOiBncm91cEhlaWdodHMsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmlnaHRTaWRlYmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJpZ2h0U2lkZWJhcihoZWlnaHQsIGdyb3VwSGVpZ2h0cykge1xuICAgICAgdmFyIHJpZ2h0U2lkZWJhcldpZHRoID0gdGhpcy5wcm9wcy5yaWdodFNpZGViYXJXaWR0aDtcbiAgICAgIHJldHVybiByaWdodFNpZGViYXJXaWR0aCAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1NpZGViYXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGdyb3VwczogdGhpcy5wcm9wcy5ncm91cHMsXG4gICAgICAgIGtleXM6IHRoaXMucHJvcHMua2V5cyxcbiAgICAgICAgZ3JvdXBSZW5kZXJlcjogdGhpcy5wcm9wcy5ncm91cFJlbmRlcmVyLFxuICAgICAgICBpc1JpZ2h0U2lkZWJhcjogdHJ1ZSxcbiAgICAgICAgd2lkdGg6IHJpZ2h0U2lkZWJhcldpZHRoLFxuICAgICAgICBncm91cEhlaWdodHM6IGdyb3VwSGVpZ2h0cyxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjaGVjayBpZiBjaGlsZCBvZiB0eXBlIFRpbWVsaW5lSGVhZGVyXG4gICAgICogcmVmZXIgdG8gZm9yIGV4cGxhbmF0aW9uIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXIjY2hlY2tpbmctZWxlbWVudC10eXBlc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hpbGRyZW5XaXRoUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hpbGRyZW5XaXRoUHJvcHMoY2FudmFzVGltZVN0YXJ0LCBjYW52YXNUaW1lRW5kLCBjYW52YXNXaWR0aCwgZGltZW5zaW9uSXRlbXMsIGdyb3VwSGVpZ2h0cywgZ3JvdXBUb3BzLCBoZWlnaHQsIHZpc2libGVUaW1lU3RhcnQsIHZpc2libGVUaW1lRW5kLCBtaW5Vbml0LCB0aW1lU3RlcHMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIGNvbnZlcnQgdG8gYW4gYXJyYXkgYW5kIHJlbW92ZSB0aGUgbnVsbHNcblxuXG4gICAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikgPyB0aGlzLnByb3BzLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYztcbiAgICAgIH0pIDogW3RoaXMucHJvcHMuY2hpbGRyZW5dO1xuICAgICAgdmFyIGNoaWxkUHJvcHMgPSB7XG4gICAgICAgIGNhbnZhc1RpbWVTdGFydDogY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICBjYW52YXNUaW1lRW5kOiBjYW52YXNUaW1lRW5kLFxuICAgICAgICBjYW52YXNXaWR0aDogY2FudmFzV2lkdGgsXG4gICAgICAgIHZpc2libGVUaW1lU3RhcnQ6IHZpc2libGVUaW1lU3RhcnQsXG4gICAgICAgIHZpc2libGVUaW1lRW5kOiB2aXNpYmxlVGltZUVuZCxcbiAgICAgICAgZGltZW5zaW9uSXRlbXM6IGRpbWVuc2lvbkl0ZW1zLFxuICAgICAgICBpdGVtczogdGhpcy5wcm9wcy5pdGVtcyxcbiAgICAgICAgZ3JvdXBzOiB0aGlzLnByb3BzLmdyb3VwcyxcbiAgICAgICAga2V5czogdGhpcy5wcm9wcy5rZXlzLFxuICAgICAgICBncm91cEhlaWdodHM6IGdyb3VwSGVpZ2h0cyxcbiAgICAgICAgZ3JvdXBUb3BzOiBncm91cFRvcHMsXG4gICAgICAgIHNlbGVjdGVkOiB0aGlzLmdldFNlbGVjdGVkKCksXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBtaW5Vbml0OiBtaW5Vbml0LFxuICAgICAgICB0aW1lU3RlcHM6IHRpbWVTdGVwc1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLm1hcChjaGlsZEFycmF5LCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFfdGhpczMuaXNUaW1lbGluZUhlYWRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2VsZWN0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0gJiYgIXRoaXMucHJvcHMuc2VsZWN0ZWQgPyBbdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW1dIDogdGhpcy5wcm9wcy5zZWxlY3RlZCB8fCBbXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzU2VsZWN0ZWRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1NlbGVjdGVkSXRlbSgpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLnNlbGVjdGVkKSkgcmV0dXJuICEhdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW07XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RlZC5sZW5ndGggPiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0l0ZW1TZWxlY3RlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0l0ZW1TZWxlY3RlZChpdGVtSWQpIHtcbiAgICAgIHZhciBzZWxlY3RlZEl0ZW1zID0gdGhpcy5nZXRTZWxlY3RlZCgpO1xuICAgICAgcmV0dXJuIHNlbGVjdGVkSXRlbXMuc29tZShmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gaSA9PT0gaXRlbUlkO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXRlbXMgPSBfdGhpcyRwcm9wczMuaXRlbXMsXG4gICAgICAgICAgZ3JvdXBzID0gX3RoaXMkcHJvcHMzLmdyb3VwcyxcbiAgICAgICAgICBzaWRlYmFyV2lkdGggPSBfdGhpcyRwcm9wczMuc2lkZWJhcldpZHRoLFxuICAgICAgICAgIHJpZ2h0U2lkZWJhcldpZHRoID0gX3RoaXMkcHJvcHMzLnJpZ2h0U2lkZWJhcldpZHRoLFxuICAgICAgICAgIHRpbWVTdGVwcyA9IF90aGlzJHByb3BzMy50aW1lU3RlcHMsXG4gICAgICAgICAgdHJhZGl0aW9uYWxab29tID0gX3RoaXMkcHJvcHMzLnRyYWRpdGlvbmFsWm9vbSxcbiAgICAgICAgICBidWZmZXIgPSBfdGhpcyRwcm9wczMuYnVmZmVyO1xuICAgICAgdmFyIF90aGlzJHN0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZHJhZ2dpbmdJdGVtID0gX3RoaXMkc3RhdGU1LmRyYWdnaW5nSXRlbSxcbiAgICAgICAgICByZXNpemluZ0l0ZW0gPSBfdGhpcyRzdGF0ZTUucmVzaXppbmdJdGVtLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkc3RhdGU1LndpZHRoLFxuICAgICAgICAgIHZpc2libGVUaW1lU3RhcnQgPSBfdGhpcyRzdGF0ZTUudmlzaWJsZVRpbWVTdGFydCxcbiAgICAgICAgICB2aXNpYmxlVGltZUVuZCA9IF90aGlzJHN0YXRlNS52aXNpYmxlVGltZUVuZCxcbiAgICAgICAgICBjYW52YXNUaW1lU3RhcnQgPSBfdGhpcyRzdGF0ZTUuY2FudmFzVGltZVN0YXJ0LFxuICAgICAgICAgIGNhbnZhc1RpbWVFbmQgPSBfdGhpcyRzdGF0ZTUuY2FudmFzVGltZUVuZDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTYgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRpbWVuc2lvbkl0ZW1zID0gX3RoaXMkc3RhdGU2LmRpbWVuc2lvbkl0ZW1zLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHN0YXRlNi5oZWlnaHQsXG4gICAgICAgICAgZ3JvdXBIZWlnaHRzID0gX3RoaXMkc3RhdGU2Lmdyb3VwSGVpZ2h0cyxcbiAgICAgICAgICBncm91cFRvcHMgPSBfdGhpcyRzdGF0ZTYuZ3JvdXBUb3BzO1xuICAgICAgdmFyIHpvb20gPSB2aXNpYmxlVGltZUVuZCAtIHZpc2libGVUaW1lU3RhcnQ7XG4gICAgICB2YXIgY2FudmFzV2lkdGggPSAoMCwgX2NhbGVuZGFyLmdldENhbnZhc1dpZHRoKSh3aWR0aCwgYnVmZmVyKTtcbiAgICAgIHZhciBtaW5Vbml0ID0gKDAsIF9jYWxlbmRhci5nZXRNaW5Vbml0KSh6b29tLCB3aWR0aCwgdGltZVN0ZXBzKTtcbiAgICAgIHZhciBpc0ludGVyYWN0aW5nV2l0aEl0ZW0gPSAhIWRyYWdnaW5nSXRlbSB8fCAhIXJlc2l6aW5nSXRlbTtcblxuICAgICAgaWYgKGlzSW50ZXJhY3RpbmdXaXRoSXRlbSkge1xuICAgICAgICB2YXIgc3RhY2tSZXN1bHRzID0gKDAsIF9jYWxlbmRhci5zdGFja1RpbWVsaW5lSXRlbXMpKGl0ZW1zLCBncm91cHMsIGNhbnZhc1dpZHRoLCB0aGlzLnN0YXRlLmNhbnZhc1RpbWVTdGFydCwgdGhpcy5zdGF0ZS5jYW52YXNUaW1lRW5kLCB0aGlzLnByb3BzLmtleXMsIHRoaXMucHJvcHMubGluZUhlaWdodCwgdGhpcy5wcm9wcy5pdGVtSGVpZ2h0UmF0aW8sIHRoaXMucHJvcHMuc3RhY2tJdGVtcywgdGhpcy5zdGF0ZS5kcmFnZ2luZ0l0ZW0sIHRoaXMuc3RhdGUucmVzaXppbmdJdGVtLCB0aGlzLnN0YXRlLmRyYWdUaW1lLCB0aGlzLnN0YXRlLnJlc2l6aW5nRWRnZSwgdGhpcy5zdGF0ZS5yZXNpemVUaW1lLCB0aGlzLnN0YXRlLm5ld0dyb3VwT3JkZXIpO1xuICAgICAgICBkaW1lbnNpb25JdGVtcyA9IHN0YWNrUmVzdWx0cy5kaW1lbnNpb25JdGVtcztcbiAgICAgICAgaGVpZ2h0ID0gc3RhY2tSZXN1bHRzLmhlaWdodDtcbiAgICAgICAgZ3JvdXBIZWlnaHRzID0gc3RhY2tSZXN1bHRzLmdyb3VwSGVpZ2h0cztcbiAgICAgICAgZ3JvdXBUb3BzID0gc3RhY2tSZXN1bHRzLmdyb3VwVG9wcztcbiAgICAgIH1cblxuICAgICAgdmFyIG91dGVyQ29tcG9uZW50U3R5bGUgPSB7XG4gICAgICAgIGhlaWdodDogXCJcIi5jb25jYXQoaGVpZ2h0LCBcInB4XCIpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfVGltZWxpbmVTdGF0ZUNvbnRleHQuVGltZWxpbmVTdGF0ZVByb3ZpZGVyLCB7XG4gICAgICAgIHZpc2libGVUaW1lU3RhcnQ6IHZpc2libGVUaW1lU3RhcnQsXG4gICAgICAgIHZpc2libGVUaW1lRW5kOiB2aXNpYmxlVGltZUVuZCxcbiAgICAgICAgY2FudmFzVGltZVN0YXJ0OiBjYW52YXNUaW1lU3RhcnQsXG4gICAgICAgIGNhbnZhc1RpbWVFbmQ6IGNhbnZhc1RpbWVFbmQsXG4gICAgICAgIGNhbnZhc1dpZHRoOiBjYW52YXNXaWR0aCxcbiAgICAgICAgc2hvd1BlcmlvZDogdGhpcy5zaG93UGVyaW9kLFxuICAgICAgICB0aW1lbGluZVVuaXQ6IG1pblVuaXQsXG4gICAgICAgIHRpbWVsaW5lV2lkdGg6IHRoaXMuc3RhdGUud2lkdGhcbiAgICAgIH0sIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfVGltZWxpbmVNYXJrZXJzQ29udGV4dC5UaW1lbGluZU1hcmtlcnNQcm92aWRlciwgbnVsbCwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9IZWFkZXJzQ29udGV4dC5UaW1lbGluZUhlYWRlcnNQcm92aWRlciwge1xuICAgICAgICByZWdpc3RlclNjcm9sbDogdGhpcy5oYW5kbGVIZWFkZXJSZWYsXG4gICAgICAgIHRpbWVTdGVwczogdGltZVN0ZXBzLFxuICAgICAgICBsZWZ0U2lkZWJhcldpZHRoOiB0aGlzLnByb3BzLnNpZGViYXJXaWR0aCxcbiAgICAgICAgcmlnaHRTaWRlYmFyV2lkdGg6IHRoaXMucHJvcHMucmlnaHRTaWRlYmFyV2lkdGhcbiAgICAgIH0sIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlbCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczQuY29udGFpbmVyID0gZWw7XG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1jYWxlbmRhci10aW1lbGluZSBcIi5jb25jYXQodGhpcy5wcm9wcy5jbGFzc05hbWUpXG4gICAgICB9LCB0aGlzLnJlbmRlckhlYWRlcnMoKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IG91dGVyQ29tcG9uZW50U3R5bGUsXG4gICAgICAgIGNsYXNzTmFtZTogXCJyY3Qtb3V0ZXJcIlxuICAgICAgfSwgc2lkZWJhcldpZHRoID4gMCA/IHRoaXMuc2lkZWJhcihoZWlnaHQsIGdyb3VwSGVpZ2h0cykgOiBudWxsLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1Njcm9sbEVsZW1lbnRbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNjcm9sbFJlZjogdGhpcy5nZXRTY3JvbGxFbGVtZW50UmVmLFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBvblpvb206IHRoaXMuY2hhbmdlWm9vbSxcbiAgICAgICAgb25XaGVlbFpvb206IHRoaXMuaGFuZGxlV2hlZWxab29tLFxuICAgICAgICB0cmFkaXRpb25hbFpvb206IHRyYWRpdGlvbmFsWm9vbSxcbiAgICAgICAgb25TY3JvbGw6IHRoaXMub25TY3JvbGwsXG4gICAgICAgIGlzSW50ZXJhY3RpbmdXaXRoSXRlbTogaXNJbnRlcmFjdGluZ1dpdGhJdGVtXG4gICAgICB9LCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX01hcmtlckNhbnZhc1tcImRlZmF1bHRcIl0sIG51bGwsIHRoaXMuY29sdW1ucyhjYW52YXNUaW1lU3RhcnQsIGNhbnZhc1RpbWVFbmQsIGNhbnZhc1dpZHRoLCBtaW5Vbml0LCB0aW1lU3RlcHMsIGhlaWdodCksIHRoaXMucm93cyhjYW52YXNXaWR0aCwgZ3JvdXBIZWlnaHRzLCBncm91cHMpLCB0aGlzLml0ZW1zKGNhbnZhc1RpbWVTdGFydCwgem9vbSwgY2FudmFzVGltZUVuZCwgY2FudmFzV2lkdGgsIG1pblVuaXQsIGRpbWVuc2lvbkl0ZW1zLCBncm91cEhlaWdodHMsIGdyb3VwVG9wcyksIHRoaXMuY2hpbGRyZW5XaXRoUHJvcHMoY2FudmFzVGltZVN0YXJ0LCBjYW52YXNUaW1lRW5kLCBjYW52YXNXaWR0aCwgZGltZW5zaW9uSXRlbXMsIGdyb3VwSGVpZ2h0cywgZ3JvdXBUb3BzLCBoZWlnaHQsIHZpc2libGVUaW1lU3RhcnQsIHZpc2libGVUaW1lRW5kLCBtaW5Vbml0LCB0aW1lU3RlcHMpKSksIHJpZ2h0U2lkZWJhcldpZHRoID4gMCA/IHRoaXMucmlnaHRTaWRlYmFyKGhlaWdodCwgZ3JvdXBIZWlnaHRzKSA6IG51bGwpKSkpKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YXIgdmlzaWJsZVRpbWVTdGFydCA9IG5leHRQcm9wcy52aXNpYmxlVGltZVN0YXJ0LFxuICAgICAgICAgIHZpc2libGVUaW1lRW5kID0gbmV4dFByb3BzLnZpc2libGVUaW1lRW5kLFxuICAgICAgICAgIGl0ZW1zID0gbmV4dFByb3BzLml0ZW1zLFxuICAgICAgICAgIGdyb3VwcyA9IG5leHRQcm9wcy5ncm91cHM7IC8vIFRoaXMgaXMgYSBncm9zcyBoYWNrIHB1c2hpbmcgaXRlbXMgYW5kIGdyb3VwcyBpbiB0byBzdGF0ZSBvbmx5IHRvIGFsbG93XG4gICAgICAvLyBGb3IgdGhlIGZvcmNlVXBkYXRlIGNoZWNrXG5cbiAgICAgIHZhciBkZXJpdmVkU3RhdGUgPSB7XG4gICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgZ3JvdXBzOiBncm91cHMgLy8gaWYgdGhlIGl0ZW1zIG9yIGdyb3VwcyBoYXZlIGNoYW5nZWQgd2UgbXVzdCByZS1yZW5kZXJcblxuICAgICAgfTtcbiAgICAgIHZhciBmb3JjZVVwZGF0ZSA9IGl0ZW1zICE9PSBwcmV2U3RhdGUuaXRlbXMgfHwgZ3JvdXBzICE9PSBwcmV2U3RhdGUuZ3JvdXBzOyAvLyBXZSBhcmUgYSBjb250cm9sbGVkIGNvbXBvbmVudFxuXG4gICAgICBpZiAodmlzaWJsZVRpbWVTdGFydCAmJiB2aXNpYmxlVGltZUVuZCkge1xuICAgICAgICAvLyBHZXQgdGhlIG5ldyBjYW52YXMgcG9zaXRpb25cbiAgICAgICAgT2JqZWN0LmFzc2lnbihkZXJpdmVkU3RhdGUsICgwLCBfY2FsZW5kYXIuY2FsY3VsYXRlU2Nyb2xsQ2FudmFzKSh2aXNpYmxlVGltZVN0YXJ0LCB2aXNpYmxlVGltZUVuZCwgZm9yY2VVcGRhdGUsIGl0ZW1zLCBncm91cHMsIG5leHRQcm9wcywgcHJldlN0YXRlKSk7XG4gICAgICB9IGVsc2UgaWYgKGZvcmNlVXBkYXRlKSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgaXRlbSBzdGFjayBwb3NpdGlvbiBhcyBjYW52YXMgbWF5IGhhdmUgY2hhbmdlZFxuICAgICAgICB2YXIgY2FudmFzV2lkdGggPSAoMCwgX2NhbGVuZGFyLmdldENhbnZhc1dpZHRoKShwcmV2U3RhdGUud2lkdGgsIG5leHRQcm9wcy5idWZmZXIpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGRlcml2ZWRTdGF0ZSwgKDAsIF9jYWxlbmRhci5zdGFja1RpbWVsaW5lSXRlbXMpKGl0ZW1zLCBncm91cHMsIGNhbnZhc1dpZHRoLCBwcmV2U3RhdGUuY2FudmFzVGltZVN0YXJ0LCBwcmV2U3RhdGUuY2FudmFzVGltZUVuZCwgbmV4dFByb3BzLmtleXMsIG5leHRQcm9wcy5saW5lSGVpZ2h0LCBuZXh0UHJvcHMuaXRlbUhlaWdodFJhdGlvLCBuZXh0UHJvcHMuc3RhY2tJdGVtcywgcHJldlN0YXRlLmRyYWdnaW5nSXRlbSwgcHJldlN0YXRlLnJlc2l6aW5nSXRlbSwgcHJldlN0YXRlLmRyYWdUaW1lLCBwcmV2U3RhdGUucmVzaXppbmdFZGdlLCBwcmV2U3RhdGUucmVzaXplVGltZSwgcHJldlN0YXRlLm5ld0dyb3VwT3JkZXIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlcml2ZWRTdGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVhY3RDYWxlbmRhclRpbWVsaW5lO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBSZWFjdENhbGVuZGFyVGltZWxpbmU7XG5cbl9kZWZpbmVQcm9wZXJ0eShSZWFjdENhbGVuZGFyVGltZWxpbmUsIFwicHJvcFR5cGVzXCIsIHtcbiAgZ3JvdXBzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5LCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpdGVtczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hcnJheSwgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgc2lkZWJhcldpZHRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIHJpZ2h0U2lkZWJhcldpZHRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGRyYWdTbmFwOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG1pblJlc2l6ZVdpZHRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGxpbmVIZWlnaHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgaXRlbUhlaWdodFJhdGlvOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG1pblpvb206IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgbWF4Wm9vbTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBidWZmZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgY2xpY2tUb2xlcmFuY2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgY2FuQ2hhbmdlR3JvdXA6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGNhbk1vdmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGNhblJlc2l6ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW3RydWUsIGZhbHNlLCAnbGVmdCcsICdyaWdodCcsICdib3RoJ10pLFxuICB1c2VSZXNpemVIYW5kbGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGNhblNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc3RhY2tJdGVtczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdHJhZGl0aW9uYWxab29tOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpdGVtVG91Y2hTZW5kc0NsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25JdGVtTW92ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25JdGVtUmVzaXplOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkl0ZW1DbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25JdGVtU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkl0ZW1EZXNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25DYW52YXNDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25JdGVtRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uSXRlbUNvbnRleHRNZW51OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkNhbnZhc0RvdWJsZUNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkNhbnZhc0NvbnRleHRNZW51OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvblpvb206IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uSXRlbURyYWc6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG1vdmVSZXNpemVWYWxpZGF0b3I6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGl0ZW1SZW5kZXJlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZ3JvdXBSZW5kZXJlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGtleXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKHtcbiAgICBncm91cElkS2V5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gICAgZ3JvdXBUaXRsZUtleTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICAgIGdyb3VwTGFiZWxLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgICBncm91cFJpZ2h0VGl0bGVLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgICBpdGVtSWRLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgICBpdGVtVGl0bGVLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgICBpdGVtRGl2VGl0bGVLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgICBpdGVtR3JvdXBLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgICBpdGVtVGltZVN0YXJ0S2V5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gICAgaXRlbVRpbWVFbmRLZXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xuICB9KSxcbiAgaGVhZGVyUmVmOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBzY3JvbGxSZWY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHRpbWVTdGVwczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoe1xuICAgIHNlY29uZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICAgIG1pbnV0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICAgIGhvdXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgICBkYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgICBtb250aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICAgIHllYXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlclxuICB9KSxcbiAgZGVmYXVsdFRpbWVTdGFydDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBkZWZhdWx0VGltZUVuZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICB2aXNpYmxlVGltZVN0YXJ0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIHZpc2libGVUaW1lRW5kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG9uVGltZUNoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25Cb3VuZHNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHNlbGVjdGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hcnJheSxcbiAgcmVzaXplRGV0ZWN0b3I6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKHtcbiAgICBhZGRMaXN0ZW5lcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgICByZW1vdmVMaXN0ZW5lcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuY1xuICB9KSxcbiAgdmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFJlYWN0Q2FsZW5kYXJUaW1lbGluZSwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBzaWRlYmFyV2lkdGg6IDE1MCxcbiAgcmlnaHRTaWRlYmFyV2lkdGg6IDAsXG4gIGRyYWdTbmFwOiAxMDAwICogNjAgKiAxNSxcbiAgLy8gMTVtaW5cbiAgbWluUmVzaXplV2lkdGg6IDIwLFxuICBsaW5lSGVpZ2h0OiAzMCxcbiAgaXRlbUhlaWdodFJhdGlvOiAwLjY1LFxuICBidWZmZXI6IDMsXG4gIG1pblpvb206IDYwICogNjAgKiAxMDAwLFxuICAvLyAxIGhvdXJcbiAgbWF4Wm9vbTogNSAqIDM2NS4yNCAqIDg2NDAwICogMTAwMCxcbiAgLy8gNSB5ZWFyc1xuICBjbGlja1RvbGVyYW5jZTogMyxcbiAgLy8gaG93IG1hbnkgcGl4ZWxzIGNhbiB3ZSBkcmFnIGZvciBpdCB0byBiZSBzdGlsbCBjb25zaWRlcmVkIGEgY2xpY2s/XG4gIGNhbkNoYW5nZUdyb3VwOiB0cnVlLFxuICBjYW5Nb3ZlOiB0cnVlLFxuICBjYW5SZXNpemU6ICdyaWdodCcsXG4gIHVzZVJlc2l6ZUhhbmRsZTogZmFsc2UsXG4gIGNhblNlbGVjdDogdHJ1ZSxcbiAgc3RhY2tJdGVtczogZmFsc2UsXG4gIHRyYWRpdGlvbmFsWm9vbTogZmFsc2UsXG4gIGhvcml6b250YWxMaW5lQ2xhc3NOYW1lc0Zvckdyb3VwOiBudWxsLFxuICBvbkl0ZW1Nb3ZlOiBudWxsLFxuICBvbkl0ZW1SZXNpemU6IG51bGwsXG4gIG9uSXRlbUNsaWNrOiBudWxsLFxuICBvbkl0ZW1TZWxlY3Q6IG51bGwsXG4gIG9uSXRlbURlc2VsZWN0OiBudWxsLFxuICBvbkl0ZW1EcmFnOiBudWxsLFxuICBvbkNhbnZhc0NsaWNrOiBudWxsLFxuICBvbkl0ZW1Eb3VibGVDbGljazogbnVsbCxcbiAgb25JdGVtQ29udGV4dE1lbnU6IG51bGwsXG4gIG9uWm9vbTogbnVsbCxcbiAgdmVydGljYWxMaW5lQ2xhc3NOYW1lc0ZvclRpbWU6IG51bGwsXG4gIG1vdmVSZXNpemVWYWxpZGF0b3I6IG51bGwsXG4gIGRheUJhY2tncm91bmQ6IG51bGwsXG4gIGRlZmF1bHRUaW1lU3RhcnQ6IG51bGwsXG4gIGRlZmF1bHRUaW1lRW5kOiBudWxsLFxuICBpdGVtVG91Y2hTZW5kc0NsaWNrOiBmYWxzZSxcbiAgc3R5bGU6IHt9LFxuICBjbGFzc05hbWU6ICcnLFxuICBrZXlzOiBfZGVmYXVsdENvbmZpZy5kZWZhdWx0S2V5cyxcbiAgdGltZVN0ZXBzOiBfZGVmYXVsdENvbmZpZy5kZWZhdWx0VGltZVN0ZXBzLFxuICBoZWFkZXJSZWY6IGZ1bmN0aW9uIGhlYWRlclJlZigpIHt9LFxuICBzY3JvbGxSZWY6IGZ1bmN0aW9uIHNjcm9sbFJlZigpIHt9LFxuICAvLyBpZiB5b3UgcGFzcyBpbiB2aXNpYmxlVGltZVN0YXJ0IGFuZCB2aXNpYmxlVGltZUVuZCwgeW91IG11c3QgYWxzbyBwYXNzIG9uVGltZUNoYW5nZSh2aXNpYmxlVGltZVN0YXJ0LCB2aXNpYmxlVGltZUVuZCksXG4gIC8vIHdoaWNoIG5lZWRzIHRvIHVwZGF0ZSB0aGUgcHJvcHMgdmlzaWJsZVRpbWVTdGFydCBhbmQgdmlzaWJsZVRpbWVFbmQgdG8gdGhlIG9uZXMgcGFzc2VkXG4gIHZpc2libGVUaW1lU3RhcnQ6IG51bGwsXG4gIHZpc2libGVUaW1lRW5kOiBudWxsLFxuICBvblRpbWVDaGFuZ2U6IGZ1bmN0aW9uIG9uVGltZUNoYW5nZSh2aXNpYmxlVGltZVN0YXJ0LCB2aXNpYmxlVGltZUVuZCwgdXBkYXRlU2Nyb2xsQ2FudmFzKSB7XG4gICAgdXBkYXRlU2Nyb2xsQ2FudmFzKHZpc2libGVUaW1lU3RhcnQsIHZpc2libGVUaW1lRW5kKTtcbiAgfSxcbiAgLy8gY2FsbGVkIHdoZW4gdGhlIGNhbnZhcyBhcmVhIG9mIHRoZSBjYWxlbmRhciBjaGFuZ2VzXG4gIG9uQm91bmRzQ2hhbmdlOiBudWxsLFxuICBjaGlsZHJlbjogbnVsbCxcbiAgc2VsZWN0ZWQ6IG51bGxcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoUmVhY3RDYWxlbmRhclRpbWVsaW5lLCBcImNoaWxkQ29udGV4dFR5cGVzXCIsIHtcbiAgZ2V0VGltZWxpbmVDb250ZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG4vLyBJcyB0aGlzIG5lY2Vzc2FyeT8gVGhlIGluaXRpYWwgcmVhc29uIGZvciBpbmNsdWRpbmcgdGhpcyBpcyBmb3Igb3JnYW5pemF0aW9uIHNha2UgaW4gdGhlXG4vLyB1c2VyIGNvZGUgZS5nLlxuXG4vKlxuPFRpbWVsaW5lIHsuLi5vdGhlclByb3BzfT5cbiAgPFRpbWVsaW5lTWFya2Vycz4gLy8gd291bGQgdGhlcmUgYmUgcHJvcHMgcGFzc2VkIGluIGhlcmU/XG4gICAgPFRvZGF5TGluZSAvPlxuICAgIDxDdXJzb3JMaW5lIC8+XG4gICAgPEN1c3RvbUxpbmUgLz5cbiAgPC9UaW1lbGluZU1hcmtlcnM+XG48L1RpbWVsaW5lPlxuXG4qL1xuLy8gSWYgd2UgZGVjaWRlIHRvIHBhc3MgaW4gcHJvcHMgdG8gVGltZWxpbmVNYXJrZXJzLCB0aGVuIHllcywgdGhpcyBpcyBuZWNlc3NhcnkuXG52YXIgVGltZWxpbmVNYXJrZXJzID0gZnVuY3Rpb24gVGltZWxpbmVNYXJrZXJzKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiB8fCBudWxsO1xufTtcblxudmFyIF9kZWZhdWx0ID0gVGltZWxpbmVNYXJrZXJzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQgPSByZXF1aXJlKFwiLi4vVGltZWxpbmVNYXJrZXJzQ29udGV4dFwiKTtcblxudmFyIF9tYXJrZXJUeXBlID0gcmVxdWlyZShcIi4uL21hcmtlclR5cGVcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IGlmIChpICUgMikgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhhcmd1bWVudHNbaV0pKTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBUb2RheU1hcmtlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVG9kYXlNYXJrZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvZGF5TWFya2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb2RheU1hcmtlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRvZGF5TWFya2VyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUb2RheU1hcmtlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkc3Vic2NyaWJlID0gdGhpcy5wcm9wcy5zdWJzY3JpYmVNYXJrZXIoe1xuICAgICAgICB0eXBlOiBfbWFya2VyVHlwZS5UaW1lbGluZU1hcmtlclR5cGUuVG9kYXksXG4gICAgICAgIHJlbmRlcmVyOiB0aGlzLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICBpbnRlcnZhbDogdGhpcy5wcm9wcy5pbnRlcnZhbFxuICAgICAgfSksXG4gICAgICAgICAgdW5zdWJzY3JpYmUgPSBfdGhpcyRwcm9wcyRzdWJzY3JpYmUudW5zdWJzY3JpYmUsXG4gICAgICAgICAgZ2V0TWFya2VyID0gX3RoaXMkcHJvcHMkc3Vic2NyaWJlLmdldE1hcmtlcjtcblxuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuICAgICAgdGhpcy5nZXRNYXJrZXIgPSBnZXRNYXJrZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHByZXZQcm9wcy5pbnRlcnZhbCAhPT0gdGhpcy5wcm9wcy5pbnRlcnZhbCAmJiB0aGlzLmdldE1hcmtlcikge1xuICAgICAgICB2YXIgbWFya2VyID0gdGhpcy5nZXRNYXJrZXIoKTtcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVNYXJrZXIoX29iamVjdFNwcmVhZCh7fSwgbWFya2VyLCB7XG4gICAgICAgICAgaW50ZXJ2YWw6IHRoaXMucHJvcHMuaW50ZXJ2YWxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvZGF5TWFya2VyO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7IC8vIFRPRE86IHR1cm4gaW50byBIT0M/XG5cblxuX2RlZmluZVByb3BlcnR5KFRvZGF5TWFya2VyLCBcInByb3BUeXBlc1wiLCB7XG4gIHN1YnNjcmliZU1hcmtlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICB1cGRhdGVNYXJrZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaW50ZXJ2YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVG9kYXlNYXJrZXIsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgaW50ZXJ2YWw6IDEwMDAgKiAxMCAvLyBkZWZhdWx0IHRvIHRlbiBzZWNvbmRzXG5cbn0pO1xuXG52YXIgVG9kYXlNYXJrZXJXcmFwcGVyID0gZnVuY3Rpb24gVG9kYXlNYXJrZXJXcmFwcGVyKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQuVGltZWxpbmVNYXJrZXJzQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHN1YnNjcmliZU1hcmtlciA9IF9yZWYuc3Vic2NyaWJlTWFya2VyLFxuICAgICAgICB1cGRhdGVNYXJrZXIgPSBfcmVmLnVwZGF0ZU1hcmtlcjtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFRvZGF5TWFya2VyLCBfZXh0ZW5kcyh7XG4gICAgICBzdWJzY3JpYmVNYXJrZXI6IHN1YnNjcmliZU1hcmtlcixcbiAgICAgIHVwZGF0ZU1hcmtlcjogdXBkYXRlTWFya2VyXG4gICAgfSwgcHJvcHMpKTtcbiAgfSk7XG59O1xuXG5Ub2RheU1hcmtlcldyYXBwZXIuZGlzcGxheU5hbWUgPSAnVG9kYXlNYXJrZXJXcmFwcGVyJztcbnZhciBfZGVmYXVsdCA9IFRvZGF5TWFya2VyV3JhcHBlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9UaW1lbGluZU1hcmtlcnNDb250ZXh0ID0gcmVxdWlyZShcIi4uL1RpbWVsaW5lTWFya2Vyc0NvbnRleHRcIik7XG5cbnZhciBfbWFya2VyVHlwZSA9IHJlcXVpcmUoXCIuLi9tYXJrZXJUeXBlXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyBpZiAoaSAlIDIpIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYXJndW1lbnRzW2ldKSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgQ3VzdG9tTWFya2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDdXN0b21NYXJrZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEN1c3RvbU1hcmtlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3VzdG9tTWFya2VyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ3VzdG9tTWFya2VyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDdXN0b21NYXJrZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLmRhdGUgIT09IHRoaXMucHJvcHMuZGF0ZSAmJiB0aGlzLmdldE1hcmtlcikge1xuICAgICAgICB2YXIgbWFya2VyID0gdGhpcy5nZXRNYXJrZXIoKTtcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVNYXJrZXIoX29iamVjdFNwcmVhZCh7fSwgbWFya2VyLCB7XG4gICAgICAgICAgZGF0ZTogdGhpcy5wcm9wcy5kYXRlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkc3Vic2NyaWJlID0gdGhpcy5wcm9wcy5zdWJzY3JpYmVNYXJrZXIoe1xuICAgICAgICB0eXBlOiBfbWFya2VyVHlwZS5UaW1lbGluZU1hcmtlclR5cGUuQ3VzdG9tLFxuICAgICAgICByZW5kZXJlcjogdGhpcy5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgZGF0ZTogdGhpcy5wcm9wcy5kYXRlXG4gICAgICB9KSxcbiAgICAgICAgICB1bnN1YnNjcmliZSA9IF90aGlzJHByb3BzJHN1YnNjcmliZS51bnN1YnNjcmliZSxcbiAgICAgICAgICBnZXRNYXJrZXIgPSBfdGhpcyRwcm9wcyRzdWJzY3JpYmUuZ2V0TWFya2VyO1xuXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgICB0aGlzLmdldE1hcmtlciA9IGdldE1hcmtlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy51bnN1YnNjcmliZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ3VzdG9tTWFya2VyO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7IC8vIFRPRE86IHR1cm4gaW50byBIT0M/XG5cblxuX2RlZmluZVByb3BlcnR5KEN1c3RvbU1hcmtlciwgXCJwcm9wVHlwZXNcIiwge1xuICBzdWJzY3JpYmVNYXJrZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdXBkYXRlTWFya2VyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBkYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZFxufSk7XG5cbnZhciBDdXN0b21NYXJrZXJXcmFwcGVyID0gZnVuY3Rpb24gQ3VzdG9tTWFya2VyV3JhcHBlcihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9UaW1lbGluZU1hcmtlcnNDb250ZXh0LlRpbWVsaW5lTWFya2Vyc0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBzdWJzY3JpYmVNYXJrZXIgPSBfcmVmLnN1YnNjcmliZU1hcmtlcixcbiAgICAgICAgdXBkYXRlTWFya2VyID0gX3JlZi51cGRhdGVNYXJrZXI7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChDdXN0b21NYXJrZXIsIF9leHRlbmRzKHtcbiAgICAgIHN1YnNjcmliZU1hcmtlcjogc3Vic2NyaWJlTWFya2VyLFxuICAgICAgdXBkYXRlTWFya2VyOiB1cGRhdGVNYXJrZXJcbiAgICB9LCBwcm9wcykpO1xuICB9KTtcbn07XG5cbkN1c3RvbU1hcmtlcldyYXBwZXIuZGlzcGxheU5hbWUgPSAnQ3VzdG9tTWFya2VyV3JhcHBlcic7XG52YXIgX2RlZmF1bHQgPSBDdXN0b21NYXJrZXJXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQgPSByZXF1aXJlKFwiLi4vVGltZWxpbmVNYXJrZXJzQ29udGV4dFwiKTtcblxudmFyIF9tYXJrZXJUeXBlID0gcmVxdWlyZShcIi4uL21hcmtlclR5cGVcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgQ3Vyc29yTWFya2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDdXJzb3JNYXJrZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEN1cnNvck1hcmtlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3Vyc29yTWFya2VyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ3Vyc29yTWFya2VyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDdXJzb3JNYXJrZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJHN1YnNjcmliZSA9IHRoaXMucHJvcHMuc3Vic2NyaWJlTWFya2VyKHtcbiAgICAgICAgdHlwZTogX21hcmtlclR5cGUuVGltZWxpbmVNYXJrZXJUeXBlLkN1cnNvcixcbiAgICAgICAgcmVuZGVyZXI6IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgIH0pLFxuICAgICAgICAgIHVuc3Vic2NyaWJlID0gX3RoaXMkcHJvcHMkc3Vic2NyaWJlLnVuc3Vic2NyaWJlO1xuXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEN1cnNvck1hcmtlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpOyAvLyBUT0RPOiB0dXJuIGludG8gSE9DP1xuXG5cbl9kZWZpbmVQcm9wZXJ0eShDdXJzb3JNYXJrZXIsIFwicHJvcFR5cGVzXCIsIHtcbiAgc3Vic2NyaWJlTWFya2VyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXG59KTtcblxudmFyIEN1cnNvck1hcmtlcldyYXBwZXIgPSBmdW5jdGlvbiBDdXJzb3JNYXJrZXJXcmFwcGVyKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQuVGltZWxpbmVNYXJrZXJzQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHN1YnNjcmliZU1hcmtlciA9IF9yZWYuc3Vic2NyaWJlTWFya2VyO1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoQ3Vyc29yTWFya2VyLCBfZXh0ZW5kcyh7XG4gICAgICBzdWJzY3JpYmVNYXJrZXI6IHN1YnNjcmliZU1hcmtlclxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xufTtcblxuQ3Vyc29yTWFya2VyV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdDdXJzb3JNYXJrZXJXcmFwcGVyJztcbnZhciBfZGVmYXVsdCA9IEN1cnNvck1hcmtlcldyYXBwZXI7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGltZWxpbmVNYXJrZXJzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UaW1lbGluZU1hcmtlcnNbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvZGF5TWFya2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Ub2RheU1hcmtlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3VzdG9tTWFya2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DdXN0b21NYXJrZXJbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkN1cnNvck1hcmtlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ3Vyc29yTWFya2VyW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUaW1lbGluZUhlYWRlcnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RpbWVsaW5lSGVhZGVyc1tcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2lkZWJhckhlYWRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU2lkZWJhckhlYWRlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3VzdG9tSGVhZGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DdXN0b21IZWFkZXJbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGVIZWFkZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RhdGVIZWFkZXJbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX1RpbWVsaW5lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvVGltZWxpbmVcIikpO1xuXG52YXIgX1RpbWVsaW5lTWFya2VycyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL21hcmtlcnMvcHVibGljL1RpbWVsaW5lTWFya2Vyc1wiKSk7XG5cbnZhciBfVG9kYXlNYXJrZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9tYXJrZXJzL3B1YmxpYy9Ub2RheU1hcmtlclwiKSk7XG5cbnZhciBfQ3VzdG9tTWFya2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvbWFya2Vycy9wdWJsaWMvQ3VzdG9tTWFya2VyXCIpKTtcblxudmFyIF9DdXJzb3JNYXJrZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9tYXJrZXJzL3B1YmxpYy9DdXJzb3JNYXJrZXJcIikpO1xuXG52YXIgX1RpbWVsaW5lSGVhZGVycyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2hlYWRlcnMvVGltZWxpbmVIZWFkZXJzXCIpKTtcblxudmFyIF9TaWRlYmFySGVhZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaGVhZGVycy9TaWRlYmFySGVhZGVyXCIpKTtcblxudmFyIF9DdXN0b21IZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9oZWFkZXJzL0N1c3RvbUhlYWRlclwiKSk7XG5cbnZhciBfRGF0ZUhlYWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2hlYWRlcnMvRGF0ZUhlYWRlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgX2RlZmF1bHQgPSBfVGltZWxpbmVbXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIGNyZWF0ZUVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBUaW1lbGluZSBmcm9tIFwicmVhY3QtY2FsZW5kYXItdGltZWxpbmVcIjtcbmltcG9ydCBcInJlYWN0LWNhbGVuZGFyLXRpbWVsaW5lL2xpYi9UaW1lbGluZS5jc3NcIjtcbmltcG9ydCB7IFNjaGVkdWxlclZpZXdQcm9wcyB9IGZyb20gXCIuLi8uLi90eXBlcy9TY2hlZHVsZXJUeXBlc1wiO1xuXG5leHBvcnQgY29uc3QgVGltZWxpbmVDb250YWluZXI6IFJlYWN0LkZDPFNjaGVkdWxlclZpZXdQcm9wcz4gPSAoe1xuICAgIGl0ZW1zLFxuICAgIHJlc291cmNlcyxcbiAgICBvbkl0ZW1DbGljayxcbiAgICBvbkl0ZW1Nb3ZlLFxuICAgIG9uSXRlbVJlc2l6ZSxcbiAgICBlbmFibGVEcmFnRHJvcCxcbiAgICBlbmFibGVSZXNpemUsXG4gICAgZW5hYmxlTXVsdGlTZWxlY3Rcbn0pID0+IHtcbiAgICAvLyBUcmFuc2Zvcm0gc2NoZWR1bGVyIGl0ZW1zIHRvIHRpbWVsaW5lIGl0ZW1zXG4gICAgY29uc3QgdGltZWxpbmVJdGVtcyA9IGl0ZW1zLm1hcChpdGVtID0+ICh7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICBncm91cDogaXRlbS5yZXNvdXJjZUlkLFxuICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcbiAgICAgICAgc3RhcnRfdGltZTogaXRlbS5zdGFydC5nZXRUaW1lKCksXG4gICAgICAgIGVuZF90aW1lOiBpdGVtLmVuZC5nZXRUaW1lKCksXG4gICAgICAgIGl0ZW1Qcm9wczoge1xuICAgICAgICAgICAgb25Eb3VibGVDbGljazogKCkgPT4gb25JdGVtQ2xpY2s/LihpdGVtKVxuICAgICAgICB9XG4gICAgfSkpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc291cmNlcyB0byB0aW1lbGluZSBncm91cHNcbiAgICBjb25zdCB0aW1lbGluZUdyb3VwcyA9IHJlc291cmNlcy5tYXAocmVzb3VyY2UgPT4gKHtcbiAgICAgICAgaWQ6IHJlc291cmNlLmlkLFxuICAgICAgICB0aXRsZTogcmVzb3VyY2UudGl0bGVcbiAgICB9KSk7XG5cbiAgICBjb25zdCBoYW5kbGVJdGVtTW92ZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbUlkOiBhbnksIGRyYWdUaW1lOiBudW1iZXIsIG5ld0dyb3VwT3JkZXI6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgaWYgKCFlbmFibGVEcmFnRHJvcCB8fCAhb25JdGVtTW92ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLmZpbmQoaSA9PiBpLmlkID09PSBpdGVtSWQpO1xuICAgICAgICAgICAgY29uc3QgbmV3R3JvdXAgPSB0aW1lbGluZUdyb3Vwc1tuZXdHcm91cE9yZGVyXTtcblxuICAgICAgICAgICAgaWYgKGl0ZW0gJiYgbmV3R3JvdXApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGl0ZW0uZW5kLmdldFRpbWUoKSAtIGl0ZW0uc3RhcnQuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0YXJ0ID0gbmV3IERhdGUoZHJhZ1RpbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VuZCA9IG5ldyBEYXRlKGRyYWdUaW1lICsgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIG9uSXRlbU1vdmUoaXRlbSwgbmV3U3RhcnQsIG5ld0VuZCwgbmV3R3JvdXAuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbZW5hYmxlRHJhZ0Ryb3AsIG9uSXRlbU1vdmUsIGl0ZW1zLCB0aW1lbGluZUdyb3Vwc11cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlSXRlbVJlc2l6ZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbUlkOiBhbnksIHRpbWU6IG51bWJlciwgZWRnZTogXCJsZWZ0XCIgfCBcInJpZ2h0XCIpID0+IHtcbiAgICAgICAgICAgIGlmICghZW5hYmxlUmVzaXplIHx8ICFvbkl0ZW1SZXNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy5maW5kKGkgPT4gaS5pZCA9PT0gaXRlbUlkKTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U3RhcnQgPSBlZGdlID09PSBcImxlZnRcIiA/IG5ldyBEYXRlKHRpbWUpIDogaXRlbS5zdGFydDtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbmQgPSBlZGdlID09PSBcInJpZ2h0XCIgPyBuZXcgRGF0ZSh0aW1lKSA6IGl0ZW0uZW5kO1xuICAgICAgICAgICAgICAgIG9uSXRlbVJlc2l6ZShpdGVtLCBuZXdTdGFydCwgbmV3RW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW2VuYWJsZVJlc2l6ZSwgb25JdGVtUmVzaXplLCBpdGVtc11cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2Rlcm4tc2NoZWR1bGUtYm9hcmQtdGltZWxpbmVcIj5cbiAgICAgICAgICAgIDxUaW1lbGluZVxuICAgICAgICAgICAgICAgIGdyb3Vwcz17dGltZWxpbmVHcm91cHN9XG4gICAgICAgICAgICAgICAgaXRlbXM9e3RpbWVsaW5lSXRlbXN9XG4gICAgICAgICAgICAgICAgZGVmYXVsdFRpbWVTdGFydD17bmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApfVxuICAgICAgICAgICAgICAgIGRlZmF1bHRUaW1lRW5kPXtuZXcgRGF0ZShEYXRlLm5vdygpICsgNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApfVxuICAgICAgICAgICAgICAgIGNhbk1vdmU9e2VuYWJsZURyYWdEcm9wfVxuICAgICAgICAgICAgICAgIGNhblJlc2l6ZT17ZW5hYmxlUmVzaXplID8gXCJib3RoXCIgOiBmYWxzZX1cbiAgICAgICAgICAgICAgICBvbkl0ZW1Nb3ZlPXtoYW5kbGVJdGVtTW92ZX1cbiAgICAgICAgICAgICAgICBvbkl0ZW1SZXNpemU9e2hhbmRsZUl0ZW1SZXNpemV9XG4gICAgICAgICAgICAgICAgbGluZUhlaWdodD17NTB9XG4gICAgICAgICAgICAgICAgaXRlbUhlaWdodFJhdGlvPXswLjh9XG4gICAgICAgICAgICAgICAgc2lkZWJhcldpZHRoPXsxNTB9XG4gICAgICAgICAgICAgICAgdHJhZGl0aW9uYWxab29tXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgY3JlYXRlRWxlbWVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTW9kZXJuU2NoZWR1bGVCb2FyZENvbnRhaW5lclByb3BzIH0gZnJvbSBcIi4vdHlwZXMvU2NoZWR1bGVyVHlwZXNcIjtcbmltcG9ydCB7IHVzZVNjaGVkdWxlckRhdGEgfSBmcm9tIFwiLi9ob29rcy91c2VTY2hlZHVsZXJEYXRhXCI7XG5pbXBvcnQgeyBUaW1lbGluZUNvbnRhaW5lciB9IGZyb20gXCIuL2NvbXBvbmVudHMvVGltZWxpbmUvVGltZWxpbmVDb250YWluZXJcIjtcbmltcG9ydCBcIi4vTW9kZXJuU2NoZWR1bGVCb2FyZC5jc3NcIjtcblxuY29uc3QgTW9kZXJuU2NoZWR1bGVCb2FyZDogUmVhY3QuRkM8TW9kZXJuU2NoZWR1bGVCb2FyZENvbnRhaW5lclByb3BzPiA9ICh7XG4gICAgbmFtZSxcbiAgICBjbGFzczogY2xhc3NOYW1lLFxuICAgIHN0eWxlLFxuICAgIHRhYkluZGV4LFxuICAgIGRhdGFTb3VyY2UsXG4gICAgcmVzb3VyY2VzU291cmNlLFxuICAgIHN0YXJ0RGF0ZUF0dHJpYnV0ZSxcbiAgICBlbmREYXRlQXR0cmlidXRlLFxuICAgIHRpdGxlQXR0cmlidXRlLFxuICAgIHJlc291cmNlSWRBdHRyaWJ1dGUsXG4gICAgZW5hYmxlRHJhZ0Ryb3AsXG4gICAgZW5hYmxlUmVzaXplLFxuICAgIGVuYWJsZU11bHRpU2VsZWN0LFxuICAgIG9uSXRlbUNsaWNrLFxuICAgIG9uSXRlbU1vdmUsXG4gICAgb25JdGVtUmVzaXplXG59KSA9PiB7XG4gICAgY29uc3QgeyBpdGVtcywgcmVzb3VyY2VzLCBsb2FkaW5nLCB1cGRhdGVJdGVtIH0gPSB1c2VTY2hlZHVsZXJEYXRhKHtcbiAgICAgICAgZGF0YVNvdXJjZSxcbiAgICAgICAgcmVzb3VyY2VzU291cmNlLFxuICAgICAgICBzdGFydERhdGVBdHRyaWJ1dGUsXG4gICAgICAgIGVuZERhdGVBdHRyaWJ1dGUsXG4gICAgICAgIHRpdGxlQXR0cmlidXRlLFxuICAgICAgICByZXNvdXJjZUlkQXR0cmlidXRlXG4gICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVJdGVtQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKG9uSXRlbUNsaWNrICYmIG9uSXRlbUNsaWNrLmNhbkV4ZWN1dGUpIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1DbGljay5leGVjdXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtvbkl0ZW1DbGlja11cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlSXRlbU1vdmUgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGl0ZW06IGFueSwgbmV3U3RhcnQ6IERhdGUsIG5ld0VuZDogRGF0ZSwgbmV3UmVzb3VyY2VJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGl0ZW0gb3B0aW1pc3RpY2FsbHlcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oaXRlbS5pZCwge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXdTdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IG5ld0VuZCxcbiAgICAgICAgICAgICAgICByZXNvdXJjZUlkOiBuZXdSZXNvdXJjZUlkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBNZW5kaXggb2JqZWN0XG4gICAgICAgICAgICBjb25zdCBtZW5kaXhPYmplY3QgPSBpdGVtLm1lbmRpeE9iamVjdDtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBtZW5kaXhPYmplY3QgJiZcbiAgICAgICAgICAgICAgICBzdGFydERhdGVBdHRyaWJ1dGUuZ2V0KG1lbmRpeE9iamVjdCkgJiZcbiAgICAgICAgICAgICAgICBlbmREYXRlQXR0cmlidXRlLmdldChtZW5kaXhPYmplY3QpICYmXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VJZEF0dHJpYnV0ZS5nZXQobWVuZGl4T2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgc3RhcnREYXRlQXR0cmlidXRlLmdldChtZW5kaXhPYmplY3QpLnNldFZhbHVlKG5ld1N0YXJ0KTtcbiAgICAgICAgICAgICAgICBlbmREYXRlQXR0cmlidXRlLmdldChtZW5kaXhPYmplY3QpLnNldFZhbHVlKG5ld0VuZCk7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VJZEF0dHJpYnV0ZS5nZXQobWVuZGl4T2JqZWN0KS5zZXRWYWx1ZShuZXdSZXNvdXJjZUlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYWN0aW9uXG4gICAgICAgICAgICBpZiAob25JdGVtTW92ZSAmJiBvbkl0ZW1Nb3ZlLmNhbkV4ZWN1dGUpIHtcbiAgICAgICAgICAgICAgICBvbkl0ZW1Nb3ZlLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW29uSXRlbU1vdmUsIHVwZGF0ZUl0ZW0sIHN0YXJ0RGF0ZUF0dHJpYnV0ZSwgZW5kRGF0ZUF0dHJpYnV0ZSwgcmVzb3VyY2VJZEF0dHJpYnV0ZV1cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlSXRlbVJlc2l6ZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbTogYW55LCBuZXdTdGFydDogRGF0ZSwgbmV3RW5kOiBEYXRlKSA9PiB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGl0ZW0gb3B0aW1pc3RpY2FsbHlcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oaXRlbS5pZCwge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXdTdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IG5ld0VuZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgTWVuZGl4IG9iamVjdFxuICAgICAgICAgICAgY29uc3QgbWVuZGl4T2JqZWN0ID0gaXRlbS5tZW5kaXhPYmplY3Q7XG4gICAgICAgICAgICBpZiAobWVuZGl4T2JqZWN0ICYmIHN0YXJ0RGF0ZUF0dHJpYnV0ZS5nZXQobWVuZGl4T2JqZWN0KSAmJiBlbmREYXRlQXR0cmlidXRlLmdldChtZW5kaXhPYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnREYXRlQXR0cmlidXRlLmdldChtZW5kaXhPYmplY3QpLnNldFZhbHVlKG5ld1N0YXJ0KTtcbiAgICAgICAgICAgICAgICBlbmREYXRlQXR0cmlidXRlLmdldChtZW5kaXhPYmplY3QpLnNldFZhbHVlKG5ld0VuZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGFjdGlvblxuICAgICAgICAgICAgaWYgKG9uSXRlbVJlc2l6ZSAmJiBvbkl0ZW1SZXNpemUuY2FuRXhlY3V0ZSkge1xuICAgICAgICAgICAgICAgIG9uSXRlbVJlc2l6ZS5leGVjdXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtvbkl0ZW1SZXNpemUsIHVwZGF0ZUl0ZW0sIHN0YXJ0RGF0ZUF0dHJpYnV0ZSwgZW5kRGF0ZUF0dHJpYnV0ZV1cbiAgICApO1xuXG4gICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbW9kZXJuLXNjaGVkdWxlLWJvYXJkICR7Y2xhc3NOYW1lfWB9IHN0eWxlPXtzdHlsZX0gdGFiSW5kZXg9e3RhYkluZGV4fT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGVybi1zY2hlZHVsZS1ib2FyZC1sb2FkaW5nXCI+TG9hZGluZyBzY2hlZHVsZXIuLi48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbW9kZXJuLXNjaGVkdWxlLWJvYXJkICR7Y2xhc3NOYW1lfWB9IHN0eWxlPXtzdHlsZX0gdGFiSW5kZXg9e3RhYkluZGV4fSBkYXRhLXdpZGdldC1uYW1lPXtuYW1lfT5cbiAgICAgICAgICAgIDxUaW1lbGluZUNvbnRhaW5lclxuICAgICAgICAgICAgICAgIGl0ZW1zPXtpdGVtc31cbiAgICAgICAgICAgICAgICByZXNvdXJjZXM9e3Jlc291cmNlc31cbiAgICAgICAgICAgICAgICBvbkl0ZW1DbGljaz17aGFuZGxlSXRlbUNsaWNrfVxuICAgICAgICAgICAgICAgIG9uSXRlbU1vdmU9e2hhbmRsZUl0ZW1Nb3ZlfVxuICAgICAgICAgICAgICAgIG9uSXRlbVJlc2l6ZT17aGFuZGxlSXRlbVJlc2l6ZX1cbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnRHJvcD17ZW5hYmxlRHJhZ0Ryb3B9XG4gICAgICAgICAgICAgICAgZW5hYmxlUmVzaXplPXtlbmFibGVSZXNpemV9XG4gICAgICAgICAgICAgICAgZW5hYmxlTXVsdGlTZWxlY3Q9e2VuYWJsZU11bHRpU2VsZWN0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGVyblNjaGVkdWxlQm9hcmQ7XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VNZW1vIiwidXNlRWZmZWN0IiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfQVNZTkNfTU9ERV9UWVBFIiwiUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIlJFQUNUX0JMT0NLX1RZUEUiLCJSRUFDVF9GVU5EQU1FTlRBTF9UWVBFIiwiUkVBQ1RfUkVTUE9OREVSX1RZUEUiLCJSRUFDVF9TQ09QRV9UWVBFIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZSIsIiQkdHlwZW9mIiwidHlwZU9mIiwib2JqZWN0IiwiJCR0eXBlb2ZUeXBlIiwidW5kZWZpbmVkIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlIiwiaXNBc3luY01vZGUiLCJjb25zb2xlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNNZW1vIiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsIlR5cGVFcnJvciIsInNob3VsZFVzZU5hdGl2ZSIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiaSIsImZyb21DaGFyQ29kZSIsIm9yZGVyMiIsIm1hcCIsIm4iLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInRvIiwic3ltYm9scyIsInMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJGdW5jdGlvbiIsImJpbmQiLCJwcmludFdhcm5pbmciLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJoYXMiLCJ0ZXh0IiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJ4IiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlU3BlY3MiLCJ2YWx1ZXMiLCJsb2NhdGlvbiIsImNvbXBvbmVudE5hbWUiLCJnZXRTdGFjayIsInR5cGVTcGVjTmFtZSIsIm5hbWUiLCJleCIsInN0YWNrIiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJSZWFjdElzIiwiZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCIsImlzVmFsaWRFbGVtZW50IiwidGhyb3dPbkRpcmVjdEFjY2VzcyIsIklURVJBVE9SX1NZTUJPTCIsIml0ZXJhdG9yIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJBTk9OWU1PVVMiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJiaWdpbnQiLCJib29sIiwiZnVuYyIsIm51bWJlciIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIiLCJlbGVtZW50VHlwZSIsImNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIiLCJpbnN0YW5jZU9mIiwiY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlciIsIm5vZGUiLCJjcmVhdGVOb2RlQ2hlY2tlciIsIm9iamVjdE9mIiwiY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlciIsIm9uZU9mIiwiY3JlYXRlRW51bVR5cGVDaGVja2VyIiwib25lT2ZUeXBlIiwiY3JlYXRlVW5pb25UeXBlQ2hlY2tlciIsInNoYXBlIiwiY3JlYXRlU2hhcGVUeXBlQ2hlY2tlciIsImV4YWN0IiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsImlzIiwieSIsIlByb3BUeXBlRXJyb3IiLCJkYXRhIiwiY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJ2YWxpZGF0ZSIsIm1hbnVhbFByb3BUeXBlQ2FsbENhY2hlIiwibWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImNhY2hlS2V5IiwiY2hhaW5lZENoZWNrVHlwZSIsImV4cGVjdGVkVHlwZSIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwiZ2V0UHJvcFR5cGUiLCJwcmVjaXNlVHlwZSIsImdldFByZWNpc2VUeXBlIiwidHlwZUNoZWNrZXIiLCJBcnJheSIsImlzQXJyYXkiLCJleHBlY3RlZENsYXNzIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJhY3R1YWxDbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJleHBlY3RlZFZhbHVlcyIsInZhbHVlc1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXBsYWNlciIsInZhbHVlIiwiYXJyYXlPZlR5cGVDaGVja2VycyIsInByb2Nlc3MiLCJjaGVja2VyIiwiZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nIiwiZXhwZWN0ZWRUeXBlcyIsImNoZWNrZXJSZXN1bHQiLCJwdXNoIiwiZXhwZWN0ZWRUeXBlc01lc3NhZ2UiLCJpc05vZGUiLCJpbnZhbGlkVmFsaWRhdG9yRXJyb3IiLCJzaGFwZVR5cGVzIiwiYWxsS2V5cyIsImV2ZXJ5Iiwic3RlcCIsImVudHJpZXMiLCJuZXh0IiwiZG9uZSIsImVudHJ5IiwiaXNTeW1ib2wiLCJSZWdFeHAiLCJEYXRlIiwiY29uc3RydWN0b3IiLCJQcm9wVHlwZXMiLCJoIiwiaXNXaW5kb3ciLCJ0IiwiV2luZG93IiwiZ2xvYmFsIiwiZmFjdG9yeSIsInRoaXMiLCJob29rQ2FsbGJhY2siLCJob29rcyIsImFwcGx5Iiwic2V0SG9va0NhbGxiYWNrIiwiY2FsbGJhY2siLCJpbnB1dCIsInRvU3RyaW5nIiwiaXNPYmplY3QiLCJoYXNPd25Qcm9wIiwiYSIsImIiLCJpc09iamVjdEVtcHR5Iiwib2JqIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJhcnIiLCJmbiIsInJlcyIsImFyckxlbiIsImV4dGVuZCIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJmb3JtYXQiLCJsb2NhbGUiLCJzdHJpY3QiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZGVmYXVsdFBhcnNpbmdGbGFncyIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkRXJhIiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsImVyYSIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImdldFBhcnNpbmdGbGFncyIsIm0iLCJfcGYiLCJzb21lIiwiZnVuIiwibGVuIiwiaXNWYWxpZCIsImZsYWdzIiwicGFyc2VkUGFydHMiLCJpc05vd1ZhbGlkIiwiX2QiLCJpc05hTiIsImdldFRpbWUiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJfaXNWYWxpZCIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJtb21lbnRQcm9wZXJ0aWVzIiwidXBkYXRlSW5Qcm9ncmVzcyIsImNvcHlDb25maWciLCJwcm9wIiwibW9tZW50UHJvcGVydGllc0xlbiIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJhcmdzIiwiYXJnIiwiYXJnTGVuIiwic2xpY2UiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwic2V0IiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwiZGVmYXVsdENhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiY2FsZW5kYXIiLCJtb20iLCJub3ciLCJvdXRwdXQiLCJfY2FsZW5kYXIiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsIk1hdGgiLCJhYnMiLCJ6ZXJvc1RvRmlsbCIsInNpZ24iLCJwb3ciLCJtYXgiLCJzdWJzdHIiLCJmb3JtYXR0aW5nVG9rZW5zIiwibG9jYWxGb3JtYXR0aW5nVG9rZW5zIiwiZm9ybWF0RnVuY3Rpb25zIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJhZGRGb3JtYXRUb2tlbiIsInRva2VuIiwicGFkZGVkIiwib3JkaW5hbCIsImxvY2FsZURhdGEiLCJyZW1vdmVGb3JtYXR0aW5nVG9rZW5zIiwibWF0Y2giLCJyZXBsYWNlIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiZm9ybWF0TW9tZW50IiwiaW52YWxpZERhdGUiLCJleHBhbmRGb3JtYXQiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsImxhc3RJbmRleCIsInRlc3QiLCJkZWZhdWx0TG9uZ0RhdGVGb3JtYXQiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsInRvVXBwZXJDYXNlIiwidG9rIiwiZGVmYXVsdEludmFsaWREYXRlIiwiX2ludmFsaWREYXRlIiwiZGVmYXVsdE9yZGluYWwiLCJkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsIiwiZGVmYXVsdFJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJkIiwiZGQiLCJ3Iiwid3ciLCJNIiwiTU0iLCJ5eSIsInJlbGF0aXZlVGltZSIsIndpdGhvdXRTdWZmaXgiLCJpc0Z1dHVyZSIsIl9yZWxhdGl2ZVRpbWUiLCJwYXN0RnV0dXJlIiwiZGlmZiIsImFsaWFzZXMiLCJEIiwiZGF0ZXMiLCJkYXRlIiwiZGF5cyIsImRheSIsImUiLCJ3ZWVrZGF5cyIsIndlZWtkYXkiLCJFIiwiaXNvd2Vla2RheXMiLCJpc293ZWVrZGF5IiwiREREIiwiZGF5b2Z5ZWFycyIsImRheW9meWVhciIsImhvdXJzIiwiaG91ciIsIm1zIiwibWlsbGlzZWNvbmRzIiwibWlsbGlzZWNvbmQiLCJtaW51dGVzIiwibWludXRlIiwibW9udGhzIiwibW9udGgiLCJRIiwicXVhcnRlcnMiLCJxdWFydGVyIiwic2Vjb25kcyIsInNlY29uZCIsImdnIiwid2Vla3llYXJzIiwid2Vla3llYXIiLCJHRyIsImlzb3dlZWt5ZWFycyIsImlzb3dlZWt5ZWFyIiwid2Vla3MiLCJ3ZWVrIiwiVyIsImlzb3dlZWtzIiwiaXNvd2VlayIsInllYXJzIiwieWVhciIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkSW5wdXQiLCJub3JtYWxpemVkUHJvcCIsInByaW9yaXRpZXMiLCJpc29XZWVrZGF5IiwiZGF5T2ZZZWFyIiwid2Vla1llYXIiLCJpc29XZWVrWWVhciIsImlzb1dlZWsiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwidW5pdHNPYmoiLCJ1IiwidW5pdCIsInByaW9yaXR5Iiwic29ydCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoVGltZXN0YW1wIiwibWF0Y2hXb3JkIiwibWF0Y2gxdG8yTm9MZWFkaW5nWmVybyIsIm1hdGNoMXRvMkhhc1plcm8iLCJyZWdleGVzIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJhYnNGbG9vciIsImNlaWwiLCJmbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJpc0Zpbml0ZSIsInRva2VucyIsImFkZFBhcnNlVG9rZW4iLCJ0b2tlbkxlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIl9hIiwiaXNMZWFwWWVhciIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsInBhcnNlVHdvRGlnaXRZZWFyIiwicGFyc2VJbnQiLCJkYXlzSW5ZZWFyIiwiZ2V0U2V0WWVhciIsIm1ha2VHZXRTZXQiLCJnZXRJc0xlYXBZZWFyIiwia2VlcFRpbWUiLCJzZXQkMSIsImdldCIsImlzVVRDIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0TWludXRlcyIsImdldFVUQ0hvdXJzIiwiZ2V0SG91cnMiLCJnZXRVVENEYXRlIiwiZ2V0RGF0ZSIsImdldFVUQ0RheSIsImdldERheSIsImdldFVUQ01vbnRoIiwiZ2V0TW9udGgiLCJnZXRVVENGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwic2V0VVRDTWlsbGlzZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwic2V0VVRDU2Vjb25kcyIsInNldFNlY29uZHMiLCJzZXRVVENNaW51dGVzIiwic2V0TWludXRlcyIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJzZXRVVENEYXRlIiwic2V0RGF0ZSIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzdHJpbmdHZXQiLCJzdHJpbmdTZXQiLCJwcmlvcml0aXplZCIsInByaW9yaXRpemVkTGVuIiwibW9kIiwiaW5kZXhPZiIsIm8iLCJkYXlzSW5Nb250aCIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJsb2NhbGVNb250aHMiLCJfbW9udGhzIiwiaXNGb3JtYXQiLCJsb2NhbGVNb250aHNTaG9ydCIsIl9tb250aHNTaG9ydCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsImxvY2FsZU1vbnRoc1BhcnNlIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJzZXRNb250aCIsIm1pbiIsInNldFVUQ01vbnRoIiwiZ2V0U2V0TW9udGgiLCJnZXREYXlzSW5Nb250aCIsImNvbXB1dGVNb250aHNQYXJzZSIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsInNob3J0UCIsImxvbmdQIiwiY3JlYXRlRGF0ZSIsImNyZWF0ZVVUQ0RhdGUiLCJVVEMiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJmd2RsdyIsImRheU9mWWVhckZyb21XZWVrcyIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0IiwibG9jYWxlV2VlayIsIl93ZWVrIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJsb2NhbGVGaXJzdERheU9mV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZZZWFyIiwiZ2V0U2V0V2VlayIsImFkZCIsImdldFNldElTT1dlZWsiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJjb25jYXQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwibG9jYWxlV2Vla2RheXMiLCJfd2Vla2RheXMiLCJsb2NhbGVXZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzU2hvcnQiLCJsb2NhbGVXZWVrZGF5c01pbiIsIl93ZWVrZGF5c01pbiIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJtaW5QaWVjZXMiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJoRm9ybWF0Iiwia0Zvcm1hdCIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImtJbnB1dCIsIl9pc1BtIiwiaXNQTSIsIl9tZXJpZGllbSIsInBvcyIsInBvczEiLCJwb3MyIiwibG9jYWxlSXNQTSIsImNoYXJBdCIsImRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlIiwiZ2V0U2V0SG91ciIsImxvY2FsZU1lcmlkaWVtIiwiaXNMb3dlciIsImJhc2VDb25maWciLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwibWVyaWRpZW1QYXJzZSIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsImdsb2JhbExvY2FsZSIsImNvbW1vblByZWZpeCIsImFycjEiLCJhcnIyIiwibWlubCIsIm5vcm1hbGl6ZUxvY2FsZSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsImxvYWRMb2NhbGUiLCJpc0xvY2FsZU5hbWVTYW5lIiwib2xkTG9jYWxlIiwiYWxpYXNlZFJlcXVpcmUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJsaXN0TG9jYWxlcyIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4Iiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbUlTTyIsImwiLCJleGVjIiwiYWxsb3dUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJ0ekZvcm1hdCIsImlzb0RhdGVzTGVuIiwiaXNvVGltZXNMZW4iLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwiZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyIsInllYXJTdHIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJyZXN1bHQiLCJ1bnRydW5jYXRlWWVhciIsInByZXByb2Nlc3NSRkMyODIyIiwiY2hlY2tXZWVrZGF5Iiwid2Vla2RheVN0ciIsInBhcnNlZElucHV0Iiwid2Vla2RheVByb3ZpZGVkIiwid2Vla2RheUFjdHVhbCIsImNhbGN1bGF0ZU9mZnNldCIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjb25maWdGcm9tUkZDMjgyMiIsInBhcnNlZEFycmF5IiwiY29uZmlnRnJvbVN0cmluZyIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiX3VzZVVUQyIsImRlZmF1bHRzIiwiYyIsImN1cnJlbnREYXRlQXJyYXkiLCJub3dWYWx1ZSIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX2RheU9mWWVhciIsIl9uZXh0RGF5IiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsImN1cldlZWsiLCJjcmVhdGVMb2NhbCIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsImVyYXNDb252ZXJ0WWVhciIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwidmFsaWRGb3JtYXRGb3VuZCIsImJlc3RGb3JtYXRJc1ZhbGlkIiwiY29uZmlnZkxlbiIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsImRheU9yRGF0ZSIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJwcm90b3R5cGVNaW4iLCJvdGhlciIsInByb3RvdHlwZU1heCIsInBpY2tCeSIsIm1vbWVudHMiLCJvcmRlcmluZyIsImlzRHVyYXRpb25WYWxpZCIsInVuaXRIYXNEZWNpbWFsIiwib3JkZXJMZW4iLCJwYXJzZUZsb2F0IiwiaXNWYWxpZCQxIiwiY3JlYXRlSW52YWxpZCQxIiwiY3JlYXRlRHVyYXRpb24iLCJEdXJhdGlvbiIsImR1cmF0aW9uIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX2RhdGEiLCJfYnViYmxlIiwiaXNEdXJhdGlvbiIsImFic1JvdW5kIiwicm91bmQiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJvZmZzZXQiLCJzZXBhcmF0b3IiLCJ1dGNPZmZzZXQiLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImNodW5rIiwicGFydHMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImNsb25lIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0U2V0T2Zmc2V0Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZFN1YnRyYWN0IiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInN1YnRyYWN0Iiwic2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCJpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwidG9BcnJheSIsImlzTG9jYWwiLCJpc1V0Y09mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsInJldCIsImRpZmZSZXMiLCJwYXJzZUlzbyIsIm1vbWVudHNEaWZmZXJlbmNlIiwiaW52YWxpZCIsImlucCIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJiYXNlIiwiaXNBZnRlciIsImlzQmVmb3JlIiwiY3JlYXRlQWRkZXIiLCJkaXJlY3Rpb24iLCJwZXJpb2QiLCJkdXIiLCJ0bXAiLCJpc0FkZGluZyIsImlzU3RyaW5nIiwiaXNNb21lbnRJbnB1dCIsImlzTnVtYmVyT3JTdHJpbmdBcnJheSIsImlzTW9tZW50SW5wdXRPYmplY3QiLCJvYmplY3RUZXN0IiwicHJvcGVydHlUZXN0IiwicHJvcGVydGllcyIsInByb3BlcnR5IiwicHJvcGVydHlMZW4iLCJhcnJheVRlc3QiLCJkYXRhVHlwZVRlc3QiLCJmaWx0ZXIiLCJpdGVtIiwiaXNDYWxlbmRhclNwZWMiLCJnZXRDYWxlbmRhckZvcm1hdCIsIm15TW9tZW50IiwiY2FsZW5kYXIkMSIsInRpbWUiLCJmb3JtYXRzIiwic29kIiwic3RhcnRPZiIsImNhbGVuZGFyRm9ybWF0IiwibG9jYWxJbnB1dCIsImVuZE9mIiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJhbmNob3IyIiwiYWRqdXN0IiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJ0b0RhdGUiLCJpbnNwZWN0Iiwiem9uZSIsInByZWZpeCIsImRhdGV0aW1lIiwic3VmZml4IiwiaW5wdXRTdHJpbmciLCJwb3N0Zm9ybWF0IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJuZXdMb2NhbGVEYXRhIiwibGFuZyIsIk1TX1BFUl9TRUNPTkQiLCJNU19QRVJfTUlOVVRFIiwiTVNfUEVSX0hPVVIiLCJNU19QRVJfNDAwX1lFQVJTIiwibW9kJDEiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJsb2NhbFN0YXJ0T2ZEYXRlIiwidXRjU3RhcnRPZkRhdGUiLCJzdGFydE9mRGF0ZSIsInVuaXgiLCJ0b0pTT04iLCJpc1ZhbGlkJDIiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJtYXRjaEVyYUFiYnIiLCJtYXRjaEVyYU5hbWUiLCJtYXRjaEVyYU5hcnJvdyIsImVyYXNQYXJzZSIsIm1hdGNoRXJhWWVhck9yZGluYWwiLCJfZXJhWWVhck9yZGluYWxSZWdleCIsImVyYVllYXJPcmRpbmFsUGFyc2UiLCJsb2NhbGVFcmFzIiwiZXJhcyIsIl9lcmFzIiwic2luY2UiLCJ1bnRpbCIsIkluZmluaXR5IiwibG9jYWxlRXJhc1BhcnNlIiwiZXJhTmFtZSIsIm5hcnJvdyIsImxvY2FsZUVyYXNDb252ZXJ0WWVhciIsImRpciIsImdldEVyYU5hbWUiLCJnZXRFcmFOYXJyb3ciLCJnZXRFcmFBYmJyIiwiZ2V0RXJhWWVhciIsImVyYXNOYW1lUmVnZXgiLCJjb21wdXRlRXJhc1BhcnNlIiwiX2VyYXNOYW1lUmVnZXgiLCJfZXJhc1JlZ2V4IiwiZXJhc0FiYnJSZWdleCIsIl9lcmFzQWJiclJlZ2V4IiwiZXJhc05hcnJvd1JlZ2V4IiwiX2VyYXNOYXJyb3dSZWdleCIsImFiYnJQaWVjZXMiLCJuYW1lUGllY2VzIiwibmFycm93UGllY2VzIiwiZXJhc05hbWUiLCJlcmFzQWJiciIsImVyYXNOYXJyb3ciLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0dGVyIiwiZ2V0U2V0V2Vla1llYXIiLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsImdldFNldElTT1dlZWtZZWFyIiwiZ2V0SVNPV2Vla3NJblllYXIiLCJnZXRJU09XZWVrc0luSVNPV2Vla1llYXIiLCJnZXRXZWVrc0luWWVhciIsIndlZWtJbmZvIiwiZ2V0V2Vla3NJbldlZWtZZWFyIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImdldFNldFF1YXJ0ZXIiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0RGF5T2ZZZWFyIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJwYXJzZU1zIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsInByb3RvIiwiZXJhTmFycm93IiwiZXJhQWJiciIsImVyYVllYXIiLCJpc29XZWVrcyIsIndlZWtzSW5XZWVrWWVhciIsImlzb1dlZWtzSW5ZZWFyIiwiaXNvV2Vla3NJbklTT1dlZWtZZWFyIiwicGFyc2Vab25lIiwiaXNEU1QiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiaXNEU1RTaGlmdGVkIiwiY3JlYXRlVW5peCIsImNyZWF0ZUluWm9uZSIsInByZVBhcnNlUG9zdEZvcm1hdCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiZ2V0JDEiLCJpbmRleCIsImZpZWxkIiwic2V0dGVyIiwibGlzdE1vbnRoc0ltcGwiLCJvdXQiLCJsaXN0V2Vla2RheXNJbXBsIiwibG9jYWxlU29ydGVkIiwic2hpZnQiLCJsaXN0TW9udGhzIiwibGlzdE1vbnRoc1Nob3J0IiwibGlzdFdlZWtkYXlzIiwibGlzdFdlZWtkYXlzU2hvcnQiLCJsaXN0V2Vla2RheXNNaW4iLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWRkJDEiLCJzdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwidmFsdWVPZiQxIiwiY2xvbmUkMSIsImdldCQyIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsInJlbGF0aXZlVGltZSQxIiwicG9zTmVnRHVyYXRpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsImFyZ1dpdGhTdWZmaXgiLCJhcmdUaHJlc2hvbGRzIiwid2l0aFN1ZmZpeCIsInRoIiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG90YWwiLCJ0b3RhbFNpZ24iLCJ5bVNpZ24iLCJkYXlzU2lnbiIsImhtc1NpZ24iLCJ0b0ZpeGVkIiwicHJvdG8kMiIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJIQVNIX1VOREVGSU5FRCIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJhc3luY1RhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVSZWdFeHBDaGFyIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJub2RlVXRpbCIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXJyYXlGaWx0ZXIiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsImFycmF5UHVzaCIsImFycmF5U29tZSIsImJhc2VUaW1lcyIsIml0ZXJhdGVlIiwiYmFzZVVuYXJ5IiwiY2FjaGVIYXMiLCJjYWNoZSIsImdldFZhbHVlIiwibWFwVG9BcnJheSIsInNpemUiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwic2V0VG9BcnJheSIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJtYXNrU3JjS2V5IiwidWlkIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5Iiwic3BsaWNlIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsIm5hdGl2ZUdldFN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlS2V5cyIsIkRhdGFWaWV3IiwiZ2V0TmF0aXZlIiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsIkhhc2giLCJjbGVhciIsImhhc2hDbGVhciIsIl9fZGF0YV9fIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkxpc3RDYWNoZSIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwiYXNzb2NJbmRleE9mIiwicG9wIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJnZXRNYXBEYXRhIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiU2V0Q2FjaGUiLCJzZXRDYWNoZUFkZCIsInNldENhY2hlSGFzIiwiU3RhY2siLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJwYWlycyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJlcSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VJc0FyZ3VtZW50cyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJiYXNlSXNFcXVhbERlZXAiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwiZ2V0VGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsImVxdWFsT2JqZWN0cyIsImJhc2VJc05hdGl2ZSIsImlzTWFza2VkIiwicGF0dGVybiIsImJhc2VJc1R5cGVkQXJyYXkiLCJpc0xlbmd0aCIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJzdGFja2VkIiwic2VlbiIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwidGFnIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJjb252ZXJ0Iiwib2JqUHJvcHMiLCJnZXRBbGxLZXlzIiwib2JqTGVuZ3RoIiwib3RoUHJvcHMiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib2JqQ3RvciIsIm90aEN0b3IiLCJnZXRTeW1ib2xzIiwiaXNLZXlhYmxlIiwiaXNPd24iLCJ1bm1hc2tlZCIsInN0dWJBcnJheSIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiaXNBcnJheUxpa2UiLCJzdHViRmFsc2UiLCJpc0VxdWFsIiwiZGVmaW5lUHJvcGVydHkiLCJfZ2V0IiwiX2xlbmd0aCIsImFycmF5c0VxdWFsIiwiZGVlcE9iamVjdENvbXBhcmUiLCJrZXlCeSIsIm5vb3AiLCJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJjb3VudCIsIm9iajEiLCJvYmoyIiwiY29tcG9zZUV2ZW50cyIsIl9sZW4iLCJmbnMiLCJfa2V5IiwiZXZlbnQiLCJfbGVuMiIsIl9rZXkyIiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0SXRlbVJlbmRlcmVyXzEiLCJfcmVhY3QiLCJfcHJvcFR5cGVzIiwiZGVmYXVsdEl0ZW1SZW5kZXJlciIsIl9yZWYiLCJpdGVtQ29udGV4dCIsImdldEl0ZW1Qcm9wcyIsImdldFJlc2l6ZVByb3BzIiwiX2dldFJlc2l6ZVByb3BzIiwibGVmdFJlc2l6ZVByb3BzIiwibGVmdCIsInJpZ2h0UmVzaXplUHJvcHMiLCJyaWdodCIsImNyZWF0ZUVsZW1lbnQiLCJpdGVtUHJvcHMiLCJ1c2VSZXNpemVIYW5kbGUiLCJjbGFzc05hbWUiLCJzdHlsZSIsIm1heEhlaWdodCIsImRpbWVuc2lvbnMiLCJoZWlnaHQiLCJ0aXRsZSIsInByb3BUeXBlcyIsImNvb3JkaW5hdGVUb1RpbWVSYXRpbyIsImNhbGN1bGF0ZVhQb3NpdGlvbkZvclRpbWUiLCJjYWxjdWxhdGVUaW1lRm9yWFBvc2l0aW9uIiwiaXRlcmF0ZVRpbWVzIiwiZ2V0TWluVW5pdCIsImdldE5leHRVbml0IiwiY2FsY3VsYXRlSW50ZXJhY3Rpb25OZXdUaW1lcyIsImNhbGN1bGF0ZURpbWVuc2lvbnMiLCJnZXRHcm91cE9yZGVycyIsImdldEdyb3VwZWRJdGVtcyIsImdldFZpc2libGVJdGVtcyIsImNvbGxpc2lvbiIsImdyb3VwU3RhY2siLCJncm91cE5vU3RhY2siLCJzdGFja0FsbCIsInN0YWNrR3JvdXAiLCJzdGFja1RpbWVsaW5lSXRlbXMiLCJnZXRDYW52YXNXaWR0aCIsImdldEl0ZW1EaW1lbnNpb25zIiwiZ2V0SXRlbVdpdGhJbnRlcmFjdGlvbnMiLCJnZXRDYW52YXNCb3VuZGFyaWVzRnJvbVZpc2libGVUaW1lIiwiY2FsY3VsYXRlU2Nyb2xsQ2FudmFzIiwiX21vbWVudCIsIl9nZW5lcmljIiwiX29iamVjdFNwcmVhZCIsIm93bktleXMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiX2RlZmluZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydGllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9hcnIiLCJfbiIsIl9lIiwiX3MiLCJjYW52YXNUaW1lU3RhcnQiLCJjYW52YXNUaW1lRW5kIiwiY2FudmFzV2lkdGgiLCJ3aWR0aFRvWm9vbVJhdGlvIiwidGltZU9mZnNldCIsImxlZnRPZmZzZXQiLCJ0aW1lVG9QeFJhdGlvIiwidGltZUZyb21DYW52YXNUaW1lU3RhcnQiLCJzdGFydCIsImVuZCIsInRpbWVTdGVwcyIsIm5leHRUaW1lIiwibWluQ2VsbFdpZHRoIiwiem9vbSIsIndpZHRoIiwidGltZURpdmlkZXJzIiwibWluVW5pdCIsIm5leHRUaW1lU3BhbkluVW5pdENvbnRleHQiLCJjZWxsc1RvQmVSZW5kZXJlZEZvckN1cnJlbnRVbml0IiwiY2VsbFdpZHRoVG9Vc2UiLCJtaW5pbXVtQ2VsbHNUb1JlbmRlclVuaXQiLCJuZXh0VW5pdHMiLCJpdGVtVGltZVN0YXJ0IiwiaXRlbVRpbWVFbmQiLCJkcmFnVGltZSIsImlzRHJhZ2dpbmciLCJpc1Jlc2l6aW5nIiwicmVzaXppbmdFZGdlIiwicmVzaXplVGltZSIsIm9yaWdpbmFsSXRlbVJhbmdlIiwiaXRlbVN0YXJ0IiwiaXRlbUVuZCIsIl9yZWYyIiwiaXRlbVRpbWVSYW5nZSIsImVmZmVjdGl2ZVN0YXJ0VGltZSIsImVmZmVjdGl2ZUVuZFRpbWUiLCJpdGVtV2lkdGgiLCJjb2xsaXNpb25MZWZ0IiwiY29sbGlzaW9uV2lkdGgiLCJncm91cHMiLCJncm91cElkS2V5IiwiZ3JvdXBPcmRlcnMiLCJncm91cCIsIml0ZW1zIiwiZ3JvdXBlZEl0ZW1zIiwiZ3JvdXBPcmRlciIsIm9yZGVyIiwiZ3JvdXBJdGVtIiwiaXRlbVRpbWVTdGFydEtleSIsIml0ZW1UaW1lRW5kS2V5IiwiRVBTSUxPTiIsImxpbmVIZWlnaHQiLCJjb2xsaXNpb25QYWRkaW5nIiwidmVydGljYWxNYXJnaW4iLCJ0b3AiLCJncm91cEhlaWdodCIsImdyb3VwVG9wIiwiaXRlbUluZGV4IiwiY3VySGVpZ2h0IiwiY29sbGlkaW5nSXRlbSIsImpqIiwiaXRlbVRvcCIsInN1bSIsInJlZHVjZSIsImFjYyIsIml0ZW1zRGltZW5zaW9ucyIsInN0YWNrSXRlbXMiLCJncm91cEhlaWdodHMiLCJncm91cFRvcHMiLCJncm91cEl0ZW1zIiwiX2l0ZW1zRGltZW5zaW9ucyIsImlzR3JvdXBTdGFja2VkIiwiX3N0YWNrR3JvdXAiLCJyIiwiaXRlbUhlaWdodFJhdGlvIiwiZHJhZ2dpbmdJdGVtIiwicmVzaXppbmdJdGVtIiwibmV3R3JvdXBPcmRlciIsInZpc2libGVJdGVtcyIsInZpc2libGVJdGVtc1dpdGhJbnRlcmFjdGlvbiIsImRpbWVuc2lvbkl0ZW1zIiwiX3N0YWNrQWxsIiwiX3JlZjMiLCJpdGVtSWQiLCJpdGVtSWRLZXkiLCJkaW1lbnNpb24iLCJpdGVtR3JvdXBLZXkiLCJpc092ZXJsYXkiLCJpZCIsIl9yZWY0IiwiX29iamVjdFNwcmVhZDIiLCJfY2FsY3VsYXRlSW50ZXJhY3Rpb24iLCJfY2FsY3VsYXRlSW50ZXJhY3Rpb24yIiwibmV3SXRlbSIsInZpc2libGVUaW1lU3RhcnQiLCJ2aXNpYmxlVGltZUVuZCIsImZvcmNlVXBkYXRlRGltZW5zaW9ucyIsInN0YXRlIiwib2xkQ2FudmFzVGltZVN0YXJ0Iiwib2xkQ2FudmFzVGltZUVuZCIsIm9sZFpvb20iLCJuZXdab29tIiwibmV3U3RhdGUiLCJjYW5LZWVwQ2FudmFzIiwiX2dldENhbnZhc0JvdW5kYXJpZXNGIiwiX2dldENhbnZhc0JvdW5kYXJpZXNGMiIsIm1lcmdlZFN0YXRlIiwiZ2V0UGFyZW50UG9zaXRpb24iLCJnZXRTdW1TY3JvbGwiLCJnZXRTdW1PZmZzZXQiLCJ4UG9zaXRpb24iLCJ5UG9zaXRpb24iLCJmaXJzdCIsIm9mZnNldFBhcmVudCIsInRhZ05hbWUiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZG9jdW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50Iiwib2Zmc2V0TGVmdCIsImNsaWVudExlZnQiLCJvZmZzZXRUb3AiLCJjbGllbnRUb3AiLCJib2R5IiwicGFyZW50IiwicGFyZW50Tm9kZSIsIm92ZXJyaWRhYmxlU3R5bGVzIiwiZm9udFNpemUiLCJjb2xvciIsImN1cnNvciIsImJhY2tncm91bmQiLCJib3JkZXIiLCJ6SW5kZXgiLCJzZWxlY3RlZFN0eWxlIiwic2VsZWN0ZWRBbmRDYW5Nb3ZlIiwic2VsZWN0ZWRBbmRDYW5SZXNpemVMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwic2VsZWN0ZWRBbmRDYW5SZXNpemVMZWZ0QW5kRHJhZ0xlZnQiLCJzZWxlY3RlZEFuZENhblJlc2l6ZVJpZ2h0IiwiYm9yZGVyUmlnaHRXaWR0aCIsInNlbGVjdGVkQW5kQ2FuUmVzaXplUmlnaHRBbmREcmFnUmlnaHQiLCJsZWZ0UmVzaXplU3R5bGUiLCJwb3NpdGlvbiIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJyaWdodFJlc2l6ZVN0eWxlIiwiX2ludGVyYWN0anMiLCJfZXZlbnRzIiwiX2RlZmF1bHRJdGVtUmVuZGVyZXIiLCJfZG9tSGVscGVycyIsIl9zdHlsZXMiLCJfdHlwZW9mIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJJdGVtIiwiX0NvbXBvbmVudCIsIl9wcm9wcyIsIl90aGlzIiwiaW50ZXJhY3RNb3VudGVkIiwic3RhcnRlZENsaWNraW5nIiwiYWN0dWFsQ2xpY2siLCJzdGFydGVkVG91Y2hpbmciLCJzdG9wUHJvcGFnYXRpb24iLCJvbkl0ZW1Eb3VibGVDbGljayIsIm9uQ29udGV4dE1lbnUiLCJlbCIsImRyYWdMZWZ0IiwiZHJhZ1JpZ2h0IiwiY2xhc3NOYW1lcyIsInJlZiIsImdldEl0ZW1SZWYiLCJpdGVtRGl2VGl0bGUiLCJvbk1vdXNlRG93biIsIm9uTW91c2VVcCIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hFbmQiLCJvbkRvdWJsZUNsaWNrIiwiaGFuZGxlRG91YmxlQ2xpY2siLCJoYW5kbGVDb250ZXh0TWVudSIsImdldEl0ZW1TdHlsZSIsImxlZnROYW1lIiwibGVmdENsYXNzTmFtZSIsInJpZ2h0TmFtZSIsInJpZ2h0Q2xhc3NOYW1lIiwiZ2V0RHJhZ0xlZnRSZWYiLCJsZWZ0U3R5bGUiLCJnZXREcmFnUmlnaHRSZWYiLCJyaWdodFN0eWxlIiwiY2FjaGVEYXRhRnJvbVByb3BzIiwiZHJhZ2dpbmciLCJkcmFnU3RhcnQiLCJwcmVEcmFnUG9zaXRpb24iLCJkcmFnR3JvdXBEZWx0YSIsInJlc2l6aW5nIiwicmVzaXplRWRnZSIsInJlc2l6ZVN0YXJ0Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwic2hvdWxkVXBkYXRlIiwic2VsZWN0ZWQiLCJkcmFnU25hcCIsIm1pblJlc2l6ZVdpZHRoIiwiY2FuQ2hhbmdlR3JvdXAiLCJjYW5TZWxlY3QiLCJjYW5Nb3ZlIiwiY2FuUmVzaXplTGVmdCIsImNhblJlc2l6ZVJpZ2h0IiwiaXRlbVRpdGxlIiwiaXRlbVRpdGxlS2V5IiwiaXRlbURpdlRpdGxlS2V5IiwiZ2V0VGltZVJhdGlvIiwiX3RoaXMkcHJvcHMiLCJkcmFnVGltZVNuYXAiLCJjb25zaWRlck9mZnNldCIsInJlc2l6ZVRpbWVTbmFwIiwiZW5kVGltZSIsInN0YXJ0VGltZSIsInRpbWVGb3IiLCJyYXRpbyIsInNjcm9sbFJlZiIsInNjcm9sbHMiLCJwYWdlWCIsIl90aGlzJHByb3BzMiIsImdyb3VwRGVsdGEiLCJfT2JqZWN0JGtleXMiLCJwYWdlWSIsInJlc2l6ZVRpbWVEZWx0YSIsInRpbWVEZWx0YSIsIm1vdW50SW50ZXJhY3QiLCJfdGhpczIiLCJsZWZ0UmVzaXplIiwicmlnaHRSZXNpemUiLCJyZXNpemFibGUiLCJlZGdlcyIsImJvdHRvbSIsImVuYWJsZWQiLCJkcmFnZ2FibGUiLCJzdHlsZUN1cnNvciIsIm9uIiwiY2xpY2tUaW1lIiwic2V0U3RhdGUiLCJtb3ZlUmVzaXplVmFsaWRhdG9yIiwib25EcmFnIiwib25Ecm9wIiwiZGVsdGFSZWN0Iiwib25SZXNpemluZyIsIm9uUmVzaXplZCIsInBvaW50ZXJUeXBlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiY291bGREcmFnIiwiY291bGRSZXNpemVMZWZ0IiwiY291bGRSZXNpemVSaWdodCIsIndpbGxCZUFibGVUb0RyYWciLCJ3aWxsQmVBYmxlVG9SZXNpemVMZWZ0Iiwid2lsbEJlQWJsZVRvUmVzaXplUmlnaHQiLCJjbGlja1R5cGUiLCJvblNlbGVjdCIsImJhc2VTdHlsZXMiLCJib3hTaXppbmciLCJmaW5hbFN0eWxlIiwicmVuZGVyIiwidGltZWxpbmVDb250ZXh0IiwiY29udGV4dCIsImdldFRpbWVsaW5lQ29udGV4dCIsIml0ZW1SZW5kZXJlciIsIkNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX0l0ZW0iLCJuZXdPYmoiLCJkZXNjIiwiY2FuUmVzaXplIiwiSXRlbXMiLCJzZWxlY3RlZEl0ZW0iLCJpc1NlbGVjdGVkIiwiaW5jbHVkZXMiLCJzb3J0ZWREaW1lbnNpb25JdGVtcyIsIml0ZW1SZXNpemluZyIsIml0ZW1SZXNpemVkIiwiaXRlbURyYWciLCJpdGVtRHJvcCIsIm9uSXRlbUNvbnRleHRNZW51IiwiaXRlbVNlbGVjdCIsIlNpZGViYXIiLCJyZW5kZXJHcm91cENvbnRlbnQiLCJpc1JpZ2h0U2lkZWJhciIsImdyb3VwVGl0bGVLZXkiLCJncm91cFJpZ2h0VGl0bGVLZXkiLCJncm91cFJlbmRlcmVyIiwiX3RoaXMkcHJvcHMka2V5cyIsInNpZGViYXJTdHlsZSIsImdyb3Vwc1N0eWxlIiwiZ3JvdXBMaW5lcyIsImVsZW1lbnRTdHlsZSIsIndhcm5pbmciLCJhcmdJbmRleCIsImNvbmRpdGlvbiIsInJlcXVpcmUkJDAiLCJfcHJvcFR5cGVzMiIsIl9ndWQiLCJfZ3VkMiIsIl93YXJuaW5nIiwiX3dhcm5pbmcyIiwiZGVmYXVsdCIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsIm9iamVjdElzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVyIiwib2ZmIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsIm9ubHlDaGlsZCIsImNoaWxkcmVuIiwiY3JlYXRlUmVhY3RDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX3RlbXAiLCJfcmV0IiwiZW1pdHRlciIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJvbGRWYWx1ZSIsImNoaWxkQ29udGV4dFR5cGVzIiwiQ29uc3VtZXIiLCJfQ29tcG9uZW50MiIsIl90ZW1wMiIsIl9yZXQyIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29udGV4dFR5cGVzIiwiX3JlYWN0MiIsIl9pbXBsZW1lbnRhdGlvbiIsIl9pbXBsZW1lbnRhdGlvbjIiLCJjcmVhdGVDb250ZXh0IiwiX2NyZWF0ZVJlYWN0Q29udGV4dDIiLCJkZWZhdWx0Q29udGV4dFN0YXRlIiwiZ2V0VGltZWxpbmVTdGF0ZSIsImdldExlZnRPZmZzZXRGcm9tRGF0ZSIsImdldERhdGVGcm9tTGVmdE9mZnNldFBvc2l0aW9uIiwic2hvd1BlcmlvZCIsIl9jcmVhdGVSZWFjdENvbnRleHQiLCJUaW1lbGluZVN0YXRlUHJvdmlkZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwidGltZWxpbmVVbml0IiwidGltZWxpbmVXaWR0aCIsIl90aGlzJHByb3BzMyIsIlRpbWVsaW5lU3RhdGVDb25zdW1lciIsIl9UaW1lbGluZVN0YXRlQ29udGV4dCIsIl9leHRlbmRzIiwicGFzc1Rocm91Z2hQcm9wVHlwZXMiLCJsaW5lQ291bnQiLCJ2ZXJ0aWNhbExpbmVDbGFzc05hbWVzRm9yVGltZSIsIkNvbHVtbnMiLCJsaW5lcyIsIm1pblVuaXRWYWx1ZSIsImZpcnN0T2ZUeXBlIiwiY2xhc3NOYW1lc0ZvclRpbWUiLCJwb2ludGVyRXZlbnRzIiwiQ29sdW1uc1dyYXBwZXIiLCJkZWZhdWx0UHJvcHMiLCJfZGVmYXVsdCIsIlByZXZlbnRDbGlja09uRHJhZyIsIl9nZXRQcm90b3R5cGVPZjIiLCJldnQiLCJvcmlnaW5DbGlja1giLCJjbGllbnRYIiwiY2xpY2tUb2xlcmFuY2UiLCJjYW5jZWxDbGljayIsIm9uQ2xpY2siLCJjaGlsZEVsZW1lbnQiLCJDaGlsZHJlbiIsIm9ubHkiLCJjbG9uZUVsZW1lbnQiLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlQ2xpY2siLCJfUHJldmVudENsaWNrT25EcmFnIiwiR3JvdXBSb3ciLCJpc0V2ZW5Sb3ciLCJob3Jpem9udGFsTGluZUNsYXNzTmFtZXNGb3JHcm91cCIsImNsYXNzTmFtZXNGb3JHcm91cCIsIl9Hcm91cFJvdyIsIkdyb3VwUm93cyIsIm9uUm93Q2xpY2siLCJvblJvd0RvdWJsZUNsaWNrIiwib25Sb3dDb250ZXh0Q2xpY2siLCJfbG9vcCIsIlNjcm9sbEVsZW1lbnQiLCJzY3JvbGxYIiwic2Nyb2xsQ29tcG9uZW50Iiwib25TY3JvbGwiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlV2hlZWwiLCJwYXNzaXZlIiwidHJhZGl0aW9uYWxab29tIiwiY3RybEtleSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJwYXJlbnRQb3NpdGlvbiIsImN1cnJlbnRUYXJnZXQiLCJzcGVlZCIsIm9uV2hlZWxab29tIiwiZGVsdGFZIiwic2hpZnRLZXkiLCJkZWx0YVgiLCJidXR0b24iLCJkcmFnU3RhcnRQb3NpdGlvbiIsImRyYWdMYXN0UG9zaXRpb24iLCJpc0ludGVyYWN0aW5nV2l0aEl0ZW0iLCJ0b3VjaGVzIiwibGFzdFRvdWNoRGlzdGFuY2UiLCJzY3JlZW5YIiwic2luZ2xlVG91Y2hTdGFydCIsImxhc3RTaW5nbGVUb3VjaCIsImNsaWVudFkiLCJzY3JlZW5ZIiwid2luZG93IiwicGFnZVlPZmZzZXQiLCJvblpvb20iLCJ0b3VjaERpc3RhbmNlIiwiZGVsdGFYMCIsImRlbHRhWTAiLCJtb3ZlWCIsIm1vdmVZIiwic2Nyb2xsVG8iLCJwYWdlWE9mZnNldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzY3JvbGxDb21wb25lbnRTdHlsZSIsInJlZkhhbmRsZXIiLCJvbk1vdXNlTW92ZSIsImhhbmRsZU1vdXNlTW92ZSIsIm9uTW91c2VMZWF2ZSIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVNjcm9sbCIsInN1YnNjcmliZVRvTW91c2VPdmVyIiwiTWFya2VyQ2FudmFzUHJvdmlkZXIiLCJNYXJrZXJDYW52YXNDb25zdW1lciIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJpdGVyIiwibWFya2VycyIsInN1YnNjcmliZU1hcmtlciIsIl9pZCIsImNyZWF0ZUlkIiwiVGltZWxpbmVNYXJrZXJzUHJvdmlkZXIiLCJuZXdNYXJrZXIiLCJ1bnN1YnNjcmliZSIsIm1hcmtlciIsImdldE1hcmtlciIsInVwZGF0ZU1hcmtlciIsIm1hcmtlckluZGV4IiwiZmluZEluZGV4IiwiaGFuZGxlU3Vic2NyaWJlVG9NYXJrZXIiLCJoYW5kbGVVcGRhdGVNYXJrZXIiLCJUaW1lbGluZU1hcmtlcnNDb25zdW1lciIsIlRpbWVsaW5lTWFya2VyVHlwZSIsIlRvZGF5IiwiQ3VzdG9tIiwiQ3Vyc29yIiwiY3JpdGljYWxTdHlsZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjcmVhdGVNYXJrZXJTdHlsZXNXaXRoTGVmdE9mZnNldCIsImNyZWF0ZURlZmF1bHRSZW5kZXJlciIsImRhdGFUZXN0aWRWYWx1ZSIsIkRlZmF1bHRNYXJrZXJSZW5kZXJlciIsInN0eWxlcyIsIl9zaGFyZWQiLCJkZWZhdWx0UmVuZGVyZXIiLCJUb2RheU1hcmtlciIsImludGVydmFsVG9rZW4iLCJjcmVhdGVJbnRlcnZhbFVwZGF0ZXIiLCJpbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInJlbmRlcmVyIiwiZGVmYXVsdEN1c3RvbU1hcmtlclJlbmRlcmVyIiwiQ3VzdG9tTWFya2VyIiwiX01hcmtlckNhbnZhc0NvbnRleHQiLCJDdXJzb3JNYXJrZXIiLCJpc0N1cnNvck92ZXJDYW52YXMiLCJpc1Nob3dpbmdDdXJzb3IiLCJzdWJzY3JpYmVUb0NhbnZhc01vdXNlT3ZlciIsImhhbmRsZUNhbnZhc01vdXNlT3ZlciIsIl90aGlzJHN0YXRlIiwiQ3Vyc29yTWFya2VyV3JhcHBlciIsImRpc3BsYXlOYW1lIiwiX1RpbWVsaW5lTWFya2Vyc0NvbnRleHQiLCJfbWFya2VyVHlwZSIsIl9Ub2RheU1hcmtlciIsIl9DdXN0b21NYXJrZXIiLCJfQ3Vyc29yTWFya2VyIiwiVGltZWxpbmVNYXJrZXJzUmVuZGVyZXIiLCJ0aW1lbGluZVN0YXRlIiwiX1RpbWVsaW5lTWFya2Vyc1JlbmRlcmVyIiwic3RhdGljU3R5bGVzIiwiTWFya2VyQ2FudmFzIiwic3Vic2NyaXB0aW9uIiwiX3RoaXMkY29udGFpbmVyRWwkZ2V0IiwiY29udGFpbmVyRWwiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjb250YWluZXJMZWZ0IiwiY2FudmFzWCIsInN1YiIsImhhbmRsZU1vdXNlTW92ZVN1YnNjcmliZSIsIk1hcmtlckNhbnZhc1dyYXBwZXIiLCJhZGRMaXN0ZW5lciIsImNvbXBvbmVudCIsIl9yZXNpemVFdmVudExpc3RlbmVyIiwiaGFuZGxlRXZlbnQiLCJyZXNpemUiLCJyZW1vdmVMaXN0ZW5lciIsImRlZmF1bHRLZXlzIiwiZ3JvdXBMYWJlbEtleSIsImRlZmF1bHRUaW1lU3RlcHMiLCJkZWZhdWx0SGVhZGVyRm9ybWF0cyIsIm1lZGl1bUxvbmciLCJtZWRpdW0iLCJyZWdpc3RlclNjcm9sbCIsInJpZ2h0U2lkZWJhcldpZHRoIiwibGVmdFNpZGViYXJXaWR0aCIsIlRpbWVsaW5lSGVhZGVyc1Byb3ZpZGVyIiwiY29udGV4dFZhbHVlIiwiVGltZWxpbmVIZWFkZXJzQ29uc3VtZXIiLCJoYXNPd24iLCJjbGFzc2VzIiwiYXBwZW5kQ2xhc3MiLCJwYXJzZVZhbHVlIiwibmV3Q2xhc3MiLCJMRUZUX1ZBUklBTlQiLCJSSUdIVF9WQVJJQU5UIiwiX0hlYWRlcnNDb250ZXh0IiwiX2NvbnN0YW50cyIsIlNpZGViYXJIZWFkZXIiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsInZhcmlhbnQiLCJnZXRSb290UHJvcHMiLCJoZWFkZXJEYXRhIiwiZ2V0U3RhdGVBbmRIZWxwZXJzIiwiUmVuZGVyZXIiLCJQdXJlQ29tcG9uZW50IiwiU2lkZWJhcldyYXBwZXIiLCJzZWNyZXRLZXkiLCJfY2xhc3NuYW1lcyIsIl9TaWRlYmFySGVhZGVyIiwiVGltZWxpbmVIZWFkZXJzIiwiZGlzcGxheSIsImNhbGVuZGFySGVhZGVyU3R5bGUiLCJoZWFkZXJSZWYiLCJjaGlsZCIsInJpZ2h0U2lkZWJhckhlYWRlciIsImxlZnRTaWRlYmFySGVhZGVyIiwiY2FsZW5kYXJIZWFkZXJzIiwiaXNTaWRlYmFySGVhZGVyIiwiaGFuZGxlUm9vdFJlZiIsImdldFJvb3RTdHlsZSIsImdldENhbGVuZGFySGVhZGVyU3R5bGUiLCJjYWxlbmRhckhlYWRlckNsYXNzTmFtZSIsIlRpbWVsaW5lSGVhZGVyc1dyYXBwZXIiLCJDdXN0b21IZWFkZXIiLCJpbnRlcnZhbHMiLCJsYWJlbFdpZHRoIiwiZ2V0SW50ZXJ2YWxTdHlsZSIsImhlYWRlckNvbnRleHQiLCJnZXRJbnRlcnZhbFByb3BzIiwiX2NhbnZhc1RpbWVTdGFydCIsIl9jYW52YXNUaW1lRW5kIiwiX3VuaXQiLCJfdGltZVN0ZXBzIiwiX3Nob3dQZXJpb2QiLCJfZ2V0TGVmdE9mZnNldEZyb21EYXRlIiwiX2ludGVydmFscyIsImdldEhlYWRlckludGVydmFscyIsIkN1c3RvbUhlYWRlcldyYXBwZXIiLCJfcmVmNSIsInNhZmVJc05hTiIsIk51bWJlciIsInBvbnlmaWxsIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwibWVtb2l6ZU9uZSIsInJlc3VsdEZuIiwibGFzdFRoaXMiLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJjYWxsZWRPbmNlIiwibWVtb2l6ZWQiLCJuZXdBcmdzIiwiSW50ZXJ2YWwiLCJwcmltYXJ5SGVhZGVyIiwibmV4dFVuaXQiLCJuZXdTdGFydFRpbWUiLCJuZXdFbmRUaW1lIiwib25JbnRlcnZhbENsaWNrIiwiaW50ZXJ2YWxUZXh0IiwiaW50ZXJ2YWxSZW5kZXJlciIsImludGVydmFsQ29udGV4dCIsIkN1c3RvbURhdGVIZWFkZXIiLCJfSW50ZXJ2YWwiLCJfcmVmJGhlYWRlckNvbnRleHQiLCJfcmVmJGRhdGEiLCJnZXRMYWJlbEZvcm1hdCIsInVuaXRQcm9wIiwiX0N1c3RvbUhlYWRlciIsIl9kZWZhdWx0Q29uZmlnIiwiX21lbW9pemVPbmUiLCJfQ3VzdG9tRGF0ZUhlYWRlciIsIkRhdGVIZWFkZXIiLCJsYWJlbEZvcm1hdCIsImdldEhlYWRlclVuaXQiLCJnZXRIZWFkZXJEYXRhIiwiRGF0ZUhlYWRlcldyYXBwZXIiLCJmb3JtYXRMYWJlbCIsInRpbWVTdGFydCIsInRpbWVFbmQiLCJmb3JtYXRPcHRpb25zIiwiX0l0ZW1zIiwiX1NpZGViYXIiLCJfQ29sdW1ucyIsIl9Hcm91cFJvd3MiLCJfU2Nyb2xsRWxlbWVudCIsIl9NYXJrZXJDYW52YXMiLCJfd2luZG93IiwiX1RpbWVsaW5lSGVhZGVycyIsIl9EYXRlSGVhZGVyIiwiUmVhY3RDYWxlbmRhclRpbWVsaW5lIiwiX3RoaXMkc3RhdGUyIiwiX3RoaXMkY29udGFpbmVyJGdldEJvIiwiY29udGFpbmVyIiwiY29udGFpbmVyV2lkdGgiLCJzaWRlYmFyV2lkdGgiLCJfc3RhY2tUaW1lbGluZUl0ZW1zIiwic2Nyb2xsSGVhZGVyUmVmIiwib25UaW1lQ2hhbmdlIiwidXBkYXRlU2Nyb2xsQ2FudmFzIiwiZ2V0VGltZWxpbmVVbml0IiwiY2hhbmdlWm9vbSIsInNjYWxlIiwibWluWm9vbSIsIm1heFpvb20iLCJuZXdWaXNpYmxlVGltZVN0YXJ0IiwiaXNJdGVtU2VsZWN0ZWQiLCJpdGVtVG91Y2hTZW5kc0NsaWNrIiwib25JdGVtQ2xpY2siLCJ0aW1lRnJvbUl0ZW1FdmVudCIsIm9uSXRlbVNlbGVjdCIsIl90aW1lIiwib25JdGVtRGVzZWxlY3QiLCJfdGhpcyRzdGF0ZTMiLCJvZmZzZXRYIiwibmF0aXZlRXZlbnQiLCJfdGhpcyRzdGF0ZTQiLCJfc2Nyb2xsQ29tcG9uZW50JGdldEIiLCJ4UmVsYXRpdmVUb1RpbWVsaW5lIiwicmVsYXRpdmVJdGVtUG9zaXRpb24iLCJuZXdHcm91cCIsImRyYWdHcm91cFRpdGxlIiwidXBkYXRpbmdJdGVtIiwiZXZlbnRUeXBlIiwib25JdGVtTW92ZSIsImVkZ2UiLCJvbkl0ZW1SZXNpemUiLCJvbkl0ZW1EcmFnIiwicm93SW5kZXgiLCJoYXNTZWxlY3RlZEl0ZW0iLCJzZWxlY3RJdGVtIiwib25DYW52YXNDbGljayIsImdldFRpbWVGcm9tUm93Q2xpY2tFdmVudCIsImdyb3VwSWQiLCJvbkNhbnZhc0RvdWJsZUNsaWNrIiwib25DYW52YXNDb250ZXh0TWVudSIsInRpbWVQb3NpdGlvbiIsImhlYWRlclJlbmRlcmVyIiwiaXNUaW1lbGluZUhlYWRlciIsImdldFNlbGVjdGVkIiwiX3Zpc2libGVUaW1lU3RhcnQiLCJfdmlzaWJsZVRpbWVFbmQiLCJkZWZhdWx0VGltZVN0YXJ0IiwiZGVmYXVsdFRpbWVFbmQiLCJfY2FudmFzV2lkdGgiLCJfc3RhY2tUaW1lbGluZUl0ZW1zMiIsIl9kaW1lbnNpb25JdGVtcyIsIl9oZWlnaHQiLCJfZ3JvdXBIZWlnaHRzIiwiX2dyb3VwVG9wcyIsInJlc2l6ZURldGVjdG9yIiwicHJldlN0YXRlIiwib25Cb3VuZHNDaGFuZ2UiLCJjb21wb25lbnRTY3JvbGxMZWZ0IiwiY29sdW1ucyIsInJvd3MiLCJoYW5kbGVSb3dDbGljayIsImhhbmRsZVJvd0RvdWJsZUNsaWNrIiwiaGFuZGxlU2Nyb2xsQ29udGV4dE1lbnUiLCJkcmFnSXRlbSIsImRyb3BJdGVtIiwiZG91YmxlQ2xpY2tJdGVtIiwiY29udGV4dE1lbnVDbGlja0l0ZW0iLCJyZXNpemVkSXRlbSIsInNpZGViYXIiLCJyaWdodFNpZGViYXIiLCJjaGlsZHJlbldpdGhQcm9wcyIsIl90aGlzMyIsImNoaWxkQXJyYXkiLCJjaGlsZFByb3BzIiwic2VsZWN0ZWRJdGVtcyIsIl90aGlzNCIsIl90aGlzJHN0YXRlNSIsIl90aGlzJHN0YXRlNiIsInN0YWNrUmVzdWx0cyIsIm91dGVyQ29tcG9uZW50U3R5bGUiLCJoYW5kbGVIZWFkZXJSZWYiLCJyZW5kZXJIZWFkZXJzIiwiZ2V0U2Nyb2xsRWxlbWVudFJlZiIsImhhbmRsZVdoZWVsWm9vbSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImRlcml2ZWRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZGF5QmFja2dyb3VuZCIsIlRpbWVsaW5lTWFya2VycyIsIl90aGlzJHByb3BzJHN1YnNjcmliZSIsIlRvZGF5TWFya2VyV3JhcHBlciIsIkN1c3RvbU1hcmtlcldyYXBwZXIiLCJfVGltZWxpbmVNYXJrZXJzIiwiX1RpbWVsaW5lIiwidXNlQ2FsbGJhY2siLCJfanN4Il0sIm1hcHBpbmdzIjoiOztJQWFPLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxFQUM3QixVQUFVLEVBQ1YsZUFBZSxFQUNmLGtCQUFrQixFQUNsQixnQkFBZ0IsRUFDaEIsY0FBYyxFQUNkLG1CQUFtQixFQUNDLEtBQUk7UUFDeEIsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBR0EsY0FBUSxDQUFrQixFQUFFLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsU0FBUyxFQUFF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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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TUFBTTtJQUNkLFNBQUEsQ0FBQyxDQUFDOztJQUdILFFBQUEsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUN2QyxRQUFBLElBQUksWUFBWSxJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQzVGLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3hELGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsU0FBQTs7SUFHRCxRQUFBLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3pDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixTQUFBO1NBQ0osRUFDRCxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsQ0FDbkUsQ0FBQztJQUVGLElBQUEsSUFBSSxPQUFPLEVBQUU7WUFDVCxRQUNJQyx3QkFBSyxTQUFTLEVBQUUseUJBQXlCLFNBQVMsQ0FBQSxDQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFBLFFBQUEsRUFDbEZBLGNBQUssQ0FBQSxLQUFBLEVBQUEsRUFBQSxTQUFTLEVBQUMsK0JBQStCLEVBQUEsUUFBQSxFQUFBLHNCQUFBLEVBQUEsQ0FBMkIsRUFDdkUsQ0FBQSxFQUNSO0lBQ0wsS0FBQTtRQUVELFFBQ0lBLGNBQUssQ0FBQSxLQUFBLEVBQUEsRUFBQSxTQUFTLEVBQUUsQ0FBQSxzQkFBQSxFQUF5QixTQUFTLENBQUUsQ0FBQSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBb0Isa0JBQUEsRUFBQSxJQUFJLEVBQzFHLFFBQUEsRUFBQUEsY0FBQSxDQUFDLGlCQUFpQixFQUFBLEVBQ2QsS0FBSyxFQUFFLEtBQUssRUFDWixTQUFTLEVBQUUsU0FBUyxFQUNwQixXQUFXLEVBQUUsZUFBZSxFQUM1QixVQUFVLEVBQUUsY0FBYyxFQUMxQixZQUFZLEVBQUUsZ0JBQWdCLEVBQzlCLGNBQWMsRUFBRSxjQUFjLEVBQzlCLFlBQVksRUFBRSxZQUFZLEVBQzFCLGlCQUFpQixFQUFFLGlCQUFpQixFQUFBLENBQ3RDLEVBQ0EsQ0FBQSxFQUNSO0lBQ047Ozs7Ozs7OyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlsxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw1NSw1Niw1N119
