import { jsx } from 'react/jsx-runtime';
import { useState, useMemo, useEffect, useCallback } from 'react';

const useSchedulerData = ({ dataSource, resourcesSource, startDateAttribute, endDateAttribute, titleAttribute, resourceIdAttribute }) => {
    const [items, setItems] = useState([]);
    const [resources, setResources] = useState([]);
    const [loading, setLoading] = useState(true);
    // Transform Mendix data to scheduler items
    const transformedItems = useMemo(() => {
        if (dataSource.status !== "available" || !dataSource.items) {
            return [];
        }
        return dataSource.items.map((item) => {
            const startDate = startDateAttribute.get(item).value;
            const endDate = endDateAttribute.get(item).value;
            const title = titleAttribute.get(item).value;
            const resourceId = resourceIdAttribute.get(item).value;
            return {
                id: item.id,
                title: title || "Untitled",
                start: startDate || new Date(),
                end: endDate || new Date(),
                resourceId: resourceId?.toString() || "",
                mendixObject: item
            };
        });
    }, [dataSource, startDateAttribute, endDateAttribute, titleAttribute, resourceIdAttribute]);
    // Transform Mendix data to scheduler resources
    const transformedResources = useMemo(() => {
        if (resourcesSource.status !== "available" || !resourcesSource.items) {
            return [];
        }
        return resourcesSource.items.map((item) => ({
            id: item.id,
            title: item.id,
            mendixObject: item
        }));
    }, [resourcesSource]);
    useEffect(() => {
        setItems(transformedItems);
        setLoading(dataSource.status === "loading");
    }, [transformedItems, dataSource.status]);
    useEffect(() => {
        setResources(transformedResources);
    }, [transformedResources]);
    const updateItem = (itemId, updates) => {
        setItems(prev => prev.map(item => (item.id === itemId ? { ...item, ...updates } : item)));
    };
    const getItemById = (id) => {
        return items.find(item => item.id === id);
    };
    const getResourceById = (id) => {
        return resources.find(resource => resource.id === id);
    };
    return {
        items,
        resources,
        loading,
        updateItem,
        getItemById,
        getResourceById
    };
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var lib$1 = {};

var Timeline$1 = {};

var propTypes = {exports: {}};

var reactIs = {exports: {}};

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;

	{
	  (function () {

	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	    // nor polyfill, then a plain number is used for performance.
	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	    // (unstable) APIs that have been removed. Can we remove the symbols?

	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	    function isValidElementType(type) {
	      return typeof type === 'string' || typeof type === 'function' ||
	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	    }
	    function typeOf(object) {
	      if (typeof object === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;
	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;
	            switch (type) {
	              case REACT_ASYNC_MODE_TYPE:
	              case REACT_CONCURRENT_MODE_TYPE:
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	                return type;
	              default:
	                var $$typeofType = type && type.$$typeof;
	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;
	                  default:
	                    return $$typeof;
	                }
	            }
	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }
	      return undefined;
	    } // AsyncMode is deprecated along with isAsyncMode

	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	        }
	      }
	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	    }
	    function isConcurrentMode(object) {
	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	    }
	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }
	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }
	    function isElement(object) {
	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }
	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }
	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }
	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }
	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }
	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }
	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }
	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }
	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }
	    reactIs_development.AsyncMode = AsyncMode;
	    reactIs_development.ConcurrentMode = ConcurrentMode;
	    reactIs_development.ContextConsumer = ContextConsumer;
	    reactIs_development.ContextProvider = ContextProvider;
	    reactIs_development.Element = Element;
	    reactIs_development.ForwardRef = ForwardRef;
	    reactIs_development.Fragment = Fragment;
	    reactIs_development.Lazy = Lazy;
	    reactIs_development.Memo = Memo;
	    reactIs_development.Portal = Portal;
	    reactIs_development.Profiler = Profiler;
	    reactIs_development.StrictMode = StrictMode;
	    reactIs_development.Suspense = Suspense;
	    reactIs_development.isAsyncMode = isAsyncMode;
	    reactIs_development.isConcurrentMode = isConcurrentMode;
	    reactIs_development.isContextConsumer = isContextConsumer;
	    reactIs_development.isContextProvider = isContextProvider;
	    reactIs_development.isElement = isElement;
	    reactIs_development.isForwardRef = isForwardRef;
	    reactIs_development.isFragment = isFragment;
	    reactIs_development.isLazy = isLazy;
	    reactIs_development.isMemo = isMemo;
	    reactIs_development.isPortal = isPortal;
	    reactIs_development.isProfiler = isProfiler;
	    reactIs_development.isStrictMode = isStrictMode;
	    reactIs_development.isSuspense = isSuspense;
	    reactIs_development.isValidElementType = isValidElementType;
	    reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	{
	  reactIs.exports = requireReactIs_development();
	}
	return reactIs.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;

	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	function toObject(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }
	  return Object(val);
	}
	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    }

	    // Detect buggy property enumeration order in older V8 versions.

	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
	    test1[5] = 'de';
	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    }

	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
	    var test2 = {};
	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }
	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });
	    if (order2.join('') !== '0123456789') {
	      return false;
	    }

	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });
	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }
	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}
	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject(target);
	  var symbols;
	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);
	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }
	  return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has;
	hasRequiredHas = 1;
	has = Function.call.bind(Object.prototype.hasOwnProperty);
	return has;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function () {};
	{
	  var ReactPropTypesSecret = requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = requireHas();
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {/**/}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	          var stack = getStack ? getStack() : '';
	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function () {
	  {
	    loggedTypeFailures = {};
	  }
	};
	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();
	var ReactPropTypesSecret = requireReactPropTypesSecret();
	var has = requireHas();
	var checkPropTypes = requireCheckPropTypes();
	var printWarning = function () {};
	{
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	function emptyFunctionThatReturnsNull() {
	  return null;
	}
	factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data : {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (!manualPropTypeCallCache[cacheKey] &&
	          // Avoid spamming the console because they are often not actionable except for lib authors
	          manualPropTypeWarningCount < 3) {
	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	    return chainedCheckType;
	  }
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
	          expectedType: expectedType
	        });
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
	        return emptyFunctionThatReturnsNull;
	      }
	    }
	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
	  }
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	        return true;
	      default:
	        return false;
	    }
	  }
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredPropTypes;

function requirePropTypes () {
	if (hasRequiredPropTypes) return propTypes.exports;
	hasRequiredPropTypes = 1;
	{
	  var ReactIs = requireReactIs();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	}
	return propTypes.exports;
}

var Items = {};

var Item = {};

var interact_min$1 = {exports: {}};

/* interact.js 1.10.27 | https://raw.github.com/taye/interact.js/main/LICENSE */
var interact_min = interact_min$1.exports;

var hasRequiredInteract_min;

function requireInteract_min () {
	if (hasRequiredInteract_min) return interact_min$1.exports;
	hasRequiredInteract_min = 1;
	(function (module, exports) {
		!function (t, e) {
		  module.exports = e() ;
		}(interact_min, function () {

		  function t(t, e) {
		    var n = Object.keys(t);
		    if (Object.getOwnPropertySymbols) {
		      var r = Object.getOwnPropertySymbols(t);
		      e && (r = r.filter(function (e) {
		        return Object.getOwnPropertyDescriptor(t, e).enumerable;
		      })), n.push.apply(n, r);
		    }
		    return n;
		  }
		  function e(e) {
		    for (var n = 1; n < arguments.length; n++) {
		      var r = null != arguments[n] ? arguments[n] : {};
		      n % 2 ? t(Object(r), !0).forEach(function (t) {
		        a(e, t, r[t]);
		      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : t(Object(r)).forEach(function (t) {
		        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
		      });
		    }
		    return e;
		  }
		  function n(t) {
		    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
		      return typeof t;
		    } : function (t) {
		      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
		    }, n(t);
		  }
		  function r(t, e) {
		    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
		  }
		  function i(t, e) {
		    for (var n = 0; n < e.length; n++) {
		      var r = e[n];
		      r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, d(r.key), r);
		    }
		  }
		  function o(t, e, n) {
		    return e && i(t.prototype, e), n && i(t, n), Object.defineProperty(t, "prototype", {
		      writable: !1
		    }), t;
		  }
		  function a(t, e, n) {
		    return (e = d(e)) in t ? Object.defineProperty(t, e, {
		      value: n,
		      enumerable: !0,
		      configurable: !0,
		      writable: !0
		    }) : t[e] = n, t;
		  }
		  function s(t, e) {
		    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		    t.prototype = Object.create(e && e.prototype, {
		      constructor: {
		        value: t,
		        writable: !0,
		        configurable: !0
		      }
		    }), Object.defineProperty(t, "prototype", {
		      writable: !1
		    }), e && l(t, e);
		  }
		  function c(t) {
		    return c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
		      return t.__proto__ || Object.getPrototypeOf(t);
		    }, c(t);
		  }
		  function l(t, e) {
		    return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
		      return t.__proto__ = e, t;
		    }, l(t, e);
		  }
		  function u(t) {
		    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		    return t;
		  }
		  function p(t) {
		    var e = function () {
		      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
		      if (Reflect.construct.sham) return !1;
		      if ("function" == typeof Proxy) return !0;
		      try {
		        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
		      } catch (t) {
		        return !1;
		      }
		    }();
		    return function () {
		      var n,
		        r = c(t);
		      if (e) {
		        var i = c(this).constructor;
		        n = Reflect.construct(r, arguments, i);
		      } else n = r.apply(this, arguments);
		      return function (t, e) {
		        if (e && ("object" == typeof e || "function" == typeof e)) return e;
		        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		        return u(t);
		      }(this, n);
		    };
		  }
		  function f() {
		    return f = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (t, e, n) {
		      var r = function (t, e) {
		        for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = c(t)););
		        return t;
		      }(t, e);
		      if (r) {
		        var i = Object.getOwnPropertyDescriptor(r, e);
		        return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
		      }
		    }, f.apply(this, arguments);
		  }
		  function d(t) {
		    var e = function (t, e) {
		      if ("object" != typeof t || null === t) return t;
		      var n = t[Symbol.toPrimitive];
		      if (void 0 !== n) {
		        var r = n.call(t, e || "default");
		        if ("object" != typeof r) return r;
		        throw new TypeError("@@toPrimitive must return a primitive value.");
		      }
		      return ("string" === e ? String : Number)(t);
		    }(t, "string");
		    return "symbol" == typeof e ? e : e + "";
		  }
		  var h = function (t) {
		      return !(!t || !t.Window) && t instanceof t.Window;
		    },
		    v = void 0,
		    g = void 0;
		  function m(t) {
		    v = t;
		    var e = t.document.createTextNode("");
		    e.ownerDocument !== t.document && "function" == typeof t.wrap && t.wrap(e) === e && (t = t.wrap(t)), g = t;
		  }
		  function y(t) {
		    return h(t) ? t : (t.ownerDocument || t).defaultView || g.window;
		  }
		  "undefined" != typeof window && window && m(window);
		  var b = function (t) {
		      return !!t && "object" === n(t);
		    },
		    x = function (t) {
		      return "function" == typeof t;
		    },
		    w = {
		      window: function (t) {
		        return t === g || h(t);
		      },
		      docFrag: function (t) {
		        return b(t) && 11 === t.nodeType;
		      },
		      object: b,
		      func: x,
		      number: function (t) {
		        return "number" == typeof t;
		      },
		      bool: function (t) {
		        return "boolean" == typeof t;
		      },
		      string: function (t) {
		        return "string" == typeof t;
		      },
		      element: function (t) {
		        if (!t || "object" !== n(t)) return !1;
		        var e = y(t) || g;
		        return /object|function/.test("undefined" == typeof Element ? "undefined" : n(Element)) ? t instanceof Element || t instanceof e.Element : 1 === t.nodeType && "string" == typeof t.nodeName;
		      },
		      plainObject: function (t) {
		        return b(t) && !!t.constructor && /function Object\b/.test(t.constructor.toString());
		      },
		      array: function (t) {
		        return b(t) && void 0 !== t.length && x(t.splice);
		      }
		    };
		  function E(t) {
		    var e = t.interaction;
		    if ("drag" === e.prepared.name) {
		      var n = e.prepared.axis;
		      "x" === n ? (e.coords.cur.page.y = e.coords.start.page.y, e.coords.cur.client.y = e.coords.start.client.y, e.coords.velocity.client.y = 0, e.coords.velocity.page.y = 0) : "y" === n && (e.coords.cur.page.x = e.coords.start.page.x, e.coords.cur.client.x = e.coords.start.client.x, e.coords.velocity.client.x = 0, e.coords.velocity.page.x = 0);
		    }
		  }
		  function T(t) {
		    var e = t.iEvent,
		      n = t.interaction;
		    if ("drag" === n.prepared.name) {
		      var r = n.prepared.axis;
		      if ("x" === r || "y" === r) {
		        var i = "x" === r ? "y" : "x";
		        e.page[i] = n.coords.start.page[i], e.client[i] = n.coords.start.client[i], e.delta[i] = 0;
		      }
		    }
		  }
		  var S = {
		      id: "actions/drag",
		      install: function (t) {
		        var e = t.actions,
		          n = t.Interactable,
		          r = t.defaults;
		        n.prototype.draggable = S.draggable, e.map.drag = S, e.methodDict.drag = "draggable", r.actions.drag = S.defaults;
		      },
		      listeners: {
		        "interactions:before-action-move": E,
		        "interactions:action-resume": E,
		        "interactions:action-move": T,
		        "auto-start:check": function (t) {
		          var e = t.interaction,
		            n = t.interactable,
		            r = t.buttons,
		            i = n.options.drag;
		          if (i && i.enabled && (!e.pointerIsDown || !/mouse|pointer/.test(e.pointerType) || 0 != (r & n.options.drag.mouseButtons))) return t.action = {
		            name: "drag",
		            axis: "start" === i.lockAxis ? i.startAxis : i.lockAxis
		          }, !1;
		        }
		      },
		      draggable: function (t) {
		        return w.object(t) ? (this.options.drag.enabled = !1 !== t.enabled, this.setPerAction("drag", t), this.setOnEvents("drag", t), /^(xy|x|y|start)$/.test(t.lockAxis) && (this.options.drag.lockAxis = t.lockAxis), /^(xy|x|y)$/.test(t.startAxis) && (this.options.drag.startAxis = t.startAxis), this) : w.bool(t) ? (this.options.drag.enabled = t, this) : this.options.drag;
		      },
		      beforeMove: E,
		      move: T,
		      defaults: {
		        startAxis: "xy",
		        lockAxis: "xy"
		      },
		      getCursor: function () {
		        return "move";
		      },
		      filterEventType: function (t) {
		        return 0 === t.search("drag");
		      }
		    },
		    _ = S,
		    P = {
		      init: function (t) {
		        var e = t;
		        P.document = e.document, P.DocumentFragment = e.DocumentFragment || O, P.SVGElement = e.SVGElement || O, P.SVGSVGElement = e.SVGSVGElement || O, P.SVGElementInstance = e.SVGElementInstance || O, P.Element = e.Element || O, P.HTMLElement = e.HTMLElement || P.Element, P.Event = e.Event, P.Touch = e.Touch || O, P.PointerEvent = e.PointerEvent || e.MSPointerEvent;
		      },
		      document: null,
		      DocumentFragment: null,
		      SVGElement: null,
		      SVGSVGElement: null,
		      SVGElementInstance: null,
		      Element: null,
		      HTMLElement: null,
		      Event: null,
		      Touch: null,
		      PointerEvent: null
		    };
		  function O() {}
		  var k = P;
		  var D = {
		    init: function (t) {
		      var e = k.Element,
		        n = t.navigator || {};
		      D.supportsTouch = "ontouchstart" in t || w.func(t.DocumentTouch) && k.document instanceof t.DocumentTouch, D.supportsPointerEvent = !1 !== n.pointerEnabled && !!k.PointerEvent, D.isIOS = /iP(hone|od|ad)/.test(n.platform), D.isIOS7 = /iP(hone|od|ad)/.test(n.platform) && /OS 7[^\d]/.test(n.appVersion), D.isIe9 = /MSIE 9/.test(n.userAgent), D.isOperaMobile = "Opera" === n.appName && D.supportsTouch && /Presto/.test(n.userAgent), D.prefixedMatchesSelector = "matches" in e.prototype ? "matches" : "webkitMatchesSelector" in e.prototype ? "webkitMatchesSelector" : "mozMatchesSelector" in e.prototype ? "mozMatchesSelector" : "oMatchesSelector" in e.prototype ? "oMatchesSelector" : "msMatchesSelector", D.pEventTypes = D.supportsPointerEvent ? k.PointerEvent === t.MSPointerEvent ? {
		        up: "MSPointerUp",
		        down: "MSPointerDown",
		        over: "mouseover",
		        out: "mouseout",
		        move: "MSPointerMove",
		        cancel: "MSPointerCancel"
		      } : {
		        up: "pointerup",
		        down: "pointerdown",
		        over: "pointerover",
		        out: "pointerout",
		        move: "pointermove",
		        cancel: "pointercancel"
		      } : null, D.wheelEvent = k.document && "onmousewheel" in k.document ? "mousewheel" : "wheel";
		    },
		    supportsTouch: null,
		    supportsPointerEvent: null,
		    isIOS7: null,
		    isIOS: null,
		    isIe9: null,
		    isOperaMobile: null,
		    prefixedMatchesSelector: null,
		    pEventTypes: null,
		    wheelEvent: null
		  };
		  var I = D;
		  function M(t, e) {
		    if (t.contains) return t.contains(e);
		    for (; e;) {
		      if (e === t) return !0;
		      e = e.parentNode;
		    }
		    return !1;
		  }
		  function z(t, e) {
		    for (; w.element(t);) {
		      if (R(t, e)) return t;
		      t = A(t);
		    }
		    return null;
		  }
		  function A(t) {
		    var e = t.parentNode;
		    if (w.docFrag(e)) {
		      for (; (e = e.host) && w.docFrag(e););
		      return e;
		    }
		    return e;
		  }
		  function R(t, e) {
		    return g !== v && (e = e.replace(/\/deep\//g, " ")), t[I.prefixedMatchesSelector](e);
		  }
		  var C = function (t) {
		    return t.parentNode || t.host;
		  };
		  function j(t, e) {
		    for (var n, r = [], i = t; (n = C(i)) && i !== e && n !== i.ownerDocument;) r.unshift(i), i = n;
		    return r;
		  }
		  function F(t, e, n) {
		    for (; w.element(t);) {
		      if (R(t, e)) return !0;
		      if ((t = A(t)) === n) return R(t, e);
		    }
		    return !1;
		  }
		  function X(t) {
		    return t.correspondingUseElement || t;
		  }
		  function Y(t) {
		    var e = t instanceof k.SVGElement ? t.getBoundingClientRect() : t.getClientRects()[0];
		    return e && {
		      left: e.left,
		      right: e.right,
		      top: e.top,
		      bottom: e.bottom,
		      width: e.width || e.right - e.left,
		      height: e.height || e.bottom - e.top
		    };
		  }
		  function L(t) {
		    var e,
		      n = Y(t);
		    if (!I.isIOS7 && n) {
		      var r = {
		        x: (e = (e = y(t)) || g).scrollX || e.document.documentElement.scrollLeft,
		        y: e.scrollY || e.document.documentElement.scrollTop
		      };
		      n.left += r.x, n.right += r.x, n.top += r.y, n.bottom += r.y;
		    }
		    return n;
		  }
		  function q(t) {
		    for (var e = []; t;) e.push(t), t = A(t);
		    return e;
		  }
		  function B(t) {
		    return !!w.string(t) && (k.document.querySelector(t), !0);
		  }
		  function V(t, e) {
		    for (var n in e) t[n] = e[n];
		    return t;
		  }
		  function W(t, e, n) {
		    return "parent" === t ? A(n) : "self" === t ? e.getRect(n) : z(n, t);
		  }
		  function G(t, e, n, r) {
		    var i = t;
		    return w.string(i) ? i = W(i, e, n) : w.func(i) && (i = i.apply(void 0, r)), w.element(i) && (i = L(i)), i;
		  }
		  function N(t) {
		    return t && {
		      x: "x" in t ? t.x : t.left,
		      y: "y" in t ? t.y : t.top
		    };
		  }
		  function U(t) {
		    return !t || "x" in t && "y" in t || ((t = V({}, t)).x = t.left || 0, t.y = t.top || 0, t.width = t.width || (t.right || 0) - t.x, t.height = t.height || (t.bottom || 0) - t.y), t;
		  }
		  function H(t, e, n) {
		    t.left && (e.left += n.x), t.right && (e.right += n.x), t.top && (e.top += n.y), t.bottom && (e.bottom += n.y), e.width = e.right - e.left, e.height = e.bottom - e.top;
		  }
		  function K(t, e, n) {
		    var r = n && t.options[n];
		    return N(G(r && r.origin || t.options.origin, t, e, [t && e])) || {
		      x: 0,
		      y: 0
		    };
		  }
		  function $(t, e) {
		    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function (t) {
		        return !0;
		      },
		      r = arguments.length > 3 ? arguments[3] : void 0;
		    if (r = r || {}, w.string(t) && -1 !== t.search(" ") && (t = J(t)), w.array(t)) return t.forEach(function (t) {
		      return $(t, e, n, r);
		    }), r;
		    if (w.object(t) && (e = t, t = ""), w.func(e) && n(t)) r[t] = r[t] || [], r[t].push(e);else if (w.array(e)) for (var i = 0, o = e; i < o.length; i++) {
		      var a = o[i];
		      $(t, a, n, r);
		    } else if (w.object(e)) for (var s in e) {
		      $(J(s).map(function (e) {
		        return "".concat(t).concat(e);
		      }), e[s], n, r);
		    }
		    return r;
		  }
		  function J(t) {
		    return t.trim().split(/ +/);
		  }
		  var Q = function (t, e) {
		      return Math.sqrt(t * t + e * e);
		    },
		    Z = ["webkit", "moz"];
		  function tt(t, e) {
		    t.__set || (t.__set = {});
		    var n = function (n) {
		      if (Z.some(function (t) {
		        return 0 === n.indexOf(t);
		      })) return 1;
		      "function" != typeof t[n] && "__set" !== n && Object.defineProperty(t, n, {
		        get: function () {
		          return n in t.__set ? t.__set[n] : t.__set[n] = e[n];
		        },
		        set: function (e) {
		          t.__set[n] = e;
		        },
		        configurable: !0
		      });
		    };
		    for (var r in e) n(r);
		    return t;
		  }
		  function et(t, e) {
		    t.page = t.page || {}, t.page.x = e.page.x, t.page.y = e.page.y, t.client = t.client || {}, t.client.x = e.client.x, t.client.y = e.client.y, t.timeStamp = e.timeStamp;
		  }
		  function nt(t) {
		    t.page.x = 0, t.page.y = 0, t.client.x = 0, t.client.y = 0;
		  }
		  function rt(t) {
		    return t instanceof k.Event || t instanceof k.Touch;
		  }
		  function it(t, e, n) {
		    return t = t || "page", (n = n || {}).x = e[t + "X"], n.y = e[t + "Y"], n;
		  }
		  function ot(t, e) {
		    return e = e || {
		      x: 0,
		      y: 0
		    }, I.isOperaMobile && rt(t) ? (it("screen", t, e), e.x += window.scrollX, e.y += window.scrollY) : it("page", t, e), e;
		  }
		  function at(t) {
		    return w.number(t.pointerId) ? t.pointerId : t.identifier;
		  }
		  function st(t, e, n) {
		    var r = e.length > 1 ? lt(e) : e[0];
		    ot(r, t.page), function (t, e) {
		      e = e || {}, I.isOperaMobile && rt(t) ? it("screen", t, e) : it("client", t, e);
		    }(r, t.client), t.timeStamp = n;
		  }
		  function ct(t) {
		    var e = [];
		    return w.array(t) ? (e[0] = t[0], e[1] = t[1]) : "touchend" === t.type ? 1 === t.touches.length ? (e[0] = t.touches[0], e[1] = t.changedTouches[0]) : 0 === t.touches.length && (e[0] = t.changedTouches[0], e[1] = t.changedTouches[1]) : (e[0] = t.touches[0], e[1] = t.touches[1]), e;
		  }
		  function lt(t) {
		    for (var e = {
		        pageX: 0,
		        pageY: 0,
		        clientX: 0,
		        clientY: 0,
		        screenX: 0,
		        screenY: 0
		      }, n = 0; n < t.length; n++) {
		      var r = t[n];
		      for (var i in e) e[i] += r[i];
		    }
		    for (var o in e) e[o] /= t.length;
		    return e;
		  }
		  function ut(t) {
		    if (!t.length) return null;
		    var e = ct(t),
		      n = Math.min(e[0].pageX, e[1].pageX),
		      r = Math.min(e[0].pageY, e[1].pageY),
		      i = Math.max(e[0].pageX, e[1].pageX),
		      o = Math.max(e[0].pageY, e[1].pageY);
		    return {
		      x: n,
		      y: r,
		      left: n,
		      top: r,
		      right: i,
		      bottom: o,
		      width: i - n,
		      height: o - r
		    };
		  }
		  function pt(t, e) {
		    var n = e + "X",
		      r = e + "Y",
		      i = ct(t),
		      o = i[0][n] - i[1][n],
		      a = i[0][r] - i[1][r];
		    return Q(o, a);
		  }
		  function ft(t, e) {
		    var n = e + "X",
		      r = e + "Y",
		      i = ct(t),
		      o = i[1][n] - i[0][n],
		      a = i[1][r] - i[0][r];
		    return 180 * Math.atan2(a, o) / Math.PI;
		  }
		  function dt(t) {
		    return w.string(t.pointerType) ? t.pointerType : w.number(t.pointerType) ? [void 0, void 0, "touch", "pen", "mouse"][t.pointerType] : /touch/.test(t.type || "") || t instanceof k.Touch ? "touch" : "mouse";
		  }
		  function ht(t) {
		    var e = w.func(t.composedPath) ? t.composedPath() : t.path;
		    return [X(e ? e[0] : t.target), X(t.currentTarget)];
		  }
		  var vt = function () {
		    function t(e) {
		      r(this, t), this.immediatePropagationStopped = !1, this.propagationStopped = !1, this._interaction = e;
		    }
		    return o(t, [{
		      key: "preventDefault",
		      value: function () {}
		    }, {
		      key: "stopPropagation",
		      value: function () {
		        this.propagationStopped = !0;
		      }
		    }, {
		      key: "stopImmediatePropagation",
		      value: function () {
		        this.immediatePropagationStopped = this.propagationStopped = !0;
		      }
		    }]), t;
		  }();
		  Object.defineProperty(vt.prototype, "interaction", {
		    get: function () {
		      return this._interaction._proxy;
		    },
		    set: function () {}
		  });
		  var gt = function (t, e) {
		      for (var n = 0; n < e.length; n++) {
		        var r = e[n];
		        t.push(r);
		      }
		      return t;
		    },
		    mt = function (t) {
		      return gt([], t);
		    },
		    yt = function (t, e) {
		      for (var n = 0; n < t.length; n++) if (e(t[n], n, t)) return n;
		      return -1;
		    },
		    bt = function (t, e) {
		      return t[yt(t, e)];
		    },
		    xt = function (t) {
		      s(n, t);
		      var e = p(n);
		      function n(t, i, o) {
		        var a;
		        r(this, n), (a = e.call(this, i._interaction)).dropzone = void 0, a.dragEvent = void 0, a.relatedTarget = void 0, a.draggable = void 0, a.propagationStopped = !1, a.immediatePropagationStopped = !1;
		        var s = "dragleave" === o ? t.prev : t.cur,
		          c = s.element,
		          l = s.dropzone;
		        return a.type = o, a.target = c, a.currentTarget = c, a.dropzone = l, a.dragEvent = i, a.relatedTarget = i.target, a.draggable = i.interactable, a.timeStamp = i.timeStamp, a;
		      }
		      return o(n, [{
		        key: "reject",
		        value: function () {
		          var t = this,
		            e = this._interaction.dropState;
		          if ("dropactivate" === this.type || this.dropzone && e.cur.dropzone === this.dropzone && e.cur.element === this.target) if (e.prev.dropzone = this.dropzone, e.prev.element = this.target, e.rejected = !0, e.events.enter = null, this.stopImmediatePropagation(), "dropactivate" === this.type) {
		            var r = e.activeDrops,
		              i = yt(r, function (e) {
		                var n = e.dropzone,
		                  r = e.element;
		                return n === t.dropzone && r === t.target;
		              });
		            e.activeDrops.splice(i, 1);
		            var o = new n(e, this.dragEvent, "dropdeactivate");
		            o.dropzone = this.dropzone, o.target = this.target, this.dropzone.fire(o);
		          } else this.dropzone.fire(new n(e, this.dragEvent, "dragleave"));
		        }
		      }, {
		        key: "preventDefault",
		        value: function () {}
		      }, {
		        key: "stopPropagation",
		        value: function () {
		          this.propagationStopped = !0;
		        }
		      }, {
		        key: "stopImmediatePropagation",
		        value: function () {
		          this.immediatePropagationStopped = this.propagationStopped = !0;
		        }
		      }]), n;
		    }(vt);
		  function wt(t, e) {
		    for (var n = 0, r = t.slice(); n < r.length; n++) {
		      var i = r[n],
		        o = i.dropzone,
		        a = i.element;
		      e.dropzone = o, e.target = a, o.fire(e), e.propagationStopped = e.immediatePropagationStopped = !1;
		    }
		  }
		  function Et(t, e) {
		    for (var n = function (t, e) {
		        for (var n = [], r = 0, i = t.interactables.list; r < i.length; r++) {
		          var o = i[r];
		          if (o.options.drop.enabled) {
		            var a = o.options.drop.accept;
		            if (!(w.element(a) && a !== e || w.string(a) && !R(e, a) || w.func(a) && !a({
		              dropzone: o,
		              draggableElement: e
		            }))) for (var s = 0, c = o.getAllElements(); s < c.length; s++) {
		              var l = c[s];
		              l !== e && n.push({
		                dropzone: o,
		                element: l,
		                rect: o.getRect(l)
		              });
		            }
		          }
		        }
		        return n;
		      }(t, e), r = 0; r < n.length; r++) {
		      var i = n[r];
		      i.rect = i.dropzone.getRect(i.element);
		    }
		    return n;
		  }
		  function Tt(t, e, n) {
		    for (var r = t.dropState, i = t.interactable, o = t.element, a = [], s = 0, c = r.activeDrops; s < c.length; s++) {
		      var l = c[s],
		        u = l.dropzone,
		        p = l.element,
		        f = l.rect,
		        d = u.dropCheck(e, n, i, o, p, f);
		      a.push(d ? p : null);
		    }
		    var h = function (t) {
		      for (var e, n, r, i = [], o = 0; o < t.length; o++) {
		        var a = t[o],
		          s = t[e];
		        if (a && o !== e) if (s) {
		          var c = C(a),
		            l = C(s);
		          if (c !== a.ownerDocument) if (l !== a.ownerDocument) {
		            if (c !== l) {
		              i = i.length ? i : j(s);
		              var u = void 0;
		              if (s instanceof k.HTMLElement && a instanceof k.SVGElement && !(a instanceof k.SVGSVGElement)) {
		                if (a === l) continue;
		                u = a.ownerSVGElement;
		              } else u = a;
		              for (var p = j(u, s.ownerDocument), f = 0; p[f] && p[f] === i[f];) f++;
		              var d = [p[f - 1], p[f], i[f]];
		              if (d[0]) for (var h = d[0].lastChild; h;) {
		                if (h === d[1]) {
		                  e = o, i = p;
		                  break;
		                }
		                if (h === d[2]) break;
		                h = h.previousSibling;
		              }
		            } else r = s, (parseInt(y(n = a).getComputedStyle(n).zIndex, 10) || 0) >= (parseInt(y(r).getComputedStyle(r).zIndex, 10) || 0) && (e = o);
		          } else e = o;
		        } else e = o;
		      }
		      return e;
		    }(a);
		    return r.activeDrops[h] || null;
		  }
		  function St(t, e, n) {
		    var r = t.dropState,
		      i = {
		        enter: null,
		        leave: null,
		        activate: null,
		        deactivate: null,
		        move: null,
		        drop: null
		      };
		    return "dragstart" === n.type && (i.activate = new xt(r, n, "dropactivate"), i.activate.target = null, i.activate.dropzone = null), "dragend" === n.type && (i.deactivate = new xt(r, n, "dropdeactivate"), i.deactivate.target = null, i.deactivate.dropzone = null), r.rejected || (r.cur.element !== r.prev.element && (r.prev.dropzone && (i.leave = new xt(r, n, "dragleave"), n.dragLeave = i.leave.target = r.prev.element, n.prevDropzone = i.leave.dropzone = r.prev.dropzone), r.cur.dropzone && (i.enter = new xt(r, n, "dragenter"), n.dragEnter = r.cur.element, n.dropzone = r.cur.dropzone)), "dragend" === n.type && r.cur.dropzone && (i.drop = new xt(r, n, "drop"), n.dropzone = r.cur.dropzone, n.relatedTarget = r.cur.element), "dragmove" === n.type && r.cur.dropzone && (i.move = new xt(r, n, "dropmove"), n.dropzone = r.cur.dropzone)), i;
		  }
		  function _t(t, e) {
		    var n = t.dropState,
		      r = n.activeDrops,
		      i = n.cur,
		      o = n.prev;
		    e.leave && o.dropzone.fire(e.leave), e.enter && i.dropzone.fire(e.enter), e.move && i.dropzone.fire(e.move), e.drop && i.dropzone.fire(e.drop), e.deactivate && wt(r, e.deactivate), n.prev.dropzone = i.dropzone, n.prev.element = i.element;
		  }
		  function Pt(t, e) {
		    var n = t.interaction,
		      r = t.iEvent,
		      i = t.event;
		    if ("dragmove" === r.type || "dragend" === r.type) {
		      var o = n.dropState;
		      e.dynamicDrop && (o.activeDrops = Et(e, n.element));
		      var a = r,
		        s = Tt(n, a, i);
		      o.rejected = o.rejected && !!s && s.dropzone === o.cur.dropzone && s.element === o.cur.element, o.cur.dropzone = s && s.dropzone, o.cur.element = s && s.element, o.events = St(n, 0, a);
		    }
		  }
		  var Ot = {
		      id: "actions/drop",
		      install: function (t) {
		        var e = t.actions,
		          n = t.interactStatic,
		          r = t.Interactable,
		          i = t.defaults;
		        t.usePlugin(_), r.prototype.dropzone = function (t) {
		          return function (t, e) {
		            if (w.object(e)) {
		              if (t.options.drop.enabled = !1 !== e.enabled, e.listeners) {
		                var n = $(e.listeners),
		                  r = Object.keys(n).reduce(function (t, e) {
		                    return t[/^(enter|leave)/.test(e) ? "drag".concat(e) : /^(activate|deactivate|move)/.test(e) ? "drop".concat(e) : e] = n[e], t;
		                  }, {}),
		                  i = t.options.drop.listeners;
		                i && t.off(i), t.on(r), t.options.drop.listeners = r;
		              }
		              return w.func(e.ondrop) && t.on("drop", e.ondrop), w.func(e.ondropactivate) && t.on("dropactivate", e.ondropactivate), w.func(e.ondropdeactivate) && t.on("dropdeactivate", e.ondropdeactivate), w.func(e.ondragenter) && t.on("dragenter", e.ondragenter), w.func(e.ondragleave) && t.on("dragleave", e.ondragleave), w.func(e.ondropmove) && t.on("dropmove", e.ondropmove), /^(pointer|center)$/.test(e.overlap) ? t.options.drop.overlap = e.overlap : w.number(e.overlap) && (t.options.drop.overlap = Math.max(Math.min(1, e.overlap), 0)), "accept" in e && (t.options.drop.accept = e.accept), "checker" in e && (t.options.drop.checker = e.checker), t;
		            }
		            if (w.bool(e)) return t.options.drop.enabled = e, t;
		            return t.options.drop;
		          }(this, t);
		        }, r.prototype.dropCheck = function (t, e, n, r, i, o) {
		          return function (t, e, n, r, i, o, a) {
		            var s = !1;
		            if (!(a = a || t.getRect(o))) return !!t.options.drop.checker && t.options.drop.checker(e, n, s, t, o, r, i);
		            var c = t.options.drop.overlap;
		            if ("pointer" === c) {
		              var l = K(r, i, "drag"),
		                u = ot(e);
		              u.x += l.x, u.y += l.y;
		              var p = u.x > a.left && u.x < a.right,
		                f = u.y > a.top && u.y < a.bottom;
		              s = p && f;
		            }
		            var d = r.getRect(i);
		            if (d && "center" === c) {
		              var h = d.left + d.width / 2,
		                v = d.top + d.height / 2;
		              s = h >= a.left && h <= a.right && v >= a.top && v <= a.bottom;
		            }
		            if (d && w.number(c)) {
		              s = Math.max(0, Math.min(a.right, d.right) - Math.max(a.left, d.left)) * Math.max(0, Math.min(a.bottom, d.bottom) - Math.max(a.top, d.top)) / (d.width * d.height) >= c;
		            }
		            t.options.drop.checker && (s = t.options.drop.checker(e, n, s, t, o, r, i));
		            return s;
		          }(this, t, e, n, r, i, o);
		        }, n.dynamicDrop = function (e) {
		          return w.bool(e) ? (t.dynamicDrop = e, n) : t.dynamicDrop;
		        }, V(e.phaselessTypes, {
		          dragenter: !0,
		          dragleave: !0,
		          dropactivate: !0,
		          dropdeactivate: !0,
		          dropmove: !0,
		          drop: !0
		        }), e.methodDict.drop = "dropzone", t.dynamicDrop = !1, i.actions.drop = Ot.defaults;
		      },
		      listeners: {
		        "interactions:before-action-start": function (t) {
		          var e = t.interaction;
		          "drag" === e.prepared.name && (e.dropState = {
		            cur: {
		              dropzone: null,
		              element: null
		            },
		            prev: {
		              dropzone: null,
		              element: null
		            },
		            rejected: null,
		            events: null,
		            activeDrops: []
		          });
		        },
		        "interactions:after-action-start": function (t, e) {
		          var n = t.interaction,
		            r = (t.event, t.iEvent);
		          if ("drag" === n.prepared.name) {
		            var i = n.dropState;
		            i.activeDrops = [], i.events = {}, i.activeDrops = Et(e, n.element), i.events = St(n, 0, r), i.events.activate && (wt(i.activeDrops, i.events.activate), e.fire("actions/drop:start", {
		              interaction: n,
		              dragEvent: r
		            }));
		          }
		        },
		        "interactions:action-move": Pt,
		        "interactions:after-action-move": function (t, e) {
		          var n = t.interaction,
		            r = t.iEvent;
		          if ("drag" === n.prepared.name) {
		            var i = n.dropState;
		            _t(n, i.events), e.fire("actions/drop:move", {
		              interaction: n,
		              dragEvent: r
		            }), i.events = {};
		          }
		        },
		        "interactions:action-end": function (t, e) {
		          if ("drag" === t.interaction.prepared.name) {
		            var n = t.interaction,
		              r = t.iEvent;
		            Pt(t, e), _t(n, n.dropState.events), e.fire("actions/drop:end", {
		              interaction: n,
		              dragEvent: r
		            });
		          }
		        },
		        "interactions:stop": function (t) {
		          var e = t.interaction;
		          if ("drag" === e.prepared.name) {
		            var n = e.dropState;
		            n && (n.activeDrops = null, n.events = null, n.cur.dropzone = null, n.cur.element = null, n.prev.dropzone = null, n.prev.element = null, n.rejected = !1);
		          }
		        }
		      },
		      getActiveDrops: Et,
		      getDrop: Tt,
		      getDropEvents: St,
		      fireDropEvents: _t,
		      filterEventType: function (t) {
		        return 0 === t.search("drag") || 0 === t.search("drop");
		      },
		      defaults: {
		        enabled: !1,
		        accept: null,
		        overlap: "pointer"
		      }
		    },
		    kt = Ot;
		  function Dt(t) {
		    var e = t.interaction,
		      n = t.iEvent,
		      r = t.phase;
		    if ("gesture" === e.prepared.name) {
		      var i = e.pointers.map(function (t) {
		          return t.pointer;
		        }),
		        o = "start" === r,
		        a = "end" === r,
		        s = e.interactable.options.deltaSource;
		      if (n.touches = [i[0], i[1]], o) n.distance = pt(i, s), n.box = ut(i), n.scale = 1, n.ds = 0, n.angle = ft(i, s), n.da = 0, e.gesture.startDistance = n.distance, e.gesture.startAngle = n.angle;else if (a || e.pointers.length < 2) {
		        var c = e.prevEvent;
		        n.distance = c.distance, n.box = c.box, n.scale = c.scale, n.ds = 0, n.angle = c.angle, n.da = 0;
		      } else n.distance = pt(i, s), n.box = ut(i), n.scale = n.distance / e.gesture.startDistance, n.angle = ft(i, s), n.ds = n.scale - e.gesture.scale, n.da = n.angle - e.gesture.angle;
		      e.gesture.distance = n.distance, e.gesture.angle = n.angle, w.number(n.scale) && n.scale !== 1 / 0 && !isNaN(n.scale) && (e.gesture.scale = n.scale);
		    }
		  }
		  var It = {
		      id: "actions/gesture",
		      before: ["actions/drag", "actions/resize"],
		      install: function (t) {
		        var e = t.actions,
		          n = t.Interactable,
		          r = t.defaults;
		        n.prototype.gesturable = function (t) {
		          return w.object(t) ? (this.options.gesture.enabled = !1 !== t.enabled, this.setPerAction("gesture", t), this.setOnEvents("gesture", t), this) : w.bool(t) ? (this.options.gesture.enabled = t, this) : this.options.gesture;
		        }, e.map.gesture = It, e.methodDict.gesture = "gesturable", r.actions.gesture = It.defaults;
		      },
		      listeners: {
		        "interactions:action-start": Dt,
		        "interactions:action-move": Dt,
		        "interactions:action-end": Dt,
		        "interactions:new": function (t) {
		          t.interaction.gesture = {
		            angle: 0,
		            distance: 0,
		            scale: 1,
		            startAngle: 0,
		            startDistance: 0
		          };
		        },
		        "auto-start:check": function (t) {
		          if (!(t.interaction.pointers.length < 2)) {
		            var e = t.interactable.options.gesture;
		            if (e && e.enabled) return t.action = {
		              name: "gesture"
		            }, !1;
		          }
		        }
		      },
		      defaults: {},
		      getCursor: function () {
		        return "";
		      },
		      filterEventType: function (t) {
		        return 0 === t.search("gesture");
		      }
		    },
		    Mt = It;
		  function zt(t, e, n, r, i, o, a) {
		    if (!e) return !1;
		    if (!0 === e) {
		      var s = w.number(o.width) ? o.width : o.right - o.left,
		        c = w.number(o.height) ? o.height : o.bottom - o.top;
		      if (a = Math.min(a, Math.abs(("left" === t || "right" === t ? s : c) / 2)), s < 0 && ("left" === t ? t = "right" : "right" === t && (t = "left")), c < 0 && ("top" === t ? t = "bottom" : "bottom" === t && (t = "top")), "left" === t) {
		        var l = s >= 0 ? o.left : o.right;
		        return n.x < l + a;
		      }
		      if ("top" === t) {
		        var u = c >= 0 ? o.top : o.bottom;
		        return n.y < u + a;
		      }
		      if ("right" === t) return n.x > (s >= 0 ? o.right : o.left) - a;
		      if ("bottom" === t) return n.y > (c >= 0 ? o.bottom : o.top) - a;
		    }
		    return !!w.element(r) && (w.element(e) ? e === r : F(r, e, i));
		  }
		  function At(t) {
		    var e = t.iEvent,
		      n = t.interaction;
		    if ("resize" === n.prepared.name && n.resizeAxes) {
		      var r = e;
		      n.interactable.options.resize.square ? ("y" === n.resizeAxes ? r.delta.x = r.delta.y : r.delta.y = r.delta.x, r.axes = "xy") : (r.axes = n.resizeAxes, "x" === n.resizeAxes ? r.delta.y = 0 : "y" === n.resizeAxes && (r.delta.x = 0));
		    }
		  }
		  var Rt,
		    Ct,
		    jt = {
		      id: "actions/resize",
		      before: ["actions/drag"],
		      install: function (t) {
		        var e = t.actions,
		          n = t.browser,
		          r = t.Interactable,
		          i = t.defaults;
		        jt.cursors = function (t) {
		          return t.isIe9 ? {
		            x: "e-resize",
		            y: "s-resize",
		            xy: "se-resize",
		            top: "n-resize",
		            left: "w-resize",
		            bottom: "s-resize",
		            right: "e-resize",
		            topleft: "se-resize",
		            bottomright: "se-resize",
		            topright: "ne-resize",
		            bottomleft: "ne-resize"
		          } : {
		            x: "ew-resize",
		            y: "ns-resize",
		            xy: "nwse-resize",
		            top: "ns-resize",
		            left: "ew-resize",
		            bottom: "ns-resize",
		            right: "ew-resize",
		            topleft: "nwse-resize",
		            bottomright: "nwse-resize",
		            topright: "nesw-resize",
		            bottomleft: "nesw-resize"
		          };
		        }(n), jt.defaultMargin = n.supportsTouch || n.supportsPointerEvent ? 20 : 10, r.prototype.resizable = function (e) {
		          return function (t, e, n) {
		            if (w.object(e)) return t.options.resize.enabled = !1 !== e.enabled, t.setPerAction("resize", e), t.setOnEvents("resize", e), w.string(e.axis) && /^x$|^y$|^xy$/.test(e.axis) ? t.options.resize.axis = e.axis : null === e.axis && (t.options.resize.axis = n.defaults.actions.resize.axis), w.bool(e.preserveAspectRatio) ? t.options.resize.preserveAspectRatio = e.preserveAspectRatio : w.bool(e.square) && (t.options.resize.square = e.square), t;
		            if (w.bool(e)) return t.options.resize.enabled = e, t;
		            return t.options.resize;
		          }(this, e, t);
		        }, e.map.resize = jt, e.methodDict.resize = "resizable", i.actions.resize = jt.defaults;
		      },
		      listeners: {
		        "interactions:new": function (t) {
		          t.interaction.resizeAxes = "xy";
		        },
		        "interactions:action-start": function (t) {
		          !function (t) {
		            var e = t.iEvent,
		              n = t.interaction;
		            if ("resize" === n.prepared.name && n.prepared.edges) {
		              var r = e,
		                i = n.rect;
		              n._rects = {
		                start: V({}, i),
		                corrected: V({}, i),
		                previous: V({}, i),
		                delta: {
		                  left: 0,
		                  right: 0,
		                  width: 0,
		                  top: 0,
		                  bottom: 0,
		                  height: 0
		                }
		              }, r.edges = n.prepared.edges, r.rect = n._rects.corrected, r.deltaRect = n._rects.delta;
		            }
		          }(t), At(t);
		        },
		        "interactions:action-move": function (t) {
		          !function (t) {
		            var e = t.iEvent,
		              n = t.interaction;
		            if ("resize" === n.prepared.name && n.prepared.edges) {
		              var r = e,
		                i = n.interactable.options.resize.invert,
		                o = "reposition" === i || "negate" === i,
		                a = n.rect,
		                s = n._rects,
		                c = s.start,
		                l = s.corrected,
		                u = s.delta,
		                p = s.previous;
		              if (V(p, l), o) {
		                if (V(l, a), "reposition" === i) {
		                  if (l.top > l.bottom) {
		                    var f = l.top;
		                    l.top = l.bottom, l.bottom = f;
		                  }
		                  if (l.left > l.right) {
		                    var d = l.left;
		                    l.left = l.right, l.right = d;
		                  }
		                }
		              } else l.top = Math.min(a.top, c.bottom), l.bottom = Math.max(a.bottom, c.top), l.left = Math.min(a.left, c.right), l.right = Math.max(a.right, c.left);
		              for (var h in l.width = l.right - l.left, l.height = l.bottom - l.top, l) u[h] = l[h] - p[h];
		              r.edges = n.prepared.edges, r.rect = l, r.deltaRect = u;
		            }
		          }(t), At(t);
		        },
		        "interactions:action-end": function (t) {
		          var e = t.iEvent,
		            n = t.interaction;
		          if ("resize" === n.prepared.name && n.prepared.edges) {
		            var r = e;
		            r.edges = n.prepared.edges, r.rect = n._rects.corrected, r.deltaRect = n._rects.delta;
		          }
		        },
		        "auto-start:check": function (t) {
		          var e = t.interaction,
		            n = t.interactable,
		            r = t.element,
		            i = t.rect,
		            o = t.buttons;
		          if (i) {
		            var a = V({}, e.coords.cur.page),
		              s = n.options.resize;
		            if (s && s.enabled && (!e.pointerIsDown || !/mouse|pointer/.test(e.pointerType) || 0 != (o & s.mouseButtons))) {
		              if (w.object(s.edges)) {
		                var c = {
		                  left: !1,
		                  right: !1,
		                  top: !1,
		                  bottom: !1
		                };
		                for (var l in c) c[l] = zt(l, s.edges[l], a, e._latestPointer.eventTarget, r, i, s.margin || jt.defaultMargin);
		                c.left = c.left && !c.right, c.top = c.top && !c.bottom, (c.left || c.right || c.top || c.bottom) && (t.action = {
		                  name: "resize",
		                  edges: c
		                });
		              } else {
		                var u = "y" !== s.axis && a.x > i.right - jt.defaultMargin,
		                  p = "x" !== s.axis && a.y > i.bottom - jt.defaultMargin;
		                (u || p) && (t.action = {
		                  name: "resize",
		                  axes: (u ? "x" : "") + (p ? "y" : "")
		                });
		              }
		              return !t.action && void 0;
		            }
		          }
		        }
		      },
		      defaults: {
		        square: !1,
		        preserveAspectRatio: !1,
		        axis: "xy",
		        margin: NaN,
		        edges: null,
		        invert: "none"
		      },
		      cursors: null,
		      getCursor: function (t) {
		        var e = t.edges,
		          n = t.axis,
		          r = t.name,
		          i = jt.cursors,
		          o = null;
		        if (n) o = i[r + n];else if (e) {
		          for (var a = "", s = 0, c = ["top", "bottom", "left", "right"]; s < c.length; s++) {
		            var l = c[s];
		            e[l] && (a += l);
		          }
		          o = i[a];
		        }
		        return o;
		      },
		      filterEventType: function (t) {
		        return 0 === t.search("resize");
		      },
		      defaultMargin: null
		    },
		    Ft = jt,
		    Xt = {
		      id: "actions",
		      install: function (t) {
		        t.usePlugin(Mt), t.usePlugin(Ft), t.usePlugin(_), t.usePlugin(kt);
		      }
		    },
		    Yt = 0;
		  var Lt = {
		    request: function (t) {
		      return Rt(t);
		    },
		    cancel: function (t) {
		      return Ct(t);
		    },
		    init: function (t) {
		      if (Rt = t.requestAnimationFrame, Ct = t.cancelAnimationFrame, !Rt) for (var e = ["ms", "moz", "webkit", "o"], n = 0; n < e.length; n++) {
		        var r = e[n];
		        Rt = t["".concat(r, "RequestAnimationFrame")], Ct = t["".concat(r, "CancelAnimationFrame")] || t["".concat(r, "CancelRequestAnimationFrame")];
		      }
		      Rt = Rt && Rt.bind(t), Ct = Ct && Ct.bind(t), Rt || (Rt = function (e) {
		        var n = Date.now(),
		          r = Math.max(0, 16 - (n - Yt)),
		          i = t.setTimeout(function () {
		            e(n + r);
		          }, r);
		        return Yt = n + r, i;
		      }, Ct = function (t) {
		        return clearTimeout(t);
		      });
		    }
		  };
		  var qt = {
		    defaults: {
		      enabled: !1,
		      margin: 60,
		      container: null,
		      speed: 300
		    },
		    now: Date.now,
		    interaction: null,
		    i: 0,
		    x: 0,
		    y: 0,
		    isScrolling: !1,
		    prevTime: 0,
		    margin: 0,
		    speed: 0,
		    start: function (t) {
		      qt.isScrolling = !0, Lt.cancel(qt.i), t.autoScroll = qt, qt.interaction = t, qt.prevTime = qt.now(), qt.i = Lt.request(qt.scroll);
		    },
		    stop: function () {
		      qt.isScrolling = !1, qt.interaction && (qt.interaction.autoScroll = null), Lt.cancel(qt.i);
		    },
		    scroll: function () {
		      var t = qt.interaction,
		        e = t.interactable,
		        n = t.element,
		        r = t.prepared.name,
		        i = e.options[r].autoScroll,
		        o = Bt(i.container, e, n),
		        a = qt.now(),
		        s = (a - qt.prevTime) / 1e3,
		        c = i.speed * s;
		      if (c >= 1) {
		        var l = {
		          x: qt.x * c,
		          y: qt.y * c
		        };
		        if (l.x || l.y) {
		          var u = Vt(o);
		          w.window(o) ? o.scrollBy(l.x, l.y) : o && (o.scrollLeft += l.x, o.scrollTop += l.y);
		          var p = Vt(o),
		            f = {
		              x: p.x - u.x,
		              y: p.y - u.y
		            };
		          (f.x || f.y) && e.fire({
		            type: "autoscroll",
		            target: n,
		            interactable: e,
		            delta: f,
		            interaction: t,
		            container: o
		          });
		        }
		        qt.prevTime = a;
		      }
		      qt.isScrolling && (Lt.cancel(qt.i), qt.i = Lt.request(qt.scroll));
		    },
		    check: function (t, e) {
		      var n;
		      return null == (n = t.options[e].autoScroll) ? void 0 : n.enabled;
		    },
		    onInteractionMove: function (t) {
		      var e = t.interaction,
		        n = t.pointer;
		      if (e.interacting() && qt.check(e.interactable, e.prepared.name)) if (e.simulation) qt.x = qt.y = 0;else {
		        var r,
		          i,
		          o,
		          a,
		          s = e.interactable,
		          c = e.element,
		          l = e.prepared.name,
		          u = s.options[l].autoScroll,
		          p = Bt(u.container, s, c);
		        if (w.window(p)) a = n.clientX < qt.margin, r = n.clientY < qt.margin, i = n.clientX > p.innerWidth - qt.margin, o = n.clientY > p.innerHeight - qt.margin;else {
		          var f = Y(p);
		          a = n.clientX < f.left + qt.margin, r = n.clientY < f.top + qt.margin, i = n.clientX > f.right - qt.margin, o = n.clientY > f.bottom - qt.margin;
		        }
		        qt.x = i ? 1 : a ? -1 : 0, qt.y = o ? 1 : r ? -1 : 0, qt.isScrolling || (qt.margin = u.margin, qt.speed = u.speed, qt.start(e));
		      }
		    }
		  };
		  function Bt(t, e, n) {
		    return (w.string(t) ? W(t, e, n) : t) || y(n);
		  }
		  function Vt(t) {
		    return w.window(t) && (t = window.document.body), {
		      x: t.scrollLeft,
		      y: t.scrollTop
		    };
		  }
		  var Wt = {
		      id: "auto-scroll",
		      install: function (t) {
		        var e = t.defaults,
		          n = t.actions;
		        t.autoScroll = qt, qt.now = function () {
		          return t.now();
		        }, n.phaselessTypes.autoscroll = !0, e.perAction.autoScroll = qt.defaults;
		      },
		      listeners: {
		        "interactions:new": function (t) {
		          t.interaction.autoScroll = null;
		        },
		        "interactions:destroy": function (t) {
		          t.interaction.autoScroll = null, qt.stop(), qt.interaction && (qt.interaction = null);
		        },
		        "interactions:stop": qt.stop,
		        "interactions:action-move": function (t) {
		          return qt.onInteractionMove(t);
		        }
		      }
		    },
		    Gt = Wt;
		  function Nt(t, e) {
		    var n = !1;
		    return function () {
		      return n || (g.console.warn(e), n = !0), t.apply(this, arguments);
		    };
		  }
		  function Ut(t, e) {
		    return t.name = e.name, t.axis = e.axis, t.edges = e.edges, t;
		  }
		  function Ht(t) {
		    return w.bool(t) ? (this.options.styleCursor = t, this) : null === t ? (delete this.options.styleCursor, this) : this.options.styleCursor;
		  }
		  function Kt(t) {
		    return w.func(t) ? (this.options.actionChecker = t, this) : null === t ? (delete this.options.actionChecker, this) : this.options.actionChecker;
		  }
		  var $t = {
		    id: "auto-start/interactableMethods",
		    install: function (t) {
		      var e = t.Interactable;
		      e.prototype.getAction = function (e, n, r, i) {
		        var o = function (t, e, n, r, i) {
		          var o = t.getRect(r),
		            a = e.buttons || {
		              0: 1,
		              1: 4,
		              3: 8,
		              4: 16
		            }[e.button],
		            s = {
		              action: null,
		              interactable: t,
		              interaction: n,
		              element: r,
		              rect: o,
		              buttons: a
		            };
		          return i.fire("auto-start:check", s), s.action;
		        }(this, n, r, i, t);
		        return this.options.actionChecker ? this.options.actionChecker(e, n, o, this, i, r) : o;
		      }, e.prototype.ignoreFrom = Nt(function (t) {
		        return this._backCompatOption("ignoreFrom", t);
		      }, "Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."), e.prototype.allowFrom = Nt(function (t) {
		        return this._backCompatOption("allowFrom", t);
		      }, "Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."), e.prototype.actionChecker = Kt, e.prototype.styleCursor = Ht;
		    }
		  };
		  function Jt(t, e, n, r, i) {
		    return e.testIgnoreAllow(e.options[t.name], n, r) && e.options[t.name].enabled && ee(e, n, t, i) ? t : null;
		  }
		  function Qt(t, e, n, r, i, o, a) {
		    for (var s = 0, c = r.length; s < c; s++) {
		      var l = r[s],
		        u = i[s],
		        p = l.getAction(e, n, t, u);
		      if (p) {
		        var f = Jt(p, l, u, o, a);
		        if (f) return {
		          action: f,
		          interactable: l,
		          element: u
		        };
		      }
		    }
		    return {
		      action: null,
		      interactable: null,
		      element: null
		    };
		  }
		  function Zt(t, e, n, r, i) {
		    var o = [],
		      a = [],
		      s = r;
		    function c(t) {
		      o.push(t), a.push(s);
		    }
		    for (; w.element(s);) {
		      o = [], a = [], i.interactables.forEachMatch(s, c);
		      var l = Qt(t, e, n, o, a, r, i);
		      if (l.action && !l.interactable.options[l.action.name].manualStart) return l;
		      s = A(s);
		    }
		    return {
		      action: null,
		      interactable: null,
		      element: null
		    };
		  }
		  function te(t, e, n) {
		    var r = e.action,
		      i = e.interactable,
		      o = e.element;
		    r = r || {
		      name: null
		    }, t.interactable = i, t.element = o, Ut(t.prepared, r), t.rect = i && r.name ? i.getRect(o) : null, ie(t, n), n.fire("autoStart:prepared", {
		      interaction: t
		    });
		  }
		  function ee(t, e, n, r) {
		    var i = t.options,
		      o = i[n.name].max,
		      a = i[n.name].maxPerElement,
		      s = r.autoStart.maxInteractions,
		      c = 0,
		      l = 0,
		      u = 0;
		    if (!(o && a && s)) return !1;
		    for (var p = 0, f = r.interactions.list; p < f.length; p++) {
		      var d = f[p],
		        h = d.prepared.name;
		      if (d.interacting()) {
		        if (++c >= s) return !1;
		        if (d.interactable === t) {
		          if ((l += h === n.name ? 1 : 0) >= o) return !1;
		          if (d.element === e && (u++, h === n.name && u >= a)) return !1;
		        }
		      }
		    }
		    return s > 0;
		  }
		  function ne(t, e) {
		    return w.number(t) ? (e.autoStart.maxInteractions = t, this) : e.autoStart.maxInteractions;
		  }
		  function re(t, e, n) {
		    var r = n.autoStart.cursorElement;
		    r && r !== t && (r.style.cursor = ""), t.ownerDocument.documentElement.style.cursor = e, t.style.cursor = e, n.autoStart.cursorElement = e ? t : null;
		  }
		  function ie(t, e) {
		    var n = t.interactable,
		      r = t.element,
		      i = t.prepared;
		    if ("mouse" === t.pointerType && n && n.options.styleCursor) {
		      var o = "";
		      if (i.name) {
		        var a = n.options[i.name].cursorChecker;
		        o = w.func(a) ? a(i, n, r, t._interacting) : e.actions.map[i.name].getCursor(i);
		      }
		      re(t.element, o || "", e);
		    } else e.autoStart.cursorElement && re(e.autoStart.cursorElement, "", e);
		  }
		  var oe = {
		      id: "auto-start/base",
		      before: ["actions"],
		      install: function (t) {
		        var e = t.interactStatic,
		          n = t.defaults;
		        t.usePlugin($t), n.base.actionChecker = null, n.base.styleCursor = !0, V(n.perAction, {
		          manualStart: !1,
		          max: 1 / 0,
		          maxPerElement: 1,
		          allowFrom: null,
		          ignoreFrom: null,
		          mouseButtons: 1
		        }), e.maxInteractions = function (e) {
		          return ne(e, t);
		        }, t.autoStart = {
		          maxInteractions: 1 / 0,
		          withinInteractionLimit: ee,
		          cursorElement: null
		        };
		      },
		      listeners: {
		        "interactions:down": function (t, e) {
		          var n = t.interaction,
		            r = t.pointer,
		            i = t.event,
		            o = t.eventTarget;
		          n.interacting() || te(n, Zt(n, r, i, o, e), e);
		        },
		        "interactions:move": function (t, e) {
		          !function (t, e) {
		            var n = t.interaction,
		              r = t.pointer,
		              i = t.event,
		              o = t.eventTarget;
		            "mouse" !== n.pointerType || n.pointerIsDown || n.interacting() || te(n, Zt(n, r, i, o, e), e);
		          }(t, e), function (t, e) {
		            var n = t.interaction;
		            if (n.pointerIsDown && !n.interacting() && n.pointerWasMoved && n.prepared.name) {
		              e.fire("autoStart:before-start", t);
		              var r = n.interactable,
		                i = n.prepared.name;
		              i && r && (r.options[i].manualStart || !ee(r, n.element, n.prepared, e) ? n.stop() : (n.start(n.prepared, r, n.element), ie(n, e)));
		            }
		          }(t, e);
		        },
		        "interactions:stop": function (t, e) {
		          var n = t.interaction,
		            r = n.interactable;
		          r && r.options.styleCursor && re(n.element, "", e);
		        }
		      },
		      maxInteractions: ne,
		      withinInteractionLimit: ee,
		      validateAction: Jt
		    },
		    ae = oe;
		  var se = {
		    id: "auto-start/dragAxis",
		    listeners: {
		      "autoStart:before-start": function (t, e) {
		        var n = t.interaction,
		          r = t.eventTarget,
		          i = t.dx,
		          o = t.dy;
		        if ("drag" === n.prepared.name) {
		          var a = Math.abs(i),
		            s = Math.abs(o),
		            c = n.interactable.options.drag,
		            l = c.startAxis,
		            u = a > s ? "x" : a < s ? "y" : "xy";
		          if (n.prepared.axis = "start" === c.lockAxis ? u[0] : c.lockAxis, "xy" !== u && "xy" !== l && l !== u) {
		            n.prepared.name = null;
		            for (var p = r, f = function (t) {
		                if (t !== n.interactable) {
		                  var i = n.interactable.options.drag;
		                  if (!i.manualStart && t.testIgnoreAllow(i, p, r)) {
		                    var o = t.getAction(n.downPointer, n.downEvent, n, p);
		                    if (o && "drag" === o.name && function (t, e) {
		                      if (!e) return !1;
		                      var n = e.options.drag.startAxis;
		                      return "xy" === t || "xy" === n || n === t;
		                    }(u, t) && ae.validateAction(o, t, p, r, e)) return t;
		                  }
		                }
		              }; w.element(p);) {
		              var d = e.interactables.forEachMatch(p, f);
		              if (d) {
		                n.prepared.name = "drag", n.interactable = d, n.element = p;
		                break;
		              }
		              p = A(p);
		            }
		          }
		        }
		      }
		    }
		  };
		  function ce(t) {
		    var e = t.prepared && t.prepared.name;
		    if (!e) return null;
		    var n = t.interactable.options;
		    return n[e].hold || n[e].delay;
		  }
		  var le = {
		      id: "auto-start/hold",
		      install: function (t) {
		        var e = t.defaults;
		        t.usePlugin(ae), e.perAction.hold = 0, e.perAction.delay = 0;
		      },
		      listeners: {
		        "interactions:new": function (t) {
		          t.interaction.autoStartHoldTimer = null;
		        },
		        "autoStart:prepared": function (t) {
		          var e = t.interaction,
		            n = ce(e);
		          n > 0 && (e.autoStartHoldTimer = setTimeout(function () {
		            e.start(e.prepared, e.interactable, e.element);
		          }, n));
		        },
		        "interactions:move": function (t) {
		          var e = t.interaction,
		            n = t.duplicate;
		          e.autoStartHoldTimer && e.pointerWasMoved && !n && (clearTimeout(e.autoStartHoldTimer), e.autoStartHoldTimer = null);
		        },
		        "autoStart:before-start": function (t) {
		          var e = t.interaction;
		          ce(e) > 0 && (e.prepared.name = null);
		        }
		      },
		      getHoldDuration: ce
		    },
		    ue = le,
		    pe = {
		      id: "auto-start",
		      install: function (t) {
		        t.usePlugin(ae), t.usePlugin(ue), t.usePlugin(se);
		      }
		    },
		    fe = function (t) {
		      return /^(always|never|auto)$/.test(t) ? (this.options.preventDefault = t, this) : w.bool(t) ? (this.options.preventDefault = t ? "always" : "never", this) : this.options.preventDefault;
		    };
		  function de(t) {
		    var e = t.interaction,
		      n = t.event;
		    e.interactable && e.interactable.checkAndPreventDefault(n);
		  }
		  var he = {
		    id: "core/interactablePreventDefault",
		    install: function (t) {
		      var e = t.Interactable;
		      e.prototype.preventDefault = fe, e.prototype.checkAndPreventDefault = function (e) {
		        return function (t, e, n) {
		          var r = t.options.preventDefault;
		          if ("never" !== r) if ("always" !== r) {
		            if (e.events.supportsPassive && /^touch(start|move)$/.test(n.type)) {
		              var i = y(n.target).document,
		                o = e.getDocOptions(i);
		              if (!o || !o.events || !1 !== o.events.passive) return;
		            }
		            /^(mouse|pointer|touch)*(down|start)/i.test(n.type) || w.element(n.target) && R(n.target, "input,select,textarea,[contenteditable=true],[contenteditable=true] *") || n.preventDefault();
		          } else n.preventDefault();
		        }(this, t, e);
		      }, t.interactions.docEvents.push({
		        type: "dragstart",
		        listener: function (e) {
		          for (var n = 0, r = t.interactions.list; n < r.length; n++) {
		            var i = r[n];
		            if (i.element && (i.element === e.target || M(i.element, e.target))) return void i.interactable.checkAndPreventDefault(e);
		          }
		        }
		      });
		    },
		    listeners: ["down", "move", "up", "cancel"].reduce(function (t, e) {
		      return t["interactions:".concat(e)] = de, t;
		    }, {})
		  };
		  function ve(t, e) {
		    if (e.phaselessTypes[t]) return !0;
		    for (var n in e.map) if (0 === t.indexOf(n) && t.substr(n.length) in e.phases) return !0;
		    return !1;
		  }
		  function ge(t) {
		    var e = {};
		    for (var n in t) {
		      var r = t[n];
		      w.plainObject(r) ? e[n] = ge(r) : w.array(r) ? e[n] = mt(r) : e[n] = r;
		    }
		    return e;
		  }
		  var me = function () {
		    function t(e) {
		      r(this, t), this.states = [], this.startOffset = {
		        left: 0,
		        right: 0,
		        top: 0,
		        bottom: 0
		      }, this.startDelta = void 0, this.result = void 0, this.endResult = void 0, this.startEdges = void 0, this.edges = void 0, this.interaction = void 0, this.interaction = e, this.result = ye(), this.edges = {
		        left: !1,
		        right: !1,
		        top: !1,
		        bottom: !1
		      };
		    }
		    return o(t, [{
		      key: "start",
		      value: function (t, e) {
		        var n,
		          r,
		          i = t.phase,
		          o = this.interaction,
		          a = function (t) {
		            var e = t.interactable.options[t.prepared.name],
		              n = e.modifiers;
		            if (n && n.length) return n;
		            return ["snap", "snapSize", "snapEdges", "restrict", "restrictEdges", "restrictSize"].map(function (t) {
		              var n = e[t];
		              return n && n.enabled && {
		                options: n,
		                methods: n._methods
		              };
		            }).filter(function (t) {
		              return !!t;
		            });
		          }(o);
		        this.prepareStates(a), this.startEdges = V({}, o.edges), this.edges = V({}, this.startEdges), this.startOffset = (n = o.rect, r = e, n ? {
		          left: r.x - n.left,
		          top: r.y - n.top,
		          right: n.right - r.x,
		          bottom: n.bottom - r.y
		        } : {
		          left: 0,
		          top: 0,
		          right: 0,
		          bottom: 0
		        }), this.startDelta = {
		          x: 0,
		          y: 0
		        };
		        var s = this.fillArg({
		          phase: i,
		          pageCoords: e,
		          preEnd: !1
		        });
		        return this.result = ye(), this.startAll(s), this.result = this.setAll(s);
		      }
		    }, {
		      key: "fillArg",
		      value: function (t) {
		        var e = this.interaction;
		        return t.interaction = e, t.interactable = e.interactable, t.element = e.element, t.rect || (t.rect = e.rect), t.edges || (t.edges = this.startEdges), t.startOffset = this.startOffset, t;
		      }
		    }, {
		      key: "startAll",
		      value: function (t) {
		        for (var e = 0, n = this.states; e < n.length; e++) {
		          var r = n[e];
		          r.methods.start && (t.state = r, r.methods.start(t));
		        }
		      }
		    }, {
		      key: "setAll",
		      value: function (t) {
		        var e = t.phase,
		          n = t.preEnd,
		          r = t.skipModifiers,
		          i = t.rect,
		          o = t.edges;
		        t.coords = V({}, t.pageCoords), t.rect = V({}, i), t.edges = V({}, o);
		        for (var a = r ? this.states.slice(r) : this.states, s = ye(t.coords, t.rect), c = 0; c < a.length; c++) {
		          var l,
		            u = a[c],
		            p = u.options,
		            f = V({}, t.coords),
		            d = null;
		          null != (l = u.methods) && l.set && this.shouldDo(p, n, e) && (t.state = u, d = u.methods.set(t), H(t.edges, t.rect, {
		            x: t.coords.x - f.x,
		            y: t.coords.y - f.y
		          })), s.eventProps.push(d);
		        }
		        V(this.edges, t.edges), s.delta.x = t.coords.x - t.pageCoords.x, s.delta.y = t.coords.y - t.pageCoords.y, s.rectDelta.left = t.rect.left - i.left, s.rectDelta.right = t.rect.right - i.right, s.rectDelta.top = t.rect.top - i.top, s.rectDelta.bottom = t.rect.bottom - i.bottom;
		        var h = this.result.coords,
		          v = this.result.rect;
		        if (h && v) {
		          var g = s.rect.left !== v.left || s.rect.right !== v.right || s.rect.top !== v.top || s.rect.bottom !== v.bottom;
		          s.changed = g || h.x !== s.coords.x || h.y !== s.coords.y;
		        }
		        return s;
		      }
		    }, {
		      key: "applyToInteraction",
		      value: function (t) {
		        var e = this.interaction,
		          n = t.phase,
		          r = e.coords.cur,
		          i = e.coords.start,
		          o = this.result,
		          a = this.startDelta,
		          s = o.delta;
		        "start" === n && V(this.startDelta, o.delta);
		        for (var c = 0, l = [[i, a], [r, s]]; c < l.length; c++) {
		          var u = l[c],
		            p = u[0],
		            f = u[1];
		          p.page.x += f.x, p.page.y += f.y, p.client.x += f.x, p.client.y += f.y;
		        }
		        var d = this.result.rectDelta,
		          h = t.rect || e.rect;
		        h.left += d.left, h.right += d.right, h.top += d.top, h.bottom += d.bottom, h.width = h.right - h.left, h.height = h.bottom - h.top;
		      }
		    }, {
		      key: "setAndApply",
		      value: function (t) {
		        var e = this.interaction,
		          n = t.phase,
		          r = t.preEnd,
		          i = t.skipModifiers,
		          o = this.setAll(this.fillArg({
		            preEnd: r,
		            phase: n,
		            pageCoords: t.modifiedCoords || e.coords.cur.page
		          }));
		        if (this.result = o, !o.changed && (!i || i < this.states.length) && e.interacting()) return !1;
		        if (t.modifiedCoords) {
		          var a = e.coords.cur.page,
		            s = {
		              x: t.modifiedCoords.x - a.x,
		              y: t.modifiedCoords.y - a.y
		            };
		          o.coords.x += s.x, o.coords.y += s.y, o.delta.x += s.x, o.delta.y += s.y;
		        }
		        this.applyToInteraction(t);
		      }
		    }, {
		      key: "beforeEnd",
		      value: function (t) {
		        var e = t.interaction,
		          n = t.event,
		          r = this.states;
		        if (r && r.length) {
		          for (var i = !1, o = 0; o < r.length; o++) {
		            var a = r[o];
		            t.state = a;
		            var s = a.options,
		              c = a.methods,
		              l = c.beforeEnd && c.beforeEnd(t);
		            if (l) return this.endResult = l, !1;
		            i = i || !i && this.shouldDo(s, !0, t.phase, !0);
		          }
		          i && e.move({
		            event: n,
		            preEnd: !0
		          });
		        }
		      }
		    }, {
		      key: "stop",
		      value: function (t) {
		        var e = t.interaction;
		        if (this.states && this.states.length) {
		          var n = V({
		            states: this.states,
		            interactable: e.interactable,
		            element: e.element,
		            rect: null
		          }, t);
		          this.fillArg(n);
		          for (var r = 0, i = this.states; r < i.length; r++) {
		            var o = i[r];
		            n.state = o, o.methods.stop && o.methods.stop(n);
		          }
		          this.states = null, this.endResult = null;
		        }
		      }
		    }, {
		      key: "prepareStates",
		      value: function (t) {
		        this.states = [];
		        for (var e = 0; e < t.length; e++) {
		          var n = t[e],
		            r = n.options,
		            i = n.methods,
		            o = n.name;
		          this.states.push({
		            options: r,
		            methods: i,
		            index: e,
		            name: o
		          });
		        }
		        return this.states;
		      }
		    }, {
		      key: "restoreInteractionCoords",
		      value: function (t) {
		        var e = t.interaction,
		          n = e.coords,
		          r = e.rect,
		          i = e.modification;
		        if (i.result) {
		          for (var o = i.startDelta, a = i.result, s = a.delta, c = a.rectDelta, l = 0, u = [[n.start, o], [n.cur, s]]; l < u.length; l++) {
		            var p = u[l],
		              f = p[0],
		              d = p[1];
		            f.page.x -= d.x, f.page.y -= d.y, f.client.x -= d.x, f.client.y -= d.y;
		          }
		          r.left -= c.left, r.right -= c.right, r.top -= c.top, r.bottom -= c.bottom;
		        }
		      }
		    }, {
		      key: "shouldDo",
		      value: function (t, e, n, r) {
		        return !(!t || !1 === t.enabled || r && !t.endOnly || t.endOnly && !e || "start" === n && !t.setStart);
		      }
		    }, {
		      key: "copyFrom",
		      value: function (t) {
		        this.startOffset = t.startOffset, this.startDelta = t.startDelta, this.startEdges = t.startEdges, this.edges = t.edges, this.states = t.states.map(function (t) {
		          return ge(t);
		        }), this.result = ye(V({}, t.result.coords), V({}, t.result.rect));
		      }
		    }, {
		      key: "destroy",
		      value: function () {
		        for (var t in this) this[t] = null;
		      }
		    }]), t;
		  }();
		  function ye(t, e) {
		    return {
		      rect: e,
		      coords: t,
		      delta: {
		        x: 0,
		        y: 0
		      },
		      rectDelta: {
		        left: 0,
		        right: 0,
		        top: 0,
		        bottom: 0
		      },
		      eventProps: [],
		      changed: !0
		    };
		  }
		  function be(t, e) {
		    var n = t.defaults,
		      r = {
		        start: t.start,
		        set: t.set,
		        beforeEnd: t.beforeEnd,
		        stop: t.stop
		      },
		      i = function (t) {
		        var i = t || {};
		        for (var o in i.enabled = !1 !== i.enabled, n) o in i || (i[o] = n[o]);
		        var a = {
		          options: i,
		          methods: r,
		          name: e,
		          enable: function () {
		            return i.enabled = !0, a;
		          },
		          disable: function () {
		            return i.enabled = !1, a;
		          }
		        };
		        return a;
		      };
		    return e && "string" == typeof e && (i._defaults = n, i._methods = r), i;
		  }
		  function xe(t) {
		    var e = t.iEvent,
		      n = t.interaction.modification.result;
		    n && (e.modifiers = n.eventProps);
		  }
		  var we = {
		      id: "modifiers/base",
		      before: ["actions"],
		      install: function (t) {
		        t.defaults.perAction.modifiers = [];
		      },
		      listeners: {
		        "interactions:new": function (t) {
		          var e = t.interaction;
		          e.modification = new me(e);
		        },
		        "interactions:before-action-start": function (t) {
		          var e = t.interaction,
		            n = t.interaction.modification;
		          n.start(t, e.coords.start.page), e.edges = n.edges, n.applyToInteraction(t);
		        },
		        "interactions:before-action-move": function (t) {
		          var e = t.interaction,
		            n = e.modification,
		            r = n.setAndApply(t);
		          return e.edges = n.edges, r;
		        },
		        "interactions:before-action-end": function (t) {
		          var e = t.interaction,
		            n = e.modification,
		            r = n.beforeEnd(t);
		          return e.edges = n.startEdges, r;
		        },
		        "interactions:action-start": xe,
		        "interactions:action-move": xe,
		        "interactions:action-end": xe,
		        "interactions:after-action-start": function (t) {
		          return t.interaction.modification.restoreInteractionCoords(t);
		        },
		        "interactions:after-action-move": function (t) {
		          return t.interaction.modification.restoreInteractionCoords(t);
		        },
		        "interactions:stop": function (t) {
		          return t.interaction.modification.stop(t);
		        }
		      }
		    },
		    Ee = we,
		    Te = {
		      base: {
		        preventDefault: "auto",
		        deltaSource: "page"
		      },
		      perAction: {
		        enabled: !1,
		        origin: {
		          x: 0,
		          y: 0
		        }
		      },
		      actions: {}
		    },
		    Se = function (t) {
		      s(n, t);
		      var e = p(n);
		      function n(t, i, o, a, s, c, l) {
		        var p;
		        r(this, n), (p = e.call(this, t)).relatedTarget = null, p.screenX = void 0, p.screenY = void 0, p.button = void 0, p.buttons = void 0, p.ctrlKey = void 0, p.shiftKey = void 0, p.altKey = void 0, p.metaKey = void 0, p.page = void 0, p.client = void 0, p.delta = void 0, p.rect = void 0, p.x0 = void 0, p.y0 = void 0, p.t0 = void 0, p.dt = void 0, p.duration = void 0, p.clientX0 = void 0, p.clientY0 = void 0, p.velocity = void 0, p.speed = void 0, p.swipe = void 0, p.axes = void 0, p.preEnd = void 0, s = s || t.element;
		        var f = t.interactable,
		          d = (f && f.options || Te).deltaSource,
		          h = K(f, s, o),
		          v = "start" === a,
		          g = "end" === a,
		          m = v ? u(p) : t.prevEvent,
		          y = v ? t.coords.start : g ? {
		            page: m.page,
		            client: m.client,
		            timeStamp: t.coords.cur.timeStamp
		          } : t.coords.cur;
		        return p.page = V({}, y.page), p.client = V({}, y.client), p.rect = V({}, t.rect), p.timeStamp = y.timeStamp, g || (p.page.x -= h.x, p.page.y -= h.y, p.client.x -= h.x, p.client.y -= h.y), p.ctrlKey = i.ctrlKey, p.altKey = i.altKey, p.shiftKey = i.shiftKey, p.metaKey = i.metaKey, p.button = i.button, p.buttons = i.buttons, p.target = s, p.currentTarget = s, p.preEnd = c, p.type = l || o + (a || ""), p.interactable = f, p.t0 = v ? t.pointers[t.pointers.length - 1].downTime : m.t0, p.x0 = t.coords.start.page.x - h.x, p.y0 = t.coords.start.page.y - h.y, p.clientX0 = t.coords.start.client.x - h.x, p.clientY0 = t.coords.start.client.y - h.y, p.delta = v || g ? {
		          x: 0,
		          y: 0
		        } : {
		          x: p[d].x - m[d].x,
		          y: p[d].y - m[d].y
		        }, p.dt = t.coords.delta.timeStamp, p.duration = p.timeStamp - p.t0, p.velocity = V({}, t.coords.velocity[d]), p.speed = Q(p.velocity.x, p.velocity.y), p.swipe = g || "inertiastart" === a ? p.getSwipe() : null, p;
		      }
		      return o(n, [{
		        key: "getSwipe",
		        value: function () {
		          var t = this._interaction;
		          if (t.prevEvent.speed < 600 || this.timeStamp - t.prevEvent.timeStamp > 150) return null;
		          var e = 180 * Math.atan2(t.prevEvent.velocityY, t.prevEvent.velocityX) / Math.PI;
		          e < 0 && (e += 360);
		          var n = 112.5 <= e && e < 247.5,
		            r = 202.5 <= e && e < 337.5;
		          return {
		            up: r,
		            down: !r && 22.5 <= e && e < 157.5,
		            left: n,
		            right: !n && (292.5 <= e || e < 67.5),
		            angle: e,
		            speed: t.prevEvent.speed,
		            velocity: {
		              x: t.prevEvent.velocityX,
		              y: t.prevEvent.velocityY
		            }
		          };
		        }
		      }, {
		        key: "preventDefault",
		        value: function () {}
		      }, {
		        key: "stopImmediatePropagation",
		        value: function () {
		          this.immediatePropagationStopped = this.propagationStopped = !0;
		        }
		      }, {
		        key: "stopPropagation",
		        value: function () {
		          this.propagationStopped = !0;
		        }
		      }]), n;
		    }(vt);
		  Object.defineProperties(Se.prototype, {
		    pageX: {
		      get: function () {
		        return this.page.x;
		      },
		      set: function (t) {
		        this.page.x = t;
		      }
		    },
		    pageY: {
		      get: function () {
		        return this.page.y;
		      },
		      set: function (t) {
		        this.page.y = t;
		      }
		    },
		    clientX: {
		      get: function () {
		        return this.client.x;
		      },
		      set: function (t) {
		        this.client.x = t;
		      }
		    },
		    clientY: {
		      get: function () {
		        return this.client.y;
		      },
		      set: function (t) {
		        this.client.y = t;
		      }
		    },
		    dx: {
		      get: function () {
		        return this.delta.x;
		      },
		      set: function (t) {
		        this.delta.x = t;
		      }
		    },
		    dy: {
		      get: function () {
		        return this.delta.y;
		      },
		      set: function (t) {
		        this.delta.y = t;
		      }
		    },
		    velocityX: {
		      get: function () {
		        return this.velocity.x;
		      },
		      set: function (t) {
		        this.velocity.x = t;
		      }
		    },
		    velocityY: {
		      get: function () {
		        return this.velocity.y;
		      },
		      set: function (t) {
		        this.velocity.y = t;
		      }
		    }
		  });
		  var _e = o(function t(e, n, i, o, a) {
		      r(this, t), this.id = void 0, this.pointer = void 0, this.event = void 0, this.downTime = void 0, this.downTarget = void 0, this.id = e, this.pointer = n, this.event = i, this.downTime = o, this.downTarget = a;
		    }),
		    Pe = function (t) {
		      return t.interactable = "", t.element = "", t.prepared = "", t.pointerIsDown = "", t.pointerWasMoved = "", t._proxy = "", t;
		    }({}),
		    Oe = function (t) {
		      return t.start = "", t.move = "", t.end = "", t.stop = "", t.interacting = "", t;
		    }({}),
		    ke = 0,
		    De = function () {
		      function t(e) {
		        var n = this,
		          i = e.pointerType,
		          o = e.scopeFire;
		        r(this, t), this.interactable = null, this.element = null, this.rect = null, this._rects = void 0, this.edges = null, this._scopeFire = void 0, this.prepared = {
		          name: null,
		          axis: null,
		          edges: null
		        }, this.pointerType = void 0, this.pointers = [], this.downEvent = null, this.downPointer = {}, this._latestPointer = {
		          pointer: null,
		          event: null,
		          eventTarget: null
		        }, this.prevEvent = null, this.pointerIsDown = !1, this.pointerWasMoved = !1, this._interacting = !1, this._ending = !1, this._stopped = !0, this._proxy = void 0, this.simulation = null, this.doMove = Nt(function (t) {
		          this.move(t);
		        }, "The interaction.doMove() method has been renamed to interaction.move()"), this.coords = {
		          start: {
		            page: {
		              x: 0,
		              y: 0
		            },
		            client: {
		              x: 0,
		              y: 0
		            },
		            timeStamp: 0
		          },
		          prev: {
		            page: {
		              x: 0,
		              y: 0
		            },
		            client: {
		              x: 0,
		              y: 0
		            },
		            timeStamp: 0
		          },
		          cur: {
		            page: {
		              x: 0,
		              y: 0
		            },
		            client: {
		              x: 0,
		              y: 0
		            },
		            timeStamp: 0
		          },
		          delta: {
		            page: {
		              x: 0,
		              y: 0
		            },
		            client: {
		              x: 0,
		              y: 0
		            },
		            timeStamp: 0
		          },
		          velocity: {
		            page: {
		              x: 0,
		              y: 0
		            },
		            client: {
		              x: 0,
		              y: 0
		            },
		            timeStamp: 0
		          }
		        }, this._id = ke++, this._scopeFire = o, this.pointerType = i;
		        var a = this;
		        this._proxy = {};
		        var s = function (t) {
		          Object.defineProperty(n._proxy, t, {
		            get: function () {
		              return a[t];
		            }
		          });
		        };
		        for (var c in Pe) s(c);
		        var l = function (t) {
		          Object.defineProperty(n._proxy, t, {
		            value: function () {
		              return a[t].apply(a, arguments);
		            }
		          });
		        };
		        for (var u in Oe) l(u);
		        this._scopeFire("interactions:new", {
		          interaction: this
		        });
		      }
		      return o(t, [{
		        key: "pointerMoveTolerance",
		        get: function () {
		          return 1;
		        }
		      }, {
		        key: "pointerDown",
		        value: function (t, e, n) {
		          var r = this.updatePointer(t, e, n, !0),
		            i = this.pointers[r];
		          this._scopeFire("interactions:down", {
		            pointer: t,
		            event: e,
		            eventTarget: n,
		            pointerIndex: r,
		            pointerInfo: i,
		            type: "down",
		            interaction: this
		          });
		        }
		      }, {
		        key: "start",
		        value: function (t, e, n) {
		          return !(this.interacting() || !this.pointerIsDown || this.pointers.length < ("gesture" === t.name ? 2 : 1) || !e.options[t.name].enabled) && (Ut(this.prepared, t), this.interactable = e, this.element = n, this.rect = e.getRect(n), this.edges = this.prepared.edges ? V({}, this.prepared.edges) : {
		            left: !0,
		            right: !0,
		            top: !0,
		            bottom: !0
		          }, this._stopped = !1, this._interacting = this._doPhase({
		            interaction: this,
		            event: this.downEvent,
		            phase: "start"
		          }) && !this._stopped, this._interacting);
		        }
		      }, {
		        key: "pointerMove",
		        value: function (t, e, n) {
		          this.simulation || this.modification && this.modification.endResult || this.updatePointer(t, e, n, !1);
		          var r,
		            i,
		            o = this.coords.cur.page.x === this.coords.prev.page.x && this.coords.cur.page.y === this.coords.prev.page.y && this.coords.cur.client.x === this.coords.prev.client.x && this.coords.cur.client.y === this.coords.prev.client.y;
		          this.pointerIsDown && !this.pointerWasMoved && (r = this.coords.cur.client.x - this.coords.start.client.x, i = this.coords.cur.client.y - this.coords.start.client.y, this.pointerWasMoved = Q(r, i) > this.pointerMoveTolerance);
		          var a,
		            s,
		            c,
		            l = this.getPointerIndex(t),
		            u = {
		              pointer: t,
		              pointerIndex: l,
		              pointerInfo: this.pointers[l],
		              event: e,
		              type: "move",
		              eventTarget: n,
		              dx: r,
		              dy: i,
		              duplicate: o,
		              interaction: this
		            };
		          o || (a = this.coords.velocity, s = this.coords.delta, c = Math.max(s.timeStamp / 1e3, .001), a.page.x = s.page.x / c, a.page.y = s.page.y / c, a.client.x = s.client.x / c, a.client.y = s.client.y / c, a.timeStamp = c), this._scopeFire("interactions:move", u), o || this.simulation || (this.interacting() && (u.type = null, this.move(u)), this.pointerWasMoved && et(this.coords.prev, this.coords.cur));
		        }
		      }, {
		        key: "move",
		        value: function (t) {
		          t && t.event || nt(this.coords.delta), (t = V({
		            pointer: this._latestPointer.pointer,
		            event: this._latestPointer.event,
		            eventTarget: this._latestPointer.eventTarget,
		            interaction: this
		          }, t || {})).phase = "move", this._doPhase(t);
		        }
		      }, {
		        key: "pointerUp",
		        value: function (t, e, n, r) {
		          var i = this.getPointerIndex(t);
		          -1 === i && (i = this.updatePointer(t, e, n, !1));
		          var o = /cancel$/i.test(e.type) ? "cancel" : "up";
		          this._scopeFire("interactions:".concat(o), {
		            pointer: t,
		            pointerIndex: i,
		            pointerInfo: this.pointers[i],
		            event: e,
		            eventTarget: n,
		            type: o,
		            curEventTarget: r,
		            interaction: this
		          }), this.simulation || this.end(e), this.removePointer(t, e);
		        }
		      }, {
		        key: "documentBlur",
		        value: function (t) {
		          this.end(t), this._scopeFire("interactions:blur", {
		            event: t,
		            type: "blur",
		            interaction: this
		          });
		        }
		      }, {
		        key: "end",
		        value: function (t) {
		          var e;
		          this._ending = !0, t = t || this._latestPointer.event, this.interacting() && (e = this._doPhase({
		            event: t,
		            interaction: this,
		            phase: "end"
		          })), this._ending = !1, !0 === e && this.stop();
		        }
		      }, {
		        key: "currentAction",
		        value: function () {
		          return this._interacting ? this.prepared.name : null;
		        }
		      }, {
		        key: "interacting",
		        value: function () {
		          return this._interacting;
		        }
		      }, {
		        key: "stop",
		        value: function () {
		          this._scopeFire("interactions:stop", {
		            interaction: this
		          }), this.interactable = this.element = null, this._interacting = !1, this._stopped = !0, this.prepared.name = this.prevEvent = null;
		        }
		      }, {
		        key: "getPointerIndex",
		        value: function (t) {
		          var e = at(t);
		          return "mouse" === this.pointerType || "pen" === this.pointerType ? this.pointers.length - 1 : yt(this.pointers, function (t) {
		            return t.id === e;
		          });
		        }
		      }, {
		        key: "getPointerInfo",
		        value: function (t) {
		          return this.pointers[this.getPointerIndex(t)];
		        }
		      }, {
		        key: "updatePointer",
		        value: function (t, e, n, r) {
		          var i,
		            o,
		            a,
		            s = at(t),
		            c = this.getPointerIndex(t),
		            l = this.pointers[c];
		          return r = !1 !== r && (r || /(down|start)$/i.test(e.type)), l ? l.pointer = t : (l = new _e(s, t, e, null, null), c = this.pointers.length, this.pointers.push(l)), st(this.coords.cur, this.pointers.map(function (t) {
		            return t.pointer;
		          }), this._now()), i = this.coords.delta, o = this.coords.prev, a = this.coords.cur, i.page.x = a.page.x - o.page.x, i.page.y = a.page.y - o.page.y, i.client.x = a.client.x - o.client.x, i.client.y = a.client.y - o.client.y, i.timeStamp = a.timeStamp - o.timeStamp, r && (this.pointerIsDown = !0, l.downTime = this.coords.cur.timeStamp, l.downTarget = n, tt(this.downPointer, t), this.interacting() || (et(this.coords.start, this.coords.cur), et(this.coords.prev, this.coords.cur), this.downEvent = e, this.pointerWasMoved = !1)), this._updateLatestPointer(t, e, n), this._scopeFire("interactions:update-pointer", {
		            pointer: t,
		            event: e,
		            eventTarget: n,
		            down: r,
		            pointerInfo: l,
		            pointerIndex: c,
		            interaction: this
		          }), c;
		        }
		      }, {
		        key: "removePointer",
		        value: function (t, e) {
		          var n = this.getPointerIndex(t);
		          if (-1 !== n) {
		            var r = this.pointers[n];
		            this._scopeFire("interactions:remove-pointer", {
		              pointer: t,
		              event: e,
		              eventTarget: null,
		              pointerIndex: n,
		              pointerInfo: r,
		              interaction: this
		            }), this.pointers.splice(n, 1), this.pointerIsDown = !1;
		          }
		        }
		      }, {
		        key: "_updateLatestPointer",
		        value: function (t, e, n) {
		          this._latestPointer.pointer = t, this._latestPointer.event = e, this._latestPointer.eventTarget = n;
		        }
		      }, {
		        key: "destroy",
		        value: function () {
		          this._latestPointer.pointer = null, this._latestPointer.event = null, this._latestPointer.eventTarget = null;
		        }
		      }, {
		        key: "_createPreparedEvent",
		        value: function (t, e, n, r) {
		          return new Se(this, t, this.prepared.name, e, this.element, n, r);
		        }
		      }, {
		        key: "_fireEvent",
		        value: function (t) {
		          var e;
		          null == (e = this.interactable) || e.fire(t), (!this.prevEvent || t.timeStamp >= this.prevEvent.timeStamp) && (this.prevEvent = t);
		        }
		      }, {
		        key: "_doPhase",
		        value: function (t) {
		          var e = t.event,
		            n = t.phase,
		            r = t.preEnd,
		            i = t.type,
		            o = this.rect;
		          if (o && "move" === n && (H(this.edges, o, this.coords.delta[this.interactable.options.deltaSource]), o.width = o.right - o.left, o.height = o.bottom - o.top), !1 === this._scopeFire("interactions:before-action-".concat(n), t)) return !1;
		          var a = t.iEvent = this._createPreparedEvent(e, n, r, i);
		          return this._scopeFire("interactions:action-".concat(n), t), "start" === n && (this.prevEvent = a), this._fireEvent(a), this._scopeFire("interactions:after-action-".concat(n), t), !0;
		        }
		      }, {
		        key: "_now",
		        value: function () {
		          return Date.now();
		        }
		      }]), t;
		    }();
		  function Ie(t) {
		    Me(t.interaction);
		  }
		  function Me(t) {
		    if (!function (t) {
		      return !(!t.offset.pending.x && !t.offset.pending.y);
		    }(t)) return !1;
		    var e = t.offset.pending;
		    return Ae(t.coords.cur, e), Ae(t.coords.delta, e), H(t.edges, t.rect, e), e.x = 0, e.y = 0, !0;
		  }
		  function ze(t) {
		    var e = t.x,
		      n = t.y;
		    this.offset.pending.x += e, this.offset.pending.y += n, this.offset.total.x += e, this.offset.total.y += n;
		  }
		  function Ae(t, e) {
		    var n = t.page,
		      r = t.client,
		      i = e.x,
		      o = e.y;
		    n.x += i, n.y += o, r.x += i, r.y += o;
		  }
		  Oe.offsetBy = "";
		  var Re = {
		      id: "offset",
		      before: ["modifiers", "pointer-events", "actions", "inertia"],
		      install: function (t) {
		        t.Interaction.prototype.offsetBy = ze;
		      },
		      listeners: {
		        "interactions:new": function (t) {
		          t.interaction.offset = {
		            total: {
		              x: 0,
		              y: 0
		            },
		            pending: {
		              x: 0,
		              y: 0
		            }
		          };
		        },
		        "interactions:update-pointer": function (t) {
		          return function (t) {
		            t.pointerIsDown && (Ae(t.coords.cur, t.offset.total), t.offset.pending.x = 0, t.offset.pending.y = 0);
		          }(t.interaction);
		        },
		        "interactions:before-action-start": Ie,
		        "interactions:before-action-move": Ie,
		        "interactions:before-action-end": function (t) {
		          var e = t.interaction;
		          if (Me(e)) return e.move({
		            offset: !0
		          }), e.end(), !1;
		        },
		        "interactions:stop": function (t) {
		          var e = t.interaction;
		          e.offset.total.x = 0, e.offset.total.y = 0, e.offset.pending.x = 0, e.offset.pending.y = 0;
		        }
		      }
		    },
		    Ce = Re;
		  var je = function () {
		    function t(e) {
		      r(this, t), this.active = !1, this.isModified = !1, this.smoothEnd = !1, this.allowResume = !1, this.modification = void 0, this.modifierCount = 0, this.modifierArg = void 0, this.startCoords = void 0, this.t0 = 0, this.v0 = 0, this.te = 0, this.targetOffset = void 0, this.modifiedOffset = void 0, this.currentOffset = void 0, this.lambda_v0 = 0, this.one_ve_v0 = 0, this.timeout = void 0, this.interaction = void 0, this.interaction = e;
		    }
		    return o(t, [{
		      key: "start",
		      value: function (t) {
		        var e = this.interaction,
		          n = Fe(e);
		        if (!n || !n.enabled) return !1;
		        var r = e.coords.velocity.client,
		          i = Q(r.x, r.y),
		          o = this.modification || (this.modification = new me(e));
		        if (o.copyFrom(e.modification), this.t0 = e._now(), this.allowResume = n.allowResume, this.v0 = i, this.currentOffset = {
		          x: 0,
		          y: 0
		        }, this.startCoords = e.coords.cur.page, this.modifierArg = o.fillArg({
		          pageCoords: this.startCoords,
		          preEnd: !0,
		          phase: "inertiastart"
		        }), this.t0 - e.coords.cur.timeStamp < 50 && i > n.minSpeed && i > n.endSpeed) this.startInertia();else {
		          if (o.result = o.setAll(this.modifierArg), !o.result.changed) return !1;
		          this.startSmoothEnd();
		        }
		        return e.modification.result.rect = null, e.offsetBy(this.targetOffset), e._doPhase({
		          interaction: e,
		          event: t,
		          phase: "inertiastart"
		        }), e.offsetBy({
		          x: -this.targetOffset.x,
		          y: -this.targetOffset.y
		        }), e.modification.result.rect = null, this.active = !0, e.simulation = this, !0;
		      }
		    }, {
		      key: "startInertia",
		      value: function () {
		        var t = this,
		          e = this.interaction.coords.velocity.client,
		          n = Fe(this.interaction),
		          r = n.resistance,
		          i = -Math.log(n.endSpeed / this.v0) / r;
		        this.targetOffset = {
		          x: (e.x - i) / r,
		          y: (e.y - i) / r
		        }, this.te = i, this.lambda_v0 = r / this.v0, this.one_ve_v0 = 1 - n.endSpeed / this.v0;
		        var o = this.modification,
		          a = this.modifierArg;
		        a.pageCoords = {
		          x: this.startCoords.x + this.targetOffset.x,
		          y: this.startCoords.y + this.targetOffset.y
		        }, o.result = o.setAll(a), o.result.changed && (this.isModified = !0, this.modifiedOffset = {
		          x: this.targetOffset.x + o.result.delta.x,
		          y: this.targetOffset.y + o.result.delta.y
		        }), this.onNextFrame(function () {
		          return t.inertiaTick();
		        });
		      }
		    }, {
		      key: "startSmoothEnd",
		      value: function () {
		        var t = this;
		        this.smoothEnd = !0, this.isModified = !0, this.targetOffset = {
		          x: this.modification.result.delta.x,
		          y: this.modification.result.delta.y
		        }, this.onNextFrame(function () {
		          return t.smoothEndTick();
		        });
		      }
		    }, {
		      key: "onNextFrame",
		      value: function (t) {
		        var e = this;
		        this.timeout = Lt.request(function () {
		          e.active && t();
		        });
		      }
		    }, {
		      key: "inertiaTick",
		      value: function () {
		        var t,
		          e,
		          n,
		          r,
		          i,
		          o,
		          a,
		          s = this,
		          c = this.interaction,
		          l = Fe(c).resistance,
		          u = (c._now() - this.t0) / 1e3;
		        if (u < this.te) {
		          var p,
		            f = 1 - (Math.exp(-l * u) - this.lambda_v0) / this.one_ve_v0;
		          this.isModified ? (t = 0, e = 0, n = this.targetOffset.x, r = this.targetOffset.y, i = this.modifiedOffset.x, o = this.modifiedOffset.y, p = {
		            x: Ye(a = f, t, n, i),
		            y: Ye(a, e, r, o)
		          }) : p = {
		            x: this.targetOffset.x * f,
		            y: this.targetOffset.y * f
		          };
		          var d = {
		            x: p.x - this.currentOffset.x,
		            y: p.y - this.currentOffset.y
		          };
		          this.currentOffset.x += d.x, this.currentOffset.y += d.y, c.offsetBy(d), c.move(), this.onNextFrame(function () {
		            return s.inertiaTick();
		          });
		        } else c.offsetBy({
		          x: this.modifiedOffset.x - this.currentOffset.x,
		          y: this.modifiedOffset.y - this.currentOffset.y
		        }), this.end();
		      }
		    }, {
		      key: "smoothEndTick",
		      value: function () {
		        var t = this,
		          e = this.interaction,
		          n = e._now() - this.t0,
		          r = Fe(e).smoothEndDuration;
		        if (n < r) {
		          var i = {
		              x: Le(n, 0, this.targetOffset.x, r),
		              y: Le(n, 0, this.targetOffset.y, r)
		            },
		            o = {
		              x: i.x - this.currentOffset.x,
		              y: i.y - this.currentOffset.y
		            };
		          this.currentOffset.x += o.x, this.currentOffset.y += o.y, e.offsetBy(o), e.move({
		            skipModifiers: this.modifierCount
		          }), this.onNextFrame(function () {
		            return t.smoothEndTick();
		          });
		        } else e.offsetBy({
		          x: this.targetOffset.x - this.currentOffset.x,
		          y: this.targetOffset.y - this.currentOffset.y
		        }), this.end();
		      }
		    }, {
		      key: "resume",
		      value: function (t) {
		        var e = t.pointer,
		          n = t.event,
		          r = t.eventTarget,
		          i = this.interaction;
		        i.offsetBy({
		          x: -this.currentOffset.x,
		          y: -this.currentOffset.y
		        }), i.updatePointer(e, n, r, !0), i._doPhase({
		          interaction: i,
		          event: n,
		          phase: "resume"
		        }), et(i.coords.prev, i.coords.cur), this.stop();
		      }
		    }, {
		      key: "end",
		      value: function () {
		        this.interaction.move(), this.interaction.end(), this.stop();
		      }
		    }, {
		      key: "stop",
		      value: function () {
		        this.active = this.smoothEnd = !1, this.interaction.simulation = null, Lt.cancel(this.timeout);
		      }
		    }]), t;
		  }();
		  function Fe(t) {
		    var e = t.interactable,
		      n = t.prepared;
		    return e && e.options && n.name && e.options[n.name].inertia;
		  }
		  var Xe = {
		    id: "inertia",
		    before: ["modifiers", "actions"],
		    install: function (t) {
		      var e = t.defaults;
		      t.usePlugin(Ce), t.usePlugin(Ee), t.actions.phases.inertiastart = !0, t.actions.phases.resume = !0, e.perAction.inertia = {
		        enabled: !1,
		        resistance: 10,
		        minSpeed: 100,
		        endSpeed: 10,
		        allowResume: !0,
		        smoothEndDuration: 300
		      };
		    },
		    listeners: {
		      "interactions:new": function (t) {
		        var e = t.interaction;
		        e.inertia = new je(e);
		      },
		      "interactions:before-action-end": function (t) {
		        var e = t.interaction,
		          n = t.event;
		        return (!e._interacting || e.simulation || !e.inertia.start(n)) && null;
		      },
		      "interactions:down": function (t) {
		        var e = t.interaction,
		          n = t.eventTarget,
		          r = e.inertia;
		        if (r.active) for (var i = n; w.element(i);) {
		          if (i === e.element) {
		            r.resume(t);
		            break;
		          }
		          i = A(i);
		        }
		      },
		      "interactions:stop": function (t) {
		        var e = t.interaction.inertia;
		        e.active && e.stop();
		      },
		      "interactions:before-action-resume": function (t) {
		        var e = t.interaction.modification;
		        e.stop(t), e.start(t, t.interaction.coords.cur.page), e.applyToInteraction(t);
		      },
		      "interactions:before-action-inertiastart": function (t) {
		        return t.interaction.modification.setAndApply(t);
		      },
		      "interactions:action-resume": xe,
		      "interactions:action-inertiastart": xe,
		      "interactions:after-action-inertiastart": function (t) {
		        return t.interaction.modification.restoreInteractionCoords(t);
		      },
		      "interactions:after-action-resume": function (t) {
		        return t.interaction.modification.restoreInteractionCoords(t);
		      }
		    }
		  };
		  function Ye(t, e, n, r) {
		    var i = 1 - t;
		    return i * i * e + 2 * i * t * n + t * t * r;
		  }
		  function Le(t, e, n, r) {
		    return -n * (t /= r) * (t - 2) + e;
		  }
		  var qe = Xe;
		  function Be(t, e) {
		    for (var n = 0; n < e.length; n++) {
		      var r = e[n];
		      if (t.immediatePropagationStopped) break;
		      r(t);
		    }
		  }
		  var Ve = function () {
		    function t(e) {
		      r(this, t), this.options = void 0, this.types = {}, this.propagationStopped = !1, this.immediatePropagationStopped = !1, this.global = void 0, this.options = V({}, e || {});
		    }
		    return o(t, [{
		      key: "fire",
		      value: function (t) {
		        var e,
		          n = this.global;
		        (e = this.types[t.type]) && Be(t, e), !t.propagationStopped && n && (e = n[t.type]) && Be(t, e);
		      }
		    }, {
		      key: "on",
		      value: function (t, e) {
		        var n = $(t, e);
		        for (t in n) this.types[t] = gt(this.types[t] || [], n[t]);
		      }
		    }, {
		      key: "off",
		      value: function (t, e) {
		        var n = $(t, e);
		        for (t in n) {
		          var r = this.types[t];
		          if (r && r.length) for (var i = 0, o = n[t]; i < o.length; i++) {
		            var a = o[i],
		              s = r.indexOf(a);
		            -1 !== s && r.splice(s, 1);
		          }
		        }
		      }
		    }, {
		      key: "getRect",
		      value: function (t) {
		        return null;
		      }
		    }]), t;
		  }();
		  var We = function () {
		    function t(e) {
		      r(this, t), this.currentTarget = void 0, this.originalEvent = void 0, this.type = void 0, this.originalEvent = e, tt(this, e);
		    }
		    return o(t, [{
		      key: "preventOriginalDefault",
		      value: function () {
		        this.originalEvent.preventDefault();
		      }
		    }, {
		      key: "stopPropagation",
		      value: function () {
		        this.originalEvent.stopPropagation();
		      }
		    }, {
		      key: "stopImmediatePropagation",
		      value: function () {
		        this.originalEvent.stopImmediatePropagation();
		      }
		    }]), t;
		  }();
		  function Ge(t) {
		    return w.object(t) ? {
		      capture: !!t.capture,
		      passive: !!t.passive
		    } : {
		      capture: !!t,
		      passive: !1
		    };
		  }
		  function Ne(t, e) {
		    return t === e || ("boolean" == typeof t ? !!e.capture === t && !1 == !!e.passive : !!t.capture == !!e.capture && !!t.passive == !!e.passive);
		  }
		  var Ue = {
		      id: "events",
		      install: function (t) {
		        var e,
		          n = [],
		          r = {},
		          i = [],
		          o = {
		            add: a,
		            remove: s,
		            addDelegate: function (t, e, n, o, s) {
		              var u = Ge(s);
		              if (!r[n]) {
		                r[n] = [];
		                for (var p = 0; p < i.length; p++) {
		                  var f = i[p];
		                  a(f, n, c), a(f, n, l, !0);
		                }
		              }
		              var d = r[n],
		                h = bt(d, function (n) {
		                  return n.selector === t && n.context === e;
		                });
		              h || (h = {
		                selector: t,
		                context: e,
		                listeners: []
		              }, d.push(h));
		              h.listeners.push({
		                func: o,
		                options: u
		              });
		            },
		            removeDelegate: function (t, e, n, i, o) {
		              var a,
		                u = Ge(o),
		                p = r[n],
		                f = !1;
		              if (!p) return;
		              for (a = p.length - 1; a >= 0; a--) {
		                var d = p[a];
		                if (d.selector === t && d.context === e) {
		                  for (var h = d.listeners, v = h.length - 1; v >= 0; v--) {
		                    var g = h[v];
		                    if (g.func === i && Ne(g.options, u)) {
		                      h.splice(v, 1), h.length || (p.splice(a, 1), s(e, n, c), s(e, n, l, !0)), f = !0;
		                      break;
		                    }
		                  }
		                  if (f) break;
		                }
		              }
		            },
		            delegateListener: c,
		            delegateUseCapture: l,
		            delegatedEvents: r,
		            documents: i,
		            targets: n,
		            supportsOptions: !1,
		            supportsPassive: !1
		          };
		        function a(t, e, r, i) {
		          if (t.addEventListener) {
		            var a = Ge(i),
		              s = bt(n, function (e) {
		                return e.eventTarget === t;
		              });
		            s || (s = {
		              eventTarget: t,
		              events: {}
		            }, n.push(s)), s.events[e] || (s.events[e] = []), bt(s.events[e], function (t) {
		              return t.func === r && Ne(t.options, a);
		            }) || (t.addEventListener(e, r, o.supportsOptions ? a : a.capture), s.events[e].push({
		              func: r,
		              options: a
		            }));
		          }
		        }
		        function s(t, e, r, i) {
		          if (t.addEventListener && t.removeEventListener) {
		            var a = yt(n, function (e) {
		                return e.eventTarget === t;
		              }),
		              c = n[a];
		            if (c && c.events) if ("all" !== e) {
		              var l = !1,
		                u = c.events[e];
		              if (u) {
		                if ("all" === r) {
		                  for (var p = u.length - 1; p >= 0; p--) {
		                    var f = u[p];
		                    s(t, e, f.func, f.options);
		                  }
		                  return;
		                }
		                for (var d = Ge(i), h = 0; h < u.length; h++) {
		                  var v = u[h];
		                  if (v.func === r && Ne(v.options, d)) {
		                    t.removeEventListener(e, r, o.supportsOptions ? d : d.capture), u.splice(h, 1), 0 === u.length && (delete c.events[e], l = !0);
		                    break;
		                  }
		                }
		              }
		              l && !Object.keys(c.events).length && n.splice(a, 1);
		            } else for (e in c.events) c.events.hasOwnProperty(e) && s(t, e, "all");
		          }
		        }
		        function c(t, e) {
		          for (var n = Ge(e), i = new We(t), o = r[t.type], a = ht(t)[0], s = a; w.element(s);) {
		            for (var c = 0; c < o.length; c++) {
		              var l = o[c],
		                u = l.selector,
		                p = l.context;
		              if (R(s, u) && M(p, a) && M(p, s)) {
		                var f = l.listeners;
		                i.currentTarget = s;
		                for (var d = 0; d < f.length; d++) {
		                  var h = f[d];
		                  Ne(h.options, n) && h.func(i);
		                }
		              }
		            }
		            s = A(s);
		          }
		        }
		        function l(t) {
		          return c(t, !0);
		        }
		        return null == (e = t.document) || e.createElement("div").addEventListener("test", null, {
		          get capture() {
		            return o.supportsOptions = !0;
		          },
		          get passive() {
		            return o.supportsPassive = !0;
		          }
		        }), t.events = o, o;
		      }
		    },
		    He = {
		      methodOrder: ["simulationResume", "mouseOrPen", "hasPointer", "idle"],
		      search: function (t) {
		        for (var e = 0, n = He.methodOrder; e < n.length; e++) {
		          var r = n[e],
		            i = He[r](t);
		          if (i) return i;
		        }
		        return null;
		      },
		      simulationResume: function (t) {
		        var e = t.pointerType,
		          n = t.eventType,
		          r = t.eventTarget,
		          i = t.scope;
		        if (!/down|start/i.test(n)) return null;
		        for (var o = 0, a = i.interactions.list; o < a.length; o++) {
		          var s = a[o],
		            c = r;
		          if (s.simulation && s.simulation.allowResume && s.pointerType === e) for (; c;) {
		            if (c === s.element) return s;
		            c = A(c);
		          }
		        }
		        return null;
		      },
		      mouseOrPen: function (t) {
		        var e,
		          n = t.pointerId,
		          r = t.pointerType,
		          i = t.eventType,
		          o = t.scope;
		        if ("mouse" !== r && "pen" !== r) return null;
		        for (var a = 0, s = o.interactions.list; a < s.length; a++) {
		          var c = s[a];
		          if (c.pointerType === r) {
		            if (c.simulation && !Ke(c, n)) continue;
		            if (c.interacting()) return c;
		            e || (e = c);
		          }
		        }
		        if (e) return e;
		        for (var l = 0, u = o.interactions.list; l < u.length; l++) {
		          var p = u[l];
		          if (!(p.pointerType !== r || /down/i.test(i) && p.simulation)) return p;
		        }
		        return null;
		      },
		      hasPointer: function (t) {
		        for (var e = t.pointerId, n = 0, r = t.scope.interactions.list; n < r.length; n++) {
		          var i = r[n];
		          if (Ke(i, e)) return i;
		        }
		        return null;
		      },
		      idle: function (t) {
		        for (var e = t.pointerType, n = 0, r = t.scope.interactions.list; n < r.length; n++) {
		          var i = r[n];
		          if (1 === i.pointers.length) {
		            var o = i.interactable;
		            if (o && (!o.options.gesture || !o.options.gesture.enabled)) continue;
		          } else if (i.pointers.length >= 2) continue;
		          if (!i.interacting() && e === i.pointerType) return i;
		        }
		        return null;
		      }
		    };
		  function Ke(t, e) {
		    return t.pointers.some(function (t) {
		      return t.id === e;
		    });
		  }
		  var $e = He,
		    Je = ["pointerDown", "pointerMove", "pointerUp", "updatePointer", "removePointer", "windowBlur"];
		  function Qe(t, e) {
		    return function (n) {
		      var r = e.interactions.list,
		        i = dt(n),
		        o = ht(n),
		        a = o[0],
		        s = o[1],
		        c = [];
		      if (/^touch/.test(n.type)) {
		        e.prevTouchTime = e.now();
		        for (var l = 0, u = n.changedTouches; l < u.length; l++) {
		          var p = u[l],
		            f = {
		              pointer: p,
		              pointerId: at(p),
		              pointerType: i,
		              eventType: n.type,
		              eventTarget: a,
		              curEventTarget: s,
		              scope: e
		            },
		            d = Ze(f);
		          c.push([f.pointer, f.eventTarget, f.curEventTarget, d]);
		        }
		      } else {
		        var h = !1;
		        if (!I.supportsPointerEvent && /mouse/.test(n.type)) {
		          for (var v = 0; v < r.length && !h; v++) h = "mouse" !== r[v].pointerType && r[v].pointerIsDown;
		          h = h || e.now() - e.prevTouchTime < 500 || 0 === n.timeStamp;
		        }
		        if (!h) {
		          var g = {
		              pointer: n,
		              pointerId: at(n),
		              pointerType: i,
		              eventType: n.type,
		              curEventTarget: s,
		              eventTarget: a,
		              scope: e
		            },
		            m = Ze(g);
		          c.push([g.pointer, g.eventTarget, g.curEventTarget, m]);
		        }
		      }
		      for (var y = 0; y < c.length; y++) {
		        var b = c[y],
		          x = b[0],
		          w = b[1],
		          E = b[2];
		        b[3][t](x, n, w, E);
		      }
		    };
		  }
		  function Ze(t) {
		    var e = t.pointerType,
		      n = t.scope,
		      r = {
		        interaction: $e.search(t),
		        searchDetails: t
		      };
		    return n.fire("interactions:find", r), r.interaction || n.interactions.new({
		      pointerType: e
		    });
		  }
		  function tn(t, e) {
		    var n = t.doc,
		      r = t.scope,
		      i = t.options,
		      o = r.interactions.docEvents,
		      a = r.events,
		      s = a[e];
		    for (var c in r.browser.isIOS && !i.events && (i.events = {
		      passive: !1
		    }), a.delegatedEvents) s(n, c, a.delegateListener), s(n, c, a.delegateUseCapture, !0);
		    for (var l = i && i.events, u = 0; u < o.length; u++) {
		      var p = o[u];
		      s(n, p.type, p.listener, l);
		    }
		  }
		  var en = {
		      id: "core/interactions",
		      install: function (t) {
		        for (var e = {}, n = 0; n < Je.length; n++) {
		          var i = Je[n];
		          e[i] = Qe(i, t);
		        }
		        var a,
		          c = I.pEventTypes;
		        function l() {
		          for (var e = 0, n = t.interactions.list; e < n.length; e++) {
		            var r = n[e];
		            if (r.pointerIsDown && "touch" === r.pointerType && !r._interacting) for (var i = function () {
		                var e = a[o];
		                t.documents.some(function (t) {
		                  return M(t.doc, e.downTarget);
		                }) || r.removePointer(e.pointer, e.event);
		              }, o = 0, a = r.pointers; o < a.length; o++) i();
		          }
		        }
		        (a = k.PointerEvent ? [{
		          type: c.down,
		          listener: l
		        }, {
		          type: c.down,
		          listener: e.pointerDown
		        }, {
		          type: c.move,
		          listener: e.pointerMove
		        }, {
		          type: c.up,
		          listener: e.pointerUp
		        }, {
		          type: c.cancel,
		          listener: e.pointerUp
		        }] : [{
		          type: "mousedown",
		          listener: e.pointerDown
		        }, {
		          type: "mousemove",
		          listener: e.pointerMove
		        }, {
		          type: "mouseup",
		          listener: e.pointerUp
		        }, {
		          type: "touchstart",
		          listener: l
		        }, {
		          type: "touchstart",
		          listener: e.pointerDown
		        }, {
		          type: "touchmove",
		          listener: e.pointerMove
		        }, {
		          type: "touchend",
		          listener: e.pointerUp
		        }, {
		          type: "touchcancel",
		          listener: e.pointerUp
		        }]).push({
		          type: "blur",
		          listener: function (e) {
		            for (var n = 0, r = t.interactions.list; n < r.length; n++) {
		              r[n].documentBlur(e);
		            }
		          }
		        }), t.prevTouchTime = 0, t.Interaction = function (e) {
		          s(i, e);
		          var n = p(i);
		          function i() {
		            return r(this, i), n.apply(this, arguments);
		          }
		          return o(i, [{
		            key: "pointerMoveTolerance",
		            get: function () {
		              return t.interactions.pointerMoveTolerance;
		            },
		            set: function (e) {
		              t.interactions.pointerMoveTolerance = e;
		            }
		          }, {
		            key: "_now",
		            value: function () {
		              return t.now();
		            }
		          }]), i;
		        }(De), t.interactions = {
		          list: [],
		          new: function (e) {
		            e.scopeFire = function (e, n) {
		              return t.fire(e, n);
		            };
		            var n = new t.Interaction(e);
		            return t.interactions.list.push(n), n;
		          },
		          listeners: e,
		          docEvents: a,
		          pointerMoveTolerance: 1
		        }, t.usePlugin(he);
		      },
		      listeners: {
		        "scope:add-document": function (t) {
		          return tn(t, "add");
		        },
		        "scope:remove-document": function (t) {
		          return tn(t, "remove");
		        },
		        "interactable:unset": function (t, e) {
		          for (var n = t.interactable, r = e.interactions.list.length - 1; r >= 0; r--) {
		            var i = e.interactions.list[r];
		            i.interactable === n && (i.stop(), e.fire("interactions:destroy", {
		              interaction: i
		            }), i.destroy(), e.interactions.list.length > 2 && e.interactions.list.splice(r, 1));
		          }
		        }
		      },
		      onDocSignal: tn,
		      doOnInteractions: Qe,
		      methodNames: Je
		    },
		    nn = en,
		    rn = function (t) {
		      return t[t.On = 0] = "On", t[t.Off = 1] = "Off", t;
		    }(rn || {}),
		    on = function () {
		      function t(e, n, i, o) {
		        r(this, t), this.target = void 0, this.options = void 0, this._actions = void 0, this.events = new Ve(), this._context = void 0, this._win = void 0, this._doc = void 0, this._scopeEvents = void 0, this._actions = n.actions, this.target = e, this._context = n.context || i, this._win = y(B(e) ? this._context : e), this._doc = this._win.document, this._scopeEvents = o, this.set(n);
		      }
		      return o(t, [{
		        key: "_defaults",
		        get: function () {
		          return {
		            base: {},
		            perAction: {},
		            actions: {}
		          };
		        }
		      }, {
		        key: "setOnEvents",
		        value: function (t, e) {
		          return w.func(e.onstart) && this.on("".concat(t, "start"), e.onstart), w.func(e.onmove) && this.on("".concat(t, "move"), e.onmove), w.func(e.onend) && this.on("".concat(t, "end"), e.onend), w.func(e.oninertiastart) && this.on("".concat(t, "inertiastart"), e.oninertiastart), this;
		        }
		      }, {
		        key: "updatePerActionListeners",
		        value: function (t, e, n) {
		          var r,
		            i = this,
		            o = null == (r = this._actions.map[t]) ? void 0 : r.filterEventType,
		            a = function (t) {
		              return (null == o || o(t)) && ve(t, i._actions);
		            };
		          (w.array(e) || w.object(e)) && this._onOff(rn.Off, t, e, void 0, a), (w.array(n) || w.object(n)) && this._onOff(rn.On, t, n, void 0, a);
		        }
		      }, {
		        key: "setPerAction",
		        value: function (t, e) {
		          var n = this._defaults;
		          for (var r in e) {
		            var i = r,
		              o = this.options[t],
		              a = e[i];
		            "listeners" === i && this.updatePerActionListeners(t, o.listeners, a), w.array(a) ? o[i] = mt(a) : w.plainObject(a) ? (o[i] = V(o[i] || {}, ge(a)), w.object(n.perAction[i]) && "enabled" in n.perAction[i] && (o[i].enabled = !1 !== a.enabled)) : w.bool(a) && w.object(n.perAction[i]) ? o[i].enabled = a : o[i] = a;
		          }
		        }
		      }, {
		        key: "getRect",
		        value: function (t) {
		          return t = t || (w.element(this.target) ? this.target : null), w.string(this.target) && (t = t || this._context.querySelector(this.target)), L(t);
		        }
		      }, {
		        key: "rectChecker",
		        value: function (t) {
		          var e = this;
		          return w.func(t) ? (this.getRect = function (n) {
		            var r = V({}, t.apply(e, n));
		            return "width" in r || (r.width = r.right - r.left, r.height = r.bottom - r.top), r;
		          }, this) : null === t ? (delete this.getRect, this) : this.getRect;
		        }
		      }, {
		        key: "_backCompatOption",
		        value: function (t, e) {
		          if (B(e) || w.object(e)) {
		            for (var n in this.options[t] = e, this._actions.map) this.options[n][t] = e;
		            return this;
		          }
		          return this.options[t];
		        }
		      }, {
		        key: "origin",
		        value: function (t) {
		          return this._backCompatOption("origin", t);
		        }
		      }, {
		        key: "deltaSource",
		        value: function (t) {
		          return "page" === t || "client" === t ? (this.options.deltaSource = t, this) : this.options.deltaSource;
		        }
		      }, {
		        key: "getAllElements",
		        value: function () {
		          var t = this.target;
		          return w.string(t) ? Array.from(this._context.querySelectorAll(t)) : w.func(t) && t.getAllElements ? t.getAllElements() : w.element(t) ? [t] : [];
		        }
		      }, {
		        key: "context",
		        value: function () {
		          return this._context;
		        }
		      }, {
		        key: "inContext",
		        value: function (t) {
		          return this._context === t.ownerDocument || M(this._context, t);
		        }
		      }, {
		        key: "testIgnoreAllow",
		        value: function (t, e, n) {
		          return !this.testIgnore(t.ignoreFrom, e, n) && this.testAllow(t.allowFrom, e, n);
		        }
		      }, {
		        key: "testAllow",
		        value: function (t, e, n) {
		          return !t || !!w.element(n) && (w.string(t) ? F(n, t, e) : !!w.element(t) && M(t, n));
		        }
		      }, {
		        key: "testIgnore",
		        value: function (t, e, n) {
		          return !(!t || !w.element(n)) && (w.string(t) ? F(n, t, e) : !!w.element(t) && M(t, n));
		        }
		      }, {
		        key: "fire",
		        value: function (t) {
		          return this.events.fire(t), this;
		        }
		      }, {
		        key: "_onOff",
		        value: function (t, e, n, r, i) {
		          w.object(e) && !w.array(e) && (r = n, n = null);
		          var o = $(e, n, i);
		          for (var a in o) {
		            "wheel" === a && (a = I.wheelEvent);
		            for (var s = 0, c = o[a]; s < c.length; s++) {
		              var l = c[s];
		              ve(a, this._actions) ? this.events[t === rn.On ? "on" : "off"](a, l) : w.string(this.target) ? this._scopeEvents[t === rn.On ? "addDelegate" : "removeDelegate"](this.target, this._context, a, l, r) : this._scopeEvents[t === rn.On ? "add" : "remove"](this.target, a, l, r);
		            }
		          }
		          return this;
		        }
		      }, {
		        key: "on",
		        value: function (t, e, n) {
		          return this._onOff(rn.On, t, e, n);
		        }
		      }, {
		        key: "off",
		        value: function (t, e, n) {
		          return this._onOff(rn.Off, t, e, n);
		        }
		      }, {
		        key: "set",
		        value: function (t) {
		          var e = this._defaults;
		          for (var n in w.object(t) || (t = {}), this.options = ge(e.base), this._actions.methodDict) {
		            var r = n,
		              i = this._actions.methodDict[r];
		            this.options[r] = {}, this.setPerAction(r, V(V({}, e.perAction), e.actions[r])), this[i](t[r]);
		          }
		          for (var o in t) "getRect" !== o ? w.func(this[o]) && this[o](t[o]) : this.rectChecker(t.getRect);
		          return this;
		        }
		      }, {
		        key: "unset",
		        value: function () {
		          if (w.string(this.target)) for (var t in this._scopeEvents.delegatedEvents) for (var e = this._scopeEvents.delegatedEvents[t], n = e.length - 1; n >= 0; n--) {
		            var r = e[n],
		              i = r.selector,
		              o = r.context,
		              a = r.listeners;
		            i === this.target && o === this._context && e.splice(n, 1);
		            for (var s = a.length - 1; s >= 0; s--) this._scopeEvents.removeDelegate(this.target, this._context, t, a[s][0], a[s][1]);
		          } else this._scopeEvents.remove(this.target, "all");
		        }
		      }]), t;
		    }(),
		    an = function () {
		      function t(e) {
		        var n = this;
		        r(this, t), this.list = [], this.selectorMap = {}, this.scope = void 0, this.scope = e, e.addListeners({
		          "interactable:unset": function (t) {
		            var e = t.interactable,
		              r = e.target,
		              i = w.string(r) ? n.selectorMap[r] : r[n.scope.id],
		              o = yt(i, function (t) {
		                return t === e;
		              });
		            i.splice(o, 1);
		          }
		        });
		      }
		      return o(t, [{
		        key: "new",
		        value: function (t, e) {
		          e = V(e || {}, {
		            actions: this.scope.actions
		          });
		          var n = new this.scope.Interactable(t, e, this.scope.document, this.scope.events);
		          return this.scope.addDocument(n._doc), this.list.push(n), w.string(t) ? (this.selectorMap[t] || (this.selectorMap[t] = []), this.selectorMap[t].push(n)) : (n.target[this.scope.id] || Object.defineProperty(t, this.scope.id, {
		            value: [],
		            configurable: !0
		          }), t[this.scope.id].push(n)), this.scope.fire("interactable:new", {
		            target: t,
		            options: e,
		            interactable: n,
		            win: this.scope._win
		          }), n;
		        }
		      }, {
		        key: "getExisting",
		        value: function (t, e) {
		          var n = e && e.context || this.scope.document,
		            r = w.string(t),
		            i = r ? this.selectorMap[t] : t[this.scope.id];
		          if (i) return bt(i, function (e) {
		            return e._context === n && (r || e.inContext(t));
		          });
		        }
		      }, {
		        key: "forEachMatch",
		        value: function (t, e) {
		          for (var n = 0, r = this.list; n < r.length; n++) {
		            var i = r[n],
		              o = void 0;
		            if ((w.string(i.target) ? w.element(t) && R(t, i.target) : t === i.target) && i.inContext(t) && (o = e(i)), void 0 !== o) return o;
		          }
		        }
		      }]), t;
		    }();
		  var sn = function () {
		    function t() {
		      var e = this;
		      r(this, t), this.id = "__interact_scope_".concat(Math.floor(100 * Math.random())), this.isInitialized = !1, this.listenerMaps = [], this.browser = I, this.defaults = ge(Te), this.Eventable = Ve, this.actions = {
		        map: {},
		        phases: {
		          start: !0,
		          move: !0,
		          end: !0
		        },
		        methodDict: {},
		        phaselessTypes: {}
		      }, this.interactStatic = function (t) {
		        var e = function e(n, r) {
		          var i = t.interactables.getExisting(n, r);
		          return i || ((i = t.interactables.new(n, r)).events.global = e.globalEvents), i;
		        };
		        return e.getPointerAverage = lt, e.getTouchBBox = ut, e.getTouchDistance = pt, e.getTouchAngle = ft, e.getElementRect = L, e.getElementClientRect = Y, e.matchesSelector = R, e.closest = z, e.globalEvents = {}, e.version = "1.10.27", e.scope = t, e.use = function (t, e) {
		          return this.scope.usePlugin(t, e), this;
		        }, e.isSet = function (t, e) {
		          return !!this.scope.interactables.get(t, e && e.context);
		        }, e.on = Nt(function (t, e, n) {
		          if (w.string(t) && -1 !== t.search(" ") && (t = t.trim().split(/ +/)), w.array(t)) {
		            for (var r = 0, i = t; r < i.length; r++) {
		              var o = i[r];
		              this.on(o, e, n);
		            }
		            return this;
		          }
		          if (w.object(t)) {
		            for (var a in t) this.on(a, t[a], e);
		            return this;
		          }
		          return ve(t, this.scope.actions) ? this.globalEvents[t] ? this.globalEvents[t].push(e) : this.globalEvents[t] = [e] : this.scope.events.add(this.scope.document, t, e, {
		            options: n
		          }), this;
		        }, "The interact.on() method is being deprecated"), e.off = Nt(function (t, e, n) {
		          if (w.string(t) && -1 !== t.search(" ") && (t = t.trim().split(/ +/)), w.array(t)) {
		            for (var r = 0, i = t; r < i.length; r++) {
		              var o = i[r];
		              this.off(o, e, n);
		            }
		            return this;
		          }
		          if (w.object(t)) {
		            for (var a in t) this.off(a, t[a], e);
		            return this;
		          }
		          var s;
		          return ve(t, this.scope.actions) ? t in this.globalEvents && -1 !== (s = this.globalEvents[t].indexOf(e)) && this.globalEvents[t].splice(s, 1) : this.scope.events.remove(this.scope.document, t, e, n), this;
		        }, "The interact.off() method is being deprecated"), e.debug = function () {
		          return this.scope;
		        }, e.supportsTouch = function () {
		          return I.supportsTouch;
		        }, e.supportsPointerEvent = function () {
		          return I.supportsPointerEvent;
		        }, e.stop = function () {
		          for (var t = 0, e = this.scope.interactions.list; t < e.length; t++) e[t].stop();
		          return this;
		        }, e.pointerMoveTolerance = function (t) {
		          return w.number(t) ? (this.scope.interactions.pointerMoveTolerance = t, this) : this.scope.interactions.pointerMoveTolerance;
		        }, e.addDocument = function (t, e) {
		          this.scope.addDocument(t, e);
		        }, e.removeDocument = function (t) {
		          this.scope.removeDocument(t);
		        }, e;
		      }(this), this.InteractEvent = Se, this.Interactable = void 0, this.interactables = new an(this), this._win = void 0, this.document = void 0, this.window = void 0, this.documents = [], this._plugins = {
		        list: [],
		        map: {}
		      }, this.onWindowUnload = function (t) {
		        return e.removeDocument(t.target);
		      };
		      var n = this;
		      this.Interactable = function (t) {
		        s(i, t);
		        var e = p(i);
		        function i() {
		          return r(this, i), e.apply(this, arguments);
		        }
		        return o(i, [{
		          key: "_defaults",
		          get: function () {
		            return n.defaults;
		          }
		        }, {
		          key: "set",
		          value: function (t) {
		            return f(c(i.prototype), "set", this).call(this, t), n.fire("interactable:set", {
		              options: t,
		              interactable: this
		            }), this;
		          }
		        }, {
		          key: "unset",
		          value: function () {
		            f(c(i.prototype), "unset", this).call(this);
		            var t = n.interactables.list.indexOf(this);
		            t < 0 || (n.interactables.list.splice(t, 1), n.fire("interactable:unset", {
		              interactable: this
		            }));
		          }
		        }]), i;
		      }(on);
		    }
		    return o(t, [{
		      key: "addListeners",
		      value: function (t, e) {
		        this.listenerMaps.push({
		          id: e,
		          map: t
		        });
		      }
		    }, {
		      key: "fire",
		      value: function (t, e) {
		        for (var n = 0, r = this.listenerMaps; n < r.length; n++) {
		          var i = r[n].map[t];
		          if (i && !1 === i(e, this, t)) return !1;
		        }
		      }
		    }, {
		      key: "init",
		      value: function (t) {
		        return this.isInitialized ? this : function (t, e) {
		          t.isInitialized = !0, w.window(e) && m(e);
		          return k.init(e), I.init(e), Lt.init(e), t.window = e, t.document = e.document, t.usePlugin(nn), t.usePlugin(Ue), t;
		        }(this, t);
		      }
		    }, {
		      key: "pluginIsInstalled",
		      value: function (t) {
		        var e = t.id;
		        return e ? !!this._plugins.map[e] : -1 !== this._plugins.list.indexOf(t);
		      }
		    }, {
		      key: "usePlugin",
		      value: function (t, e) {
		        if (!this.isInitialized) return this;
		        if (this.pluginIsInstalled(t)) return this;
		        if (t.id && (this._plugins.map[t.id] = t), this._plugins.list.push(t), t.install && t.install(this, e), t.listeners && t.before) {
		          for (var n = 0, r = this.listenerMaps.length, i = t.before.reduce(function (t, e) {
		              return t[e] = !0, t[cn(e)] = !0, t;
		            }, {}); n < r; n++) {
		            var o = this.listenerMaps[n].id;
		            if (o && (i[o] || i[cn(o)])) break;
		          }
		          this.listenerMaps.splice(n, 0, {
		            id: t.id,
		            map: t.listeners
		          });
		        } else t.listeners && this.listenerMaps.push({
		          id: t.id,
		          map: t.listeners
		        });
		        return this;
		      }
		    }, {
		      key: "addDocument",
		      value: function (t, e) {
		        if (-1 !== this.getDocIndex(t)) return !1;
		        var n = y(t);
		        e = e ? V({}, e) : {}, this.documents.push({
		          doc: t,
		          options: e
		        }), this.events.documents.push(t), t !== this.document && this.events.add(n, "unload", this.onWindowUnload), this.fire("scope:add-document", {
		          doc: t,
		          window: n,
		          scope: this,
		          options: e
		        });
		      }
		    }, {
		      key: "removeDocument",
		      value: function (t) {
		        var e = this.getDocIndex(t),
		          n = y(t),
		          r = this.documents[e].options;
		        this.events.remove(n, "unload", this.onWindowUnload), this.documents.splice(e, 1), this.events.documents.splice(e, 1), this.fire("scope:remove-document", {
		          doc: t,
		          window: n,
		          scope: this,
		          options: r
		        });
		      }
		    }, {
		      key: "getDocIndex",
		      value: function (t) {
		        for (var e = 0; e < this.documents.length; e++) if (this.documents[e].doc === t) return e;
		        return -1;
		      }
		    }, {
		      key: "getDocOptions",
		      value: function (t) {
		        var e = this.getDocIndex(t);
		        return -1 === e ? null : this.documents[e].options;
		      }
		    }, {
		      key: "now",
		      value: function () {
		        return (this.window.Date || Date).now();
		      }
		    }]), t;
		  }();
		  function cn(t) {
		    return t && t.replace(/\/.*$/, "");
		  }
		  var ln = new sn(),
		    un = ln.interactStatic,
		    pn = "undefined" != typeof globalThis ? globalThis : window;
		  ln.init(pn);
		  var fn = Object.freeze({
		      __proto__: null,
		      edgeTarget: function () {},
		      elements: function () {},
		      grid: function (t) {
		        var e = [["x", "y"], ["left", "top"], ["right", "bottom"], ["width", "height"]].filter(function (e) {
		            var n = e[0],
		              r = e[1];
		            return n in t || r in t;
		          }),
		          n = function (n, r) {
		            for (var i = t.range, o = t.limits, a = void 0 === o ? {
		                left: -1 / 0,
		                right: 1 / 0,
		                top: -1 / 0,
		                bottom: 1 / 0
		              } : o, s = t.offset, c = void 0 === s ? {
		                x: 0,
		                y: 0
		              } : s, l = {
		                range: i,
		                grid: t,
		                x: null,
		                y: null
		              }, u = 0; u < e.length; u++) {
		              var p = e[u],
		                f = p[0],
		                d = p[1],
		                h = Math.round((n - c.x) / t[f]),
		                v = Math.round((r - c.y) / t[d]);
		              l[f] = Math.max(a.left, Math.min(a.right, h * t[f] + c.x)), l[d] = Math.max(a.top, Math.min(a.bottom, v * t[d] + c.y));
		            }
		            return l;
		          };
		        return n.grid = t, n.coordFields = e, n;
		      }
		    }),
		    dn = {
		      id: "snappers",
		      install: function (t) {
		        var e = t.interactStatic;
		        e.snappers = V(e.snappers || {}, fn), e.createSnapGrid = e.snappers.grid;
		      }
		    },
		    hn = dn,
		    vn = {
		      start: function (t) {
		        var n = t.state,
		          r = t.rect,
		          i = t.edges,
		          o = t.pageCoords,
		          a = n.options,
		          s = a.ratio,
		          c = a.enabled,
		          l = n.options,
		          u = l.equalDelta,
		          p = l.modifiers;
		        "preserve" === s && (s = r.width / r.height), n.startCoords = V({}, o), n.startRect = V({}, r), n.ratio = s, n.equalDelta = u;
		        var f = n.linkedEdges = {
		          top: i.top || i.left && !i.bottom,
		          left: i.left || i.top && !i.right,
		          bottom: i.bottom || i.right && !i.top,
		          right: i.right || i.bottom && !i.left
		        };
		        if (n.xIsPrimaryAxis = !(!i.left && !i.right), n.equalDelta) {
		          var d = (f.left ? 1 : -1) * (f.top ? 1 : -1);
		          n.edgeSign = {
		            x: d,
		            y: d
		          };
		        } else n.edgeSign = {
		          x: f.left ? -1 : 1,
		          y: f.top ? -1 : 1
		        };
		        if (!1 !== c && V(i, f), null != p && p.length) {
		          var h = new me(t.interaction);
		          h.copyFrom(t.interaction.modification), h.prepareStates(p), n.subModification = h, h.startAll(e({}, t));
		        }
		      },
		      set: function (t) {
		        var n = t.state,
		          r = t.rect,
		          i = t.coords,
		          o = n.linkedEdges,
		          a = V({}, i),
		          s = n.equalDelta ? gn : mn;
		        if (V(t.edges, o), s(n, n.xIsPrimaryAxis, i, r), !n.subModification) return null;
		        var c = V({}, r);
		        H(o, c, {
		          x: i.x - a.x,
		          y: i.y - a.y
		        });
		        var l = n.subModification.setAll(e(e({}, t), {}, {
		            rect: c,
		            edges: o,
		            pageCoords: i,
		            prevCoords: i,
		            prevRect: c
		          })),
		          u = l.delta;
		        l.changed && (s(n, Math.abs(u.x) > Math.abs(u.y), l.coords, l.rect), V(i, l.coords));
		        return l.eventProps;
		      },
		      defaults: {
		        ratio: "preserve",
		        equalDelta: !1,
		        modifiers: [],
		        enabled: !1
		      }
		    };
		  function gn(t, e, n) {
		    var r = t.startCoords,
		      i = t.edgeSign;
		    e ? n.y = r.y + (n.x - r.x) * i.y : n.x = r.x + (n.y - r.y) * i.x;
		  }
		  function mn(t, e, n, r) {
		    var i = t.startRect,
		      o = t.startCoords,
		      a = t.ratio,
		      s = t.edgeSign;
		    if (e) {
		      var c = r.width / a;
		      n.y = o.y + (c - i.height) * s.y;
		    } else {
		      var l = r.height * a;
		      n.x = o.x + (l - i.width) * s.x;
		    }
		  }
		  var yn = be(vn, "aspectRatio"),
		    bn = function () {};
		  bn._defaults = {};
		  var xn = bn;
		  function wn(t, e, n) {
		    return w.func(t) ? G(t, e.interactable, e.element, [n.x, n.y, e]) : G(t, e.interactable, e.element);
		  }
		  var En = {
		      start: function (t) {
		        var e = t.rect,
		          n = t.startOffset,
		          r = t.state,
		          i = t.interaction,
		          o = t.pageCoords,
		          a = r.options,
		          s = a.elementRect,
		          c = V({
		            left: 0,
		            top: 0,
		            right: 0,
		            bottom: 0
		          }, a.offset || {});
		        if (e && s) {
		          var l = wn(a.restriction, i, o);
		          if (l) {
		            var u = l.right - l.left - e.width,
		              p = l.bottom - l.top - e.height;
		            u < 0 && (c.left += u, c.right += u), p < 0 && (c.top += p, c.bottom += p);
		          }
		          c.left += n.left - e.width * s.left, c.top += n.top - e.height * s.top, c.right += n.right - e.width * (1 - s.right), c.bottom += n.bottom - e.height * (1 - s.bottom);
		        }
		        r.offset = c;
		      },
		      set: function (t) {
		        var e = t.coords,
		          n = t.interaction,
		          r = t.state,
		          i = r.options,
		          o = r.offset,
		          a = wn(i.restriction, n, e);
		        if (a) {
		          var s = function (t) {
		            return !t || "left" in t && "top" in t || ((t = V({}, t)).left = t.x || 0, t.top = t.y || 0, t.right = t.right || t.left + t.width, t.bottom = t.bottom || t.top + t.height), t;
		          }(a);
		          e.x = Math.max(Math.min(s.right - o.right, e.x), s.left + o.left), e.y = Math.max(Math.min(s.bottom - o.bottom, e.y), s.top + o.top);
		        }
		      },
		      defaults: {
		        restriction: null,
		        elementRect: null,
		        offset: null,
		        endOnly: !1,
		        enabled: !1
		      }
		    },
		    Tn = be(En, "restrict"),
		    Sn = {
		      top: 1 / 0,
		      left: 1 / 0,
		      bottom: -1 / 0,
		      right: -1 / 0
		    },
		    _n = {
		      top: -1 / 0,
		      left: -1 / 0,
		      bottom: 1 / 0,
		      right: 1 / 0
		    };
		  function Pn(t, e) {
		    for (var n = 0, r = ["top", "left", "bottom", "right"]; n < r.length; n++) {
		      var i = r[n];
		      i in t || (t[i] = e[i]);
		    }
		    return t;
		  }
		  var On = {
		      noInner: Sn,
		      noOuter: _n,
		      start: function (t) {
		        var e,
		          n = t.interaction,
		          r = t.startOffset,
		          i = t.state,
		          o = i.options;
		        o && (e = N(wn(o.offset, n, n.coords.start.page))), e = e || {
		          x: 0,
		          y: 0
		        }, i.offset = {
		          top: e.y + r.top,
		          left: e.x + r.left,
		          bottom: e.y - r.bottom,
		          right: e.x - r.right
		        };
		      },
		      set: function (t) {
		        var e = t.coords,
		          n = t.edges,
		          r = t.interaction,
		          i = t.state,
		          o = i.offset,
		          a = i.options;
		        if (n) {
		          var s = V({}, e),
		            c = wn(a.inner, r, s) || {},
		            l = wn(a.outer, r, s) || {};
		          Pn(c, Sn), Pn(l, _n), n.top ? e.y = Math.min(Math.max(l.top + o.top, s.y), c.top + o.top) : n.bottom && (e.y = Math.max(Math.min(l.bottom + o.bottom, s.y), c.bottom + o.bottom)), n.left ? e.x = Math.min(Math.max(l.left + o.left, s.x), c.left + o.left) : n.right && (e.x = Math.max(Math.min(l.right + o.right, s.x), c.right + o.right));
		        }
		      },
		      defaults: {
		        inner: null,
		        outer: null,
		        offset: null,
		        endOnly: !1,
		        enabled: !1
		      }
		    },
		    kn = be(On, "restrictEdges"),
		    Dn = V({
		      get elementRect() {
		        return {
		          top: 0,
		          left: 0,
		          bottom: 1,
		          right: 1
		        };
		      },
		      set elementRect(t) {}
		    }, En.defaults),
		    In = be({
		      start: En.start,
		      set: En.set,
		      defaults: Dn
		    }, "restrictRect"),
		    Mn = {
		      width: -1 / 0,
		      height: -1 / 0
		    },
		    zn = {
		      width: 1 / 0,
		      height: 1 / 0
		    };
		  var An = be({
		    start: function (t) {
		      return On.start(t);
		    },
		    set: function (t) {
		      var e = t.interaction,
		        n = t.state,
		        r = t.rect,
		        i = t.edges,
		        o = n.options;
		      if (i) {
		        var a = U(wn(o.min, e, t.coords)) || Mn,
		          s = U(wn(o.max, e, t.coords)) || zn;
		        n.options = {
		          endOnly: o.endOnly,
		          inner: V({}, On.noInner),
		          outer: V({}, On.noOuter)
		        }, i.top ? (n.options.inner.top = r.bottom - a.height, n.options.outer.top = r.bottom - s.height) : i.bottom && (n.options.inner.bottom = r.top + a.height, n.options.outer.bottom = r.top + s.height), i.left ? (n.options.inner.left = r.right - a.width, n.options.outer.left = r.right - s.width) : i.right && (n.options.inner.right = r.left + a.width, n.options.outer.right = r.left + s.width), On.set(t), n.options = o;
		      }
		    },
		    defaults: {
		      min: null,
		      max: null,
		      endOnly: !1,
		      enabled: !1
		    }
		  }, "restrictSize");
		  var Rn = {
		      start: function (t) {
		        var e,
		          n = t.interaction,
		          r = t.interactable,
		          i = t.element,
		          o = t.rect,
		          a = t.state,
		          s = t.startOffset,
		          c = a.options,
		          l = c.offsetWithOrigin ? function (t) {
		            var e = t.interaction.element,
		              n = N(G(t.state.options.origin, null, null, [e])),
		              r = n || K(t.interactable, e, t.interaction.prepared.name);
		            return r;
		          }(t) : {
		            x: 0,
		            y: 0
		          };
		        if ("startCoords" === c.offset) e = {
		          x: n.coords.start.page.x,
		          y: n.coords.start.page.y
		        };else {
		          var u = G(c.offset, r, i, [n]);
		          (e = N(u) || {
		            x: 0,
		            y: 0
		          }).x += l.x, e.y += l.y;
		        }
		        var p = c.relativePoints;
		        a.offsets = o && p && p.length ? p.map(function (t, n) {
		          return {
		            index: n,
		            relativePoint: t,
		            x: s.left - o.width * t.x + e.x,
		            y: s.top - o.height * t.y + e.y
		          };
		        }) : [{
		          index: 0,
		          relativePoint: null,
		          x: e.x,
		          y: e.y
		        }];
		      },
		      set: function (t) {
		        var e = t.interaction,
		          n = t.coords,
		          r = t.state,
		          i = r.options,
		          o = r.offsets,
		          a = K(e.interactable, e.element, e.prepared.name),
		          s = V({}, n),
		          c = [];
		        i.offsetWithOrigin || (s.x -= a.x, s.y -= a.y);
		        for (var l = 0, u = o; l < u.length; l++) for (var p = u[l], f = s.x - p.x, d = s.y - p.y, h = 0, v = i.targets.length; h < v; h++) {
		          var g = i.targets[h],
		            m = void 0;
		          (m = w.func(g) ? g(f, d, e._proxy, p, h) : g) && c.push({
		            x: (w.number(m.x) ? m.x : f) + p.x,
		            y: (w.number(m.y) ? m.y : d) + p.y,
		            range: w.number(m.range) ? m.range : i.range,
		            source: g,
		            index: h,
		            offset: p
		          });
		        }
		        for (var y = {
		            target: null,
		            inRange: !1,
		            distance: 0,
		            range: 0,
		            delta: {
		              x: 0,
		              y: 0
		            }
		          }, b = 0; b < c.length; b++) {
		          var x = c[b],
		            E = x.range,
		            T = x.x - s.x,
		            S = x.y - s.y,
		            _ = Q(T, S),
		            P = _ <= E;
		          E === 1 / 0 && y.inRange && y.range !== 1 / 0 && (P = !1), y.target && !(P ? y.inRange && E !== 1 / 0 ? _ / E < y.distance / y.range : E === 1 / 0 && y.range !== 1 / 0 || _ < y.distance : !y.inRange && _ < y.distance) || (y.target = x, y.distance = _, y.range = E, y.inRange = P, y.delta.x = T, y.delta.y = S);
		        }
		        return y.inRange && (n.x = y.target.x, n.y = y.target.y), r.closest = y, y;
		      },
		      defaults: {
		        range: 1 / 0,
		        targets: null,
		        offset: null,
		        offsetWithOrigin: !0,
		        origin: null,
		        relativePoints: null,
		        endOnly: !1,
		        enabled: !1
		      }
		    },
		    Cn = be(Rn, "snap");
		  var jn = {
		      start: function (t) {
		        var e = t.state,
		          n = t.edges,
		          r = e.options;
		        if (!n) return null;
		        t.state = {
		          options: {
		            targets: null,
		            relativePoints: [{
		              x: n.left ? 0 : 1,
		              y: n.top ? 0 : 1
		            }],
		            offset: r.offset || "self",
		            origin: {
		              x: 0,
		              y: 0
		            },
		            range: r.range
		          }
		        }, e.targetFields = e.targetFields || [["width", "height"], ["x", "y"]], Rn.start(t), e.offsets = t.state.offsets, t.state = e;
		      },
		      set: function (t) {
		        var e = t.interaction,
		          n = t.state,
		          r = t.coords,
		          i = n.options,
		          o = n.offsets,
		          a = {
		            x: r.x - o[0].x,
		            y: r.y - o[0].y
		          };
		        n.options = V({}, i), n.options.targets = [];
		        for (var s = 0, c = i.targets || []; s < c.length; s++) {
		          var l = c[s],
		            u = void 0;
		          if (u = w.func(l) ? l(a.x, a.y, e) : l) {
		            for (var p = 0, f = n.targetFields; p < f.length; p++) {
		              var d = f[p],
		                h = d[0],
		                v = d[1];
		              if (h in u || v in u) {
		                u.x = u[h], u.y = u[v];
		                break;
		              }
		            }
		            n.options.targets.push(u);
		          }
		        }
		        var g = Rn.set(t);
		        return n.options = i, g;
		      },
		      defaults: {
		        range: 1 / 0,
		        targets: null,
		        offset: null,
		        endOnly: !1,
		        enabled: !1
		      }
		    },
		    Fn = be(jn, "snapSize");
		  var Xn = {
		      aspectRatio: yn,
		      restrictEdges: kn,
		      restrict: Tn,
		      restrictRect: In,
		      restrictSize: An,
		      snapEdges: be({
		        start: function (t) {
		          var e = t.edges;
		          return e ? (t.state.targetFields = t.state.targetFields || [[e.left ? "left" : "right", e.top ? "top" : "bottom"]], jn.start(t)) : null;
		        },
		        set: jn.set,
		        defaults: V(ge(jn.defaults), {
		          targets: void 0,
		          range: void 0,
		          offset: {
		            x: 0,
		            y: 0
		          }
		        })
		      }, "snapEdges"),
		      snap: Cn,
		      snapSize: Fn,
		      spring: xn,
		      avoid: xn,
		      transform: xn,
		      rubberband: xn
		    },
		    Yn = {
		      id: "modifiers",
		      install: function (t) {
		        var e = t.interactStatic;
		        for (var n in t.usePlugin(Ee), t.usePlugin(hn), e.modifiers = Xn, Xn) {
		          var r = Xn[n],
		            i = r._defaults,
		            o = r._methods;
		          i._methods = o, t.defaults.perAction[n] = i;
		        }
		      }
		    },
		    Ln = Yn,
		    qn = function (t) {
		      s(n, t);
		      var e = p(n);
		      function n(t, i, o, a, s, c) {
		        var l;
		        if (r(this, n), tt(u(l = e.call(this, s)), o), o !== i && tt(u(l), i), l.timeStamp = c, l.originalEvent = o, l.type = t, l.pointerId = at(i), l.pointerType = dt(i), l.target = a, l.currentTarget = null, "tap" === t) {
		          var p = s.getPointerIndex(i);
		          l.dt = l.timeStamp - s.pointers[p].downTime;
		          var f = l.timeStamp - s.tapTime;
		          l.double = !!s.prevTap && "doubletap" !== s.prevTap.type && s.prevTap.target === l.target && f < 500;
		        } else "doubletap" === t && (l.dt = i.timeStamp - s.tapTime, l.double = !0);
		        return l;
		      }
		      return o(n, [{
		        key: "_subtractOrigin",
		        value: function (t) {
		          var e = t.x,
		            n = t.y;
		          return this.pageX -= e, this.pageY -= n, this.clientX -= e, this.clientY -= n, this;
		        }
		      }, {
		        key: "_addOrigin",
		        value: function (t) {
		          var e = t.x,
		            n = t.y;
		          return this.pageX += e, this.pageY += n, this.clientX += e, this.clientY += n, this;
		        }
		      }, {
		        key: "preventDefault",
		        value: function () {
		          this.originalEvent.preventDefault();
		        }
		      }]), n;
		    }(vt),
		    Bn = {
		      id: "pointer-events/base",
		      before: ["inertia", "modifiers", "auto-start", "actions"],
		      install: function (t) {
		        t.pointerEvents = Bn, t.defaults.actions.pointerEvents = Bn.defaults, V(t.actions.phaselessTypes, Bn.types);
		      },
		      listeners: {
		        "interactions:new": function (t) {
		          var e = t.interaction;
		          e.prevTap = null, e.tapTime = 0;
		        },
		        "interactions:update-pointer": function (t) {
		          var e = t.down,
		            n = t.pointerInfo;
		          if (!e && n.hold) return;
		          n.hold = {
		            duration: 1 / 0,
		            timeout: null
		          };
		        },
		        "interactions:move": function (t, e) {
		          var n = t.interaction,
		            r = t.pointer,
		            i = t.event,
		            o = t.eventTarget;
		          t.duplicate || n.pointerIsDown && !n.pointerWasMoved || (n.pointerIsDown && Gn(t), Vn({
		            interaction: n,
		            pointer: r,
		            event: i,
		            eventTarget: o,
		            type: "move"
		          }, e));
		        },
		        "interactions:down": function (t, e) {
		          !function (t, e) {
		            for (var n = t.interaction, r = t.pointer, i = t.event, o = t.eventTarget, a = t.pointerIndex, s = n.pointers[a].hold, c = q(o), l = {
		                interaction: n,
		                pointer: r,
		                event: i,
		                eventTarget: o,
		                type: "hold",
		                targets: [],
		                path: c,
		                node: null
		              }, u = 0; u < c.length; u++) {
		              var p = c[u];
		              l.node = p, e.fire("pointerEvents:collect-targets", l);
		            }
		            if (!l.targets.length) return;
		            for (var f = 1 / 0, d = 0, h = l.targets; d < h.length; d++) {
		              var v = h[d].eventable.options.holdDuration;
		              v < f && (f = v);
		            }
		            s.duration = f, s.timeout = setTimeout(function () {
		              Vn({
		                interaction: n,
		                eventTarget: o,
		                pointer: r,
		                event: i,
		                type: "hold"
		              }, e);
		            }, f);
		          }(t, e), Vn(t, e);
		        },
		        "interactions:up": function (t, e) {
		          Gn(t), Vn(t, e), function (t, e) {
		            var n = t.interaction,
		              r = t.pointer,
		              i = t.event,
		              o = t.eventTarget;
		            n.pointerWasMoved || Vn({
		              interaction: n,
		              eventTarget: o,
		              pointer: r,
		              event: i,
		              type: "tap"
		            }, e);
		          }(t, e);
		        },
		        "interactions:cancel": function (t, e) {
		          Gn(t), Vn(t, e);
		        }
		      },
		      PointerEvent: qn,
		      fire: Vn,
		      collectEventTargets: Wn,
		      defaults: {
		        holdDuration: 600,
		        ignoreFrom: null,
		        allowFrom: null,
		        origin: {
		          x: 0,
		          y: 0
		        }
		      },
		      types: {
		        down: !0,
		        move: !0,
		        up: !0,
		        cancel: !0,
		        tap: !0,
		        doubletap: !0,
		        hold: !0
		      }
		    };
		  function Vn(t, e) {
		    var n = t.interaction,
		      r = t.pointer,
		      i = t.event,
		      o = t.eventTarget,
		      a = t.type,
		      s = t.targets,
		      c = void 0 === s ? Wn(t, e) : s,
		      l = new qn(a, r, i, o, n, e.now());
		    e.fire("pointerEvents:new", {
		      pointerEvent: l
		    });
		    for (var u = {
		        interaction: n,
		        pointer: r,
		        event: i,
		        eventTarget: o,
		        targets: c,
		        type: a,
		        pointerEvent: l
		      }, p = 0; p < c.length; p++) {
		      var f = c[p];
		      for (var d in f.props || {}) l[d] = f.props[d];
		      var h = K(f.eventable, f.node);
		      if (l._subtractOrigin(h), l.eventable = f.eventable, l.currentTarget = f.node, f.eventable.fire(l), l._addOrigin(h), l.immediatePropagationStopped || l.propagationStopped && p + 1 < c.length && c[p + 1].node !== l.currentTarget) break;
		    }
		    if (e.fire("pointerEvents:fired", u), "tap" === a) {
		      var v = l.double ? Vn({
		        interaction: n,
		        pointer: r,
		        event: i,
		        eventTarget: o,
		        type: "doubletap"
		      }, e) : l;
		      n.prevTap = v, n.tapTime = v.timeStamp;
		    }
		    return l;
		  }
		  function Wn(t, e) {
		    var n = t.interaction,
		      r = t.pointer,
		      i = t.event,
		      o = t.eventTarget,
		      a = t.type,
		      s = n.getPointerIndex(r),
		      c = n.pointers[s];
		    if ("tap" === a && (n.pointerWasMoved || !c || c.downTarget !== o)) return [];
		    for (var l = q(o), u = {
		        interaction: n,
		        pointer: r,
		        event: i,
		        eventTarget: o,
		        type: a,
		        path: l,
		        targets: [],
		        node: null
		      }, p = 0; p < l.length; p++) {
		      var f = l[p];
		      u.node = f, e.fire("pointerEvents:collect-targets", u);
		    }
		    return "hold" === a && (u.targets = u.targets.filter(function (t) {
		      var e, r;
		      return t.eventable.options.holdDuration === (null == (e = n.pointers[s]) || null == (r = e.hold) ? void 0 : r.duration);
		    })), u.targets;
		  }
		  function Gn(t) {
		    var e = t.interaction,
		      n = t.pointerIndex,
		      r = e.pointers[n].hold;
		    r && r.timeout && (clearTimeout(r.timeout), r.timeout = null);
		  }
		  var Nn = Object.freeze({
		    __proto__: null,
		    default: Bn
		  });
		  function Un(t) {
		    var e = t.interaction;
		    e.holdIntervalHandle && (clearInterval(e.holdIntervalHandle), e.holdIntervalHandle = null);
		  }
		  var Hn = {
		      id: "pointer-events/holdRepeat",
		      install: function (t) {
		        t.usePlugin(Bn);
		        var e = t.pointerEvents;
		        e.defaults.holdRepeatInterval = 0, e.types.holdrepeat = t.actions.phaselessTypes.holdrepeat = !0;
		      },
		      listeners: ["move", "up", "cancel", "endall"].reduce(function (t, e) {
		        return t["pointerEvents:".concat(e)] = Un, t;
		      }, {
		        "pointerEvents:new": function (t) {
		          var e = t.pointerEvent;
		          "hold" === e.type && (e.count = (e.count || 0) + 1);
		        },
		        "pointerEvents:fired": function (t, e) {
		          var n = t.interaction,
		            r = t.pointerEvent,
		            i = t.eventTarget,
		            o = t.targets;
		          if ("hold" === r.type && o.length) {
		            var a = o[0].eventable.options.holdRepeatInterval;
		            a <= 0 || (n.holdIntervalHandle = setTimeout(function () {
		              e.pointerEvents.fire({
		                interaction: n,
		                eventTarget: i,
		                type: "hold",
		                pointer: r,
		                event: r
		              }, e);
		            }, a));
		          }
		        }
		      })
		    },
		    Kn = Hn;
		  var $n = {
		      id: "pointer-events/interactableTargets",
		      install: function (t) {
		        var e = t.Interactable;
		        e.prototype.pointerEvents = function (t) {
		          return V(this.events.options, t), this;
		        };
		        var n = e.prototype._backCompatOption;
		        e.prototype._backCompatOption = function (t, e) {
		          var r = n.call(this, t, e);
		          return r === this && (this.events.options[t] = e), r;
		        };
		      },
		      listeners: {
		        "pointerEvents:collect-targets": function (t, e) {
		          var n = t.targets,
		            r = t.node,
		            i = t.type,
		            o = t.eventTarget;
		          e.interactables.forEachMatch(r, function (t) {
		            var e = t.events,
		              a = e.options;
		            e.types[i] && e.types[i].length && t.testIgnoreAllow(a, r, o) && n.push({
		              node: r,
		              eventable: e,
		              props: {
		                interactable: t
		              }
		            });
		          });
		        },
		        "interactable:new": function (t) {
		          var e = t.interactable;
		          e.events.getRect = function (t) {
		            return e.getRect(t);
		          };
		        },
		        "interactable:set": function (t, e) {
		          var n = t.interactable,
		            r = t.options;
		          V(n.events.options, e.pointerEvents.defaults), V(n.events.options, r.pointerEvents || {});
		        }
		      }
		    },
		    Jn = $n,
		    Qn = {
		      id: "pointer-events",
		      install: function (t) {
		        t.usePlugin(Nn), t.usePlugin(Kn), t.usePlugin(Jn);
		      }
		    },
		    Zn = Qn;
		  var tr = {
		      id: "reflow",
		      install: function (t) {
		        var e = t.Interactable;
		        t.actions.phases.reflow = !0, e.prototype.reflow = function (e) {
		          return function (t, e, n) {
		            for (var r = t.getAllElements(), i = n.window.Promise, o = i ? [] : null, a = function () {
		                var a = r[s],
		                  c = t.getRect(a);
		                if (!c) return 1;
		                var l,
		                  u = bt(n.interactions.list, function (n) {
		                    return n.interacting() && n.interactable === t && n.element === a && n.prepared.name === e.name;
		                  });
		                if (u) u.move(), o && (l = u._reflowPromise || new i(function (t) {
		                  u._reflowResolve = t;
		                }));else {
		                  var p = U(c),
		                    f = function (t) {
		                      return {
		                        coords: t,
		                        get page() {
		                          return this.coords.page;
		                        },
		                        get client() {
		                          return this.coords.client;
		                        },
		                        get timeStamp() {
		                          return this.coords.timeStamp;
		                        },
		                        get pageX() {
		                          return this.coords.page.x;
		                        },
		                        get pageY() {
		                          return this.coords.page.y;
		                        },
		                        get clientX() {
		                          return this.coords.client.x;
		                        },
		                        get clientY() {
		                          return this.coords.client.y;
		                        },
		                        get pointerId() {
		                          return this.coords.pointerId;
		                        },
		                        get target() {
		                          return this.coords.target;
		                        },
		                        get type() {
		                          return this.coords.type;
		                        },
		                        get pointerType() {
		                          return this.coords.pointerType;
		                        },
		                        get buttons() {
		                          return this.coords.buttons;
		                        },
		                        preventDefault: function () {}
		                      };
		                    }({
		                      page: {
		                        x: p.x,
		                        y: p.y
		                      },
		                      client: {
		                        x: p.x,
		                        y: p.y
		                      },
		                      timeStamp: n.now()
		                    });
		                  l = function (t, e, n, r, i) {
		                    var o = t.interactions.new({
		                        pointerType: "reflow"
		                      }),
		                      a = {
		                        interaction: o,
		                        event: i,
		                        pointer: i,
		                        eventTarget: n,
		                        phase: "reflow"
		                      };
		                    o.interactable = e, o.element = n, o.prevEvent = i, o.updatePointer(i, i, n, !0), nt(o.coords.delta), Ut(o.prepared, r), o._doPhase(a);
		                    var s = t.window,
		                      c = s.Promise,
		                      l = c ? new c(function (t) {
		                        o._reflowResolve = t;
		                      }) : void 0;
		                    o._reflowPromise = l, o.start(r, e, n), o._interacting ? (o.move(a), o.end(i)) : (o.stop(), o._reflowResolve());
		                    return o.removePointer(i, i), l;
		                  }(n, t, a, e, f);
		                }
		                o && o.push(l);
		              }, s = 0; s < r.length && !a(); s++);
		            return o && i.all(o).then(function () {
		              return t;
		            });
		          }(this, e, t);
		        };
		      },
		      listeners: {
		        "interactions:stop": function (t, e) {
		          var n = t.interaction;
		          "reflow" === n.pointerType && (n._reflowResolve && n._reflowResolve(), function (t, e) {
		            t.splice(t.indexOf(e), 1);
		          }(e.interactions.list, n));
		        }
		      }
		    },
		    er = tr;
		  if (un.use(he), un.use(Ce), un.use(Zn), un.use(qe), un.use(Ln), un.use(pe), un.use(Xt), un.use(Gt), un.use(er), un.default = un, "object" === (n(module)) && module) try {
		    module.exports = un;
		  } catch (t) {}
		  return un.default = un, un;
		}); 
	} (interact_min$1, interact_min$1.exports));
	return interact_min$1.exports;
}

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var moment$1 = {exports: {}};

var moment = moment$1.exports;

var hasRequiredMoment;

function requireMoment () {
	if (hasRequiredMoment) return moment$1.exports;
	hasRequiredMoment = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory() ;
		})(moment, function () {

		  var hookCallback;
		  function hooks() {
		    return hookCallback.apply(null, arguments);
		  }

		  // This is done to register the method called with moment()
		  // without creating circular dependencies.
		  function setHookCallback(callback) {
		    hookCallback = callback;
		  }
		  function isArray(input) {
		    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
		  }
		  function isObject(input) {
		    // IE8 will treat undefined and null as object if it wasn't for
		    // input != null
		    return input != null && Object.prototype.toString.call(input) === '[object Object]';
		  }
		  function hasOwnProp(a, b) {
		    return Object.prototype.hasOwnProperty.call(a, b);
		  }
		  function isObjectEmpty(obj) {
		    if (Object.getOwnPropertyNames) {
		      return Object.getOwnPropertyNames(obj).length === 0;
		    } else {
		      var k;
		      for (k in obj) {
		        if (hasOwnProp(obj, k)) {
		          return false;
		        }
		      }
		      return true;
		    }
		  }
		  function isUndefined(input) {
		    return input === void 0;
		  }
		  function isNumber(input) {
		    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
		  }
		  function isDate(input) {
		    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
		  }
		  function map(arr, fn) {
		    var res = [],
		      i,
		      arrLen = arr.length;
		    for (i = 0; i < arrLen; ++i) {
		      res.push(fn(arr[i], i));
		    }
		    return res;
		  }
		  function extend(a, b) {
		    for (var i in b) {
		      if (hasOwnProp(b, i)) {
		        a[i] = b[i];
		      }
		    }
		    if (hasOwnProp(b, 'toString')) {
		      a.toString = b.toString;
		    }
		    if (hasOwnProp(b, 'valueOf')) {
		      a.valueOf = b.valueOf;
		    }
		    return a;
		  }
		  function createUTC(input, format, locale, strict) {
		    return createLocalOrUTC(input, format, locale, strict, true).utc();
		  }
		  function defaultParsingFlags() {
		    // We need to deep clone this object.
		    return {
		      empty: false,
		      unusedTokens: [],
		      unusedInput: [],
		      overflow: -2,
		      charsLeftOver: 0,
		      nullInput: false,
		      invalidEra: null,
		      invalidMonth: null,
		      invalidFormat: false,
		      userInvalidated: false,
		      iso: false,
		      parsedDateParts: [],
		      era: null,
		      meridiem: null,
		      rfc2822: false,
		      weekdayMismatch: false
		    };
		  }
		  function getParsingFlags(m) {
		    if (m._pf == null) {
		      m._pf = defaultParsingFlags();
		    }
		    return m._pf;
		  }
		  var some;
		  if (Array.prototype.some) {
		    some = Array.prototype.some;
		  } else {
		    some = function (fun) {
		      var t = Object(this),
		        len = t.length >>> 0,
		        i;
		      for (i = 0; i < len; i++) {
		        if (i in t && fun.call(this, t[i], i, t)) {
		          return true;
		        }
		      }
		      return false;
		    };
		  }
		  function isValid(m) {
		    var flags = null,
		      parsedParts = false,
		      isNowValid = m._d && !isNaN(m._d.getTime());
		    if (isNowValid) {
		      flags = getParsingFlags(m);
		      parsedParts = some.call(flags.parsedDateParts, function (i) {
		        return i != null;
		      });
		      isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
		      if (m._strict) {
		        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
		      }
		    }
		    if (Object.isFrozen == null || !Object.isFrozen(m)) {
		      m._isValid = isNowValid;
		    } else {
		      return isNowValid;
		    }
		    return m._isValid;
		  }
		  function createInvalid(flags) {
		    var m = createUTC(NaN);
		    if (flags != null) {
		      extend(getParsingFlags(m), flags);
		    } else {
		      getParsingFlags(m).userInvalidated = true;
		    }
		    return m;
		  }

		  // Plugins that add properties should also add the key here (null value),
		  // so we can properly clone ourselves.
		  var momentProperties = hooks.momentProperties = [],
		    updateInProgress = false;
		  function copyConfig(to, from) {
		    var i,
		      prop,
		      val,
		      momentPropertiesLen = momentProperties.length;
		    if (!isUndefined(from._isAMomentObject)) {
		      to._isAMomentObject = from._isAMomentObject;
		    }
		    if (!isUndefined(from._i)) {
		      to._i = from._i;
		    }
		    if (!isUndefined(from._f)) {
		      to._f = from._f;
		    }
		    if (!isUndefined(from._l)) {
		      to._l = from._l;
		    }
		    if (!isUndefined(from._strict)) {
		      to._strict = from._strict;
		    }
		    if (!isUndefined(from._tzm)) {
		      to._tzm = from._tzm;
		    }
		    if (!isUndefined(from._isUTC)) {
		      to._isUTC = from._isUTC;
		    }
		    if (!isUndefined(from._offset)) {
		      to._offset = from._offset;
		    }
		    if (!isUndefined(from._pf)) {
		      to._pf = getParsingFlags(from);
		    }
		    if (!isUndefined(from._locale)) {
		      to._locale = from._locale;
		    }
		    if (momentPropertiesLen > 0) {
		      for (i = 0; i < momentPropertiesLen; i++) {
		        prop = momentProperties[i];
		        val = from[prop];
		        if (!isUndefined(val)) {
		          to[prop] = val;
		        }
		      }
		    }
		    return to;
		  }

		  // Moment prototype object
		  function Moment(config) {
		    copyConfig(this, config);
		    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
		    if (!this.isValid()) {
		      this._d = new Date(NaN);
		    }
		    // Prevent infinite loop in case updateOffset creates new moment
		    // objects.
		    if (updateInProgress === false) {
		      updateInProgress = true;
		      hooks.updateOffset(this);
		      updateInProgress = false;
		    }
		  }
		  function isMoment(obj) {
		    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
		  }
		  function warn(msg) {
		    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
		      console.warn('Deprecation warning: ' + msg);
		    }
		  }
		  function deprecate(msg, fn) {
		    var firstTime = true;
		    return extend(function () {
		      if (hooks.deprecationHandler != null) {
		        hooks.deprecationHandler(null, msg);
		      }
		      if (firstTime) {
		        var args = [],
		          arg,
		          i,
		          key,
		          argLen = arguments.length;
		        for (i = 0; i < argLen; i++) {
		          arg = '';
		          if (typeof arguments[i] === 'object') {
		            arg += '\n[' + i + '] ';
		            for (key in arguments[0]) {
		              if (hasOwnProp(arguments[0], key)) {
		                arg += key + ': ' + arguments[0][key] + ', ';
		              }
		            }
		            arg = arg.slice(0, -2); // Remove trailing comma and space
		          } else {
		            arg = arguments[i];
		          }
		          args.push(arg);
		        }
		        warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
		        firstTime = false;
		      }
		      return fn.apply(this, arguments);
		    }, fn);
		  }
		  var deprecations = {};
		  function deprecateSimple(name, msg) {
		    if (hooks.deprecationHandler != null) {
		      hooks.deprecationHandler(name, msg);
		    }
		    if (!deprecations[name]) {
		      warn(msg);
		      deprecations[name] = true;
		    }
		  }
		  hooks.suppressDeprecationWarnings = false;
		  hooks.deprecationHandler = null;
		  function isFunction(input) {
		    return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
		  }
		  function set(config) {
		    var prop, i;
		    for (i in config) {
		      if (hasOwnProp(config, i)) {
		        prop = config[i];
		        if (isFunction(prop)) {
		          this[i] = prop;
		        } else {
		          this['_' + i] = prop;
		        }
		      }
		    }
		    this._config = config;
		    // Lenient ordinal parsing accepts just a number in addition to
		    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
		    // TODO: Remove "ordinalParse" fallback in next major release.
		    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
		  }
		  function mergeConfigs(parentConfig, childConfig) {
		    var res = extend({}, parentConfig),
		      prop;
		    for (prop in childConfig) {
		      if (hasOwnProp(childConfig, prop)) {
		        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
		          res[prop] = {};
		          extend(res[prop], parentConfig[prop]);
		          extend(res[prop], childConfig[prop]);
		        } else if (childConfig[prop] != null) {
		          res[prop] = childConfig[prop];
		        } else {
		          delete res[prop];
		        }
		      }
		    }
		    for (prop in parentConfig) {
		      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
		        // make sure changes to properties don't modify parent config
		        res[prop] = extend({}, res[prop]);
		      }
		    }
		    return res;
		  }
		  function Locale(config) {
		    if (config != null) {
		      this.set(config);
		    }
		  }
		  var keys;
		  if (Object.keys) {
		    keys = Object.keys;
		  } else {
		    keys = function (obj) {
		      var i,
		        res = [];
		      for (i in obj) {
		        if (hasOwnProp(obj, i)) {
		          res.push(i);
		        }
		      }
		      return res;
		    };
		  }
		  var defaultCalendar = {
		    sameDay: '[Today at] LT',
		    nextDay: '[Tomorrow at] LT',
		    nextWeek: 'dddd [at] LT',
		    lastDay: '[Yesterday at] LT',
		    lastWeek: '[Last] dddd [at] LT',
		    sameElse: 'L'
		  };
		  function calendar(key, mom, now) {
		    var output = this._calendar[key] || this._calendar['sameElse'];
		    return isFunction(output) ? output.call(mom, now) : output;
		  }
		  function zeroFill(number, targetLength, forceSign) {
		    var absNumber = '' + Math.abs(number),
		      zerosToFill = targetLength - absNumber.length,
		      sign = number >= 0;
		    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
		  }
		  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
		    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
		    formatFunctions = {},
		    formatTokenFunctions = {};

		  // token:    'M'
		  // padded:   ['MM', 2]
		  // ordinal:  'Mo'
		  // callback: function () { this.month() + 1 }
		  function addFormatToken(token, padded, ordinal, callback) {
		    var func = callback;
		    if (typeof callback === 'string') {
		      func = function () {
		        return this[callback]();
		      };
		    }
		    if (token) {
		      formatTokenFunctions[token] = func;
		    }
		    if (padded) {
		      formatTokenFunctions[padded[0]] = function () {
		        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
		      };
		    }
		    if (ordinal) {
		      formatTokenFunctions[ordinal] = function () {
		        return this.localeData().ordinal(func.apply(this, arguments), token);
		      };
		    }
		  }
		  function removeFormattingTokens(input) {
		    if (input.match(/\[[\s\S]/)) {
		      return input.replace(/^\[|\]$/g, '');
		    }
		    return input.replace(/\\/g, '');
		  }
		  function makeFormatFunction(format) {
		    var array = format.match(formattingTokens),
		      i,
		      length;
		    for (i = 0, length = array.length; i < length; i++) {
		      if (formatTokenFunctions[array[i]]) {
		        array[i] = formatTokenFunctions[array[i]];
		      } else {
		        array[i] = removeFormattingTokens(array[i]);
		      }
		    }
		    return function (mom) {
		      var output = '',
		        i;
		      for (i = 0; i < length; i++) {
		        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
		      }
		      return output;
		    };
		  }

		  // format date using native date object
		  function formatMoment(m, format) {
		    if (!m.isValid()) {
		      return m.localeData().invalidDate();
		    }
		    format = expandFormat(format, m.localeData());
		    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
		    return formatFunctions[format](m);
		  }
		  function expandFormat(format, locale) {
		    var i = 5;
		    function replaceLongDateFormatTokens(input) {
		      return locale.longDateFormat(input) || input;
		    }
		    localFormattingTokens.lastIndex = 0;
		    while (i >= 0 && localFormattingTokens.test(format)) {
		      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
		      localFormattingTokens.lastIndex = 0;
		      i -= 1;
		    }
		    return format;
		  }
		  var defaultLongDateFormat = {
		    LTS: 'h:mm:ss A',
		    LT: 'h:mm A',
		    L: 'MM/DD/YYYY',
		    LL: 'MMMM D, YYYY',
		    LLL: 'MMMM D, YYYY h:mm A',
		    LLLL: 'dddd, MMMM D, YYYY h:mm A'
		  };
		  function longDateFormat(key) {
		    var format = this._longDateFormat[key],
		      formatUpper = this._longDateFormat[key.toUpperCase()];
		    if (format || !formatUpper) {
		      return format;
		    }
		    this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
		      if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
		        return tok.slice(1);
		      }
		      return tok;
		    }).join('');
		    return this._longDateFormat[key];
		  }
		  var defaultInvalidDate = 'Invalid date';
		  function invalidDate() {
		    return this._invalidDate;
		  }
		  var defaultOrdinal = '%d',
		    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
		  function ordinal(number) {
		    return this._ordinal.replace('%d', number);
		  }
		  var defaultRelativeTime = {
		    future: 'in %s',
		    past: '%s ago',
		    s: 'a few seconds',
		    ss: '%d seconds',
		    m: 'a minute',
		    mm: '%d minutes',
		    h: 'an hour',
		    hh: '%d hours',
		    d: 'a day',
		    dd: '%d days',
		    w: 'a week',
		    ww: '%d weeks',
		    M: 'a month',
		    MM: '%d months',
		    y: 'a year',
		    yy: '%d years'
		  };
		  function relativeTime(number, withoutSuffix, string, isFuture) {
		    var output = this._relativeTime[string];
		    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
		  }
		  function pastFuture(diff, output) {
		    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
		    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
		  }
		  var aliases = {
		    D: 'date',
		    dates: 'date',
		    date: 'date',
		    d: 'day',
		    days: 'day',
		    day: 'day',
		    e: 'weekday',
		    weekdays: 'weekday',
		    weekday: 'weekday',
		    E: 'isoWeekday',
		    isoweekdays: 'isoWeekday',
		    isoweekday: 'isoWeekday',
		    DDD: 'dayOfYear',
		    dayofyears: 'dayOfYear',
		    dayofyear: 'dayOfYear',
		    h: 'hour',
		    hours: 'hour',
		    hour: 'hour',
		    ms: 'millisecond',
		    milliseconds: 'millisecond',
		    millisecond: 'millisecond',
		    m: 'minute',
		    minutes: 'minute',
		    minute: 'minute',
		    M: 'month',
		    months: 'month',
		    month: 'month',
		    Q: 'quarter',
		    quarters: 'quarter',
		    quarter: 'quarter',
		    s: 'second',
		    seconds: 'second',
		    second: 'second',
		    gg: 'weekYear',
		    weekyears: 'weekYear',
		    weekyear: 'weekYear',
		    GG: 'isoWeekYear',
		    isoweekyears: 'isoWeekYear',
		    isoweekyear: 'isoWeekYear',
		    w: 'week',
		    weeks: 'week',
		    week: 'week',
		    W: 'isoWeek',
		    isoweeks: 'isoWeek',
		    isoweek: 'isoWeek',
		    y: 'year',
		    years: 'year',
		    year: 'year'
		  };
		  function normalizeUnits(units) {
		    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
		  }
		  function normalizeObjectUnits(inputObject) {
		    var normalizedInput = {},
		      normalizedProp,
		      prop;
		    for (prop in inputObject) {
		      if (hasOwnProp(inputObject, prop)) {
		        normalizedProp = normalizeUnits(prop);
		        if (normalizedProp) {
		          normalizedInput[normalizedProp] = inputObject[prop];
		        }
		      }
		    }
		    return normalizedInput;
		  }
		  var priorities = {
		    date: 9,
		    day: 11,
		    weekday: 11,
		    isoWeekday: 11,
		    dayOfYear: 4,
		    hour: 13,
		    millisecond: 16,
		    minute: 14,
		    month: 8,
		    quarter: 7,
		    second: 15,
		    weekYear: 1,
		    isoWeekYear: 1,
		    week: 5,
		    isoWeek: 5,
		    year: 1
		  };
		  function getPrioritizedUnits(unitsObj) {
		    var units = [],
		      u;
		    for (u in unitsObj) {
		      if (hasOwnProp(unitsObj, u)) {
		        units.push({
		          unit: u,
		          priority: priorities[u]
		        });
		      }
		    }
		    units.sort(function (a, b) {
		      return a.priority - b.priority;
		    });
		    return units;
		  }
		  var match1 = /\d/,
		    //       0 - 9
		    match2 = /\d\d/,
		    //      00 - 99
		    match3 = /\d{3}/,
		    //     000 - 999
		    match4 = /\d{4}/,
		    //    0000 - 9999
		    match6 = /[+-]?\d{6}/,
		    // -999999 - 999999
		    match1to2 = /\d\d?/,
		    //       0 - 99
		    match3to4 = /\d\d\d\d?/,
		    //     999 - 9999
		    match5to6 = /\d\d\d\d\d\d?/,
		    //   99999 - 999999
		    match1to3 = /\d{1,3}/,
		    //       0 - 999
		    match1to4 = /\d{1,4}/,
		    //       0 - 9999
		    match1to6 = /[+-]?\d{1,6}/,
		    // -999999 - 999999
		    matchUnsigned = /\d+/,
		    //       0 - inf
		    matchSigned = /[+-]?\d+/,
		    //    -inf - inf
		    matchOffset = /Z|[+-]\d\d:?\d\d/gi,
		    // +00:00 -00:00 +0000 -0000 or Z
		    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
		    // +00 -00 +00:00 -00:00 +0000 -0000 or Z
		    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
		    // 123456789 123456789.123
		    // any word (or two) characters or numbers including two/three word month in arabic.
		    // includes scottish gaelic two word and hyphenated months
		    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
		    match1to2NoLeadingZero = /^[1-9]\d?/,
		    //         1-99
		    match1to2HasZero = /^([1-9]\d|\d)/,
		    //           0-99
		    regexes;
		  regexes = {};
		  function addRegexToken(token, regex, strictRegex) {
		    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
		      return isStrict && strictRegex ? strictRegex : regex;
		    };
		  }
		  function getParseRegexForToken(token, config) {
		    if (!hasOwnProp(regexes, token)) {
		      return new RegExp(unescapeFormat(token));
		    }
		    return regexes[token](config._strict, config._locale);
		  }

		  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
		  function unescapeFormat(s) {
		    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
		      return p1 || p2 || p3 || p4;
		    }));
		  }
		  function regexEscape(s) {
		    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		  }
		  function absFloor(number) {
		    if (number < 0) {
		      // -0 -> 0
		      return Math.ceil(number) || 0;
		    } else {
		      return Math.floor(number);
		    }
		  }
		  function toInt(argumentForCoercion) {
		    var coercedNumber = +argumentForCoercion,
		      value = 0;
		    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
		      value = absFloor(coercedNumber);
		    }
		    return value;
		  }
		  var tokens = {};
		  function addParseToken(token, callback) {
		    var i,
		      func = callback,
		      tokenLen;
		    if (typeof token === 'string') {
		      token = [token];
		    }
		    if (isNumber(callback)) {
		      func = function (input, array) {
		        array[callback] = toInt(input);
		      };
		    }
		    tokenLen = token.length;
		    for (i = 0; i < tokenLen; i++) {
		      tokens[token[i]] = func;
		    }
		  }
		  function addWeekParseToken(token, callback) {
		    addParseToken(token, function (input, array, config, token) {
		      config._w = config._w || {};
		      callback(input, config._w, config, token);
		    });
		  }
		  function addTimeToArrayFromToken(token, input, config) {
		    if (input != null && hasOwnProp(tokens, token)) {
		      tokens[token](input, config._a, config, token);
		    }
		  }
		  function isLeapYear(year) {
		    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
		  }
		  var YEAR = 0,
		    MONTH = 1,
		    DATE = 2,
		    HOUR = 3,
		    MINUTE = 4,
		    SECOND = 5,
		    MILLISECOND = 6,
		    WEEK = 7,
		    WEEKDAY = 8;

		  // FORMATTING

		  addFormatToken('Y', 0, 0, function () {
		    var y = this.year();
		    return y <= 9999 ? zeroFill(y, 4) : '+' + y;
		  });
		  addFormatToken(0, ['YY', 2], 0, function () {
		    return this.year() % 100;
		  });
		  addFormatToken(0, ['YYYY', 4], 0, 'year');
		  addFormatToken(0, ['YYYYY', 5], 0, 'year');
		  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

		  // PARSING

		  addRegexToken('Y', matchSigned);
		  addRegexToken('YY', match1to2, match2);
		  addRegexToken('YYYY', match1to4, match4);
		  addRegexToken('YYYYY', match1to6, match6);
		  addRegexToken('YYYYYY', match1to6, match6);
		  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
		  addParseToken('YYYY', function (input, array) {
		    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
		  });
		  addParseToken('YY', function (input, array) {
		    array[YEAR] = hooks.parseTwoDigitYear(input);
		  });
		  addParseToken('Y', function (input, array) {
		    array[YEAR] = parseInt(input, 10);
		  });

		  // HELPERS

		  function daysInYear(year) {
		    return isLeapYear(year) ? 366 : 365;
		  }

		  // HOOKS

		  hooks.parseTwoDigitYear = function (input) {
		    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
		  };

		  // MOMENTS

		  var getSetYear = makeGetSet('FullYear', true);
		  function getIsLeapYear() {
		    return isLeapYear(this.year());
		  }
		  function makeGetSet(unit, keepTime) {
		    return function (value) {
		      if (value != null) {
		        set$1(this, unit, value);
		        hooks.updateOffset(this, keepTime);
		        return this;
		      } else {
		        return get(this, unit);
		      }
		    };
		  }
		  function get(mom, unit) {
		    if (!mom.isValid()) {
		      return NaN;
		    }
		    var d = mom._d,
		      isUTC = mom._isUTC;
		    switch (unit) {
		      case 'Milliseconds':
		        return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
		      case 'Seconds':
		        return isUTC ? d.getUTCSeconds() : d.getSeconds();
		      case 'Minutes':
		        return isUTC ? d.getUTCMinutes() : d.getMinutes();
		      case 'Hours':
		        return isUTC ? d.getUTCHours() : d.getHours();
		      case 'Date':
		        return isUTC ? d.getUTCDate() : d.getDate();
		      case 'Day':
		        return isUTC ? d.getUTCDay() : d.getDay();
		      case 'Month':
		        return isUTC ? d.getUTCMonth() : d.getMonth();
		      case 'FullYear':
		        return isUTC ? d.getUTCFullYear() : d.getFullYear();
		      default:
		        return NaN;
		      // Just in case
		    }
		  }
		  function set$1(mom, unit, value) {
		    var d, isUTC, year, month, date;
		    if (!mom.isValid() || isNaN(value)) {
		      return;
		    }
		    d = mom._d;
		    isUTC = mom._isUTC;
		    switch (unit) {
		      case 'Milliseconds':
		        return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
		      case 'Seconds':
		        return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
		      case 'Minutes':
		        return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
		      case 'Hours':
		        return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
		      case 'Date':
		        return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
		      // case 'Day': // Not real
		      //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
		      // case 'Month': // Not used because we need to pass two variables
		      //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
		      case 'FullYear':
		        break;
		      // See below ...
		      default:
		        return;
		      // Just in case
		    }
		    year = value;
		    month = mom.month();
		    date = mom.date();
		    date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
		    void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
		  }

		  // MOMENTS

		  function stringGet(units) {
		    units = normalizeUnits(units);
		    if (isFunction(this[units])) {
		      return this[units]();
		    }
		    return this;
		  }
		  function stringSet(units, value) {
		    if (typeof units === 'object') {
		      units = normalizeObjectUnits(units);
		      var prioritized = getPrioritizedUnits(units),
		        i,
		        prioritizedLen = prioritized.length;
		      for (i = 0; i < prioritizedLen; i++) {
		        this[prioritized[i].unit](units[prioritized[i].unit]);
		      }
		    } else {
		      units = normalizeUnits(units);
		      if (isFunction(this[units])) {
		        return this[units](value);
		      }
		    }
		    return this;
		  }
		  function mod(n, x) {
		    return (n % x + x) % x;
		  }
		  var indexOf;
		  if (Array.prototype.indexOf) {
		    indexOf = Array.prototype.indexOf;
		  } else {
		    indexOf = function (o) {
		      // I know
		      var i;
		      for (i = 0; i < this.length; ++i) {
		        if (this[i] === o) {
		          return i;
		        }
		      }
		      return -1;
		    };
		  }
		  function daysInMonth(year, month) {
		    if (isNaN(year) || isNaN(month)) {
		      return NaN;
		    }
		    var modMonth = mod(month, 12);
		    year += (month - modMonth) / 12;
		    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
		  }

		  // FORMATTING

		  addFormatToken('M', ['MM', 2], 'Mo', function () {
		    return this.month() + 1;
		  });
		  addFormatToken('MMM', 0, 0, function (format) {
		    return this.localeData().monthsShort(this, format);
		  });
		  addFormatToken('MMMM', 0, 0, function (format) {
		    return this.localeData().months(this, format);
		  });

		  // PARSING

		  addRegexToken('M', match1to2, match1to2NoLeadingZero);
		  addRegexToken('MM', match1to2, match2);
		  addRegexToken('MMM', function (isStrict, locale) {
		    return locale.monthsShortRegex(isStrict);
		  });
		  addRegexToken('MMMM', function (isStrict, locale) {
		    return locale.monthsRegex(isStrict);
		  });
		  addParseToken(['M', 'MM'], function (input, array) {
		    array[MONTH] = toInt(input) - 1;
		  });
		  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
		    var month = config._locale.monthsParse(input, token, config._strict);
		    // if we didn't find a month name, mark the date as invalid.
		    if (month != null) {
		      array[MONTH] = month;
		    } else {
		      getParsingFlags(config).invalidMonth = input;
		    }
		  });

		  // LOCALES

		  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
		    defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
		    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
		    defaultMonthsShortRegex = matchWord,
		    defaultMonthsRegex = matchWord;
		  function localeMonths(m, format) {
		    if (!m) {
		      return isArray(this._months) ? this._months : this._months['standalone'];
		    }
		    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
		  }
		  function localeMonthsShort(m, format) {
		    if (!m) {
		      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
		    }
		    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
		  }
		  function handleStrictParse(monthName, format, strict) {
		    var i,
		      ii,
		      mom,
		      llc = monthName.toLocaleLowerCase();
		    if (!this._monthsParse) {
		      // this is not used
		      this._monthsParse = [];
		      this._longMonthsParse = [];
		      this._shortMonthsParse = [];
		      for (i = 0; i < 12; ++i) {
		        mom = createUTC([2000, i]);
		        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
		        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
		      }
		    }
		    if (strict) {
		      if (format === 'MMM') {
		        ii = indexOf.call(this._shortMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._longMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    } else {
		      if (format === 'MMM') {
		        ii = indexOf.call(this._shortMonthsParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._longMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._longMonthsParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._shortMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    }
		  }
		  function localeMonthsParse(monthName, format, strict) {
		    var i, mom, regex;
		    if (this._monthsParseExact) {
		      return handleStrictParse.call(this, monthName, format, strict);
		    }
		    if (!this._monthsParse) {
		      this._monthsParse = [];
		      this._longMonthsParse = [];
		      this._shortMonthsParse = [];
		    }

		    // TODO: add sorting
		    // Sorting makes sure if one month (or abbr) is a prefix of another
		    // see sorting in computeMonthsParse
		    for (i = 0; i < 12; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, i]);
		      if (strict && !this._longMonthsParse[i]) {
		        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
		        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
		      }
		      if (!strict && !this._monthsParse[i]) {
		        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
		        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
		      }
		      // test the regex
		      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
		        return i;
		      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
		        return i;
		      } else if (!strict && this._monthsParse[i].test(monthName)) {
		        return i;
		      }
		    }
		  }

		  // MOMENTS

		  function setMonth(mom, value) {
		    if (!mom.isValid()) {
		      // No op
		      return mom;
		    }
		    if (typeof value === 'string') {
		      if (/^\d+$/.test(value)) {
		        value = toInt(value);
		      } else {
		        value = mom.localeData().monthsParse(value);
		        // TODO: Another silent failure?
		        if (!isNumber(value)) {
		          return mom;
		        }
		      }
		    }
		    var month = value,
		      date = mom.date();
		    date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
		    void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
		    return mom;
		  }
		  function getSetMonth(value) {
		    if (value != null) {
		      setMonth(this, value);
		      hooks.updateOffset(this, true);
		      return this;
		    } else {
		      return get(this, 'Month');
		    }
		  }
		  function getDaysInMonth() {
		    return daysInMonth(this.year(), this.month());
		  }
		  function monthsShortRegex(isStrict) {
		    if (this._monthsParseExact) {
		      if (!hasOwnProp(this, '_monthsRegex')) {
		        computeMonthsParse.call(this);
		      }
		      if (isStrict) {
		        return this._monthsShortStrictRegex;
		      } else {
		        return this._monthsShortRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_monthsShortRegex')) {
		        this._monthsShortRegex = defaultMonthsShortRegex;
		      }
		      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
		    }
		  }
		  function monthsRegex(isStrict) {
		    if (this._monthsParseExact) {
		      if (!hasOwnProp(this, '_monthsRegex')) {
		        computeMonthsParse.call(this);
		      }
		      if (isStrict) {
		        return this._monthsStrictRegex;
		      } else {
		        return this._monthsRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_monthsRegex')) {
		        this._monthsRegex = defaultMonthsRegex;
		      }
		      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
		    }
		  }
		  function computeMonthsParse() {
		    function cmpLenRev(a, b) {
		      return b.length - a.length;
		    }
		    var shortPieces = [],
		      longPieces = [],
		      mixedPieces = [],
		      i,
		      mom,
		      shortP,
		      longP;
		    for (i = 0; i < 12; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, i]);
		      shortP = regexEscape(this.monthsShort(mom, ''));
		      longP = regexEscape(this.months(mom, ''));
		      shortPieces.push(shortP);
		      longPieces.push(longP);
		      mixedPieces.push(longP);
		      mixedPieces.push(shortP);
		    }
		    // Sorting makes sure if one month (or abbr) is a prefix of another it
		    // will match the longer piece.
		    shortPieces.sort(cmpLenRev);
		    longPieces.sort(cmpLenRev);
		    mixedPieces.sort(cmpLenRev);
		    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		    this._monthsShortRegex = this._monthsRegex;
		    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
		    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
		  }
		  function createDate(y, m, d, h, M, s, ms) {
		    // can't just apply() to create a date:
		    // https://stackoverflow.com/q/181348
		    var date;
		    // the date constructor remaps years 0-99 to 1900-1999
		    if (y < 100 && y >= 0) {
		      // preserve leap years using a full 400 year cycle, then reset
		      date = new Date(y + 400, m, d, h, M, s, ms);
		      if (isFinite(date.getFullYear())) {
		        date.setFullYear(y);
		      }
		    } else {
		      date = new Date(y, m, d, h, M, s, ms);
		    }
		    return date;
		  }
		  function createUTCDate(y) {
		    var date, args;
		    // the Date.UTC function remaps years 0-99 to 1900-1999
		    if (y < 100 && y >= 0) {
		      args = Array.prototype.slice.call(arguments);
		      // preserve leap years using a full 400 year cycle, then reset
		      args[0] = y + 400;
		      date = new Date(Date.UTC.apply(null, args));
		      if (isFinite(date.getUTCFullYear())) {
		        date.setUTCFullYear(y);
		      }
		    } else {
		      date = new Date(Date.UTC.apply(null, arguments));
		    }
		    return date;
		  }

		  // start-of-first-week - start-of-year
		  function firstWeekOffset(year, dow, doy) {
		    var
		      // first-week day -- which january is always in the first week (4 for iso, 1 for other)
		      fwd = 7 + dow - doy,
		      // first-week day local weekday -- which local weekday is fwd
		      fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
		    return -fwdlw + fwd - 1;
		  }

		  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
		  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
		    var localWeekday = (7 + weekday - dow) % 7,
		      weekOffset = firstWeekOffset(year, dow, doy),
		      dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
		      resYear,
		      resDayOfYear;
		    if (dayOfYear <= 0) {
		      resYear = year - 1;
		      resDayOfYear = daysInYear(resYear) + dayOfYear;
		    } else if (dayOfYear > daysInYear(year)) {
		      resYear = year + 1;
		      resDayOfYear = dayOfYear - daysInYear(year);
		    } else {
		      resYear = year;
		      resDayOfYear = dayOfYear;
		    }
		    return {
		      year: resYear,
		      dayOfYear: resDayOfYear
		    };
		  }
		  function weekOfYear(mom, dow, doy) {
		    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
		      week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
		      resWeek,
		      resYear;
		    if (week < 1) {
		      resYear = mom.year() - 1;
		      resWeek = week + weeksInYear(resYear, dow, doy);
		    } else if (week > weeksInYear(mom.year(), dow, doy)) {
		      resWeek = week - weeksInYear(mom.year(), dow, doy);
		      resYear = mom.year() + 1;
		    } else {
		      resYear = mom.year();
		      resWeek = week;
		    }
		    return {
		      week: resWeek,
		      year: resYear
		    };
		  }
		  function weeksInYear(year, dow, doy) {
		    var weekOffset = firstWeekOffset(year, dow, doy),
		      weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
		    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
		  }

		  // FORMATTING

		  addFormatToken('w', ['ww', 2], 'wo', 'week');
		  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

		  // PARSING

		  addRegexToken('w', match1to2, match1to2NoLeadingZero);
		  addRegexToken('ww', match1to2, match2);
		  addRegexToken('W', match1to2, match1to2NoLeadingZero);
		  addRegexToken('WW', match1to2, match2);
		  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
		    week[token.substr(0, 1)] = toInt(input);
		  });

		  // HELPERS

		  // LOCALES

		  function localeWeek(mom) {
		    return weekOfYear(mom, this._week.dow, this._week.doy).week;
		  }
		  var defaultLocaleWeek = {
		    dow: 0,
		    // Sunday is the first day of the week.
		    doy: 6 // The week that contains Jan 6th is the first week of the year.
		  };
		  function localeFirstDayOfWeek() {
		    return this._week.dow;
		  }
		  function localeFirstDayOfYear() {
		    return this._week.doy;
		  }

		  // MOMENTS

		  function getSetWeek(input) {
		    var week = this.localeData().week(this);
		    return input == null ? week : this.add((input - week) * 7, 'd');
		  }
		  function getSetISOWeek(input) {
		    var week = weekOfYear(this, 1, 4).week;
		    return input == null ? week : this.add((input - week) * 7, 'd');
		  }

		  // FORMATTING

		  addFormatToken('d', 0, 'do', 'day');
		  addFormatToken('dd', 0, 0, function (format) {
		    return this.localeData().weekdaysMin(this, format);
		  });
		  addFormatToken('ddd', 0, 0, function (format) {
		    return this.localeData().weekdaysShort(this, format);
		  });
		  addFormatToken('dddd', 0, 0, function (format) {
		    return this.localeData().weekdays(this, format);
		  });
		  addFormatToken('e', 0, 0, 'weekday');
		  addFormatToken('E', 0, 0, 'isoWeekday');

		  // PARSING

		  addRegexToken('d', match1to2);
		  addRegexToken('e', match1to2);
		  addRegexToken('E', match1to2);
		  addRegexToken('dd', function (isStrict, locale) {
		    return locale.weekdaysMinRegex(isStrict);
		  });
		  addRegexToken('ddd', function (isStrict, locale) {
		    return locale.weekdaysShortRegex(isStrict);
		  });
		  addRegexToken('dddd', function (isStrict, locale) {
		    return locale.weekdaysRegex(isStrict);
		  });
		  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
		    var weekday = config._locale.weekdaysParse(input, token, config._strict);
		    // if we didn't get a weekday name, mark the date as invalid
		    if (weekday != null) {
		      week.d = weekday;
		    } else {
		      getParsingFlags(config).invalidWeekday = input;
		    }
		  });
		  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
		    week[token] = toInt(input);
		  });

		  // HELPERS

		  function parseWeekday(input, locale) {
		    if (typeof input !== 'string') {
		      return input;
		    }
		    if (!isNaN(input)) {
		      return parseInt(input, 10);
		    }
		    input = locale.weekdaysParse(input);
		    if (typeof input === 'number') {
		      return input;
		    }
		    return null;
		  }
		  function parseIsoWeekday(input, locale) {
		    if (typeof input === 'string') {
		      return locale.weekdaysParse(input) % 7 || 7;
		    }
		    return isNaN(input) ? null : input;
		  }

		  // LOCALES
		  function shiftWeekdays(ws, n) {
		    return ws.slice(n, 7).concat(ws.slice(0, n));
		  }
		  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
		    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
		    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
		    defaultWeekdaysRegex = matchWord,
		    defaultWeekdaysShortRegex = matchWord,
		    defaultWeekdaysMinRegex = matchWord;
		  function localeWeekdays(m, format) {
		    var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
		    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
		  }
		  function localeWeekdaysShort(m) {
		    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
		  }
		  function localeWeekdaysMin(m) {
		    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
		  }
		  function handleStrictParse$1(weekdayName, format, strict) {
		    var i,
		      ii,
		      mom,
		      llc = weekdayName.toLocaleLowerCase();
		    if (!this._weekdaysParse) {
		      this._weekdaysParse = [];
		      this._shortWeekdaysParse = [];
		      this._minWeekdaysParse = [];
		      for (i = 0; i < 7; ++i) {
		        mom = createUTC([2000, 1]).day(i);
		        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
		        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
		        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
		      }
		    }
		    if (strict) {
		      if (format === 'dddd') {
		        ii = indexOf.call(this._weekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else if (format === 'ddd') {
		        ii = indexOf.call(this._shortWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    } else {
		      if (format === 'dddd') {
		        ii = indexOf.call(this._weekdaysParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._shortWeekdaysParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else if (format === 'ddd') {
		        ii = indexOf.call(this._shortWeekdaysParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._weekdaysParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._weekdaysParse, llc);
		        if (ii !== -1) {
		          return ii;
		        }
		        ii = indexOf.call(this._shortWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    }
		  }
		  function localeWeekdaysParse(weekdayName, format, strict) {
		    var i, mom, regex;
		    if (this._weekdaysParseExact) {
		      return handleStrictParse$1.call(this, weekdayName, format, strict);
		    }
		    if (!this._weekdaysParse) {
		      this._weekdaysParse = [];
		      this._minWeekdaysParse = [];
		      this._shortWeekdaysParse = [];
		      this._fullWeekdaysParse = [];
		    }
		    for (i = 0; i < 7; i++) {
		      // make the regex if we don't have it already

		      mom = createUTC([2000, 1]).day(i);
		      if (strict && !this._fullWeekdaysParse[i]) {
		        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
		        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
		        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
		      }
		      if (!this._weekdaysParse[i]) {
		        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
		        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
		      }
		      // test the regex
		      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
		        return i;
		      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
		        return i;
		      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
		        return i;
		      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
		        return i;
		      }
		    }
		  }

		  // MOMENTS

		  function getSetDayOfWeek(input) {
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }
		    var day = get(this, 'Day');
		    if (input != null) {
		      input = parseWeekday(input, this.localeData());
		      return this.add(input - day, 'd');
		    } else {
		      return day;
		    }
		  }
		  function getSetLocaleDayOfWeek(input) {
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }
		    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
		    return input == null ? weekday : this.add(input - weekday, 'd');
		  }
		  function getSetISODayOfWeek(input) {
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }

		    // behaves the same as moment#day except
		    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
		    // as a setter, sunday should belong to the previous week.

		    if (input != null) {
		      var weekday = parseIsoWeekday(input, this.localeData());
		      return this.day(this.day() % 7 ? weekday : weekday - 7);
		    } else {
		      return this.day() || 7;
		    }
		  }
		  function weekdaysRegex(isStrict) {
		    if (this._weekdaysParseExact) {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        computeWeekdaysParse.call(this);
		      }
		      if (isStrict) {
		        return this._weekdaysStrictRegex;
		      } else {
		        return this._weekdaysRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        this._weekdaysRegex = defaultWeekdaysRegex;
		      }
		      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
		    }
		  }
		  function weekdaysShortRegex(isStrict) {
		    if (this._weekdaysParseExact) {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        computeWeekdaysParse.call(this);
		      }
		      if (isStrict) {
		        return this._weekdaysShortStrictRegex;
		      } else {
		        return this._weekdaysShortRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
		        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
		      }
		      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
		    }
		  }
		  function weekdaysMinRegex(isStrict) {
		    if (this._weekdaysParseExact) {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        computeWeekdaysParse.call(this);
		      }
		      if (isStrict) {
		        return this._weekdaysMinStrictRegex;
		      } else {
		        return this._weekdaysMinRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
		        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
		      }
		      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
		    }
		  }
		  function computeWeekdaysParse() {
		    function cmpLenRev(a, b) {
		      return b.length - a.length;
		    }
		    var minPieces = [],
		      shortPieces = [],
		      longPieces = [],
		      mixedPieces = [],
		      i,
		      mom,
		      minp,
		      shortp,
		      longp;
		    for (i = 0; i < 7; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, 1]).day(i);
		      minp = regexEscape(this.weekdaysMin(mom, ''));
		      shortp = regexEscape(this.weekdaysShort(mom, ''));
		      longp = regexEscape(this.weekdays(mom, ''));
		      minPieces.push(minp);
		      shortPieces.push(shortp);
		      longPieces.push(longp);
		      mixedPieces.push(minp);
		      mixedPieces.push(shortp);
		      mixedPieces.push(longp);
		    }
		    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
		    // will match the longer piece.
		    minPieces.sort(cmpLenRev);
		    shortPieces.sort(cmpLenRev);
		    longPieces.sort(cmpLenRev);
		    mixedPieces.sort(cmpLenRev);
		    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		    this._weekdaysShortRegex = this._weekdaysRegex;
		    this._weekdaysMinRegex = this._weekdaysRegex;
		    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
		    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
		    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
		  }

		  // FORMATTING

		  function hFormat() {
		    return this.hours() % 12 || 12;
		  }
		  function kFormat() {
		    return this.hours() || 24;
		  }
		  addFormatToken('H', ['HH', 2], 0, 'hour');
		  addFormatToken('h', ['hh', 2], 0, hFormat);
		  addFormatToken('k', ['kk', 2], 0, kFormat);
		  addFormatToken('hmm', 0, 0, function () {
		    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
		  });
		  addFormatToken('hmmss', 0, 0, function () {
		    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
		  });
		  addFormatToken('Hmm', 0, 0, function () {
		    return '' + this.hours() + zeroFill(this.minutes(), 2);
		  });
		  addFormatToken('Hmmss', 0, 0, function () {
		    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
		  });
		  function meridiem(token, lowercase) {
		    addFormatToken(token, 0, 0, function () {
		      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
		    });
		  }
		  meridiem('a', true);
		  meridiem('A', false);

		  // PARSING

		  function matchMeridiem(isStrict, locale) {
		    return locale._meridiemParse;
		  }
		  addRegexToken('a', matchMeridiem);
		  addRegexToken('A', matchMeridiem);
		  addRegexToken('H', match1to2, match1to2HasZero);
		  addRegexToken('h', match1to2, match1to2NoLeadingZero);
		  addRegexToken('k', match1to2, match1to2NoLeadingZero);
		  addRegexToken('HH', match1to2, match2);
		  addRegexToken('hh', match1to2, match2);
		  addRegexToken('kk', match1to2, match2);
		  addRegexToken('hmm', match3to4);
		  addRegexToken('hmmss', match5to6);
		  addRegexToken('Hmm', match3to4);
		  addRegexToken('Hmmss', match5to6);
		  addParseToken(['H', 'HH'], HOUR);
		  addParseToken(['k', 'kk'], function (input, array, config) {
		    var kInput = toInt(input);
		    array[HOUR] = kInput === 24 ? 0 : kInput;
		  });
		  addParseToken(['a', 'A'], function (input, array, config) {
		    config._isPm = config._locale.isPM(input);
		    config._meridiem = input;
		  });
		  addParseToken(['h', 'hh'], function (input, array, config) {
		    array[HOUR] = toInt(input);
		    getParsingFlags(config).bigHour = true;
		  });
		  addParseToken('hmm', function (input, array, config) {
		    var pos = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos));
		    array[MINUTE] = toInt(input.substr(pos));
		    getParsingFlags(config).bigHour = true;
		  });
		  addParseToken('hmmss', function (input, array, config) {
		    var pos1 = input.length - 4,
		      pos2 = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos1));
		    array[MINUTE] = toInt(input.substr(pos1, 2));
		    array[SECOND] = toInt(input.substr(pos2));
		    getParsingFlags(config).bigHour = true;
		  });
		  addParseToken('Hmm', function (input, array, config) {
		    var pos = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos));
		    array[MINUTE] = toInt(input.substr(pos));
		  });
		  addParseToken('Hmmss', function (input, array, config) {
		    var pos1 = input.length - 4,
		      pos2 = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos1));
		    array[MINUTE] = toInt(input.substr(pos1, 2));
		    array[SECOND] = toInt(input.substr(pos2));
		  });

		  // LOCALES

		  function localeIsPM(input) {
		    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
		    // Using charAt should be more compatible.
		    return (input + '').toLowerCase().charAt(0) === 'p';
		  }
		  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
		    // Setting the hour should keep the time, because the user explicitly
		    // specified which hour they want. So trying to maintain the same hour (in
		    // a new timezone) makes sense. Adding/subtracting hours does not follow
		    // this rule.
		    getSetHour = makeGetSet('Hours', true);
		  function localeMeridiem(hours, minutes, isLower) {
		    if (hours > 11) {
		      return isLower ? 'pm' : 'PM';
		    } else {
		      return isLower ? 'am' : 'AM';
		    }
		  }
		  var baseConfig = {
		    calendar: defaultCalendar,
		    longDateFormat: defaultLongDateFormat,
		    invalidDate: defaultInvalidDate,
		    ordinal: defaultOrdinal,
		    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
		    relativeTime: defaultRelativeTime,
		    months: defaultLocaleMonths,
		    monthsShort: defaultLocaleMonthsShort,
		    week: defaultLocaleWeek,
		    weekdays: defaultLocaleWeekdays,
		    weekdaysMin: defaultLocaleWeekdaysMin,
		    weekdaysShort: defaultLocaleWeekdaysShort,
		    meridiemParse: defaultLocaleMeridiemParse
		  };

		  // internal storage for locale config files
		  var locales = {},
		    localeFamilies = {},
		    globalLocale;
		  function commonPrefix(arr1, arr2) {
		    var i,
		      minl = Math.min(arr1.length, arr2.length);
		    for (i = 0; i < minl; i += 1) {
		      if (arr1[i] !== arr2[i]) {
		        return i;
		      }
		    }
		    return minl;
		  }
		  function normalizeLocale(key) {
		    return key ? key.toLowerCase().replace('_', '-') : key;
		  }

		  // pick the locale from the array
		  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
		  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
		  function chooseLocale(names) {
		    var i = 0,
		      j,
		      next,
		      locale,
		      split;
		    while (i < names.length) {
		      split = normalizeLocale(names[i]).split('-');
		      j = split.length;
		      next = normalizeLocale(names[i + 1]);
		      next = next ? next.split('-') : null;
		      while (j > 0) {
		        locale = loadLocale(split.slice(0, j).join('-'));
		        if (locale) {
		          return locale;
		        }
		        if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
		          //the next array item is better than a shallower substring of this one
		          break;
		        }
		        j--;
		      }
		      i++;
		    }
		    return globalLocale;
		  }
		  function isLocaleNameSane(name) {
		    // Prevent names that look like filesystem paths, i.e contain '/' or '\'
		    // Ensure name is available and function returns boolean
		    return !!(name && name.match('^[^/\\\\]*$'));
		  }
		  function loadLocale(name) {
		    var oldLocale = null,
		      aliasedRequire;
		    // TODO: Find a better way to register and load all the locales in Node
		    if (locales[name] === undefined && 'object' !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
		      try {
		        oldLocale = globalLocale._abbr;
		        aliasedRequire = commonjsRequire;
		        aliasedRequire('./locale/' + name);
		        getSetGlobalLocale(oldLocale);
		      } catch (e) {
		        // mark as not found to avoid repeating expensive file require call causing high CPU
		        // when trying to find en-US, en_US, en-us for every format call
		        locales[name] = null; // null means not found
		      }
		    }
		    return locales[name];
		  }

		  // This function will load locale and then set the global locale.  If
		  // no arguments are passed in, it will simply return the current global
		  // locale key.
		  function getSetGlobalLocale(key, values) {
		    var data;
		    if (key) {
		      if (isUndefined(values)) {
		        data = getLocale(key);
		      } else {
		        data = defineLocale(key, values);
		      }
		      if (data) {
		        // moment.duration._locale = moment._locale = data;
		        globalLocale = data;
		      } else {
		        if (typeof console !== 'undefined' && console.warn) {
		          //warn user if arguments are passed but the locale could not be set
		          console.warn('Locale ' + key + ' not found. Did you forget to load it?');
		        }
		      }
		    }
		    return globalLocale._abbr;
		  }
		  function defineLocale(name, config) {
		    if (config !== null) {
		      var locale,
		        parentConfig = baseConfig;
		      config.abbr = name;
		      if (locales[name] != null) {
		        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
		        parentConfig = locales[name]._config;
		      } else if (config.parentLocale != null) {
		        if (locales[config.parentLocale] != null) {
		          parentConfig = locales[config.parentLocale]._config;
		        } else {
		          locale = loadLocale(config.parentLocale);
		          if (locale != null) {
		            parentConfig = locale._config;
		          } else {
		            if (!localeFamilies[config.parentLocale]) {
		              localeFamilies[config.parentLocale] = [];
		            }
		            localeFamilies[config.parentLocale].push({
		              name: name,
		              config: config
		            });
		            return null;
		          }
		        }
		      }
		      locales[name] = new Locale(mergeConfigs(parentConfig, config));
		      if (localeFamilies[name]) {
		        localeFamilies[name].forEach(function (x) {
		          defineLocale(x.name, x.config);
		        });
		      }

		      // backwards compat for now: also set the locale
		      // make sure we set the locale AFTER all child locales have been
		      // created, so we won't end up with the child locale set.
		      getSetGlobalLocale(name);
		      return locales[name];
		    } else {
		      // useful for testing
		      delete locales[name];
		      return null;
		    }
		  }
		  function updateLocale(name, config) {
		    if (config != null) {
		      var locale,
		        tmpLocale,
		        parentConfig = baseConfig;
		      if (locales[name] != null && locales[name].parentLocale != null) {
		        // Update existing child locale in-place to avoid memory-leaks
		        locales[name].set(mergeConfigs(locales[name]._config, config));
		      } else {
		        // MERGE
		        tmpLocale = loadLocale(name);
		        if (tmpLocale != null) {
		          parentConfig = tmpLocale._config;
		        }
		        config = mergeConfigs(parentConfig, config);
		        if (tmpLocale == null) {
		          // updateLocale is called for creating a new locale
		          // Set abbr so it will have a name (getters return
		          // undefined otherwise).
		          config.abbr = name;
		        }
		        locale = new Locale(config);
		        locale.parentLocale = locales[name];
		        locales[name] = locale;
		      }

		      // backwards compat for now: also set the locale
		      getSetGlobalLocale(name);
		    } else {
		      // pass null for config to unupdate, useful for tests
		      if (locales[name] != null) {
		        if (locales[name].parentLocale != null) {
		          locales[name] = locales[name].parentLocale;
		          if (name === getSetGlobalLocale()) {
		            getSetGlobalLocale(name);
		          }
		        } else if (locales[name] != null) {
		          delete locales[name];
		        }
		      }
		    }
		    return locales[name];
		  }

		  // returns locale data
		  function getLocale(key) {
		    var locale;
		    if (key && key._locale && key._locale._abbr) {
		      key = key._locale._abbr;
		    }
		    if (!key) {
		      return globalLocale;
		    }
		    if (!isArray(key)) {
		      //short-circuit everything else
		      locale = loadLocale(key);
		      if (locale) {
		        return locale;
		      }
		      key = [key];
		    }
		    return chooseLocale(key);
		  }
		  function listLocales() {
		    return keys(locales);
		  }
		  function checkOverflow(m) {
		    var overflow,
		      a = m._a;
		    if (a && getParsingFlags(m).overflow === -2) {
		      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
		      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
		        overflow = DATE;
		      }
		      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
		        overflow = WEEK;
		      }
		      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
		        overflow = WEEKDAY;
		      }
		      getParsingFlags(m).overflow = overflow;
		    }
		    return m;
		  }

		  // iso 8601 regex
		  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
		  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
		    isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
		    // iso time formats and regexes
		    isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
		    aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
		    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
		    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
		    obsOffsets = {
		      UT: 0,
		      GMT: 0,
		      EDT: -4 * 60,
		      EST: -5 * 60,
		      CDT: -5 * 60,
		      CST: -6 * 60,
		      MDT: -6 * 60,
		      MST: -7 * 60,
		      PDT: -7 * 60,
		      PST: -8 * 60
		    };

		  // date from iso format
		  function configFromISO(config) {
		    var i,
		      l,
		      string = config._i,
		      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
		      allowTime,
		      dateFormat,
		      timeFormat,
		      tzFormat,
		      isoDatesLen = isoDates.length,
		      isoTimesLen = isoTimes.length;
		    if (match) {
		      getParsingFlags(config).iso = true;
		      for (i = 0, l = isoDatesLen; i < l; i++) {
		        if (isoDates[i][1].exec(match[1])) {
		          dateFormat = isoDates[i][0];
		          allowTime = isoDates[i][2] !== false;
		          break;
		        }
		      }
		      if (dateFormat == null) {
		        config._isValid = false;
		        return;
		      }
		      if (match[3]) {
		        for (i = 0, l = isoTimesLen; i < l; i++) {
		          if (isoTimes[i][1].exec(match[3])) {
		            // match[2] should be 'T' or space
		            timeFormat = (match[2] || ' ') + isoTimes[i][0];
		            break;
		          }
		        }
		        if (timeFormat == null) {
		          config._isValid = false;
		          return;
		        }
		      }
		      if (!allowTime && timeFormat != null) {
		        config._isValid = false;
		        return;
		      }
		      if (match[4]) {
		        if (tzRegex.exec(match[4])) {
		          tzFormat = 'Z';
		        } else {
		          config._isValid = false;
		          return;
		        }
		      }
		      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
		      configFromStringAndFormat(config);
		    } else {
		      config._isValid = false;
		    }
		  }
		  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
		    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
		    if (secondStr) {
		      result.push(parseInt(secondStr, 10));
		    }
		    return result;
		  }
		  function untruncateYear(yearStr) {
		    var year = parseInt(yearStr, 10);
		    if (year <= 49) {
		      return 2000 + year;
		    } else if (year <= 999) {
		      return 1900 + year;
		    }
		    return year;
		  }
		  function preprocessRFC2822(s) {
		    // Remove comments and folding whitespace and replace multiple-spaces with a single space
		    return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
		  }
		  function checkWeekday(weekdayStr, parsedInput, config) {
		    if (weekdayStr) {
		      // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
		      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
		        weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
		      if (weekdayProvided !== weekdayActual) {
		        getParsingFlags(config).weekdayMismatch = true;
		        config._isValid = false;
		        return false;
		      }
		    }
		    return true;
		  }
		  function calculateOffset(obsOffset, militaryOffset, numOffset) {
		    if (obsOffset) {
		      return obsOffsets[obsOffset];
		    } else if (militaryOffset) {
		      // the only allowed military tz is Z
		      return 0;
		    } else {
		      var hm = parseInt(numOffset, 10),
		        m = hm % 100,
		        h = (hm - m) / 100;
		      return h * 60 + m;
		    }
		  }

		  // date and time from ref 2822 format
		  function configFromRFC2822(config) {
		    var match = rfc2822.exec(preprocessRFC2822(config._i)),
		      parsedArray;
		    if (match) {
		      parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
		      if (!checkWeekday(match[1], parsedArray, config)) {
		        return;
		      }
		      config._a = parsedArray;
		      config._tzm = calculateOffset(match[8], match[9], match[10]);
		      config._d = createUTCDate.apply(null, config._a);
		      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
		      getParsingFlags(config).rfc2822 = true;
		    } else {
		      config._isValid = false;
		    }
		  }

		  // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
		  function configFromString(config) {
		    var matched = aspNetJsonRegex.exec(config._i);
		    if (matched !== null) {
		      config._d = new Date(+matched[1]);
		      return;
		    }
		    configFromISO(config);
		    if (config._isValid === false) {
		      delete config._isValid;
		    } else {
		      return;
		    }
		    configFromRFC2822(config);
		    if (config._isValid === false) {
		      delete config._isValid;
		    } else {
		      return;
		    }
		    if (config._strict) {
		      config._isValid = false;
		    } else {
		      // Final attempt, use Input Fallback
		      hooks.createFromInputFallback(config);
		    }
		  }
		  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
		    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
		  });

		  // Pick the first defined of two or three arguments.
		  function defaults(a, b, c) {
		    if (a != null) {
		      return a;
		    }
		    if (b != null) {
		      return b;
		    }
		    return c;
		  }
		  function currentDateArray(config) {
		    // hooks is actually the exported moment object
		    var nowValue = new Date(hooks.now());
		    if (config._useUTC) {
		      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
		    }
		    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
		  }

		  // convert an array to a date.
		  // the array should mirror the parameters below
		  // note: all values past the year are optional and will default to the lowest possible value.
		  // [year, month, day , hour, minute, second, millisecond]
		  function configFromArray(config) {
		    var i,
		      date,
		      input = [],
		      currentDate,
		      expectedWeekday,
		      yearToUse;
		    if (config._d) {
		      return;
		    }
		    currentDate = currentDateArray(config);

		    //compute day of the year from weeks and weekdays
		    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
		      dayOfYearFromWeekInfo(config);
		    }

		    //if the day of the year is set, figure out what it is
		    if (config._dayOfYear != null) {
		      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
		      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
		        getParsingFlags(config)._overflowDayOfYear = true;
		      }
		      date = createUTCDate(yearToUse, 0, config._dayOfYear);
		      config._a[MONTH] = date.getUTCMonth();
		      config._a[DATE] = date.getUTCDate();
		    }

		    // Default to current date.
		    // * if no year, month, day of month are given, default to today
		    // * if day of month is given, default month and year
		    // * if month is given, default only year
		    // * if year is given, don't default anything
		    for (i = 0; i < 3 && config._a[i] == null; ++i) {
		      config._a[i] = input[i] = currentDate[i];
		    }

		    // Zero out whatever was not defaulted, including time
		    for (; i < 7; i++) {
		      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
		    }

		    // Check for 24:00:00.000
		    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
		      config._nextDay = true;
		      config._a[HOUR] = 0;
		    }
		    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
		    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

		    // Apply timezone offset from input. The actual utcOffset can be changed
		    // with parseZone.
		    if (config._tzm != null) {
		      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
		    }
		    if (config._nextDay) {
		      config._a[HOUR] = 24;
		    }

		    // check for mismatching day of week
		    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
		      getParsingFlags(config).weekdayMismatch = true;
		    }
		  }
		  function dayOfYearFromWeekInfo(config) {
		    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
		    w = config._w;
		    if (w.GG != null || w.W != null || w.E != null) {
		      dow = 1;
		      doy = 4;

		      // TODO: We need to take the current isoWeekYear, but that depends on
		      // how we interpret now (local, utc, fixed offset). So create
		      // a now version of current config (take local/utc/offset flags, and
		      // create now).
		      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
		      week = defaults(w.W, 1);
		      weekday = defaults(w.E, 1);
		      if (weekday < 1 || weekday > 7) {
		        weekdayOverflow = true;
		      }
		    } else {
		      dow = config._locale._week.dow;
		      doy = config._locale._week.doy;
		      curWeek = weekOfYear(createLocal(), dow, doy);
		      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

		      // Default to current week.
		      week = defaults(w.w, curWeek.week);
		      if (w.d != null) {
		        // weekday -- low day numbers are considered next week
		        weekday = w.d;
		        if (weekday < 0 || weekday > 6) {
		          weekdayOverflow = true;
		        }
		      } else if (w.e != null) {
		        // local weekday -- counting starts from beginning of week
		        weekday = w.e + dow;
		        if (w.e < 0 || w.e > 6) {
		          weekdayOverflow = true;
		        }
		      } else {
		        // default to beginning of week
		        weekday = dow;
		      }
		    }
		    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
		      getParsingFlags(config)._overflowWeeks = true;
		    } else if (weekdayOverflow != null) {
		      getParsingFlags(config)._overflowWeekday = true;
		    } else {
		      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
		      config._a[YEAR] = temp.year;
		      config._dayOfYear = temp.dayOfYear;
		    }
		  }

		  // constant that refers to the ISO standard
		  hooks.ISO_8601 = function () {};

		  // constant that refers to the RFC 2822 form
		  hooks.RFC_2822 = function () {};

		  // date from string and format string
		  function configFromStringAndFormat(config) {
		    // TODO: Move this to another part of the creation flow to prevent circular deps
		    if (config._f === hooks.ISO_8601) {
		      configFromISO(config);
		      return;
		    }
		    if (config._f === hooks.RFC_2822) {
		      configFromRFC2822(config);
		      return;
		    }
		    config._a = [];
		    getParsingFlags(config).empty = true;

		    // This array is used to make a Date, either with `new Date` or `Date.UTC`
		    var string = '' + config._i,
		      i,
		      parsedInput,
		      tokens,
		      token,
		      skipped,
		      stringLength = string.length,
		      totalParsedInputLength = 0,
		      era,
		      tokenLen;
		    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
		    tokenLen = tokens.length;
		    for (i = 0; i < tokenLen; i++) {
		      token = tokens[i];
		      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
		      if (parsedInput) {
		        skipped = string.substr(0, string.indexOf(parsedInput));
		        if (skipped.length > 0) {
		          getParsingFlags(config).unusedInput.push(skipped);
		        }
		        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
		        totalParsedInputLength += parsedInput.length;
		      }
		      // don't parse if it's not a known token
		      if (formatTokenFunctions[token]) {
		        if (parsedInput) {
		          getParsingFlags(config).empty = false;
		        } else {
		          getParsingFlags(config).unusedTokens.push(token);
		        }
		        addTimeToArrayFromToken(token, parsedInput, config);
		      } else if (config._strict && !parsedInput) {
		        getParsingFlags(config).unusedTokens.push(token);
		      }
		    }

		    // add remaining unparsed input length to the string
		    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
		    if (string.length > 0) {
		      getParsingFlags(config).unusedInput.push(string);
		    }

		    // clear _12h flag if hour is <= 12
		    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
		      getParsingFlags(config).bigHour = undefined;
		    }
		    getParsingFlags(config).parsedDateParts = config._a.slice(0);
		    getParsingFlags(config).meridiem = config._meridiem;
		    // handle meridiem
		    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

		    // handle era
		    era = getParsingFlags(config).era;
		    if (era !== null) {
		      config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
		    }
		    configFromArray(config);
		    checkOverflow(config);
		  }
		  function meridiemFixWrap(locale, hour, meridiem) {
		    var isPm;
		    if (meridiem == null) {
		      // nothing to do
		      return hour;
		    }
		    if (locale.meridiemHour != null) {
		      return locale.meridiemHour(hour, meridiem);
		    } else if (locale.isPM != null) {
		      // Fallback
		      isPm = locale.isPM(meridiem);
		      if (isPm && hour < 12) {
		        hour += 12;
		      }
		      if (!isPm && hour === 12) {
		        hour = 0;
		      }
		      return hour;
		    } else {
		      // this is not supposed to happen
		      return hour;
		    }
		  }

		  // date from string and array of format strings
		  function configFromStringAndArray(config) {
		    var tempConfig,
		      bestMoment,
		      scoreToBeat,
		      i,
		      currentScore,
		      validFormatFound,
		      bestFormatIsValid = false,
		      configfLen = config._f.length;
		    if (configfLen === 0) {
		      getParsingFlags(config).invalidFormat = true;
		      config._d = new Date(NaN);
		      return;
		    }
		    for (i = 0; i < configfLen; i++) {
		      currentScore = 0;
		      validFormatFound = false;
		      tempConfig = copyConfig({}, config);
		      if (config._useUTC != null) {
		        tempConfig._useUTC = config._useUTC;
		      }
		      tempConfig._f = config._f[i];
		      configFromStringAndFormat(tempConfig);
		      if (isValid(tempConfig)) {
		        validFormatFound = true;
		      }

		      // if there is any input that was not parsed add a penalty for that format
		      currentScore += getParsingFlags(tempConfig).charsLeftOver;

		      //or tokens
		      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
		      getParsingFlags(tempConfig).score = currentScore;
		      if (!bestFormatIsValid) {
		        if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
		          scoreToBeat = currentScore;
		          bestMoment = tempConfig;
		          if (validFormatFound) {
		            bestFormatIsValid = true;
		          }
		        }
		      } else {
		        if (currentScore < scoreToBeat) {
		          scoreToBeat = currentScore;
		          bestMoment = tempConfig;
		        }
		      }
		    }
		    extend(config, bestMoment || tempConfig);
		  }
		  function configFromObject(config) {
		    if (config._d) {
		      return;
		    }
		    var i = normalizeObjectUnits(config._i),
		      dayOrDate = i.day === undefined ? i.date : i.day;
		    config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
		      return obj && parseInt(obj, 10);
		    });
		    configFromArray(config);
		  }
		  function createFromConfig(config) {
		    var res = new Moment(checkOverflow(prepareConfig(config)));
		    if (res._nextDay) {
		      // Adding is smart enough around DST
		      res.add(1, 'd');
		      res._nextDay = undefined;
		    }
		    return res;
		  }
		  function prepareConfig(config) {
		    var input = config._i,
		      format = config._f;
		    config._locale = config._locale || getLocale(config._l);
		    if (input === null || format === undefined && input === '') {
		      return createInvalid({
		        nullInput: true
		      });
		    }
		    if (typeof input === 'string') {
		      config._i = input = config._locale.preparse(input);
		    }
		    if (isMoment(input)) {
		      return new Moment(checkOverflow(input));
		    } else if (isDate(input)) {
		      config._d = input;
		    } else if (isArray(format)) {
		      configFromStringAndArray(config);
		    } else if (format) {
		      configFromStringAndFormat(config);
		    } else {
		      configFromInput(config);
		    }
		    if (!isValid(config)) {
		      config._d = null;
		    }
		    return config;
		  }
		  function configFromInput(config) {
		    var input = config._i;
		    if (isUndefined(input)) {
		      config._d = new Date(hooks.now());
		    } else if (isDate(input)) {
		      config._d = new Date(input.valueOf());
		    } else if (typeof input === 'string') {
		      configFromString(config);
		    } else if (isArray(input)) {
		      config._a = map(input.slice(0), function (obj) {
		        return parseInt(obj, 10);
		      });
		      configFromArray(config);
		    } else if (isObject(input)) {
		      configFromObject(config);
		    } else if (isNumber(input)) {
		      // from milliseconds
		      config._d = new Date(input);
		    } else {
		      hooks.createFromInputFallback(config);
		    }
		  }
		  function createLocalOrUTC(input, format, locale, strict, isUTC) {
		    var c = {};
		    if (format === true || format === false) {
		      strict = format;
		      format = undefined;
		    }
		    if (locale === true || locale === false) {
		      strict = locale;
		      locale = undefined;
		    }
		    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
		      input = undefined;
		    }
		    // object construction must be done this way.
		    // https://github.com/moment/moment/issues/1423
		    c._isAMomentObject = true;
		    c._useUTC = c._isUTC = isUTC;
		    c._l = locale;
		    c._i = input;
		    c._f = format;
		    c._strict = strict;
		    return createFromConfig(c);
		  }
		  function createLocal(input, format, locale, strict) {
		    return createLocalOrUTC(input, format, locale, strict, false);
		  }
		  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
		      var other = createLocal.apply(null, arguments);
		      if (this.isValid() && other.isValid()) {
		        return other < this ? this : other;
		      } else {
		        return createInvalid();
		      }
		    }),
		    prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
		      var other = createLocal.apply(null, arguments);
		      if (this.isValid() && other.isValid()) {
		        return other > this ? this : other;
		      } else {
		        return createInvalid();
		      }
		    });

		  // Pick a moment m from moments so that m[fn](other) is true for all
		  // other. This relies on the function fn to be transitive.
		  //
		  // moments should either be an array of moment objects or an array, whose
		  // first element is an array of moment objects.
		  function pickBy(fn, moments) {
		    var res, i;
		    if (moments.length === 1 && isArray(moments[0])) {
		      moments = moments[0];
		    }
		    if (!moments.length) {
		      return createLocal();
		    }
		    res = moments[0];
		    for (i = 1; i < moments.length; ++i) {
		      if (!moments[i].isValid() || moments[i][fn](res)) {
		        res = moments[i];
		      }
		    }
		    return res;
		  }

		  // TODO: Use [].sort instead?
		  function min() {
		    var args = [].slice.call(arguments, 0);
		    return pickBy('isBefore', args);
		  }
		  function max() {
		    var args = [].slice.call(arguments, 0);
		    return pickBy('isAfter', args);
		  }
		  var now = function () {
		    return Date.now ? Date.now() : +new Date();
		  };
		  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
		  function isDurationValid(m) {
		    var key,
		      unitHasDecimal = false,
		      i,
		      orderLen = ordering.length;
		    for (key in m) {
		      if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
		        return false;
		      }
		    }
		    for (i = 0; i < orderLen; ++i) {
		      if (m[ordering[i]]) {
		        if (unitHasDecimal) {
		          return false; // only allow non-integers for smallest unit
		        }
		        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
		          unitHasDecimal = true;
		        }
		      }
		    }
		    return true;
		  }
		  function isValid$1() {
		    return this._isValid;
		  }
		  function createInvalid$1() {
		    return createDuration(NaN);
		  }
		  function Duration(duration) {
		    var normalizedInput = normalizeObjectUnits(duration),
		      years = normalizedInput.year || 0,
		      quarters = normalizedInput.quarter || 0,
		      months = normalizedInput.month || 0,
		      weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
		      days = normalizedInput.day || 0,
		      hours = normalizedInput.hour || 0,
		      minutes = normalizedInput.minute || 0,
		      seconds = normalizedInput.second || 0,
		      milliseconds = normalizedInput.millisecond || 0;
		    this._isValid = isDurationValid(normalizedInput);

		    // representation for dateAddRemove
		    this._milliseconds = +milliseconds + seconds * 1e3 +
		    // 1000
		    minutes * 6e4 +
		    // 1000 * 60
		    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
		    // Because of dateAddRemove treats 24 hours as different from a
		    // day when working around DST, we need to store them separately
		    this._days = +days + weeks * 7;
		    // It is impossible to translate months into days without knowing
		    // which months you are are talking about, so we have to store
		    // it separately.
		    this._months = +months + quarters * 3 + years * 12;
		    this._data = {};
		    this._locale = getLocale();
		    this._bubble();
		  }
		  function isDuration(obj) {
		    return obj instanceof Duration;
		  }
		  function absRound(number) {
		    if (number < 0) {
		      return Math.round(-1 * number) * -1;
		    } else {
		      return Math.round(number);
		    }
		  }

		  // compare two arrays, return the number of differences
		  function compareArrays(array1, array2, dontConvert) {
		    var len = Math.min(array1.length, array2.length),
		      lengthDiff = Math.abs(array1.length - array2.length),
		      diffs = 0,
		      i;
		    for (i = 0; i < len; i++) {
		      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
		        diffs++;
		      }
		    }
		    return diffs + lengthDiff;
		  }

		  // FORMATTING

		  function offset(token, separator) {
		    addFormatToken(token, 0, 0, function () {
		      var offset = this.utcOffset(),
		        sign = '+';
		      if (offset < 0) {
		        offset = -offset;
		        sign = '-';
		      }
		      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
		    });
		  }
		  offset('Z', ':');
		  offset('ZZ', '');

		  // PARSING

		  addRegexToken('Z', matchShortOffset);
		  addRegexToken('ZZ', matchShortOffset);
		  addParseToken(['Z', 'ZZ'], function (input, array, config) {
		    config._useUTC = true;
		    config._tzm = offsetFromString(matchShortOffset, input);
		  });

		  // HELPERS

		  // timezone chunker
		  // '+10:00' > ['10',  '00']
		  // '-1530'  > ['-15', '30']
		  var chunkOffset = /([\+\-]|\d\d)/gi;
		  function offsetFromString(matcher, string) {
		    var matches = (string || '').match(matcher),
		      chunk,
		      parts,
		      minutes;
		    if (matches === null) {
		      return null;
		    }
		    chunk = matches[matches.length - 1] || [];
		    parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
		    minutes = +(parts[1] * 60) + toInt(parts[2]);
		    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
		  }

		  // Return a moment from input, that is local/utc/zone equivalent to model.
		  function cloneWithOffset(input, model) {
		    var res, diff;
		    if (model._isUTC) {
		      res = model.clone();
		      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
		      // Use low-level api, because this fn is low-level api.
		      res._d.setTime(res._d.valueOf() + diff);
		      hooks.updateOffset(res, false);
		      return res;
		    } else {
		      return createLocal(input).local();
		    }
		  }
		  function getDateOffset(m) {
		    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
		    // https://github.com/moment/moment/pull/1871
		    return -Math.round(m._d.getTimezoneOffset());
		  }

		  // HOOKS

		  // This function will be called whenever a moment is mutated.
		  // It is intended to keep the offset in sync with the timezone.
		  hooks.updateOffset = function () {};

		  // MOMENTS

		  // keepLocalTime = true means only change the timezone, without
		  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
		  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
		  // +0200, so we adjust the time as needed, to be valid.
		  //
		  // Keeping the time actually adds/subtracts (one hour)
		  // from the actual represented time. That is why we call updateOffset
		  // a second time. In case it wants us to change the offset again
		  // _changeInProgress == true case, then we have to adjust, because
		  // there is no such time in the given timezone.
		  function getSetOffset(input, keepLocalTime, keepMinutes) {
		    var offset = this._offset || 0,
		      localAdjust;
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }
		    if (input != null) {
		      if (typeof input === 'string') {
		        input = offsetFromString(matchShortOffset, input);
		        if (input === null) {
		          return this;
		        }
		      } else if (Math.abs(input) < 16 && !keepMinutes) {
		        input = input * 60;
		      }
		      if (!this._isUTC && keepLocalTime) {
		        localAdjust = getDateOffset(this);
		      }
		      this._offset = input;
		      this._isUTC = true;
		      if (localAdjust != null) {
		        this.add(localAdjust, 'm');
		      }
		      if (offset !== input) {
		        if (!keepLocalTime || this._changeInProgress) {
		          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
		        } else if (!this._changeInProgress) {
		          this._changeInProgress = true;
		          hooks.updateOffset(this, true);
		          this._changeInProgress = null;
		        }
		      }
		      return this;
		    } else {
		      return this._isUTC ? offset : getDateOffset(this);
		    }
		  }
		  function getSetZone(input, keepLocalTime) {
		    if (input != null) {
		      if (typeof input !== 'string') {
		        input = -input;
		      }
		      this.utcOffset(input, keepLocalTime);
		      return this;
		    } else {
		      return -this.utcOffset();
		    }
		  }
		  function setOffsetToUTC(keepLocalTime) {
		    return this.utcOffset(0, keepLocalTime);
		  }
		  function setOffsetToLocal(keepLocalTime) {
		    if (this._isUTC) {
		      this.utcOffset(0, keepLocalTime);
		      this._isUTC = false;
		      if (keepLocalTime) {
		        this.subtract(getDateOffset(this), 'm');
		      }
		    }
		    return this;
		  }
		  function setOffsetToParsedOffset() {
		    if (this._tzm != null) {
		      this.utcOffset(this._tzm, false, true);
		    } else if (typeof this._i === 'string') {
		      var tZone = offsetFromString(matchOffset, this._i);
		      if (tZone != null) {
		        this.utcOffset(tZone);
		      } else {
		        this.utcOffset(0, true);
		      }
		    }
		    return this;
		  }
		  function hasAlignedHourOffset(input) {
		    if (!this.isValid()) {
		      return false;
		    }
		    input = input ? createLocal(input).utcOffset() : 0;
		    return (this.utcOffset() - input) % 60 === 0;
		  }
		  function isDaylightSavingTime() {
		    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
		  }
		  function isDaylightSavingTimeShifted() {
		    if (!isUndefined(this._isDSTShifted)) {
		      return this._isDSTShifted;
		    }
		    var c = {},
		      other;
		    copyConfig(c, this);
		    c = prepareConfig(c);
		    if (c._a) {
		      other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
		      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
		    } else {
		      this._isDSTShifted = false;
		    }
		    return this._isDSTShifted;
		  }
		  function isLocal() {
		    return this.isValid() ? !this._isUTC : false;
		  }
		  function isUtcOffset() {
		    return this.isValid() ? this._isUTC : false;
		  }
		  function isUtc() {
		    return this.isValid() ? this._isUTC && this._offset === 0 : false;
		  }

		  // ASP.NET json date format regex
		  var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
		    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
		    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
		    // and further modified to allow for strings containing both week and day
		    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
		  function createDuration(input, key) {
		    var duration = input,
		      // matching against regexp is expensive, do it on demand
		      match = null,
		      sign,
		      ret,
		      diffRes;
		    if (isDuration(input)) {
		      duration = {
		        ms: input._milliseconds,
		        d: input._days,
		        M: input._months
		      };
		    } else if (isNumber(input) || !isNaN(+input)) {
		      duration = {};
		      if (key) {
		        duration[key] = +input;
		      } else {
		        duration.milliseconds = +input;
		      }
		    } else if (match = aspNetRegex.exec(input)) {
		      sign = match[1] === '-' ? -1 : 1;
		      duration = {
		        y: 0,
		        d: toInt(match[DATE]) * sign,
		        h: toInt(match[HOUR]) * sign,
		        m: toInt(match[MINUTE]) * sign,
		        s: toInt(match[SECOND]) * sign,
		        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
		      };
		    } else if (match = isoRegex.exec(input)) {
		      sign = match[1] === '-' ? -1 : 1;
		      duration = {
		        y: parseIso(match[2], sign),
		        M: parseIso(match[3], sign),
		        w: parseIso(match[4], sign),
		        d: parseIso(match[5], sign),
		        h: parseIso(match[6], sign),
		        m: parseIso(match[7], sign),
		        s: parseIso(match[8], sign)
		      };
		    } else if (duration == null) {
		      // checks for null or undefined
		      duration = {};
		    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
		      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
		      duration = {};
		      duration.ms = diffRes.milliseconds;
		      duration.M = diffRes.months;
		    }
		    ret = new Duration(duration);
		    if (isDuration(input) && hasOwnProp(input, '_locale')) {
		      ret._locale = input._locale;
		    }
		    if (isDuration(input) && hasOwnProp(input, '_isValid')) {
		      ret._isValid = input._isValid;
		    }
		    return ret;
		  }
		  createDuration.fn = Duration.prototype;
		  createDuration.invalid = createInvalid$1;
		  function parseIso(inp, sign) {
		    // We'd normally use ~~inp for this, but unfortunately it also
		    // converts floats to ints.
		    // inp may be undefined, so careful calling replace on it.
		    var res = inp && parseFloat(inp.replace(',', '.'));
		    // apply sign while we're at it
		    return (isNaN(res) ? 0 : res) * sign;
		  }
		  function positiveMomentsDifference(base, other) {
		    var res = {};
		    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
		    if (base.clone().add(res.months, 'M').isAfter(other)) {
		      --res.months;
		    }
		    res.milliseconds = +other - +base.clone().add(res.months, 'M');
		    return res;
		  }
		  function momentsDifference(base, other) {
		    var res;
		    if (!(base.isValid() && other.isValid())) {
		      return {
		        milliseconds: 0,
		        months: 0
		      };
		    }
		    other = cloneWithOffset(other, base);
		    if (base.isBefore(other)) {
		      res = positiveMomentsDifference(base, other);
		    } else {
		      res = positiveMomentsDifference(other, base);
		      res.milliseconds = -res.milliseconds;
		      res.months = -res.months;
		    }
		    return res;
		  }

		  // TODO: remove 'name' arg after deprecation is removed
		  function createAdder(direction, name) {
		    return function (val, period) {
		      var dur, tmp;
		      //invert the arguments, but complain about it
		      if (period !== null && !isNaN(+period)) {
		        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
		        tmp = val;
		        val = period;
		        period = tmp;
		      }
		      dur = createDuration(val, period);
		      addSubtract(this, dur, direction);
		      return this;
		    };
		  }
		  function addSubtract(mom, duration, isAdding, updateOffset) {
		    var milliseconds = duration._milliseconds,
		      days = absRound(duration._days),
		      months = absRound(duration._months);
		    if (!mom.isValid()) {
		      // No op
		      return;
		    }
		    updateOffset = updateOffset == null ? true : updateOffset;
		    if (months) {
		      setMonth(mom, get(mom, 'Month') + months * isAdding);
		    }
		    if (days) {
		      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
		    }
		    if (milliseconds) {
		      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
		    }
		    if (updateOffset) {
		      hooks.updateOffset(mom, days || months);
		    }
		  }
		  var add = createAdder(1, 'add'),
		    subtract = createAdder(-1, 'subtract');
		  function isString(input) {
		    return typeof input === 'string' || input instanceof String;
		  }

		  // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
		  function isMomentInput(input) {
		    return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
		  }
		  function isMomentInputObject(input) {
		    var objectTest = isObject(input) && !isObjectEmpty(input),
		      propertyTest = false,
		      properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
		      i,
		      property,
		      propertyLen = properties.length;
		    for (i = 0; i < propertyLen; i += 1) {
		      property = properties[i];
		      propertyTest = propertyTest || hasOwnProp(input, property);
		    }
		    return objectTest && propertyTest;
		  }
		  function isNumberOrStringArray(input) {
		    var arrayTest = isArray(input),
		      dataTypeTest = false;
		    if (arrayTest) {
		      dataTypeTest = input.filter(function (item) {
		        return !isNumber(item) && isString(input);
		      }).length === 0;
		    }
		    return arrayTest && dataTypeTest;
		  }
		  function isCalendarSpec(input) {
		    var objectTest = isObject(input) && !isObjectEmpty(input),
		      propertyTest = false,
		      properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
		      i,
		      property;
		    for (i = 0; i < properties.length; i += 1) {
		      property = properties[i];
		      propertyTest = propertyTest || hasOwnProp(input, property);
		    }
		    return objectTest && propertyTest;
		  }
		  function getCalendarFormat(myMoment, now) {
		    var diff = myMoment.diff(now, 'days', true);
		    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
		  }
		  function calendar$1(time, formats) {
		    // Support for single parameter, formats only overload to the calendar function
		    if (arguments.length === 1) {
		      if (!arguments[0]) {
		        time = undefined;
		        formats = undefined;
		      } else if (isMomentInput(arguments[0])) {
		        time = arguments[0];
		        formats = undefined;
		      } else if (isCalendarSpec(arguments[0])) {
		        formats = arguments[0];
		        time = undefined;
		      }
		    }
		    // We want to compare the start of today, vs this.
		    // Getting start-of-today depends on whether we're local/utc/offset or not.
		    var now = time || createLocal(),
		      sod = cloneWithOffset(now, this).startOf('day'),
		      format = hooks.calendarFormat(this, sod) || 'sameElse',
		      output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
		    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
		  }
		  function clone() {
		    return new Moment(this);
		  }
		  function isAfter(input, units) {
		    var localInput = isMoment(input) ? input : createLocal(input);
		    if (!(this.isValid() && localInput.isValid())) {
		      return false;
		    }
		    units = normalizeUnits(units) || 'millisecond';
		    if (units === 'millisecond') {
		      return this.valueOf() > localInput.valueOf();
		    } else {
		      return localInput.valueOf() < this.clone().startOf(units).valueOf();
		    }
		  }
		  function isBefore(input, units) {
		    var localInput = isMoment(input) ? input : createLocal(input);
		    if (!(this.isValid() && localInput.isValid())) {
		      return false;
		    }
		    units = normalizeUnits(units) || 'millisecond';
		    if (units === 'millisecond') {
		      return this.valueOf() < localInput.valueOf();
		    } else {
		      return this.clone().endOf(units).valueOf() < localInput.valueOf();
		    }
		  }
		  function isBetween(from, to, units, inclusivity) {
		    var localFrom = isMoment(from) ? from : createLocal(from),
		      localTo = isMoment(to) ? to : createLocal(to);
		    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
		      return false;
		    }
		    inclusivity = inclusivity || '()';
		    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
		  }
		  function isSame(input, units) {
		    var localInput = isMoment(input) ? input : createLocal(input),
		      inputMs;
		    if (!(this.isValid() && localInput.isValid())) {
		      return false;
		    }
		    units = normalizeUnits(units) || 'millisecond';
		    if (units === 'millisecond') {
		      return this.valueOf() === localInput.valueOf();
		    } else {
		      inputMs = localInput.valueOf();
		      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
		    }
		  }
		  function isSameOrAfter(input, units) {
		    return this.isSame(input, units) || this.isAfter(input, units);
		  }
		  function isSameOrBefore(input, units) {
		    return this.isSame(input, units) || this.isBefore(input, units);
		  }
		  function diff(input, units, asFloat) {
		    var that, zoneDelta, output;
		    if (!this.isValid()) {
		      return NaN;
		    }
		    that = cloneWithOffset(input, this);
		    if (!that.isValid()) {
		      return NaN;
		    }
		    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
		    units = normalizeUnits(units);
		    switch (units) {
		      case 'year':
		        output = monthDiff(this, that) / 12;
		        break;
		      case 'month':
		        output = monthDiff(this, that);
		        break;
		      case 'quarter':
		        output = monthDiff(this, that) / 3;
		        break;
		      case 'second':
		        output = (this - that) / 1e3;
		        break;
		      // 1000
		      case 'minute':
		        output = (this - that) / 6e4;
		        break;
		      // 1000 * 60
		      case 'hour':
		        output = (this - that) / 36e5;
		        break;
		      // 1000 * 60 * 60
		      case 'day':
		        output = (this - that - zoneDelta) / 864e5;
		        break;
		      // 1000 * 60 * 60 * 24, negate dst
		      case 'week':
		        output = (this - that - zoneDelta) / 6048e5;
		        break;
		      // 1000 * 60 * 60 * 24 * 7, negate dst
		      default:
		        output = this - that;
		    }
		    return asFloat ? output : absFloor(output);
		  }
		  function monthDiff(a, b) {
		    if (a.date() < b.date()) {
		      // end-of-month calculations work correct when the start month has more
		      // days than the end month.
		      return -monthDiff(b, a);
		    }
		    // difference in months
		    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
		      // b is in (anchor - 1 month, anchor + 1 month)
		      anchor = a.clone().add(wholeMonthDiff, 'months'),
		      anchor2,
		      adjust;
		    if (b - anchor < 0) {
		      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
		      // linear across the month
		      adjust = (b - anchor) / (anchor - anchor2);
		    } else {
		      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
		      // linear across the month
		      adjust = (b - anchor) / (anchor2 - anchor);
		    }

		    //check for negative zero, return zero if negative zero
		    return -(wholeMonthDiff + adjust) || 0;
		  }
		  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
		  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
		  function toString() {
		    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
		  }
		  function toISOString(keepOffset) {
		    if (!this.isValid()) {
		      return null;
		    }
		    var utc = keepOffset !== true,
		      m = utc ? this.clone().utc() : this;
		    if (m.year() < 0 || m.year() > 9999) {
		      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
		    }
		    if (isFunction(Date.prototype.toISOString)) {
		      // native implementation is ~50x faster, use it when we can
		      if (utc) {
		        return this.toDate().toISOString();
		      } else {
		        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
		      }
		    }
		    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
		  }

		  /**
		   * Return a human readable representation of a moment that can
		   * also be evaluated to get a new moment which is the same
		   *
		   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
		   */
		  function inspect() {
		    if (!this.isValid()) {
		      return 'moment.invalid(/* ' + this._i + ' */)';
		    }
		    var func = 'moment',
		      zone = '',
		      prefix,
		      year,
		      datetime,
		      suffix;
		    if (!this.isLocal()) {
		      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
		      zone = 'Z';
		    }
		    prefix = '[' + func + '("]';
		    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
		    datetime = '-MM-DD[T]HH:mm:ss.SSS';
		    suffix = zone + '[")]';
		    return this.format(prefix + year + datetime + suffix);
		  }
		  function format(inputString) {
		    if (!inputString) {
		      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
		    }
		    var output = formatMoment(this, inputString);
		    return this.localeData().postformat(output);
		  }
		  function from(time, withoutSuffix) {
		    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
		      return createDuration({
		        to: this,
		        from: time
		      }).locale(this.locale()).humanize(!withoutSuffix);
		    } else {
		      return this.localeData().invalidDate();
		    }
		  }
		  function fromNow(withoutSuffix) {
		    return this.from(createLocal(), withoutSuffix);
		  }
		  function to(time, withoutSuffix) {
		    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
		      return createDuration({
		        from: this,
		        to: time
		      }).locale(this.locale()).humanize(!withoutSuffix);
		    } else {
		      return this.localeData().invalidDate();
		    }
		  }
		  function toNow(withoutSuffix) {
		    return this.to(createLocal(), withoutSuffix);
		  }

		  // If passed a locale key, it will set the locale for this
		  // instance.  Otherwise, it will return the locale configuration
		  // variables for this instance.
		  function locale(key) {
		    var newLocaleData;
		    if (key === undefined) {
		      return this._locale._abbr;
		    } else {
		      newLocaleData = getLocale(key);
		      if (newLocaleData != null) {
		        this._locale = newLocaleData;
		      }
		      return this;
		    }
		  }
		  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
		    if (key === undefined) {
		      return this.localeData();
		    } else {
		      return this.locale(key);
		    }
		  });
		  function localeData() {
		    return this._locale;
		  }
		  var MS_PER_SECOND = 1000,
		    MS_PER_MINUTE = 60 * MS_PER_SECOND,
		    MS_PER_HOUR = 60 * MS_PER_MINUTE,
		    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

		  // actual modulo - handles negative numbers (for dates before 1970):
		  function mod$1(dividend, divisor) {
		    return (dividend % divisor + divisor) % divisor;
		  }
		  function localStartOfDate(y, m, d) {
		    // the date constructor remaps years 0-99 to 1900-1999
		    if (y < 100 && y >= 0) {
		      // preserve leap years using a full 400 year cycle, then reset
		      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
		    } else {
		      return new Date(y, m, d).valueOf();
		    }
		  }
		  function utcStartOfDate(y, m, d) {
		    // Date.UTC remaps years 0-99 to 1900-1999
		    if (y < 100 && y >= 0) {
		      // preserve leap years using a full 400 year cycle, then reset
		      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
		    } else {
		      return Date.UTC(y, m, d);
		    }
		  }
		  function startOf(units) {
		    var time, startOfDate;
		    units = normalizeUnits(units);
		    if (units === undefined || units === 'millisecond' || !this.isValid()) {
		      return this;
		    }
		    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
		    switch (units) {
		      case 'year':
		        time = startOfDate(this.year(), 0, 1);
		        break;
		      case 'quarter':
		        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
		        break;
		      case 'month':
		        time = startOfDate(this.year(), this.month(), 1);
		        break;
		      case 'week':
		        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
		        break;
		      case 'isoWeek':
		        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
		        break;
		      case 'day':
		      case 'date':
		        time = startOfDate(this.year(), this.month(), this.date());
		        break;
		      case 'hour':
		        time = this._d.valueOf();
		        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
		        break;
		      case 'minute':
		        time = this._d.valueOf();
		        time -= mod$1(time, MS_PER_MINUTE);
		        break;
		      case 'second':
		        time = this._d.valueOf();
		        time -= mod$1(time, MS_PER_SECOND);
		        break;
		    }
		    this._d.setTime(time);
		    hooks.updateOffset(this, true);
		    return this;
		  }
		  function endOf(units) {
		    var time, startOfDate;
		    units = normalizeUnits(units);
		    if (units === undefined || units === 'millisecond' || !this.isValid()) {
		      return this;
		    }
		    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
		    switch (units) {
		      case 'year':
		        time = startOfDate(this.year() + 1, 0, 1) - 1;
		        break;
		      case 'quarter':
		        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
		        break;
		      case 'month':
		        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
		        break;
		      case 'week':
		        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
		        break;
		      case 'isoWeek':
		        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
		        break;
		      case 'day':
		      case 'date':
		        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
		        break;
		      case 'hour':
		        time = this._d.valueOf();
		        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
		        break;
		      case 'minute':
		        time = this._d.valueOf();
		        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
		        break;
		      case 'second':
		        time = this._d.valueOf();
		        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
		        break;
		    }
		    this._d.setTime(time);
		    hooks.updateOffset(this, true);
		    return this;
		  }
		  function valueOf() {
		    return this._d.valueOf() - (this._offset || 0) * 60000;
		  }
		  function unix() {
		    return Math.floor(this.valueOf() / 1000);
		  }
		  function toDate() {
		    return new Date(this.valueOf());
		  }
		  function toArray() {
		    var m = this;
		    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
		  }
		  function toObject() {
		    var m = this;
		    return {
		      years: m.year(),
		      months: m.month(),
		      date: m.date(),
		      hours: m.hours(),
		      minutes: m.minutes(),
		      seconds: m.seconds(),
		      milliseconds: m.milliseconds()
		    };
		  }
		  function toJSON() {
		    // new Date(NaN).toJSON() === null
		    return this.isValid() ? this.toISOString() : null;
		  }
		  function isValid$2() {
		    return isValid(this);
		  }
		  function parsingFlags() {
		    return extend({}, getParsingFlags(this));
		  }
		  function invalidAt() {
		    return getParsingFlags(this).overflow;
		  }
		  function creationData() {
		    return {
		      input: this._i,
		      format: this._f,
		      locale: this._locale,
		      isUTC: this._isUTC,
		      strict: this._strict
		    };
		  }
		  addFormatToken('N', 0, 0, 'eraAbbr');
		  addFormatToken('NN', 0, 0, 'eraAbbr');
		  addFormatToken('NNN', 0, 0, 'eraAbbr');
		  addFormatToken('NNNN', 0, 0, 'eraName');
		  addFormatToken('NNNNN', 0, 0, 'eraNarrow');
		  addFormatToken('y', ['y', 1], 'yo', 'eraYear');
		  addFormatToken('y', ['yy', 2], 0, 'eraYear');
		  addFormatToken('y', ['yyy', 3], 0, 'eraYear');
		  addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
		  addRegexToken('N', matchEraAbbr);
		  addRegexToken('NN', matchEraAbbr);
		  addRegexToken('NNN', matchEraAbbr);
		  addRegexToken('NNNN', matchEraName);
		  addRegexToken('NNNNN', matchEraNarrow);
		  addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
		    var era = config._locale.erasParse(input, token, config._strict);
		    if (era) {
		      getParsingFlags(config).era = era;
		    } else {
		      getParsingFlags(config).invalidEra = input;
		    }
		  });
		  addRegexToken('y', matchUnsigned);
		  addRegexToken('yy', matchUnsigned);
		  addRegexToken('yyy', matchUnsigned);
		  addRegexToken('yyyy', matchUnsigned);
		  addRegexToken('yo', matchEraYearOrdinal);
		  addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
		  addParseToken(['yo'], function (input, array, config, token) {
		    var match;
		    if (config._locale._eraYearOrdinalRegex) {
		      match = input.match(config._locale._eraYearOrdinalRegex);
		    }
		    if (config._locale.eraYearOrdinalParse) {
		      array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
		    } else {
		      array[YEAR] = parseInt(input, 10);
		    }
		  });
		  function localeEras(m, format) {
		    var i,
		      l,
		      date,
		      eras = this._eras || getLocale('en')._eras;
		    for (i = 0, l = eras.length; i < l; ++i) {
		      switch (typeof eras[i].since) {
		        case 'string':
		          // truncate time
		          date = hooks(eras[i].since).startOf('day');
		          eras[i].since = date.valueOf();
		          break;
		      }
		      switch (typeof eras[i].until) {
		        case 'undefined':
		          eras[i].until = +Infinity;
		          break;
		        case 'string':
		          // truncate time
		          date = hooks(eras[i].until).startOf('day').valueOf();
		          eras[i].until = date.valueOf();
		          break;
		      }
		    }
		    return eras;
		  }
		  function localeErasParse(eraName, format, strict) {
		    var i,
		      l,
		      eras = this.eras(),
		      name,
		      abbr,
		      narrow;
		    eraName = eraName.toUpperCase();
		    for (i = 0, l = eras.length; i < l; ++i) {
		      name = eras[i].name.toUpperCase();
		      abbr = eras[i].abbr.toUpperCase();
		      narrow = eras[i].narrow.toUpperCase();
		      if (strict) {
		        switch (format) {
		          case 'N':
		          case 'NN':
		          case 'NNN':
		            if (abbr === eraName) {
		              return eras[i];
		            }
		            break;
		          case 'NNNN':
		            if (name === eraName) {
		              return eras[i];
		            }
		            break;
		          case 'NNNNN':
		            if (narrow === eraName) {
		              return eras[i];
		            }
		            break;
		        }
		      } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
		        return eras[i];
		      }
		    }
		  }
		  function localeErasConvertYear(era, year) {
		    var dir = era.since <= era.until ? +1 : -1;
		    if (year === undefined) {
		      return hooks(era.since).year();
		    } else {
		      return hooks(era.since).year() + (year - era.offset) * dir;
		    }
		  }
		  function getEraName() {
		    var i,
		      l,
		      val,
		      eras = this.localeData().eras();
		    for (i = 0, l = eras.length; i < l; ++i) {
		      // truncate time
		      val = this.clone().startOf('day').valueOf();
		      if (eras[i].since <= val && val <= eras[i].until) {
		        return eras[i].name;
		      }
		      if (eras[i].until <= val && val <= eras[i].since) {
		        return eras[i].name;
		      }
		    }
		    return '';
		  }
		  function getEraNarrow() {
		    var i,
		      l,
		      val,
		      eras = this.localeData().eras();
		    for (i = 0, l = eras.length; i < l; ++i) {
		      // truncate time
		      val = this.clone().startOf('day').valueOf();
		      if (eras[i].since <= val && val <= eras[i].until) {
		        return eras[i].narrow;
		      }
		      if (eras[i].until <= val && val <= eras[i].since) {
		        return eras[i].narrow;
		      }
		    }
		    return '';
		  }
		  function getEraAbbr() {
		    var i,
		      l,
		      val,
		      eras = this.localeData().eras();
		    for (i = 0, l = eras.length; i < l; ++i) {
		      // truncate time
		      val = this.clone().startOf('day').valueOf();
		      if (eras[i].since <= val && val <= eras[i].until) {
		        return eras[i].abbr;
		      }
		      if (eras[i].until <= val && val <= eras[i].since) {
		        return eras[i].abbr;
		      }
		    }
		    return '';
		  }
		  function getEraYear() {
		    var i,
		      l,
		      dir,
		      val,
		      eras = this.localeData().eras();
		    for (i = 0, l = eras.length; i < l; ++i) {
		      dir = eras[i].since <= eras[i].until ? +1 : -1;

		      // truncate time
		      val = this.clone().startOf('day').valueOf();
		      if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
		        return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
		      }
		    }
		    return this.year();
		  }
		  function erasNameRegex(isStrict) {
		    if (!hasOwnProp(this, '_erasNameRegex')) {
		      computeErasParse.call(this);
		    }
		    return isStrict ? this._erasNameRegex : this._erasRegex;
		  }
		  function erasAbbrRegex(isStrict) {
		    if (!hasOwnProp(this, '_erasAbbrRegex')) {
		      computeErasParse.call(this);
		    }
		    return isStrict ? this._erasAbbrRegex : this._erasRegex;
		  }
		  function erasNarrowRegex(isStrict) {
		    if (!hasOwnProp(this, '_erasNarrowRegex')) {
		      computeErasParse.call(this);
		    }
		    return isStrict ? this._erasNarrowRegex : this._erasRegex;
		  }
		  function matchEraAbbr(isStrict, locale) {
		    return locale.erasAbbrRegex(isStrict);
		  }
		  function matchEraName(isStrict, locale) {
		    return locale.erasNameRegex(isStrict);
		  }
		  function matchEraNarrow(isStrict, locale) {
		    return locale.erasNarrowRegex(isStrict);
		  }
		  function matchEraYearOrdinal(isStrict, locale) {
		    return locale._eraYearOrdinalRegex || matchUnsigned;
		  }
		  function computeErasParse() {
		    var abbrPieces = [],
		      namePieces = [],
		      narrowPieces = [],
		      mixedPieces = [],
		      i,
		      l,
		      erasName,
		      erasAbbr,
		      erasNarrow,
		      eras = this.eras();
		    for (i = 0, l = eras.length; i < l; ++i) {
		      erasName = regexEscape(eras[i].name);
		      erasAbbr = regexEscape(eras[i].abbr);
		      erasNarrow = regexEscape(eras[i].narrow);
		      namePieces.push(erasName);
		      abbrPieces.push(erasAbbr);
		      narrowPieces.push(erasNarrow);
		      mixedPieces.push(erasName);
		      mixedPieces.push(erasAbbr);
		      mixedPieces.push(erasNarrow);
		    }
		    this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		    this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
		    this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
		    this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
		  }

		  // FORMATTING

		  addFormatToken(0, ['gg', 2], 0, function () {
		    return this.weekYear() % 100;
		  });
		  addFormatToken(0, ['GG', 2], 0, function () {
		    return this.isoWeekYear() % 100;
		  });
		  function addWeekYearFormatToken(token, getter) {
		    addFormatToken(0, [token, token.length], 0, getter);
		  }
		  addWeekYearFormatToken('gggg', 'weekYear');
		  addWeekYearFormatToken('ggggg', 'weekYear');
		  addWeekYearFormatToken('GGGG', 'isoWeekYear');
		  addWeekYearFormatToken('GGGGG', 'isoWeekYear');

		  // ALIASES

		  // PARSING

		  addRegexToken('G', matchSigned);
		  addRegexToken('g', matchSigned);
		  addRegexToken('GG', match1to2, match2);
		  addRegexToken('gg', match1to2, match2);
		  addRegexToken('GGGG', match1to4, match4);
		  addRegexToken('gggg', match1to4, match4);
		  addRegexToken('GGGGG', match1to6, match6);
		  addRegexToken('ggggg', match1to6, match6);
		  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
		    week[token.substr(0, 2)] = toInt(input);
		  });
		  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
		    week[token] = hooks.parseTwoDigitYear(input);
		  });

		  // MOMENTS

		  function getSetWeekYear(input) {
		    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
		  }
		  function getSetISOWeekYear(input) {
		    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
		  }
		  function getISOWeeksInYear() {
		    return weeksInYear(this.year(), 1, 4);
		  }
		  function getISOWeeksInISOWeekYear() {
		    return weeksInYear(this.isoWeekYear(), 1, 4);
		  }
		  function getWeeksInYear() {
		    var weekInfo = this.localeData()._week;
		    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
		  }
		  function getWeeksInWeekYear() {
		    var weekInfo = this.localeData()._week;
		    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
		  }
		  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
		    var weeksTarget;
		    if (input == null) {
		      return weekOfYear(this, dow, doy).year;
		    } else {
		      weeksTarget = weeksInYear(input, dow, doy);
		      if (week > weeksTarget) {
		        week = weeksTarget;
		      }
		      return setWeekAll.call(this, input, week, weekday, dow, doy);
		    }
		  }
		  function setWeekAll(weekYear, week, weekday, dow, doy) {
		    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
		      date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
		    this.year(date.getUTCFullYear());
		    this.month(date.getUTCMonth());
		    this.date(date.getUTCDate());
		    return this;
		  }

		  // FORMATTING

		  addFormatToken('Q', 0, 'Qo', 'quarter');

		  // PARSING

		  addRegexToken('Q', match1);
		  addParseToken('Q', function (input, array) {
		    array[MONTH] = (toInt(input) - 1) * 3;
		  });

		  // MOMENTS

		  function getSetQuarter(input) {
		    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
		  }

		  // FORMATTING

		  addFormatToken('D', ['DD', 2], 'Do', 'date');

		  // PARSING

		  addRegexToken('D', match1to2, match1to2NoLeadingZero);
		  addRegexToken('DD', match1to2, match2);
		  addRegexToken('Do', function (isStrict, locale) {
		    // TODO: Remove "ordinalParse" fallback in next major release.
		    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
		  });
		  addParseToken(['D', 'DD'], DATE);
		  addParseToken('Do', function (input, array) {
		    array[DATE] = toInt(input.match(match1to2)[0]);
		  });

		  // MOMENTS

		  var getSetDayOfMonth = makeGetSet('Date', true);

		  // FORMATTING

		  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

		  // PARSING

		  addRegexToken('DDD', match1to3);
		  addRegexToken('DDDD', match3);
		  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
		    config._dayOfYear = toInt(input);
		  });

		  // HELPERS

		  // MOMENTS

		  function getSetDayOfYear(input) {
		    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
		    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
		  }

		  // FORMATTING

		  addFormatToken('m', ['mm', 2], 0, 'minute');

		  // PARSING

		  addRegexToken('m', match1to2, match1to2HasZero);
		  addRegexToken('mm', match1to2, match2);
		  addParseToken(['m', 'mm'], MINUTE);

		  // MOMENTS

		  var getSetMinute = makeGetSet('Minutes', false);

		  // FORMATTING

		  addFormatToken('s', ['ss', 2], 0, 'second');

		  // PARSING

		  addRegexToken('s', match1to2, match1to2HasZero);
		  addRegexToken('ss', match1to2, match2);
		  addParseToken(['s', 'ss'], SECOND);

		  // MOMENTS

		  var getSetSecond = makeGetSet('Seconds', false);

		  // FORMATTING

		  addFormatToken('S', 0, 0, function () {
		    return ~~(this.millisecond() / 100);
		  });
		  addFormatToken(0, ['SS', 2], 0, function () {
		    return ~~(this.millisecond() / 10);
		  });
		  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
		  addFormatToken(0, ['SSSS', 4], 0, function () {
		    return this.millisecond() * 10;
		  });
		  addFormatToken(0, ['SSSSS', 5], 0, function () {
		    return this.millisecond() * 100;
		  });
		  addFormatToken(0, ['SSSSSS', 6], 0, function () {
		    return this.millisecond() * 1000;
		  });
		  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
		    return this.millisecond() * 10000;
		  });
		  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
		    return this.millisecond() * 100000;
		  });
		  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
		    return this.millisecond() * 1000000;
		  });

		  // PARSING

		  addRegexToken('S', match1to3, match1);
		  addRegexToken('SS', match1to3, match2);
		  addRegexToken('SSS', match1to3, match3);
		  var token, getSetMillisecond;
		  for (token = 'SSSS'; token.length <= 9; token += 'S') {
		    addRegexToken(token, matchUnsigned);
		  }
		  function parseMs(input, array) {
		    array[MILLISECOND] = toInt(('0.' + input) * 1000);
		  }
		  for (token = 'S'; token.length <= 9; token += 'S') {
		    addParseToken(token, parseMs);
		  }
		  getSetMillisecond = makeGetSet('Milliseconds', false);

		  // FORMATTING

		  addFormatToken('z', 0, 0, 'zoneAbbr');
		  addFormatToken('zz', 0, 0, 'zoneName');

		  // MOMENTS

		  function getZoneAbbr() {
		    return this._isUTC ? 'UTC' : '';
		  }
		  function getZoneName() {
		    return this._isUTC ? 'Coordinated Universal Time' : '';
		  }
		  var proto = Moment.prototype;
		  proto.add = add;
		  proto.calendar = calendar$1;
		  proto.clone = clone;
		  proto.diff = diff;
		  proto.endOf = endOf;
		  proto.format = format;
		  proto.from = from;
		  proto.fromNow = fromNow;
		  proto.to = to;
		  proto.toNow = toNow;
		  proto.get = stringGet;
		  proto.invalidAt = invalidAt;
		  proto.isAfter = isAfter;
		  proto.isBefore = isBefore;
		  proto.isBetween = isBetween;
		  proto.isSame = isSame;
		  proto.isSameOrAfter = isSameOrAfter;
		  proto.isSameOrBefore = isSameOrBefore;
		  proto.isValid = isValid$2;
		  proto.lang = lang;
		  proto.locale = locale;
		  proto.localeData = localeData;
		  proto.max = prototypeMax;
		  proto.min = prototypeMin;
		  proto.parsingFlags = parsingFlags;
		  proto.set = stringSet;
		  proto.startOf = startOf;
		  proto.subtract = subtract;
		  proto.toArray = toArray;
		  proto.toObject = toObject;
		  proto.toDate = toDate;
		  proto.toISOString = toISOString;
		  proto.inspect = inspect;
		  if (typeof Symbol !== 'undefined' && Symbol.for != null) {
		    proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
		      return 'Moment<' + this.format() + '>';
		    };
		  }
		  proto.toJSON = toJSON;
		  proto.toString = toString;
		  proto.unix = unix;
		  proto.valueOf = valueOf;
		  proto.creationData = creationData;
		  proto.eraName = getEraName;
		  proto.eraNarrow = getEraNarrow;
		  proto.eraAbbr = getEraAbbr;
		  proto.eraYear = getEraYear;
		  proto.year = getSetYear;
		  proto.isLeapYear = getIsLeapYear;
		  proto.weekYear = getSetWeekYear;
		  proto.isoWeekYear = getSetISOWeekYear;
		  proto.quarter = proto.quarters = getSetQuarter;
		  proto.month = getSetMonth;
		  proto.daysInMonth = getDaysInMonth;
		  proto.week = proto.weeks = getSetWeek;
		  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
		  proto.weeksInYear = getWeeksInYear;
		  proto.weeksInWeekYear = getWeeksInWeekYear;
		  proto.isoWeeksInYear = getISOWeeksInYear;
		  proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
		  proto.date = getSetDayOfMonth;
		  proto.day = proto.days = getSetDayOfWeek;
		  proto.weekday = getSetLocaleDayOfWeek;
		  proto.isoWeekday = getSetISODayOfWeek;
		  proto.dayOfYear = getSetDayOfYear;
		  proto.hour = proto.hours = getSetHour;
		  proto.minute = proto.minutes = getSetMinute;
		  proto.second = proto.seconds = getSetSecond;
		  proto.millisecond = proto.milliseconds = getSetMillisecond;
		  proto.utcOffset = getSetOffset;
		  proto.utc = setOffsetToUTC;
		  proto.local = setOffsetToLocal;
		  proto.parseZone = setOffsetToParsedOffset;
		  proto.hasAlignedHourOffset = hasAlignedHourOffset;
		  proto.isDST = isDaylightSavingTime;
		  proto.isLocal = isLocal;
		  proto.isUtcOffset = isUtcOffset;
		  proto.isUtc = isUtc;
		  proto.isUTC = isUtc;
		  proto.zoneAbbr = getZoneAbbr;
		  proto.zoneName = getZoneName;
		  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
		  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
		  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
		  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
		  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
		  function createUnix(input) {
		    return createLocal(input * 1000);
		  }
		  function createInZone() {
		    return createLocal.apply(null, arguments).parseZone();
		  }
		  function preParsePostFormat(string) {
		    return string;
		  }
		  var proto$1 = Locale.prototype;
		  proto$1.calendar = calendar;
		  proto$1.longDateFormat = longDateFormat;
		  proto$1.invalidDate = invalidDate;
		  proto$1.ordinal = ordinal;
		  proto$1.preparse = preParsePostFormat;
		  proto$1.postformat = preParsePostFormat;
		  proto$1.relativeTime = relativeTime;
		  proto$1.pastFuture = pastFuture;
		  proto$1.set = set;
		  proto$1.eras = localeEras;
		  proto$1.erasParse = localeErasParse;
		  proto$1.erasConvertYear = localeErasConvertYear;
		  proto$1.erasAbbrRegex = erasAbbrRegex;
		  proto$1.erasNameRegex = erasNameRegex;
		  proto$1.erasNarrowRegex = erasNarrowRegex;
		  proto$1.months = localeMonths;
		  proto$1.monthsShort = localeMonthsShort;
		  proto$1.monthsParse = localeMonthsParse;
		  proto$1.monthsRegex = monthsRegex;
		  proto$1.monthsShortRegex = monthsShortRegex;
		  proto$1.week = localeWeek;
		  proto$1.firstDayOfYear = localeFirstDayOfYear;
		  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
		  proto$1.weekdays = localeWeekdays;
		  proto$1.weekdaysMin = localeWeekdaysMin;
		  proto$1.weekdaysShort = localeWeekdaysShort;
		  proto$1.weekdaysParse = localeWeekdaysParse;
		  proto$1.weekdaysRegex = weekdaysRegex;
		  proto$1.weekdaysShortRegex = weekdaysShortRegex;
		  proto$1.weekdaysMinRegex = weekdaysMinRegex;
		  proto$1.isPM = localeIsPM;
		  proto$1.meridiem = localeMeridiem;
		  function get$1(format, index, field, setter) {
		    var locale = getLocale(),
		      utc = createUTC().set(setter, index);
		    return locale[field](utc, format);
		  }
		  function listMonthsImpl(format, index, field) {
		    if (isNumber(format)) {
		      index = format;
		      format = undefined;
		    }
		    format = format || '';
		    if (index != null) {
		      return get$1(format, index, field, 'month');
		    }
		    var i,
		      out = [];
		    for (i = 0; i < 12; i++) {
		      out[i] = get$1(format, i, field, 'month');
		    }
		    return out;
		  }

		  // ()
		  // (5)
		  // (fmt, 5)
		  // (fmt)
		  // (true)
		  // (true, 5)
		  // (true, fmt, 5)
		  // (true, fmt)
		  function listWeekdaysImpl(localeSorted, format, index, field) {
		    if (typeof localeSorted === 'boolean') {
		      if (isNumber(format)) {
		        index = format;
		        format = undefined;
		      }
		      format = format || '';
		    } else {
		      format = localeSorted;
		      index = format;
		      localeSorted = false;
		      if (isNumber(format)) {
		        index = format;
		        format = undefined;
		      }
		      format = format || '';
		    }
		    var locale = getLocale(),
		      shift = localeSorted ? locale._week.dow : 0,
		      i,
		      out = [];
		    if (index != null) {
		      return get$1(format, (index + shift) % 7, field, 'day');
		    }
		    for (i = 0; i < 7; i++) {
		      out[i] = get$1(format, (i + shift) % 7, field, 'day');
		    }
		    return out;
		  }
		  function listMonths(format, index) {
		    return listMonthsImpl(format, index, 'months');
		  }
		  function listMonthsShort(format, index) {
		    return listMonthsImpl(format, index, 'monthsShort');
		  }
		  function listWeekdays(localeSorted, format, index) {
		    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
		  }
		  function listWeekdaysShort(localeSorted, format, index) {
		    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
		  }
		  function listWeekdaysMin(localeSorted, format, index) {
		    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
		  }
		  getSetGlobalLocale('en', {
		    eras: [{
		      since: '0001-01-01',
		      until: +Infinity,
		      offset: 1,
		      name: 'Anno Domini',
		      narrow: 'AD',
		      abbr: 'AD'
		    }, {
		      since: '0000-12-31',
		      until: -Infinity,
		      offset: 1,
		      name: 'Before Christ',
		      narrow: 'BC',
		      abbr: 'BC'
		    }],
		    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
		    ordinal: function (number) {
		      var b = number % 10,
		        output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
		      return number + output;
		    }
		  });

		  // Side effect imports

		  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
		  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
		  var mathAbs = Math.abs;
		  function abs() {
		    var data = this._data;
		    this._milliseconds = mathAbs(this._milliseconds);
		    this._days = mathAbs(this._days);
		    this._months = mathAbs(this._months);
		    data.milliseconds = mathAbs(data.milliseconds);
		    data.seconds = mathAbs(data.seconds);
		    data.minutes = mathAbs(data.minutes);
		    data.hours = mathAbs(data.hours);
		    data.months = mathAbs(data.months);
		    data.years = mathAbs(data.years);
		    return this;
		  }
		  function addSubtract$1(duration, input, value, direction) {
		    var other = createDuration(input, value);
		    duration._milliseconds += direction * other._milliseconds;
		    duration._days += direction * other._days;
		    duration._months += direction * other._months;
		    return duration._bubble();
		  }

		  // supports only 2.0-style add(1, 's') or add(duration)
		  function add$1(input, value) {
		    return addSubtract$1(this, input, value, 1);
		  }

		  // supports only 2.0-style subtract(1, 's') or subtract(duration)
		  function subtract$1(input, value) {
		    return addSubtract$1(this, input, value, -1);
		  }
		  function absCeil(number) {
		    if (number < 0) {
		      return Math.floor(number);
		    } else {
		      return Math.ceil(number);
		    }
		  }
		  function bubble() {
		    var milliseconds = this._milliseconds,
		      days = this._days,
		      months = this._months,
		      data = this._data,
		      seconds,
		      minutes,
		      hours,
		      years,
		      monthsFromDays;

		    // if we have a mix of positive and negative values, bubble down first
		    // check: https://github.com/moment/moment/issues/2166
		    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
		      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
		      days = 0;
		      months = 0;
		    }

		    // The following code bubbles up values, see the tests for
		    // examples of what that means.
		    data.milliseconds = milliseconds % 1000;
		    seconds = absFloor(milliseconds / 1000);
		    data.seconds = seconds % 60;
		    minutes = absFloor(seconds / 60);
		    data.minutes = minutes % 60;
		    hours = absFloor(minutes / 60);
		    data.hours = hours % 24;
		    days += absFloor(hours / 24);

		    // convert days to months
		    monthsFromDays = absFloor(daysToMonths(days));
		    months += monthsFromDays;
		    days -= absCeil(monthsToDays(monthsFromDays));

		    // 12 months -> 1 year
		    years = absFloor(months / 12);
		    months %= 12;
		    data.days = days;
		    data.months = months;
		    data.years = years;
		    return this;
		  }
		  function daysToMonths(days) {
		    // 400 years have 146097 days (taking into account leap year rules)
		    // 400 years have 12 months === 4800
		    return days * 4800 / 146097;
		  }
		  function monthsToDays(months) {
		    // the reverse of daysToMonths
		    return months * 146097 / 4800;
		  }
		  function as(units) {
		    if (!this.isValid()) {
		      return NaN;
		    }
		    var days,
		      months,
		      milliseconds = this._milliseconds;
		    units = normalizeUnits(units);
		    if (units === 'month' || units === 'quarter' || units === 'year') {
		      days = this._days + milliseconds / 864e5;
		      months = this._months + daysToMonths(days);
		      switch (units) {
		        case 'month':
		          return months;
		        case 'quarter':
		          return months / 3;
		        case 'year':
		          return months / 12;
		      }
		    } else {
		      // handle milliseconds separately because of floating point math errors (issue #1867)
		      days = this._days + Math.round(monthsToDays(this._months));
		      switch (units) {
		        case 'week':
		          return days / 7 + milliseconds / 6048e5;
		        case 'day':
		          return days + milliseconds / 864e5;
		        case 'hour':
		          return days * 24 + milliseconds / 36e5;
		        case 'minute':
		          return days * 1440 + milliseconds / 6e4;
		        case 'second':
		          return days * 86400 + milliseconds / 1000;
		        // Math.floor prevents floating point math errors here
		        case 'millisecond':
		          return Math.floor(days * 864e5) + milliseconds;
		        default:
		          throw new Error('Unknown unit ' + units);
		      }
		    }
		  }
		  function makeAs(alias) {
		    return function () {
		      return this.as(alias);
		    };
		  }
		  var asMilliseconds = makeAs('ms'),
		    asSeconds = makeAs('s'),
		    asMinutes = makeAs('m'),
		    asHours = makeAs('h'),
		    asDays = makeAs('d'),
		    asWeeks = makeAs('w'),
		    asMonths = makeAs('M'),
		    asQuarters = makeAs('Q'),
		    asYears = makeAs('y'),
		    valueOf$1 = asMilliseconds;
		  function clone$1() {
		    return createDuration(this);
		  }
		  function get$2(units) {
		    units = normalizeUnits(units);
		    return this.isValid() ? this[units + 's']() : NaN;
		  }
		  function makeGetter(name) {
		    return function () {
		      return this.isValid() ? this._data[name] : NaN;
		    };
		  }
		  var milliseconds = makeGetter('milliseconds'),
		    seconds = makeGetter('seconds'),
		    minutes = makeGetter('minutes'),
		    hours = makeGetter('hours'),
		    days = makeGetter('days'),
		    months = makeGetter('months'),
		    years = makeGetter('years');
		  function weeks() {
		    return absFloor(this.days() / 7);
		  }
		  var round = Math.round,
		    thresholds = {
		      ss: 44,
		      // a few seconds to seconds
		      s: 45,
		      // seconds to minute
		      m: 45,
		      // minutes to hour
		      h: 22,
		      // hours to day
		      d: 26,
		      // days to month/week
		      w: null,
		      // weeks to month
		      M: 11 // months to year
		    };

		  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
		  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
		    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
		  }
		  function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
		    var duration = createDuration(posNegDuration).abs(),
		      seconds = round(duration.as('s')),
		      minutes = round(duration.as('m')),
		      hours = round(duration.as('h')),
		      days = round(duration.as('d')),
		      months = round(duration.as('M')),
		      weeks = round(duration.as('w')),
		      years = round(duration.as('y')),
		      a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
		    if (thresholds.w != null) {
		      a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
		    }
		    a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
		    a[2] = withoutSuffix;
		    a[3] = +posNegDuration > 0;
		    a[4] = locale;
		    return substituteTimeAgo.apply(null, a);
		  }

		  // This function allows you to set the rounding function for relative time strings
		  function getSetRelativeTimeRounding(roundingFunction) {
		    if (roundingFunction === undefined) {
		      return round;
		    }
		    if (typeof roundingFunction === 'function') {
		      round = roundingFunction;
		      return true;
		    }
		    return false;
		  }

		  // This function allows you to set a threshold for relative time strings
		  function getSetRelativeTimeThreshold(threshold, limit) {
		    if (thresholds[threshold] === undefined) {
		      return false;
		    }
		    if (limit === undefined) {
		      return thresholds[threshold];
		    }
		    thresholds[threshold] = limit;
		    if (threshold === 's') {
		      thresholds.ss = limit - 1;
		    }
		    return true;
		  }
		  function humanize(argWithSuffix, argThresholds) {
		    if (!this.isValid()) {
		      return this.localeData().invalidDate();
		    }
		    var withSuffix = false,
		      th = thresholds,
		      locale,
		      output;
		    if (typeof argWithSuffix === 'object') {
		      argThresholds = argWithSuffix;
		      argWithSuffix = false;
		    }
		    if (typeof argWithSuffix === 'boolean') {
		      withSuffix = argWithSuffix;
		    }
		    if (typeof argThresholds === 'object') {
		      th = Object.assign({}, thresholds, argThresholds);
		      if (argThresholds.s != null && argThresholds.ss == null) {
		        th.ss = argThresholds.s - 1;
		      }
		    }
		    locale = this.localeData();
		    output = relativeTime$1(this, !withSuffix, th, locale);
		    if (withSuffix) {
		      output = locale.pastFuture(+this, output);
		    }
		    return locale.postformat(output);
		  }
		  var abs$1 = Math.abs;
		  function sign(x) {
		    return (x > 0) - (x < 0) || +x;
		  }
		  function toISOString$1() {
		    // for ISO strings we do not use the normal bubbling rules:
		    //  * milliseconds bubble up until they become hours
		    //  * days do not bubble at all
		    //  * months bubble up until they become years
		    // This is because there is no context-free conversion between hours and days
		    // (think of clock changes)
		    // and also not between days and months (28-31 days per month)
		    if (!this.isValid()) {
		      return this.localeData().invalidDate();
		    }
		    var seconds = abs$1(this._milliseconds) / 1000,
		      days = abs$1(this._days),
		      months = abs$1(this._months),
		      minutes,
		      hours,
		      years,
		      s,
		      total = this.asSeconds(),
		      totalSign,
		      ymSign,
		      daysSign,
		      hmsSign;
		    if (!total) {
		      // this is the same as C#'s (Noda) and python (isodate)...
		      // but not other JS (goog.date)
		      return 'P0D';
		    }

		    // 3600 seconds -> 60 minutes -> 1 hour
		    minutes = absFloor(seconds / 60);
		    hours = absFloor(minutes / 60);
		    seconds %= 60;
		    minutes %= 60;

		    // 12 months -> 1 year
		    years = absFloor(months / 12);
		    months %= 12;

		    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
		    s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
		    totalSign = total < 0 ? '-' : '';
		    ymSign = sign(this._months) !== sign(total) ? '-' : '';
		    daysSign = sign(this._days) !== sign(total) ? '-' : '';
		    hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
		    return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
		  }
		  var proto$2 = Duration.prototype;
		  proto$2.isValid = isValid$1;
		  proto$2.abs = abs;
		  proto$2.add = add$1;
		  proto$2.subtract = subtract$1;
		  proto$2.as = as;
		  proto$2.asMilliseconds = asMilliseconds;
		  proto$2.asSeconds = asSeconds;
		  proto$2.asMinutes = asMinutes;
		  proto$2.asHours = asHours;
		  proto$2.asDays = asDays;
		  proto$2.asWeeks = asWeeks;
		  proto$2.asMonths = asMonths;
		  proto$2.asQuarters = asQuarters;
		  proto$2.asYears = asYears;
		  proto$2.valueOf = valueOf$1;
		  proto$2._bubble = bubble;
		  proto$2.clone = clone$1;
		  proto$2.get = get$2;
		  proto$2.milliseconds = milliseconds;
		  proto$2.seconds = seconds;
		  proto$2.minutes = minutes;
		  proto$2.hours = hours;
		  proto$2.days = days;
		  proto$2.weeks = weeks;
		  proto$2.months = months;
		  proto$2.years = years;
		  proto$2.humanize = humanize;
		  proto$2.toISOString = toISOString$1;
		  proto$2.toString = toISOString$1;
		  proto$2.toJSON = toISOString$1;
		  proto$2.locale = locale;
		  proto$2.localeData = localeData;
		  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
		  proto$2.lang = lang;

		  // FORMATTING

		  addFormatToken('X', 0, 0, 'unix');
		  addFormatToken('x', 0, 0, 'valueOf');

		  // PARSING

		  addRegexToken('x', matchSigned);
		  addRegexToken('X', matchTimestamp);
		  addParseToken('X', function (input, array, config) {
		    config._d = new Date(parseFloat(input) * 1000);
		  });
		  addParseToken('x', function (input, array, config) {
		    config._d = new Date(toInt(input));
		  });

		  //! moment.js

		  hooks.version = '2.30.1';
		  setHookCallback(createLocal);
		  hooks.fn = proto;
		  hooks.min = min;
		  hooks.max = max;
		  hooks.now = now;
		  hooks.utc = createUTC;
		  hooks.unix = createUnix;
		  hooks.months = listMonths;
		  hooks.isDate = isDate;
		  hooks.locale = getSetGlobalLocale;
		  hooks.invalid = createInvalid;
		  hooks.duration = createDuration;
		  hooks.isMoment = isMoment;
		  hooks.weekdays = listWeekdays;
		  hooks.parseZone = createInZone;
		  hooks.localeData = getLocale;
		  hooks.isDuration = isDuration;
		  hooks.monthsShort = listMonthsShort;
		  hooks.weekdaysMin = listWeekdaysMin;
		  hooks.defineLocale = defineLocale;
		  hooks.updateLocale = updateLocale;
		  hooks.locales = listLocales;
		  hooks.weekdaysShort = listWeekdaysShort;
		  hooks.normalizeUnits = normalizeUnits;
		  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
		  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
		  hooks.calendarFormat = getCalendarFormat;
		  hooks.prototype = proto;

		  // currently HTML5 input type only supports 24-hour formats
		  hooks.HTML5_FMT = {
		    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
		    // <input type="datetime-local" />
		    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
		    // <input type="datetime-local" step="1" />
		    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
		    // <input type="datetime-local" step="0.001" />
		    DATE: 'YYYY-MM-DD',
		    // <input type="date" />
		    TIME: 'HH:mm',
		    // <input type="time" />
		    TIME_SECONDS: 'HH:mm:ss',
		    // <input type="time" step="1" />
		    TIME_MS: 'HH:mm:ss.SSS',
		    // <input type="time" step="0.001" />
		    WEEK: 'GGGG-[W]WW',
		    // <input type="week" />
		    MONTH: 'YYYY-MM' // <input type="month" />
		  };
		  return hooks;
		}); 
	} (moment$1));
	return moment$1.exports;
}

var generic = {};

var lodash_isequal = {exports: {}};

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_isequal.exports;

var hasRequiredLodash_isequal;

function requireLodash_isequal () {
	if (hasRequiredLodash_isequal) return lodash_isequal.exports;
	hasRequiredLodash_isequal = 1;
	(function (module, exports) {
		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/** Used to stand-in for `undefined` hash values. */
		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		/** Used to compose bitmasks for value comparisons. */
		var COMPARE_PARTIAL_FLAG = 1,
		  COMPARE_UNORDERED_FLAG = 2;

		/** Used as references for various `Number` constants. */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		  arrayTag = '[object Array]',
		  asyncTag = '[object AsyncFunction]',
		  boolTag = '[object Boolean]',
		  dateTag = '[object Date]',
		  errorTag = '[object Error]',
		  funcTag = '[object Function]',
		  genTag = '[object GeneratorFunction]',
		  mapTag = '[object Map]',
		  numberTag = '[object Number]',
		  nullTag = '[object Null]',
		  objectTag = '[object Object]',
		  promiseTag = '[object Promise]',
		  proxyTag = '[object Proxy]',
		  regexpTag = '[object RegExp]',
		  setTag = '[object Set]',
		  stringTag = '[object String]',
		  symbolTag = '[object Symbol]',
		  undefinedTag = '[object Undefined]',
		  weakMapTag = '[object WeakMap]';
		var arrayBufferTag = '[object ArrayBuffer]',
		  dataViewTag = '[object DataView]',
		  float32Tag = '[object Float32Array]',
		  float64Tag = '[object Float64Array]',
		  int8Tag = '[object Int8Array]',
		  int16Tag = '[object Int16Array]',
		  int32Tag = '[object Int32Array]',
		  uint8Tag = '[object Uint8Array]',
		  uint8ClampedTag = '[object Uint8ClampedArray]',
		  uint16Tag = '[object Uint16Array]',
		  uint32Tag = '[object Uint32Array]';

		/**
		 * Used to match `RegExp`
		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		 */
		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

		/** Used to detect host constructors (Safari). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = function () {
		  try {
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}();

		/* Node.js helper references. */
		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		/**
		 * A specialized version of `_.filter` for arrays without support for
		 * iteratee shorthands.
		 *
		 * @private
		 * @param {Array} [array] The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {Array} Returns the new filtered array.
		 */
		function arrayFilter(array, predicate) {
		  var index = -1,
		    length = array == null ? 0 : array.length,
		    resIndex = 0,
		    result = [];
		  while (++index < length) {
		    var value = array[index];
		    if (predicate(value, index, array)) {
		      result[resIndex++] = value;
		    }
		  }
		  return result;
		}

		/**
		 * Appends the elements of `values` to `array`.
		 *
		 * @private
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to append.
		 * @returns {Array} Returns `array`.
		 */
		function arrayPush(array, values) {
		  var index = -1,
		    length = values.length,
		    offset = array.length;
		  while (++index < length) {
		    array[offset + index] = values[index];
		  }
		  return array;
		}

		/**
		 * A specialized version of `_.some` for arrays without support for iteratee
		 * shorthands.
		 *
		 * @private
		 * @param {Array} [array] The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 */
		function arraySome(array, predicate) {
		  var index = -1,
		    length = array == null ? 0 : array.length;
		  while (++index < length) {
		    if (predicate(array[index], index, array)) {
		      return true;
		    }
		  }
		  return false;
		}

		/**
		 * The base implementation of `_.times` without support for iteratee shorthands
		 * or max array length checks.
		 *
		 * @private
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 */
		function baseTimes(n, iteratee) {
		  var index = -1,
		    result = Array(n);
		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.unary` without support for storing metadata.
		 *
		 * @private
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 */
		function baseUnary(func) {
		  return function (value) {
		    return func(value);
		  };
		}

		/**
		 * Checks if a `cache` value for `key` exists.
		 *
		 * @private
		 * @param {Object} cache The cache to query.
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function cacheHas(cache, key) {
		  return cache.has(key);
		}

		/**
		 * Gets the value at `key` of `object`.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function getValue(object, key) {
		  return object == null ? undefined : object[key];
		}

		/**
		 * Converts `map` to its key-value pairs.
		 *
		 * @private
		 * @param {Object} map The map to convert.
		 * @returns {Array} Returns the key-value pairs.
		 */
		function mapToArray(map) {
		  var index = -1,
		    result = Array(map.size);
		  map.forEach(function (value, key) {
		    result[++index] = [key, value];
		  });
		  return result;
		}

		/**
		 * Creates a unary function that invokes `func` with its argument transformed.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {Function} transform The argument transform.
		 * @returns {Function} Returns the new function.
		 */
		function overArg(func, transform) {
		  return function (arg) {
		    return func(transform(arg));
		  };
		}

		/**
		 * Converts `set` to an array of its values.
		 *
		 * @private
		 * @param {Object} set The set to convert.
		 * @returns {Array} Returns the values.
		 */
		function setToArray(set) {
		  var index = -1,
		    result = Array(set.size);
		  set.forEach(function (value) {
		    result[++index] = value;
		  });
		  return result;
		}

		/** Used for built-in method references. */
		var arrayProto = Array.prototype,
		  funcProto = Function.prototype,
		  objectProto = Object.prototype;

		/** Used to detect overreaching core-js shims. */
		var coreJsData = root['__core-js_shared__'];

		/** Used to resolve the decompiled source of functions. */
		var funcToString = funcProto.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to detect methods masquerading as native. */
		var maskSrcKey = function () {
		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		  return uid ? 'Symbol(src)_1.' + uid : '';
		}();

		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString = objectProto.toString;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined,
		  Symbol = root.Symbol,
		  Uint8Array = root.Uint8Array,
		  propertyIsEnumerable = objectProto.propertyIsEnumerable,
		  splice = arrayProto.splice,
		  symToStringTag = Symbol ? Symbol.toStringTag : undefined;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeGetSymbols = Object.getOwnPropertySymbols,
		  nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
		  nativeKeys = overArg(Object.keys, Object);

		/* Built-in method references that are verified to be native. */
		var DataView = getNative(root, 'DataView'),
		  Map = getNative(root, 'Map'),
		  Promise = getNative(root, 'Promise'),
		  Set = getNative(root, 'Set'),
		  WeakMap = getNative(root, 'WeakMap'),
		  nativeCreate = getNative(Object, 'create');

		/** Used to detect maps, sets, and weakmaps. */
		var dataViewCtorString = toSource(DataView),
		  mapCtorString = toSource(Map),
		  promiseCtorString = toSource(Promise),
		  setCtorString = toSource(Set),
		  weakMapCtorString = toSource(WeakMap);

		/** Used to convert symbols to primitives and strings. */
		var symbolProto = Symbol ? Symbol.prototype : undefined,
		  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

		/**
		 * Creates a hash object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Hash(entries) {
		  var index = -1,
		    length = entries == null ? 0 : entries.length;
		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the hash.
		 *
		 * @private
		 * @name clear
		 * @memberOf Hash
		 */
		function hashClear() {
		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the hash.
		 *
		 * @private
		 * @name delete
		 * @memberOf Hash
		 * @param {Object} hash The hash to modify.
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function hashDelete(key) {
		  var result = this.has(key) && delete this.__data__[key];
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the hash value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Hash
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function hashGet(key) {
		  var data = this.__data__;
		  if (nativeCreate) {
		    var result = data[key];
		    return result === HASH_UNDEFINED ? undefined : result;
		  }
		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		/**
		 * Checks if a hash value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Hash
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function hashHas(key) {
		  var data = this.__data__;
		  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
		}

		/**
		 * Sets the hash `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Hash
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the hash instance.
		 */
		function hashSet(key, value) {
		  var data = this.__data__;
		  this.size += this.has(key) ? 0 : 1;
		  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
		  return this;
		}

		// Add methods to `Hash`.
		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
		  var index = -1,
		    length = entries == null ? 0 : entries.length;
		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the list cache.
		 *
		 * @private
		 * @name clear
		 * @memberOf ListCache
		 */
		function listCacheClear() {
		  this.__data__ = [];
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
		  var data = this.__data__,
		    index = assocIndexOf(data, key);
		  if (index < 0) {
		    return false;
		  }
		  var lastIndex = data.length - 1;
		  if (index == lastIndex) {
		    data.pop();
		  } else {
		    splice.call(data, index, 1);
		  }
		  --this.size;
		  return true;
		}

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
		  var data = this.__data__,
		    index = assocIndexOf(data, key);
		  return index < 0 ? undefined : data[index][1];
		}

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
		  return assocIndexOf(this.__data__, key) > -1;
		}

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
		  var data = this.__data__,
		    index = assocIndexOf(data, key);
		  if (index < 0) {
		    ++this.size;
		    data.push([key, value]);
		  } else {
		    data[index][1] = value;
		  }
		  return this;
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		/**
		 * Creates a map cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function MapCache(entries) {
		  var index = -1,
		    length = entries == null ? 0 : entries.length;
		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the map.
		 *
		 * @private
		 * @name clear
		 * @memberOf MapCache
		 */
		function mapCacheClear() {
		  this.size = 0;
		  this.__data__ = {
		    'hash': new Hash(),
		    'map': new (Map || ListCache)(),
		    'string': new Hash()
		  };
		}

		/**
		 * Removes `key` and its value from the map.
		 *
		 * @private
		 * @name delete
		 * @memberOf MapCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function mapCacheDelete(key) {
		  var result = getMapData(this, key)['delete'](key);
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the map value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf MapCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function mapCacheGet(key) {
		  return getMapData(this, key).get(key);
		}

		/**
		 * Checks if a map value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf MapCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function mapCacheHas(key) {
		  return getMapData(this, key).has(key);
		}

		/**
		 * Sets the map `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf MapCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the map cache instance.
		 */
		function mapCacheSet(key, value) {
		  var data = getMapData(this, key),
		    size = data.size;
		  data.set(key, value);
		  this.size += data.size == size ? 0 : 1;
		  return this;
		}

		// Add methods to `MapCache`.
		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		/**
		 *
		 * Creates an array cache object to store unique values.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [values] The values to cache.
		 */
		function SetCache(values) {
		  var index = -1,
		    length = values == null ? 0 : values.length;
		  this.__data__ = new MapCache();
		  while (++index < length) {
		    this.add(values[index]);
		  }
		}

		/**
		 * Adds `value` to the array cache.
		 *
		 * @private
		 * @name add
		 * @memberOf SetCache
		 * @alias push
		 * @param {*} value The value to cache.
		 * @returns {Object} Returns the cache instance.
		 */
		function setCacheAdd(value) {
		  this.__data__.set(value, HASH_UNDEFINED);
		  return this;
		}

		/**
		 * Checks if `value` is in the array cache.
		 *
		 * @private
		 * @name has
		 * @memberOf SetCache
		 * @param {*} value The value to search for.
		 * @returns {number} Returns `true` if `value` is found, else `false`.
		 */
		function setCacheHas(value) {
		  return this.__data__.has(value);
		}

		// Add methods to `SetCache`.
		SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		SetCache.prototype.has = setCacheHas;

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
		  var data = this.__data__ = new ListCache(entries);
		  this.size = data.size;
		}

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
		  this.__data__ = new ListCache();
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the stack.
		 *
		 * @private
		 * @name delete
		 * @memberOf Stack
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function stackDelete(key) {
		  var data = this.__data__,
		    result = data['delete'](key);
		  this.size = data.size;
		  return result;
		}

		/**
		 * Gets the stack value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Stack
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function stackGet(key) {
		  return this.__data__.get(key);
		}

		/**
		 * Checks if a stack value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Stack
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function stackHas(key) {
		  return this.__data__.has(key);
		}

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
		  var data = this.__data__;
		  if (data instanceof ListCache) {
		    var pairs = data.__data__;
		    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
		      pairs.push([key, value]);
		      this.size = ++data.size;
		      return this;
		    }
		    data = this.__data__ = new MapCache(pairs);
		  }
		  data.set(key, value);
		  this.size = data.size;
		  return this;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  var isArr = isArray(value),
		    isArg = !isArr && isArguments(value),
		    isBuff = !isArr && !isArg && isBuffer(value),
		    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		    skipIndexes = isArr || isArg || isBuff || isType,
		    result = skipIndexes ? baseTimes(value.length, String) : [],
		    length = result.length;
		  for (var key in value) {
		    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
		    // Safari 9 has enumerable `arguments.length` in strict mode.
		    key == 'length' ||
		    // Node.js 0.10 has enumerable non-index properties on buffers.
		    isBuff && (key == 'offset' || key == 'parent') ||
		    // PhantomJS 2 has enumerable non-index properties on typed arrays.
		    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
		    // Skip index properties.
		    isIndex(key, length)))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
		  var length = array.length;
		  while (length--) {
		    if (eq(array[length][0], key)) {
		      return length;
		    }
		  }
		  return -1;
		}

		/**
		 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		 * symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @param {Function} symbolsFunc The function to get the symbols of `object`.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		  var result = keysFunc(object);
		  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		}

		/**
		 * The base implementation of `getTag` without fallbacks for buggy environments.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
		  if (value == null) {
		    return value === undefined ? undefinedTag : nullTag;
		  }
		  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
		}

		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
		  return isObjectLike(value) && baseGetTag(value) == argsTag;
		}

		/**
		 * The base implementation of `_.isEqual` which supports partial comparisons
		 * and tracks traversed objects.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {boolean} bitmask The bitmask flags.
		 *  1 - Unordered comparison
		 *  2 - Partial comparison
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 */
		function baseIsEqual(value, other, bitmask, customizer, stack) {
		  if (value === other) {
		    return true;
		  }
		  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
		    return value !== value && other !== other;
		  }
		  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		}

		/**
		 * A specialized version of `baseIsEqual` for arrays and objects which performs
		 * deep comparisons and tracks traversed objects enabling objects with circular
		 * references to be compared.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		  var objIsArr = isArray(object),
		    othIsArr = isArray(other),
		    objTag = objIsArr ? arrayTag : getTag(object),
		    othTag = othIsArr ? arrayTag : getTag(other);
		  objTag = objTag == argsTag ? objectTag : objTag;
		  othTag = othTag == argsTag ? objectTag : othTag;
		  var objIsObj = objTag == objectTag,
		    othIsObj = othTag == objectTag,
		    isSameTag = objTag == othTag;
		  if (isSameTag && isBuffer(object)) {
		    if (!isBuffer(other)) {
		      return false;
		    }
		    objIsArr = true;
		    objIsObj = false;
		  }
		  if (isSameTag && !objIsObj) {
		    stack || (stack = new Stack());
		    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		  }
		  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		      othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
		    if (objIsWrapped || othIsWrapped) {
		      var objUnwrapped = objIsWrapped ? object.value() : object,
		        othUnwrapped = othIsWrapped ? other.value() : other;
		      stack || (stack = new Stack());
		      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		    }
		  }
		  if (!isSameTag) {
		    return false;
		  }
		  stack || (stack = new Stack());
		  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		}

		/**
		 * The base implementation of `_.isNative` without bad shim checks.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 */
		function baseIsNative(value) {
		  if (!isObject(value) || isMasked(value)) {
		    return false;
		  }
		  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		  return pattern.test(toSource(value));
		}

		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
		  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		}

		/**
		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeys(object) {
		  if (!isPrototype(object)) {
		    return nativeKeys(object);
		  }
		  var result = [];
		  for (var key in Object(object)) {
		    if (hasOwnProperty.call(object, key) && key != 'constructor') {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for arrays with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Array} array The array to compare.
		 * @param {Array} other The other array to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `array` and `other` objects.
		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		 */
		function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		    arrLength = array.length,
		    othLength = other.length;
		  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		    return false;
		  }
		  // Assume cyclic values are equal.
		  var stacked = stack.get(array);
		  if (stacked && stack.get(other)) {
		    return stacked == other;
		  }
		  var index = -1,
		    result = true,
		    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
		  stack.set(array, other);
		  stack.set(other, array);

		  // Ignore non-index properties.
		  while (++index < arrLength) {
		    var arrValue = array[index],
		      othValue = other[index];
		    if (customizer) {
		      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
		    }
		    if (compared !== undefined) {
		      if (compared) {
		        continue;
		      }
		      result = false;
		      break;
		    }
		    // Recursively compare arrays (susceptible to call stack limits).
		    if (seen) {
		      if (!arraySome(other, function (othValue, othIndex) {
		        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		          return seen.push(othIndex);
		        }
		      })) {
		        result = false;
		        break;
		      }
		    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		      result = false;
		      break;
		    }
		  }
		  stack['delete'](array);
		  stack['delete'](other);
		  return result;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for comparing objects of
		 * the same `toStringTag`.
		 *
		 * **Note:** This function only supports comparing values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {string} tag The `toStringTag` of the objects to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		  switch (tag) {
		    case dataViewTag:
		      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
		        return false;
		      }
		      object = object.buffer;
		      other = other.buffer;
		    case arrayBufferTag:
		      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		        return false;
		      }
		      return true;
		    case boolTag:
		    case dateTag:
		    case numberTag:
		      // Coerce booleans to `1` or `0` and dates to milliseconds.
		      // Invalid dates are coerced to `NaN`.
		      return eq(+object, +other);
		    case errorTag:
		      return object.name == other.name && object.message == other.message;
		    case regexpTag:
		    case stringTag:
		      // Coerce regexes to strings and treat strings, primitives and objects,
		      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		      // for more details.
		      return object == other + '';
		    case mapTag:
		      var convert = mapToArray;
		    case setTag:
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		      convert || (convert = setToArray);
		      if (object.size != other.size && !isPartial) {
		        return false;
		      }
		      // Assume cyclic values are equal.
		      var stacked = stack.get(object);
		      if (stacked) {
		        return stacked == other;
		      }
		      bitmask |= COMPARE_UNORDERED_FLAG;

		      // Recursively compare objects (susceptible to call stack limits).
		      stack.set(object, other);
		      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		      stack['delete'](object);
		      return result;
		    case symbolTag:
		      if (symbolValueOf) {
		        return symbolValueOf.call(object) == symbolValueOf.call(other);
		      }
		  }
		  return false;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for objects with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		    objProps = getAllKeys(object),
		    objLength = objProps.length,
		    othProps = getAllKeys(other),
		    othLength = othProps.length;
		  if (objLength != othLength && !isPartial) {
		    return false;
		  }
		  var index = objLength;
		  while (index--) {
		    var key = objProps[index];
		    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		      return false;
		    }
		  }
		  // Assume cyclic values are equal.
		  var stacked = stack.get(object);
		  if (stacked && stack.get(other)) {
		    return stacked == other;
		  }
		  var result = true;
		  stack.set(object, other);
		  stack.set(other, object);
		  var skipCtor = isPartial;
		  while (++index < objLength) {
		    key = objProps[index];
		    var objValue = object[key],
		      othValue = other[key];
		    if (customizer) {
		      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
		    }
		    // Recursively compare objects (susceptible to call stack limits).
		    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
		      result = false;
		      break;
		    }
		    skipCtor || (skipCtor = key == 'constructor');
		  }
		  if (result && !skipCtor) {
		    var objCtor = object.constructor,
		      othCtor = other.constructor;

		    // Non `Object` object instances with different constructors are not equal.
		    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		      result = false;
		    }
		  }
		  stack['delete'](object);
		  stack['delete'](other);
		  return result;
		}

		/**
		 * Creates an array of own enumerable property names and symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function getAllKeys(object) {
		  return baseGetAllKeys(object, keys, getSymbols);
		}

		/**
		 * Gets the data for `map`.
		 *
		 * @private
		 * @param {Object} map The map to query.
		 * @param {string} key The reference key.
		 * @returns {*} Returns the map data.
		 */
		function getMapData(map, key) {
		  var data = map.__data__;
		  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
		}

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = getValue(object, key);
		  return baseIsNative(value) ? value : undefined;
		}

		/**
		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the raw `toStringTag`.
		 */
		function getRawTag(value) {
		  var isOwn = hasOwnProperty.call(value, symToStringTag),
		    tag = value[symToStringTag];
		  try {
		    value[symToStringTag] = undefined;
		    var unmasked = true;
		  } catch (e) {}
		  var result = nativeObjectToString.call(value);
		  if (unmasked) {
		    if (isOwn) {
		      value[symToStringTag] = tag;
		    } else {
		      delete value[symToStringTag];
		    }
		  }
		  return result;
		}

		/**
		 * Creates an array of the own enumerable symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of symbols.
		 */
		var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
		  if (object == null) {
		    return [];
		  }
		  object = Object(object);
		  return arrayFilter(nativeGetSymbols(object), function (symbol) {
		    return propertyIsEnumerable.call(object, symbol);
		  });
		};

		/**
		 * Gets the `toStringTag` of `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		var getTag = baseGetTag;

		// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
		  getTag = function (value) {
		    var result = baseGetTag(value),
		      Ctor = result == objectTag ? value.constructor : undefined,
		      ctorString = Ctor ? toSource(Ctor) : '';
		    if (ctorString) {
		      switch (ctorString) {
		        case dataViewCtorString:
		          return dataViewTag;
		        case mapCtorString:
		          return mapTag;
		        case promiseCtorString:
		          return promiseTag;
		        case setCtorString:
		          return setTag;
		        case weakMapCtorString:
		          return weakMapTag;
		      }
		    }
		    return result;
		  };
		}

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  length = length == null ? MAX_SAFE_INTEGER : length;
		  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
		}

		/**
		 * Checks if `value` is suitable for use as unique object key.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		 */
		function isKeyable(value) {
		  var type = typeof value;
		  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
		}

		/**
		 * Checks if `func` has its source masked.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		 */
		function isMasked(func) {
		  return !!maskSrcKey && maskSrcKey in func;
		}

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
		  return value === proto;
		}

		/**
		 * Converts `value` to a string using `Object.prototype.toString`.
		 *
		 * @private
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 */
		function objectToString(value) {
		  return nativeObjectToString.call(value);
		}

		/**
		 * Converts `func` to its source code.
		 *
		 * @private
		 * @param {Function} func The function to convert.
		 * @returns {string} Returns the source code.
		 */
		function toSource(func) {
		  if (func != null) {
		    try {
		      return funcToString.call(func);
		    } catch (e) {}
		    try {
		      return func + '';
		    } catch (e) {}
		  }
		  return '';
		}

		/**
		 * Performs a
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * comparison between two values to determine if they are equivalent.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.eq(object, object);
		 * // => true
		 *
		 * _.eq(object, other);
		 * // => false
		 *
		 * _.eq('a', 'a');
		 * // => true
		 *
		 * _.eq('a', Object('a'));
		 * // => false
		 *
		 * _.eq(NaN, NaN);
		 * // => true
		 */
		function eq(value, other) {
		  return value === other || value !== value && other !== other;
		}

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function () {
		  return arguments;
		}()) ? baseIsArguments : function (value) {
		  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
		};

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		/**
		 * Performs a deep comparison between two values to determine if they are
		 * equivalent.
		 *
		 * **Note:** This method supports comparing arrays, array buffers, booleans,
		 * date objects, error objects, maps, numbers, `Object` objects, regexes,
		 * sets, strings, symbols, and typed arrays. `Object` objects are compared
		 * by their own, not inherited, enumerable properties. Functions and DOM
		 * nodes are compared by strict equality, i.e. `===`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.isEqual(object, other);
		 * // => true
		 *
		 * object === other;
		 * // => false
		 */
		function isEqual(value, other) {
		  return baseIsEqual(value, other);
		}

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  if (!isObject(value)) {
		    return false;
		  }
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in Safari 9 which returns 'object' for typed arrays and other constructors.
		  var tag = baseGetTag(value);
		  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		}

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
		  var type = typeof value;
		  return value != null && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
		  return value != null && typeof value == 'object';
		}

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		function keys(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}

		/**
		 * This method returns a new empty array.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {Array} Returns the new empty array.
		 * @example
		 *
		 * var arrays = _.times(2, _.stubArray);
		 *
		 * console.log(arrays);
		 * // => [[], []]
		 *
		 * console.log(arrays[0] === arrays[1]);
		 * // => false
		 */
		function stubArray() {
		  return [];
		}

		/**
		 * This method returns `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `false`.
		 * @example
		 *
		 * _.times(2, _.stubFalse);
		 * // => [false, false]
		 */
		function stubFalse() {
		  return false;
		}
		module.exports = isEqual; 
	} (lodash_isequal, lodash_isequal.exports));
	return lodash_isequal.exports;
}

var hasRequiredGeneric;

function requireGeneric () {
	if (hasRequiredGeneric) return generic;
	hasRequiredGeneric = 1;

	Object.defineProperty(generic, "__esModule", {
	  value: true
	});
	generic._get = _get;
	generic._length = _length;
	generic.arraysEqual = arraysEqual;
	generic.deepObjectCompare = deepObjectCompare;
	generic.keyBy = keyBy;
	generic.noop = noop;
	var _lodash = _interopRequireDefault(requireLodash_isequal());
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	// so we could use both immutable.js objects and regular objects
	function _get(object, key) {
	  return typeof object.get === 'function' ? object.get(key) : object[key];
	}
	function _length(object) {
	  return typeof object.count === 'function' ? object.count() : object.length;
	}
	function arraysEqual(array1, array2) {
	  return _length(array1) === _length(array2) && array1.every(function (element, index) {
	    return element === _get(array2, index);
	  });
	}
	function deepObjectCompare(obj1, obj2) {
	  return (0, _lodash["default"])(obj1, obj2);
	}
	function keyBy(value, key) {
	  var obj = {};
	  value.forEach(function (element) {
	    obj[element[key]] = element;
	  });
	  return obj;
	}
	function noop() {}
	return generic;
}

var events = {};

var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events;
	hasRequiredEvents = 1;

	Object.defineProperty(events, "__esModule", {
	  value: true
	});
	events.composeEvents = composeEvents;
	function composeEvents() {
	  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
	    fns[_key] = arguments[_key];
	  }
	  return function (event) {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }
	    event.preventDefault();
	    fns.forEach(function (fn) {
	      return fn && fn.apply(void 0, [event].concat(args));
	    });
	  };
	}
	return events;
}

var defaultItemRenderer = {};

var hasRequiredDefaultItemRenderer;

function requireDefaultItemRenderer () {
	if (hasRequiredDefaultItemRenderer) return defaultItemRenderer;
	hasRequiredDefaultItemRenderer = 1;

	Object.defineProperty(defaultItemRenderer, "__esModule", {
	  value: true
	});
	defaultItemRenderer.defaultItemRenderer = void 0;
	var _react = _interopRequireDefault(require("react"));
	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	var defaultItemRenderer$1 = function defaultItemRenderer(_ref) {
	  var item = _ref.item,
	    itemContext = _ref.itemContext,
	    getItemProps = _ref.getItemProps,
	    getResizeProps = _ref.getResizeProps;
	  var _getResizeProps = getResizeProps(),
	    leftResizeProps = _getResizeProps.left,
	    rightResizeProps = _getResizeProps.right;
	  return _react["default"].createElement("div", getItemProps(item.itemProps), itemContext.useResizeHandle ? _react["default"].createElement("div", leftResizeProps) : '', _react["default"].createElement("div", {
	    className: "rct-item-content",
	    style: {
	      maxHeight: "".concat(itemContext.dimensions.height)
	    }
	  }, itemContext.title), itemContext.useResizeHandle ? _react["default"].createElement("div", rightResizeProps) : '');
	}; // TODO: update this to actual prop types. Too much to change before release
	// future me, forgive me.

	defaultItemRenderer.defaultItemRenderer = defaultItemRenderer$1;
	defaultItemRenderer$1.propTypes = {
	  item: _propTypes["default"].any,
	  itemContext: _propTypes["default"].any,
	  getItemProps: _propTypes["default"].any,
	  getResizeProps: _propTypes["default"].any
	};
	return defaultItemRenderer;
}

var calendar = {};

var hasRequiredCalendar;

function requireCalendar () {
	if (hasRequiredCalendar) return calendar;
	hasRequiredCalendar = 1;

	Object.defineProperty(calendar, "__esModule", {
	  value: true
	});
	calendar.coordinateToTimeRatio = coordinateToTimeRatio;
	calendar.calculateXPositionForTime = calculateXPositionForTime;
	calendar.calculateTimeForXPosition = calculateTimeForXPosition;
	calendar.iterateTimes = iterateTimes;
	calendar.getMinUnit = getMinUnit;
	calendar.getNextUnit = getNextUnit;
	calendar.calculateInteractionNewTimes = calculateInteractionNewTimes;
	calendar.calculateDimensions = calculateDimensions;
	calendar.getGroupOrders = getGroupOrders;
	calendar.getGroupedItems = getGroupedItems;
	calendar.getVisibleItems = getVisibleItems;
	calendar.collision = collision;
	calendar.groupStack = groupStack;
	calendar.groupNoStack = groupNoStack;
	calendar.stackAll = stackAll;
	calendar.stackGroup = stackGroup;
	calendar.stackTimelineItems = stackTimelineItems;
	calendar.getCanvasWidth = getCanvasWidth;
	calendar.getItemDimensions = getItemDimensions;
	calendar.getItemWithInteractions = getItemWithInteractions;
	calendar.getCanvasBoundariesFromVisibleTime = getCanvasBoundariesFromVisibleTime;
	calendar.calculateScrollCanvas = calculateScrollCanvas;
	calendar.minCellWidth = void 0;
	var _moment = _interopRequireDefault(requireMoment());
	var _generic = requireGeneric();
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    if (i % 2) {
	      var source = arguments[i] != null ? arguments[i] : {};
	      var ownKeys = Object.keys(source);
	      if (typeof Object.getOwnPropertySymbols === 'function') {
	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	        }));
	      }
	      ownKeys.forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
	    }
	  }
	  return target;
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
	}
	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}
	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;
	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);
	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }
	  return _arr;
	}
	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	/**
	 * Calculate the ms / pixel ratio of the timeline state
	 * @param {number} canvasTimeStart
	 * @param {number} canvasTimeEnd
	 * @param {number} canvasWidth
	 * @returns {number}
	 */
	function coordinateToTimeRatio(canvasTimeStart, canvasTimeEnd, canvasWidth) {
	  return (canvasTimeEnd - canvasTimeStart) / canvasWidth;
	}
	/**
	 * For a given time, calculate the pixel position given timeline state
	 * (timeline width in px, canvas time range)
	 * @param {number} canvasTimeStart
	 * @param {number} canvasTimeEnd
	 * @param {number} canvasWidth
	 * @param {number} time
	 * @returns {number}
	 */

	function calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, time) {
	  var widthToZoomRatio = canvasWidth / (canvasTimeEnd - canvasTimeStart);
	  var timeOffset = time - canvasTimeStart;
	  return timeOffset * widthToZoomRatio;
	}
	/**
	 * For a given x position (leftOffset) in pixels, calculate time based on
	 * timeline state (timeline width in px, canvas time range)
	 * @param {number} canvasTimeStart
	 * @param {number} canvasTimeEnd
	 * @param {number} canvasWidth
	 * @param {number} leftOffset
	 * @returns {number}
	 */

	function calculateTimeForXPosition(canvasTimeStart, canvasTimeEnd, canvasWidth, leftOffset) {
	  var timeToPxRatio = (canvasTimeEnd - canvasTimeStart) / canvasWidth;
	  var timeFromCanvasTimeStart = timeToPxRatio * leftOffset;
	  return timeFromCanvasTimeStart + canvasTimeStart;
	}
	function iterateTimes(start, end, unit, timeSteps, callback) {
	  var time = (0, _moment["default"])(start).startOf(unit);
	  if (timeSteps[unit] && timeSteps[unit] > 1) {
	    var value = time.get(unit);
	    time.set(unit, value - value % timeSteps[unit]);
	  }
	  while (time.valueOf() < end) {
	    var nextTime = (0, _moment["default"])(time).add(timeSteps[unit] || 1, "".concat(unit, "s"));
	    callback(time, nextTime);
	    time = nextTime;
	  }
	} // this function is VERY HOT as its used in Timeline.js render function
	// TODO: check if there are performance implications here
	// when "weeks" feature is implemented, this function will be modified heavily

	/** determine the current rendered time unit based on timeline time span
	 *
	 * zoom: (in milliseconds) difference between time start and time end of timeline canvas
	 * width: (in pixels) pixel width of timeline canvas
	 * timeSteps: map of timeDividers with number to indicate step of each divider
	 */
	// the smallest cell we want to render is 17px
	// this can be manipulated to make the breakpoints change more/less
	// i.e. on zoom how often do we switch to the next unit of time
	// i think this is the distance between cell lines

	var minCellWidth = 17;
	calendar.minCellWidth = minCellWidth;
	function getMinUnit(zoom, width, timeSteps) {
	  // for supporting weeks, its important to remember that each of these
	  // units has a natural progression to the other. i.e. a year is 12 months
	  // a month is 24 days, a day is 24 hours.
	  // with weeks this isnt the case so weeks needs to be handled specially
	  var timeDividers = {
	    second: 1000,
	    minute: 60,
	    hour: 60,
	    day: 24,
	    month: 30,
	    year: 12
	  };
	  var minUnit = 'year'; // this timespan is in ms initially

	  var nextTimeSpanInUnitContext = zoom;
	  Object.keys(timeDividers).some(function (unit) {
	    // converts previous time span to current unit
	    // (e.g. milliseconds to seconds, seconds to minutes, etc)
	    nextTimeSpanInUnitContext = nextTimeSpanInUnitContext / timeDividers[unit]; // timeSteps is "
	    // With what step to display different units. E.g. 15 for minute means only minutes 0, 15, 30 and 45 will be shown."
	    // how many cells would be rendered given this time span, for this unit?
	    // e.g. for time span of 60 minutes, and time step of 1, we would render 60 cells

	    var cellsToBeRenderedForCurrentUnit = nextTimeSpanInUnitContext / timeSteps[unit]; // what is happening here? why 3 if time steps are greater than 1??

	    var cellWidthToUse = timeSteps[unit] && timeSteps[unit] > 1 ? 3 * minCellWidth : minCellWidth; // for the minWidth of a cell, how many cells would be rendered given
	    // the current pixel width
	    // i.e. f

	    var minimumCellsToRenderUnit = width / cellWidthToUse;
	    if (cellsToBeRenderedForCurrentUnit < minimumCellsToRenderUnit) {
	      // for the current zoom, the number of cells we'd need to render all parts of this unit
	      // is less than the minimum number of cells needed at minimum cell width
	      minUnit = unit;
	      return true;
	    }
	  });
	  return minUnit;
	}
	function getNextUnit(unit) {
	  var nextUnits = {
	    second: 'minute',
	    minute: 'hour',
	    hour: 'day',
	    day: 'month',
	    month: 'year',
	    year: 'year'
	  };
	  if (!nextUnits[unit]) {
	    throw new Error("unit ".concat(unit, " in not acceptable"));
	  }
	  return nextUnits[unit];
	}
	/**
	 * get the new start and new end time of item that is being
	 * dragged or resized
	 * @param {*} itemTimeStart original item time in milliseconds
	 * @param {*} itemTimeEnd original item time in milliseconds
	 * @param {*} dragTime new start time if item is dragged in milliseconds
	 * @param {*} isDragging is item being dragged
	 * @param {*} isResizing is item being resized
	 * @param {`right` or `left`} resizingEdge resize edge
	 * @param {*} resizeTime new resize time in milliseconds
	 */

	function calculateInteractionNewTimes(_ref) {
	  var itemTimeStart = _ref.itemTimeStart,
	    itemTimeEnd = _ref.itemTimeEnd,
	    dragTime = _ref.dragTime,
	    isDragging = _ref.isDragging,
	    isResizing = _ref.isResizing,
	    resizingEdge = _ref.resizingEdge,
	    resizeTime = _ref.resizeTime;
	  var originalItemRange = itemTimeEnd - itemTimeStart;
	  var itemStart = isResizing && resizingEdge === 'left' ? resizeTime : itemTimeStart;
	  var itemEnd = isResizing && resizingEdge === 'right' ? resizeTime : itemTimeEnd;
	  return [isDragging ? dragTime : itemStart, isDragging ? dragTime + originalItemRange : itemEnd];
	}
	function calculateDimensions(_ref2) {
	  var itemTimeStart = _ref2.itemTimeStart,
	    itemTimeEnd = _ref2.itemTimeEnd,
	    canvasTimeStart = _ref2.canvasTimeStart,
	    canvasTimeEnd = _ref2.canvasTimeEnd,
	    canvasWidth = _ref2.canvasWidth;
	  var itemTimeRange = itemTimeEnd - itemTimeStart; // restrict startTime and endTime to be bounded by canvasTimeStart and canvasTimeEnd

	  var effectiveStartTime = Math.max(itemTimeStart, canvasTimeStart);
	  var effectiveEndTime = Math.min(itemTimeEnd, canvasTimeEnd);
	  var left = calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, effectiveStartTime);
	  var right = calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, effectiveEndTime);
	  var itemWidth = right - left;
	  var dimensions = {
	    left: left,
	    width: Math.max(itemWidth, 3),
	    collisionLeft: itemTimeStart,
	    collisionWidth: itemTimeRange
	  };
	  return dimensions;
	}
	/**
	 * Get the order of groups based on their keys
	 * @param {*} groups array of groups
	 * @param {*} keys the keys object
	 * @returns Ordered hash of objects with their array index and group
	 */

	function getGroupOrders(groups, keys) {
	  var groupIdKey = keys.groupIdKey;
	  var groupOrders = {};
	  for (var i = 0; i < groups.length; i++) {
	    groupOrders[(0, _generic._get)(groups[i], groupIdKey)] = {
	      index: i,
	      group: groups[i]
	    };
	  }
	  return groupOrders;
	}
	/**
	 * Adds items relevant to each group to the result of getGroupOrders
	 * @param {*} items list of all items
	 * @param {*} groupOrders the result of getGroupOrders
	 */

	function getGroupedItems(items, groupOrders) {
	  var groupedItems = {};
	  var keys = Object.keys(groupOrders); // Initialize with result object for each group

	  for (var i = 0; i < keys.length; i++) {
	    var groupOrder = groupOrders[keys[i]];
	    groupedItems[i] = {
	      index: groupOrder.index,
	      group: groupOrder.group,
	      items: []
	    };
	  } // Populate groups

	  for (var _i = 0; _i < items.length; _i++) {
	    if (items[_i].dimensions.order !== undefined) {
	      var groupItem = groupedItems[items[_i].dimensions.order.index];
	      if (groupItem) {
	        groupItem.items.push(items[_i]);
	      }
	    }
	  }
	  return groupedItems;
	}
	function getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys) {
	  var itemTimeStartKey = keys.itemTimeStartKey,
	    itemTimeEndKey = keys.itemTimeEndKey;
	  return items.filter(function (item) {
	    return (0, _generic._get)(item, itemTimeStartKey) <= canvasTimeEnd && (0, _generic._get)(item, itemTimeEndKey) >= canvasTimeStart;
	  });
	}
	var EPSILON = 0.001;
	function collision(a, b, lineHeight) {
	  var collisionPadding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EPSILON;
	  // 2d collisions detection - https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection
	  var verticalMargin = 0;
	  return a.collisionLeft + collisionPadding < b.collisionLeft + b.collisionWidth && a.collisionLeft + a.collisionWidth - collisionPadding > b.collisionLeft && a.top - verticalMargin + collisionPadding < b.top + b.height && a.top + a.height + verticalMargin - collisionPadding > b.top;
	}
	/**
	 * Calculate the position of a given item for a group that
	 * is being stacked
	 */

	function groupStack(lineHeight, item, group, groupHeight, groupTop, itemIndex) {
	  // calculate non-overlapping positions
	  var curHeight = groupHeight;
	  var verticalMargin = (lineHeight - item.dimensions.height) / 2;
	  if (item.dimensions.stack && item.dimensions.top === null) {
	    item.dimensions.top = groupTop + verticalMargin;
	    curHeight = Math.max(curHeight, lineHeight);
	    do {
	      var collidingItem = null; //Items are placed from i=0 onwards, only check items with index < i

	      for (var j = itemIndex - 1, jj = 0; j >= jj; j--) {
	        var other = group[j];
	        if (other.dimensions.top !== null && other.dimensions.stack && collision(item.dimensions, other.dimensions, lineHeight)) {
	          collidingItem = other;
	          break;
	        }
	      }
	      if (collidingItem != null) {
	        // There is a collision. Reposition the items above the colliding element
	        item.dimensions.top = collidingItem.dimensions.top + lineHeight;
	        curHeight = Math.max(curHeight, item.dimensions.top + item.dimensions.height + verticalMargin - groupTop);
	      }
	    } while (collidingItem);
	  }
	  return {
	    groupHeight: curHeight,
	    verticalMargin: verticalMargin,
	    itemTop: item.dimensions.top
	  };
	} // Calculate the position of this item for a group that is not being stacked

	function groupNoStack(lineHeight, item, groupHeight, groupTop) {
	  var verticalMargin = (lineHeight - item.dimensions.height) / 2;
	  if (item.dimensions.top === null) {
	    item.dimensions.top = groupTop + verticalMargin;
	    groupHeight = Math.max(groupHeight, lineHeight);
	  }
	  return {
	    groupHeight: groupHeight,
	    verticalMargin: 0,
	    itemTop: item.dimensions.top
	  };
	}
	function sum() {
	  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return arr.reduce(function (acc, i) {
	    return acc + i;
	  }, 0);
	}
	/**
	 * Stack all groups
	 * @param {*} items items to be stacked
	 * @param {*} groupOrders the groupOrders object
	 * @param {*} lineHeight
	 * @param {*} stackItems should items be stacked?
	 */

	function stackAll(itemsDimensions, groupOrders, lineHeight, stackItems) {
	  var groupHeights = [];
	  var groupTops = [];
	  var groupedItems = getGroupedItems(itemsDimensions, groupOrders);
	  for (var index in groupedItems) {
	    var groupItems = groupedItems[index];
	    var _itemsDimensions = groupItems.items,
	      group = groupItems.group;
	    var groupTop = sum(groupHeights); // Is group being stacked?

	    var isGroupStacked = group.stackItems !== undefined ? group.stackItems : stackItems;
	    var _stackGroup = stackGroup(_itemsDimensions, isGroupStacked, lineHeight, groupTop),
	      groupHeight = _stackGroup.groupHeight; // If group height is overridden, push new height
	    // Do this late as item position still needs to be calculated

	    groupTops.push(groupTop);
	    if (group.height) {
	      groupHeights.push(group.height);
	    } else {
	      groupHeights.push(Math.max(groupHeight, lineHeight));
	    }
	  }
	  return {
	    height: sum(groupHeights),
	    groupHeights: groupHeights,
	    groupTops: groupTops
	  };
	}
	/**
	 * 
	 * @param {*} itemsDimensions 
	 * @param {*} isGroupStacked 
	 * @param {*} lineHeight 
	 * @param {*} groupTop 
	 */

	function stackGroup(itemsDimensions, isGroupStacked, lineHeight, groupTop) {
	  var groupHeight = 0;
	  var verticalMargin = 0; // Find positions for each item in group

	  for (var itemIndex = 0; itemIndex < itemsDimensions.length; itemIndex++) {
	    var r = {};
	    if (isGroupStacked) {
	      r = groupStack(lineHeight, itemsDimensions[itemIndex], itemsDimensions, groupHeight, groupTop, itemIndex);
	    } else {
	      r = groupNoStack(lineHeight, itemsDimensions[itemIndex], groupHeight, groupTop);
	    }
	    groupHeight = r.groupHeight;
	    verticalMargin = r.verticalMargin;
	  }
	  return {
	    groupHeight: groupHeight,
	    verticalMargin: verticalMargin
	  };
	}
	/**
	 * Stack the items that will be visible
	 * within the canvas area
	 * @param {item[]} items
	 * @param {group[]} groups
	 * @param {number} canvasWidth
	 * @param {number} canvasTimeStart
	 * @param {number} canvasTimeEnd
	 * @param {*} keys
	 * @param {number} lineHeight
	 * @param {number} itemHeightRatio
	 * @param {boolean} stackItems
	 * @param {*} draggingItem
	 * @param {*} resizingItem
	 * @param {number} dragTime
	 * @param {left or right} resizingEdge
	 * @param {number} resizeTime
	 * @param {number} newGroupOrder
	 */

	function stackTimelineItems(items, groups, canvasWidth, canvasTimeStart, canvasTimeEnd, keys, lineHeight, itemHeightRatio, stackItems, draggingItem, resizingItem, dragTime, resizingEdge, resizeTime, newGroupOrder) {
	  var visibleItems = getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys);
	  var visibleItemsWithInteraction = visibleItems.map(function (item) {
	    return getItemWithInteractions({
	      item: item,
	      keys: keys,
	      draggingItem: draggingItem,
	      resizingItem: resizingItem,
	      dragTime: dragTime,
	      resizingEdge: resizingEdge,
	      resizeTime: resizeTime,
	      groups: groups,
	      newGroupOrder: newGroupOrder
	    });
	  }); // if there are no groups return an empty array of dimensions

	  if (groups.length === 0) {
	    return {
	      dimensionItems: [],
	      height: 0,
	      groupHeights: [],
	      groupTops: []
	    };
	  } // Get the order of groups based on their id key

	  var groupOrders = getGroupOrders(groups, keys);
	  var dimensionItems = visibleItemsWithInteraction.map(function (item) {
	    return getItemDimensions({
	      item: item,
	      keys: keys,
	      canvasTimeStart: canvasTimeStart,
	      canvasTimeEnd: canvasTimeEnd,
	      canvasWidth: canvasWidth,
	      groupOrders: groupOrders,
	      lineHeight: lineHeight,
	      itemHeightRatio: itemHeightRatio
	    });
	  }).filter(function (item) {
	    return !!item;
	  }); // Get a new array of groupOrders holding the stacked items

	  var _stackAll = stackAll(dimensionItems, groupOrders, lineHeight, stackItems),
	    height = _stackAll.height,
	    groupHeights = _stackAll.groupHeights,
	    groupTops = _stackAll.groupTops;
	  return {
	    dimensionItems: dimensionItems,
	    height: height,
	    groupHeights: groupHeights,
	    groupTops: groupTops
	  };
	}
	/**
	 * get canvas width from visible width
	 * @param {*} width
	 * @param {*} buffer
	 */

	function getCanvasWidth(width, buffer) {
	  return width * buffer;
	}
	/**
	 * get item's position, dimensions and collisions
	 * @param {*} item
	 * @param {*} keys
	 * @param {*} canvasTimeStart
	 * @param {*} canvasTimeEnd
	 * @param {*} canvasWidth
	 * @param {*} groupOrders
	 * @param {*} lineHeight
	 * @param {*} itemHeightRatio
	 */

	function getItemDimensions(_ref3) {
	  var item = _ref3.item,
	    keys = _ref3.keys,
	    canvasTimeStart = _ref3.canvasTimeStart,
	    canvasTimeEnd = _ref3.canvasTimeEnd,
	    canvasWidth = _ref3.canvasWidth,
	    groupOrders = _ref3.groupOrders,
	    lineHeight = _ref3.lineHeight,
	    itemHeightRatio = _ref3.itemHeightRatio;
	  var itemId = (0, _generic._get)(item, keys.itemIdKey);
	  var dimension = calculateDimensions({
	    itemTimeStart: (0, _generic._get)(item, keys.itemTimeStartKey),
	    itemTimeEnd: (0, _generic._get)(item, keys.itemTimeEndKey),
	    canvasTimeStart: canvasTimeStart,
	    canvasTimeEnd: canvasTimeEnd,
	    canvasWidth: canvasWidth
	  });
	  if (dimension) {
	    dimension.top = null;
	    dimension.order = groupOrders[(0, _generic._get)(item, keys.itemGroupKey)];
	    dimension.stack = !item.isOverlay;
	    dimension.height = lineHeight * itemHeightRatio;
	    return {
	      id: itemId,
	      dimensions: dimension
	    };
	  }
	}
	/**
	 * get new item with changed  `itemTimeStart` , `itemTimeEnd` and `itemGroupKey` according to user interaction
	 * user interaction is dragging an item and resize left and right
	 * @param {*} item
	 * @param {*} keys
	 * @param {*} draggingItem
	 * @param {*} resizingItem
	 * @param {*} dragTime
	 * @param {*} resizingEdge
	 * @param {*} resizeTime
	 * @param {*} groups
	 * @param {*} newGroupOrder
	 */

	function getItemWithInteractions(_ref4) {
	  var _objectSpread2;
	  var item = _ref4.item,
	    keys = _ref4.keys,
	    draggingItem = _ref4.draggingItem,
	    resizingItem = _ref4.resizingItem,
	    dragTime = _ref4.dragTime,
	    resizingEdge = _ref4.resizingEdge,
	    resizeTime = _ref4.resizeTime,
	    groups = _ref4.groups,
	    newGroupOrder = _ref4.newGroupOrder;
	  if (!resizingItem && !draggingItem) return item;
	  var itemId = (0, _generic._get)(item, keys.itemIdKey);
	  var isDragging = itemId === draggingItem;
	  var isResizing = itemId === resizingItem;
	  var _calculateInteraction = calculateInteractionNewTimes({
	      itemTimeStart: (0, _generic._get)(item, keys.itemTimeStartKey),
	      itemTimeEnd: (0, _generic._get)(item, keys.itemTimeEndKey),
	      isDragging: isDragging,
	      isResizing: isResizing,
	      dragTime: dragTime,
	      resizingEdge: resizingEdge,
	      resizeTime: resizeTime
	    }),
	    _calculateInteraction2 = _slicedToArray(_calculateInteraction, 2),
	    itemTimeStart = _calculateInteraction2[0],
	    itemTimeEnd = _calculateInteraction2[1];
	  var newItem = _objectSpread({}, item, (_objectSpread2 = {}, _defineProperty(_objectSpread2, keys.itemTimeStartKey, itemTimeStart), _defineProperty(_objectSpread2, keys.itemTimeEndKey, itemTimeEnd), _defineProperty(_objectSpread2, keys.itemGroupKey, isDragging ? (0, _generic._get)(groups[newGroupOrder], keys.groupIdKey) : (0, _generic._get)(item, keys.itemGroupKey)), _objectSpread2));
	  return newItem;
	}
	/**
	 * get canvas start and end time from visible start and end time
	 * @param {number} visibleTimeStart
	 * @param {number} visibleTimeEnd
	 */

	function getCanvasBoundariesFromVisibleTime(visibleTimeStart, visibleTimeEnd, buffer) {
	  var zoom = visibleTimeEnd - visibleTimeStart; // buffer - 1 (1 is visible area) divided by 2 (2 is the buffer split on the right and left of the timeline)

	  var canvasTimeStart = visibleTimeStart - zoom * (buffer - 1) / 2;
	  var canvasTimeEnd = canvasTimeStart + zoom * buffer;
	  return [canvasTimeStart, canvasTimeEnd];
	}
	/**
	 * Get the the canvas area for a given visible time
	 * Will shift the start/end of the canvas if the visible time
	 * does not fit within the existing
	 * @param {number} visibleTimeStart
	 * @param {number} visibleTimeEnd
	 * @param {boolean} forceUpdateDimensions
	 * @param {*} items
	 * @param {*} groups
	 * @param {*} props
	 * @param {*} state
	 */

	function calculateScrollCanvas(visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, items, groups, props, state) {
	  var buffer = props.buffer;
	  var oldCanvasTimeStart = state.canvasTimeStart;
	  var oldCanvasTimeEnd = state.canvasTimeEnd;
	  var oldZoom = state.visibleTimeEnd - state.visibleTimeStart;
	  var newZoom = visibleTimeEnd - visibleTimeStart;
	  var newState = {
	    visibleTimeStart: visibleTimeStart,
	    visibleTimeEnd: visibleTimeEnd // Check if the current canvas covers the new times
	  };
	  var canKeepCanvas = newZoom === oldZoom && visibleTimeStart >= oldCanvasTimeStart + oldZoom * 0.5 && visibleTimeStart <= oldCanvasTimeEnd - oldZoom * 1.5 && visibleTimeEnd >= oldCanvasTimeStart + oldZoom * 1.5 && visibleTimeEnd <= oldCanvasTimeEnd - oldZoom * 0.5;
	  if (!canKeepCanvas || forceUpdateDimensions) {
	    var _getCanvasBoundariesF = getCanvasBoundariesFromVisibleTime(visibleTimeStart, visibleTimeEnd, buffer),
	      _getCanvasBoundariesF2 = _slicedToArray(_getCanvasBoundariesF, 2),
	      canvasTimeStart = _getCanvasBoundariesF2[0],
	      canvasTimeEnd = _getCanvasBoundariesF2[1];
	    newState.canvasTimeStart = canvasTimeStart;
	    newState.canvasTimeEnd = canvasTimeEnd;
	    var mergedState = _objectSpread({}, state, {}, newState);
	    var canvasWidth = getCanvasWidth(mergedState.width, props.buffer); // The canvas cannot be kept, so calculate the new items position

	    Object.assign(newState, stackTimelineItems(items, groups, canvasWidth, mergedState.canvasTimeStart, mergedState.canvasTimeEnd, props.keys, props.lineHeight, props.itemHeightRatio, props.stackItems, mergedState.draggingItem, mergedState.resizingItem, mergedState.dragTime, mergedState.resizingEdge, mergedState.resizeTime, mergedState.newGroupOrder));
	  }
	  return newState;
	}
	return calendar;
}

var domHelpers = {};

var hasRequiredDomHelpers;

function requireDomHelpers () {
	if (hasRequiredDomHelpers) return domHelpers;
	hasRequiredDomHelpers = 1;

	Object.defineProperty(domHelpers, "__esModule", {
	  value: true
	});
	domHelpers.getParentPosition = getParentPosition;
	domHelpers.getSumScroll = getSumScroll;
	domHelpers.getSumOffset = getSumOffset;

	// TODO: can we use getBoundingClientRect instead??
	// last place this is used is in "handleWheel" in ScrollElement
	function getParentPosition(element) {
	  var xPosition = 0;
	  var yPosition = 0;
	  var first = true;
	  while (element) {
	    if (!element.offsetParent && element.tagName === 'BODY' && element.scrollLeft === 0 && element.scrollTop === 0) {
	      element = document.scrollingElement || element;
	    }
	    xPosition += element.offsetLeft - (first ? 0 : element.scrollLeft) + element.clientLeft;
	    yPosition += element.offsetTop - (first ? 0 : element.scrollTop) + element.clientTop;
	    element = element.offsetParent;
	    first = false;
	  }
	  return {
	    x: xPosition,
	    y: yPosition
	  };
	}
	function getSumScroll(node) {
	  if (node === document.body) {
	    return {
	      scrollLeft: 0,
	      scrollTop: 0
	    };
	  } else {
	    var parent = getSumScroll(node.parentNode);
	    return {
	      scrollLeft: node.scrollLeft + parent.scrollLeft,
	      scrollTop: node.scrollTop + parent.scrollTop
	    };
	  }
	}
	function getSumOffset(node) {
	  if (node === document.body || !node.offsetParent) {
	    return {
	      offsetLeft: 0,
	      offsetTop: 0
	    };
	  } else {
	    var parent = getSumOffset(node.offsetParent);
	    return {
	      offsetLeft: node.offsetLeft + parent.offsetLeft,
	      offsetTop: node.offsetTop + parent.offsetTop
	    };
	  }
	}
	return domHelpers;
}

var styles = {};

var hasRequiredStyles;

function requireStyles () {
	if (hasRequiredStyles) return styles;
	hasRequiredStyles = 1;

	Object.defineProperty(styles, "__esModule", {
	  value: true
	});
	styles.rightResizeStyle = styles.leftResizeStyle = styles.selectedAndCanResizeRightAndDragRight = styles.selectedAndCanResizeRight = styles.selectedAndCanResizeLeftAndDragLeft = styles.selectedAndCanResizeLeft = styles.selectedAndCanMove = styles.selectedStyle = styles.overridableStyles = void 0;
	var overridableStyles = {
	  fontSize: 12,
	  color: 'white',
	  cursor: 'pointer',
	  background: '#2196f3',
	  border: '1px solid #1a6fb3',
	  zIndex: 80
	};
	styles.overridableStyles = overridableStyles;
	var selectedStyle = {
	  background: '#ffc107',
	  border: '1px solid #ff9800',
	  zIndex: 82
	};
	styles.selectedStyle = selectedStyle;
	var selectedAndCanMove = {
	  cursor: 'move'
	};
	styles.selectedAndCanMove = selectedAndCanMove;
	var selectedAndCanResizeLeft = {
	  borderLeftWidth: 3
	};
	styles.selectedAndCanResizeLeft = selectedAndCanResizeLeft;
	var selectedAndCanResizeLeftAndDragLeft = {
	  cursor: 'w-resize'
	};
	styles.selectedAndCanResizeLeftAndDragLeft = selectedAndCanResizeLeftAndDragLeft;
	var selectedAndCanResizeRight = {
	  borderRightWidth: 3
	};
	styles.selectedAndCanResizeRight = selectedAndCanResizeRight;
	var selectedAndCanResizeRightAndDragRight = {
	  cursor: 'e-resize'
	};
	styles.selectedAndCanResizeRightAndDragRight = selectedAndCanResizeRightAndDragRight;
	var leftResizeStyle = {
	  position: "absolute",
	  width: 24,
	  maxWidth: "20%",
	  minWidth: 2,
	  height: "100%",
	  top: 0,
	  left: 0,
	  cursor: "pointer",
	  zIndex: 88
	};
	styles.leftResizeStyle = leftResizeStyle;
	var rightResizeStyle = {
	  position: "absolute",
	  width: 24,
	  maxWidth: "20%",
	  minWidth: 2,
	  height: "100%",
	  top: 0,
	  right: 0,
	  cursor: "pointer",
	  zIndex: 88
	};
	styles.rightResizeStyle = rightResizeStyle;
	return styles;
}

var hasRequiredItem;

function requireItem () {
	if (hasRequiredItem) return Item;
	hasRequiredItem = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = require("react");
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _interactjs = _interopRequireDefault(/*@__PURE__*/ requireInteract_min());
		var _moment = _interopRequireDefault(requireMoment());
		var _generic = requireGeneric();
		var _events = requireEvents();
		var _defaultItemRenderer = requireDefaultItemRenderer();
		var _calendar = requireCalendar();
		var _domHelpers = requireDomHelpers();
		var _styles = requireStyles();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var Item = /*#__PURE__*/
		function (_Component) {
		  _inherits(Item, _Component);

		  // removed prop type check for SPEED!
		  // they are coming from a trusted component anyway
		  // (this complicates performance debugging otherwise)
		  function Item(_props) {
		    var _this;
		    _classCallCheck(this, Item);
		    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this, _props));
		    _defineProperty(_assertThisInitialized(_this), "onMouseDown", function (e) {
		      if (!_this.state.interactMounted) {
		        e.preventDefault();
		        _this.startedClicking = true;
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
		      if (!_this.state.interactMounted && _this.startedClicking) {
		        _this.startedClicking = false;
		        _this.actualClick(e, 'click');
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "onTouchStart", function (e) {
		      if (!_this.state.interactMounted) {
		        e.preventDefault();
		        _this.startedTouching = true;
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function (e) {
		      if (!_this.state.interactMounted && _this.startedTouching) {
		        _this.startedTouching = false;
		        _this.actualClick(e, 'touch');
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleDoubleClick", function (e) {
		      e.stopPropagation();
		      if (_this.props.onItemDoubleClick) {
		        _this.props.onItemDoubleClick(_this.itemId, e);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleContextMenu", function (e) {
		      if (_this.props.onContextMenu) {
		        e.preventDefault();
		        e.stopPropagation();
		        _this.props.onContextMenu(_this.itemId, e);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "getItemRef", function (el) {
		      return _this.item = el;
		    });
		    _defineProperty(_assertThisInitialized(_this), "getDragLeftRef", function (el) {
		      return _this.dragLeft = el;
		    });
		    _defineProperty(_assertThisInitialized(_this), "getDragRightRef", function (el) {
		      return _this.dragRight = el;
		    });
		    _defineProperty(_assertThisInitialized(_this), "getItemProps", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		      //TODO: maybe shouldnt include all of these classes
		      var classNames = 'rct-item' + (_this.props.item.className ? " ".concat(_this.props.item.className) : '');
		      return {
		        key: _this.itemId,
		        ref: _this.getItemRef,
		        title: _this.itemDivTitle,
		        className: classNames + " ".concat(props.className ? props.className : ''),
		        onMouseDown: (0, _events.composeEvents)(_this.onMouseDown, props.onMouseDown),
		        onMouseUp: (0, _events.composeEvents)(_this.onMouseUp, props.onMouseUp),
		        onTouchStart: (0, _events.composeEvents)(_this.onTouchStart, props.onTouchStart),
		        onTouchEnd: (0, _events.composeEvents)(_this.onTouchEnd, props.onTouchEnd),
		        onDoubleClick: (0, _events.composeEvents)(_this.handleDoubleClick, props.onDoubleClick),
		        onContextMenu: (0, _events.composeEvents)(_this.handleContextMenu, props.onContextMenu),
		        style: Object.assign({}, _this.getItemStyle(props))
		      };
		    });
		    _defineProperty(_assertThisInitialized(_this), "getResizeProps", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		      var leftName = "rct-item-handler rct-item-handler-left rct-item-handler-resize-left";
		      if (props.leftClassName) {
		        leftName += " ".concat(props.leftClassName);
		      }
		      var rightName = "rct-item-handler rct-item-handler-right rct-item-handler-resize-right";
		      if (props.rightClassName) {
		        rightName += " ".concat(props.rightClassName);
		      }
		      return {
		        left: {
		          ref: _this.getDragLeftRef,
		          className: leftName,
		          style: Object.assign({}, _styles.leftResizeStyle, props.leftStyle)
		        },
		        right: {
		          ref: _this.getDragRightRef,
		          className: rightName,
		          style: Object.assign({}, _styles.rightResizeStyle, props.rightStyle)
		        }
		      };
		    });
		    _this.cacheDataFromProps(_props);
		    _this.state = {
		      interactMounted: false,
		      dragging: null,
		      dragStart: null,
		      preDragPosition: null,
		      dragTime: null,
		      dragGroupDelta: null,
		      resizing: null,
		      resizeEdge: null,
		      resizeStart: null,
		      resizeTime: null
		    };
		    return _this;
		  }
		  _createClass(Item, [{
		    key: "shouldComponentUpdate",
		    value: function shouldComponentUpdate(nextProps, nextState) {
		      var shouldUpdate = nextState.dragging !== this.state.dragging || nextState.dragTime !== this.state.dragTime || nextState.dragGroupDelta !== this.state.dragGroupDelta || nextState.resizing !== this.state.resizing || nextState.resizeTime !== this.state.resizeTime || nextProps.keys !== this.props.keys || !(0, _generic.deepObjectCompare)(nextProps.itemProps, this.props.itemProps) || nextProps.selected !== this.props.selected || nextProps.item !== this.props.item || nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || (nextProps.order ? nextProps.order.index : undefined) !== (this.props.order ? this.props.order.index : undefined) || nextProps.dragSnap !== this.props.dragSnap || nextProps.minResizeWidth !== this.props.minResizeWidth || nextProps.canChangeGroup !== this.props.canChangeGroup || nextProps.canSelect !== this.props.canSelect || nextProps.canMove !== this.props.canMove || nextProps.canResizeLeft !== this.props.canResizeLeft || nextProps.canResizeRight !== this.props.canResizeRight || nextProps.dimensions !== this.props.dimensions;
		      return shouldUpdate;
		    }
		  }, {
		    key: "cacheDataFromProps",
		    value: function cacheDataFromProps(props) {
		      this.itemId = (0, _generic._get)(props.item, props.keys.itemIdKey);
		      this.itemTitle = (0, _generic._get)(props.item, props.keys.itemTitleKey);
		      this.itemDivTitle = props.keys.itemDivTitleKey ? (0, _generic._get)(props.item, props.keys.itemDivTitleKey) : this.itemTitle;
		      this.itemTimeStart = (0, _generic._get)(props.item, props.keys.itemTimeStartKey);
		      this.itemTimeEnd = (0, _generic._get)(props.item, props.keys.itemTimeEndKey);
		    }
		  }, {
		    key: "getTimeRatio",
		    value: function getTimeRatio() {
		      var _this$props = this.props,
		        canvasTimeStart = _this$props.canvasTimeStart,
		        canvasTimeEnd = _this$props.canvasTimeEnd,
		        canvasWidth = _this$props.canvasWidth;
		      return (0, _calendar.coordinateToTimeRatio)(canvasTimeStart, canvasTimeEnd, canvasWidth);
		    }
		  }, {
		    key: "dragTimeSnap",
		    value: function dragTimeSnap(dragTime, considerOffset) {
		      var dragSnap = this.props.dragSnap;
		      if (dragSnap) {
		        var offset = considerOffset ? (0, _moment["default"])().utcOffset() * 60 * 1000 : 0;
		        return Math.round(dragTime / dragSnap) * dragSnap - offset % dragSnap;
		      } else {
		        return dragTime;
		      }
		    }
		  }, {
		    key: "resizeTimeSnap",
		    value: function resizeTimeSnap(dragTime) {
		      var dragSnap = this.props.dragSnap;
		      if (dragSnap) {
		        var endTime = this.itemTimeEnd % dragSnap;
		        return Math.round((dragTime - endTime) / dragSnap) * dragSnap + endTime;
		      } else {
		        return dragTime;
		      }
		    }
		  }, {
		    key: "dragTime",
		    value: function dragTime(e) {
		      var startTime = (0, _moment["default"])(this.itemTimeStart);
		      if (this.state.dragging) {
		        return this.dragTimeSnap(this.timeFor(e) + this.state.dragStart.offset, true);
		      } else {
		        return startTime;
		      }
		    }
		  }, {
		    key: "timeFor",
		    value: function timeFor(e) {
		      var ratio = (0, _calendar.coordinateToTimeRatio)(this.props.canvasTimeStart, this.props.canvasTimeEnd, this.props.canvasWidth);
		      var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetLeft;
		      var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);
		      return (e.pageX - offset + scrolls.scrollLeft) * ratio + this.props.canvasTimeStart;
		    }
		  }, {
		    key: "dragGroupDelta",
		    value: function dragGroupDelta(e) {
		      var _this$props2 = this.props,
		        groupTops = _this$props2.groupTops,
		        order = _this$props2.order;
		      if (this.state.dragging) {
		        if (!this.props.canChangeGroup) {
		          return 0;
		        }
		        var groupDelta = 0;
		        var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetTop;
		        var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);
		        for (var _i = 0, _Object$keys = Object.keys(groupTops); _i < _Object$keys.length; _i++) {
		          var key = _Object$keys[_i];
		          var groupTop = groupTops[key];
		          if (e.pageY - offset + scrolls.scrollTop > groupTop) {
		            groupDelta = parseInt(key, 10) - order.index;
		          } else {
		            break;
		          }
		        }
		        if (this.props.order.index + groupDelta < 0) {
		          return 0 - this.props.order.index;
		        } else {
		          return groupDelta;
		        }
		      } else {
		        return 0;
		      }
		    }
		  }, {
		    key: "resizeTimeDelta",
		    value: function resizeTimeDelta(e, resizeEdge) {
		      var length = this.itemTimeEnd - this.itemTimeStart;
		      var timeDelta = this.dragTimeSnap((e.pageX - this.state.resizeStart) * this.getTimeRatio());
		      if (length + (resizeEdge === 'left' ? -timeDelta : timeDelta) < (this.props.dragSnap || 1000)) {
		        if (resizeEdge === 'left') {
		          return length - (this.props.dragSnap || 1000);
		        } else {
		          return (this.props.dragSnap || 1000) - length;
		        }
		      } else {
		        return timeDelta;
		      }
		    }
		  }, {
		    key: "mountInteract",
		    value: function mountInteract() {
		      var _this2 = this;
		      var leftResize = this.props.useResizeHandle ? ".rct-item-handler-resize-left" : true;
		      var rightResize = this.props.useResizeHandle ? ".rct-item-handler-resize-right" : true;
		      (0, _interactjs["default"])(this.item).resizable({
		        edges: {
		          left: this.canResizeLeft() && leftResize,
		          right: this.canResizeRight() && rightResize,
		          top: false,
		          bottom: false
		        },
		        enabled: this.props.selected && (this.canResizeLeft() || this.canResizeRight())
		      }).draggable({
		        enabled: this.props.selected && this.canMove()
		      }).styleCursor(false).on('dragstart', function (e) {
		        if (_this2.props.selected) {
		          var clickTime = _this2.timeFor(e);
		          _this2.setState({
		            dragging: true,
		            dragStart: {
		              x: e.pageX,
		              y: e.pageY,
		              offset: _this2.itemTimeStart - clickTime
		            },
		            preDragPosition: {
		              x: e.target.offsetLeft,
		              y: e.target.offsetTop
		            },
		            dragTime: _this2.itemTimeStart,
		            dragGroupDelta: 0
		          });
		        } else {
		          return false;
		        }
		      }).on('dragmove', function (e) {
		        if (_this2.state.dragging) {
		          var dragTime = _this2.dragTime(e);
		          var dragGroupDelta = _this2.dragGroupDelta(e);
		          if (_this2.props.moveResizeValidator) {
		            dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);
		          }
		          if (_this2.props.onDrag) {
		            _this2.props.onDrag(_this2.itemId, dragTime, _this2.props.order.index + dragGroupDelta);
		          }
		          _this2.setState({
		            dragTime: dragTime,
		            dragGroupDelta: dragGroupDelta
		          });
		        }
		      }).on('dragend', function (e) {
		        if (_this2.state.dragging) {
		          if (_this2.props.onDrop) {
		            var dragTime = _this2.dragTime(e);
		            if (_this2.props.moveResizeValidator) {
		              dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);
		            }
		            _this2.props.onDrop(_this2.itemId, dragTime, _this2.props.order.index + _this2.dragGroupDelta(e));
		          }
		          _this2.setState({
		            dragging: false,
		            dragStart: null,
		            preDragPosition: null,
		            dragTime: null,
		            dragGroupDelta: null
		          });
		        }
		      }).on('resizestart', function (e) {
		        if (_this2.props.selected) {
		          _this2.setState({
		            resizing: true,
		            resizeEdge: null,
		            // we don't know yet
		            resizeStart: e.pageX,
		            resizeTime: 0
		          });
		        } else {
		          return false;
		        }
		      }).on('resizemove', function (e) {
		        if (_this2.state.resizing) {
		          var resizeEdge = _this2.state.resizeEdge;
		          if (!resizeEdge) {
		            resizeEdge = e.deltaRect.left !== 0 ? 'left' : 'right';
		            _this2.setState({
		              resizeEdge: resizeEdge
		            });
		          }
		          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));
		          if (_this2.props.moveResizeValidator) {
		            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);
		          }
		          if (_this2.props.onResizing) {
		            _this2.props.onResizing(_this2.itemId, resizeTime, resizeEdge);
		          }
		          _this2.setState({
		            resizeTime: resizeTime
		          });
		        }
		      }).on('resizeend', function (e) {
		        if (_this2.state.resizing) {
		          var resizeEdge = _this2.state.resizeEdge;
		          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));
		          if (_this2.props.moveResizeValidator) {
		            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);
		          }
		          if (_this2.props.onResized) {
		            _this2.props.onResized(_this2.itemId, resizeTime, resizeEdge, _this2.resizeTimeDelta(e, resizeEdge));
		          }
		          _this2.setState({
		            resizing: null,
		            resizeStart: null,
		            resizeEdge: null,
		            resizeTime: null
		          });
		        }
		      }).on('tap', function (e) {
		        _this2.actualClick(e, e.pointerType === 'mouse' ? 'click' : 'touch');
		      });
		      this.setState({
		        interactMounted: true
		      });
		    }
		  }, {
		    key: "canResizeLeft",
		    value: function canResizeLeft() {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
		      if (!props.canResizeLeft) {
		        return false;
		      }
		      var width = parseInt(props.dimensions.width, 10);
		      return width >= props.minResizeWidth;
		    }
		  }, {
		    key: "canResizeRight",
		    value: function canResizeRight() {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
		      if (!props.canResizeRight) {
		        return false;
		      }
		      var width = parseInt(props.dimensions.width, 10);
		      return width >= props.minResizeWidth;
		    }
		  }, {
		    key: "canMove",
		    value: function canMove() {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
		      return !!props.canMove;
		    }
		  }, {
		    key: "componentDidUpdate",
		    value: function componentDidUpdate(prevProps) {
		      this.cacheDataFromProps(this.props);
		      var interactMounted = this.state.interactMounted;
		      var couldDrag = prevProps.selected && this.canMove(prevProps);
		      var couldResizeLeft = prevProps.selected && this.canResizeLeft(prevProps);
		      var couldResizeRight = prevProps.selected && this.canResizeRight(prevProps);
		      var willBeAbleToDrag = this.props.selected && this.canMove(this.props);
		      var willBeAbleToResizeLeft = this.props.selected && this.canResizeLeft(this.props);
		      var willBeAbleToResizeRight = this.props.selected && this.canResizeRight(this.props);
		      if (!!this.item) {
		        if (this.props.selected && !interactMounted) {
		          this.mountInteract();
		          interactMounted = true;
		        }
		        if (interactMounted && (couldResizeLeft !== willBeAbleToResizeLeft || couldResizeRight !== willBeAbleToResizeRight)) {
		          var leftResize = this.props.useResizeHandle ? this.dragLeft : true;
		          var rightResize = this.props.useResizeHandle ? this.dragRight : true;
		          (0, _interactjs["default"])(this.item).resizable({
		            enabled: willBeAbleToResizeLeft || willBeAbleToResizeRight,
		            edges: {
		              top: false,
		              bottom: false,
		              left: willBeAbleToResizeLeft && leftResize,
		              right: willBeAbleToResizeRight && rightResize
		            }
		          });
		        }
		        if (interactMounted && couldDrag !== willBeAbleToDrag) {
		          (0, _interactjs["default"])(this.item).draggable({
		            enabled: willBeAbleToDrag
		          });
		        }
		      } else {
		        interactMounted = false;
		      }
		      this.setState({
		        interactMounted: interactMounted
		      });
		    }
		  }, {
		    key: "actualClick",
		    value: function actualClick(e, clickType) {
		      if (this.props.canSelect && this.props.onSelect) {
		        this.props.onSelect(this.itemId, clickType, e);
		      }
		    }
		  }, {
		    key: "getItemStyle",
		    value: function getItemStyle(props) {
		      var dimensions = this.props.dimensions;
		      var baseStyles = {
		        position: 'absolute',
		        boxSizing: 'border-box',
		        left: "".concat(dimensions.left, "px"),
		        top: "".concat(dimensions.top, "px"),
		        width: "".concat(dimensions.width, "px"),
		        height: "".concat(dimensions.height, "px"),
		        lineHeight: "".concat(dimensions.height, "px")
		      };
		      var finalStyle = Object.assign({}, _styles.overridableStyles, this.props.selected ? _styles.selectedStyle : {}, this.props.selected & this.canMove(this.props) ? _styles.selectedAndCanMove : {}, this.props.selected & this.canResizeLeft(this.props) ? _styles.selectedAndCanResizeLeft : {}, this.props.selected & this.canResizeLeft(this.props) & this.state.dragging ? _styles.selectedAndCanResizeLeftAndDragLeft : {}, this.props.selected & this.canResizeRight(this.props) ? _styles.selectedAndCanResizeRight : {}, this.props.selected & this.canResizeRight(this.props) & this.state.dragging ? _styles.selectedAndCanResizeRightAndDragRight : {}, props.style, baseStyles);
		      return finalStyle;
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      if (typeof this.props.order === 'undefined' || this.props.order === null) {
		        return null;
		      }
		      var timelineContext = this.context.getTimelineContext();
		      var itemContext = {
		        dimensions: this.props.dimensions,
		        useResizeHandle: this.props.useResizeHandle,
		        title: this.itemTitle,
		        canMove: this.canMove(this.props),
		        canResizeLeft: this.canResizeLeft(this.props),
		        canResizeRight: this.canResizeRight(this.props),
		        selected: this.props.selected,
		        dragging: this.state.dragging,
		        dragStart: this.state.dragStart,
		        dragTime: this.state.dragTime,
		        dragGroupDelta: this.state.dragGroupDelta,
		        resizing: this.state.resizing,
		        resizeEdge: this.state.resizeEdge,
		        resizeStart: this.state.resizeStart,
		        resizeTime: this.state.resizeTime,
		        width: this.props.dimensions.width
		      };
		      return this.props.itemRenderer({
		        item: this.props.item,
		        timelineContext: timelineContext,
		        itemContext: itemContext,
		        getItemProps: this.getItemProps,
		        getResizeProps: this.getResizeProps
		      });
		    }
		  }]);
		  return Item;
		}(_react.Component);
		exports["default"] = Item;
		_defineProperty(Item, "propTypes", {
		  canvasTimeStart: _propTypes["default"].number.isRequired,
		  canvasTimeEnd: _propTypes["default"].number.isRequired,
		  canvasWidth: _propTypes["default"].number.isRequired,
		  order: _propTypes["default"].object,
		  dragSnap: _propTypes["default"].number,
		  minResizeWidth: _propTypes["default"].number,
		  selected: _propTypes["default"].bool,
		  canChangeGroup: _propTypes["default"].bool.isRequired,
		  canMove: _propTypes["default"].bool.isRequired,
		  canResizeLeft: _propTypes["default"].bool.isRequired,
		  canResizeRight: _propTypes["default"].bool.isRequired,
		  keys: _propTypes["default"].object.isRequired,
		  item: _propTypes["default"].object.isRequired,
		  onSelect: _propTypes["default"].func,
		  onDrag: _propTypes["default"].func,
		  onDrop: _propTypes["default"].func,
		  onResizing: _propTypes["default"].func,
		  onResized: _propTypes["default"].func,
		  onContextMenu: _propTypes["default"].func,
		  itemRenderer: _propTypes["default"].func,
		  itemProps: _propTypes["default"].object,
		  canSelect: _propTypes["default"].bool,
		  dimensions: _propTypes["default"].object,
		  groupTops: _propTypes["default"].array,
		  useResizeHandle: _propTypes["default"].bool,
		  moveResizeValidator: _propTypes["default"].func,
		  onItemDoubleClick: _propTypes["default"].func,
		  scrollRef: _propTypes["default"].object
		});
		_defineProperty(Item, "defaultProps", {
		  selected: false,
		  itemRenderer: _defaultItemRenderer.defaultItemRenderer
		});
		_defineProperty(Item, "contextTypes", {
		  getTimelineContext: _propTypes["default"].func
		}); 
	} (Item));
	return Item;
}

var hasRequiredItems;

function requireItems () {
	if (hasRequiredItems) return Items;
	hasRequiredItems = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _react = _interopRequireWildcard(require("react"));
		var _Item = _interopRequireDefault(requireItem());
		var _generic = requireGeneric();
		var _calendar = requireCalendar();
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var canResizeLeft = function canResizeLeft(item, canResize) {
		  var value = (0, _generic._get)(item, 'canResize') !== undefined ? (0, _generic._get)(item, 'canResize') : canResize;
		  return value === 'left' || value === 'both';
		};
		var canResizeRight = function canResizeRight(item, canResize) {
		  var value = (0, _generic._get)(item, 'canResize') !== undefined ? (0, _generic._get)(item, 'canResize') : canResize;
		  return value === 'right' || value === 'both' || value === true;
		};
		var Items = /*#__PURE__*/
		function (_Component) {
		  _inherits(Items, _Component);
		  function Items() {
		    _classCallCheck(this, Items);
		    return _possibleConstructorReturn(this, _getPrototypeOf(Items).apply(this, arguments));
		  }
		  _createClass(Items, [{
		    key: "shouldComponentUpdate",
		    value: function shouldComponentUpdate(nextProps) {
		      return !((0, _generic.arraysEqual)(nextProps.groups, this.props.groups) && (0, _generic.arraysEqual)(nextProps.items, this.props.items) && (0, _generic.arraysEqual)(nextProps.dimensionItems, this.props.dimensionItems) && nextProps.keys === this.props.keys && nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.selectedItem === this.props.selectedItem && nextProps.selected === this.props.selected && nextProps.dragSnap === this.props.dragSnap && nextProps.minResizeWidth === this.props.minResizeWidth && nextProps.canChangeGroup === this.props.canChangeGroup && nextProps.canMove === this.props.canMove && nextProps.canResize === this.props.canResize && nextProps.canSelect === this.props.canSelect);
		    }
		  }, {
		    key: "isSelected",
		    value: function isSelected(item, itemIdKey) {
		      if (!this.props.selected) {
		        return this.props.selectedItem === (0, _generic._get)(item, itemIdKey);
		      } else {
		        var target = (0, _generic._get)(item, itemIdKey);
		        return this.props.selected.includes(target);
		      }
		    }
		  }, {
		    key: "getVisibleItems",
		    value: function getVisibleItems(canvasTimeStart, canvasTimeEnd) {
		      var _this$props = this.props,
		        keys = _this$props.keys,
		        items = _this$props.items;
		      return (0, _calendar.getVisibleItems)(items, canvasTimeStart, canvasTimeEnd, keys);
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this = this;
		      var _this$props2 = this.props,
		        canvasTimeStart = _this$props2.canvasTimeStart,
		        canvasTimeEnd = _this$props2.canvasTimeEnd,
		        dimensionItems = _this$props2.dimensionItems,
		        keys = _this$props2.keys,
		        groups = _this$props2.groups;
		      var itemIdKey = keys.itemIdKey,
		        itemGroupKey = keys.itemGroupKey;
		      var groupOrders = (0, _calendar.getGroupOrders)(groups, keys);
		      var visibleItems = this.getVisibleItems(canvasTimeStart, canvasTimeEnd, groupOrders);
		      var sortedDimensionItems = (0, _generic.keyBy)(dimensionItems, 'id');
		      return _react["default"].createElement("div", {
		        className: "rct-items"
		      }, visibleItems.filter(function (item) {
		        return sortedDimensionItems[(0, _generic._get)(item, itemIdKey)];
		      }).map(function (item) {
		        return _react["default"].createElement(_Item["default"], {
		          key: (0, _generic._get)(item, itemIdKey),
		          item: item,
		          keys: _this.props.keys,
		          order: groupOrders[(0, _generic._get)(item, itemGroupKey)],
		          dimensions: sortedDimensionItems[(0, _generic._get)(item, itemIdKey)].dimensions,
		          selected: _this.isSelected(item, itemIdKey),
		          canChangeGroup: (0, _generic._get)(item, 'canChangeGroup') !== undefined ? (0, _generic._get)(item, 'canChangeGroup') : _this.props.canChangeGroup,
		          canMove: (0, _generic._get)(item, 'canMove') !== undefined ? (0, _generic._get)(item, 'canMove') : _this.props.canMove,
		          canResizeLeft: canResizeLeft(item, _this.props.canResize),
		          canResizeRight: canResizeRight(item, _this.props.canResize),
		          canSelect: (0, _generic._get)(item, 'canSelect') !== undefined ? (0, _generic._get)(item, 'canSelect') : _this.props.canSelect,
		          useResizeHandle: _this.props.useResizeHandle,
		          groupTops: _this.props.groupTops,
		          canvasTimeStart: _this.props.canvasTimeStart,
		          canvasTimeEnd: _this.props.canvasTimeEnd,
		          canvasWidth: _this.props.canvasWidth,
		          dragSnap: _this.props.dragSnap,
		          minResizeWidth: _this.props.minResizeWidth,
		          onResizing: _this.props.itemResizing,
		          onResized: _this.props.itemResized,
		          moveResizeValidator: _this.props.moveResizeValidator,
		          onDrag: _this.props.itemDrag,
		          onDrop: _this.props.itemDrop,
		          onItemDoubleClick: _this.props.onItemDoubleClick,
		          onContextMenu: _this.props.onItemContextMenu,
		          onSelect: _this.props.itemSelect,
		          itemRenderer: _this.props.itemRenderer,
		          scrollRef: _this.props.scrollRef
		        });
		      }));
		    }
		  }]);
		  return Items;
		}(_react.Component);
		exports["default"] = Items;
		_defineProperty(Items, "propTypes", {
		  groups: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
		  items: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
		  canvasTimeStart: _propTypes["default"].number.isRequired,
		  canvasTimeEnd: _propTypes["default"].number.isRequired,
		  canvasWidth: _propTypes["default"].number.isRequired,
		  dragSnap: _propTypes["default"].number,
		  minResizeWidth: _propTypes["default"].number,
		  selectedItem: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
		  canChangeGroup: _propTypes["default"].bool.isRequired,
		  canMove: _propTypes["default"].bool.isRequired,
		  canResize: _propTypes["default"].oneOf([true, false, 'left', 'right', 'both']),
		  canSelect: _propTypes["default"].bool,
		  keys: _propTypes["default"].object.isRequired,
		  moveResizeValidator: _propTypes["default"].func,
		  itemSelect: _propTypes["default"].func,
		  itemDrag: _propTypes["default"].func,
		  itemDrop: _propTypes["default"].func,
		  itemResizing: _propTypes["default"].func,
		  itemResized: _propTypes["default"].func,
		  onItemDoubleClick: _propTypes["default"].func,
		  onItemContextMenu: _propTypes["default"].func,
		  itemRenderer: _propTypes["default"].func,
		  selected: _propTypes["default"].array,
		  dimensionItems: _propTypes["default"].array,
		  groupTops: _propTypes["default"].array,
		  useResizeHandle: _propTypes["default"].bool,
		  scrollRef: _propTypes["default"].object
		});
		_defineProperty(Items, "defaultProps", {
		  selected: []
		}); 
	} (Items));
	return Items;
}

var Sidebar = {};

var hasRequiredSidebar;

function requireSidebar () {
	if (hasRequiredSidebar) return Sidebar;
	hasRequiredSidebar = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _react = _interopRequireWildcard(require("react"));
		var _generic = requireGeneric();
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var Sidebar = /*#__PURE__*/
		function (_Component) {
		  _inherits(Sidebar, _Component);
		  function Sidebar() {
		    _classCallCheck(this, Sidebar);
		    return _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).apply(this, arguments));
		  }
		  _createClass(Sidebar, [{
		    key: "shouldComponentUpdate",
		    value: function shouldComponentUpdate(nextProps) {
		      return !(nextProps.keys === this.props.keys && nextProps.width === this.props.width && nextProps.height === this.props.height && (0, _generic.arraysEqual)(nextProps.groups, this.props.groups) && (0, _generic.arraysEqual)(nextProps.groupHeights, this.props.groupHeights));
		    }
		  }, {
		    key: "renderGroupContent",
		    value: function renderGroupContent(group, isRightSidebar, groupTitleKey, groupRightTitleKey) {
		      if (this.props.groupRenderer) {
		        return _react["default"].createElement(this.props.groupRenderer, {
		          group: group,
		          isRightSidebar: isRightSidebar
		        });
		      } else {
		        return (0, _generic._get)(group, isRightSidebar ? groupRightTitleKey : groupTitleKey);
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this = this;
		      var _this$props = this.props,
		        width = _this$props.width,
		        groupHeights = _this$props.groupHeights,
		        height = _this$props.height,
		        isRightSidebar = _this$props.isRightSidebar;
		      var _this$props$keys = this.props.keys,
		        groupIdKey = _this$props$keys.groupIdKey,
		        groupTitleKey = _this$props$keys.groupTitleKey,
		        groupRightTitleKey = _this$props$keys.groupRightTitleKey;
		      var sidebarStyle = {
		        width: "".concat(width, "px"),
		        height: "".concat(height, "px")
		      };
		      var groupsStyle = {
		        width: "".concat(width, "px")
		      };
		      var groupLines = this.props.groups.map(function (group, index) {
		        var elementStyle = {
		          height: "".concat(groupHeights[index], "px"),
		          lineHeight: "".concat(groupHeights[index], "px")
		        };
		        return _react["default"].createElement("div", {
		          key: (0, _generic._get)(group, groupIdKey),
		          className: 'rct-sidebar-row rct-sidebar-row-' + (index % 2 === 0 ? 'even' : 'odd'),
		          style: elementStyle
		        }, _this.renderGroupContent(group, isRightSidebar, groupTitleKey, groupRightTitleKey));
		      });
		      return _react["default"].createElement("div", {
		        className: 'rct-sidebar' + (isRightSidebar ? ' rct-sidebar-right' : ''),
		        style: sidebarStyle
		      }, _react["default"].createElement("div", {
		        style: groupsStyle
		      }, groupLines));
		    }
		  }]);
		  return Sidebar;
		}(_react.Component);
		exports["default"] = Sidebar;
		_defineProperty(Sidebar, "propTypes", {
		  groups: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
		  width: _propTypes["default"].number.isRequired,
		  height: _propTypes["default"].number.isRequired,
		  groupHeights: _propTypes["default"].array.isRequired,
		  keys: _propTypes["default"].object.isRequired,
		  groupRenderer: _propTypes["default"].func,
		  isRightSidebar: _propTypes["default"].bool
		}); 
	} (Sidebar));
	return Sidebar;
}

var Columns = {};

var TimelineStateContext = {};

var lib = {exports: {}};

var implementation = {exports: {}};

var gud;
var hasRequiredGud;

function requireGud () {
	if (hasRequiredGud) return gud;
	hasRequiredGud = 1;

	var key = '__global_unique_id__';
	gud = function () {
	  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
	};
	return gud;
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var warning_1;
var hasRequiredWarning;

function requireWarning () {
	if (hasRequiredWarning) return warning_1;
	hasRequiredWarning = 1;
	var warning = function () {};
	{
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 1 ? len - 1 : 0);
	    for (var key = 1; key < len; key++) {
	      args[key - 1] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	  warning = function (condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}
	warning_1 = warning;
	return warning_1;
}

var hasRequiredImplementation;

function requireImplementation () {
	if (hasRequiredImplementation) return implementation.exports;
	hasRequiredImplementation = 1;
	(function (module, exports) {

		exports.__esModule = true;
		var _react = require('react');
		_interopRequireDefault(_react);
		var _propTypes = /*@__PURE__*/ requirePropTypes();
		var _propTypes2 = _interopRequireDefault(_propTypes);
		var _gud = requireGud();
		var _gud2 = _interopRequireDefault(_gud);
		var _warning = requireWarning();
		var _warning2 = _interopRequireDefault(_warning);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _possibleConstructorReturn(self, call) {
		  if (!self) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      enumerable: false,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}
		var MAX_SIGNED_31_BIT_INT = 1073741823;

		// Inlined Object.is polyfill.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		function objectIs(x, y) {
		  if (x === y) {
		    return x !== 0 || 1 / x === 1 / y;
		  } else {
		    return x !== x && y !== y;
		  }
		}
		function createEventEmitter(value) {
		  var handlers = [];
		  return {
		    on: function on(handler) {
		      handlers.push(handler);
		    },
		    off: function off(handler) {
		      handlers = handlers.filter(function (h) {
		        return h !== handler;
		      });
		    },
		    get: function get() {
		      return value;
		    },
		    set: function set(newValue, changedBits) {
		      value = newValue;
		      handlers.forEach(function (handler) {
		        return handler(value, changedBits);
		      });
		    }
		  };
		}
		function onlyChild(children) {
		  return Array.isArray(children) ? children[0] : children;
		}
		function createReactContext(defaultValue, calculateChangedBits) {
		  var _Provider$childContex, _Consumer$contextType;
		  var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';
		  var Provider = function (_Component) {
		    _inherits(Provider, _Component);
		    function Provider() {
		      var _temp, _this, _ret;
		      _classCallCheck(this, Provider);
		      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		        args[_key] = arguments[_key];
		      }
		      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
		    }
		    Provider.prototype.getChildContext = function getChildContext() {
		      var _ref;
		      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
		    };
		    Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		      if (this.props.value !== nextProps.value) {
		        var oldValue = this.props.value;
		        var newValue = nextProps.value;
		        var changedBits = void 0;
		        if (objectIs(oldValue, newValue)) {
		          changedBits = 0; // No change
		        } else {
		          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
		          {
		            (0, _warning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
		          }
		          changedBits |= 0;
		          if (changedBits !== 0) {
		            this.emitter.set(nextProps.value, changedBits);
		          }
		        }
		      }
		    };
		    Provider.prototype.render = function render() {
		      return this.props.children;
		    };
		    return Provider;
		  }(_react.Component);
		  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);
		  var Consumer = function (_Component2) {
		    _inherits(Consumer, _Component2);
		    function Consumer() {
		      var _temp2, _this2, _ret2;
		      _classCallCheck(this, Consumer);
		      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }
		      return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
		        value: _this2.getValue()
		      }, _this2.onUpdate = function (newValue, changedBits) {
		        var observedBits = _this2.observedBits | 0;
		        if ((observedBits & changedBits) !== 0) {
		          _this2.setState({
		            value: _this2.getValue()
		          });
		        }
		      }, _temp2), _possibleConstructorReturn(_this2, _ret2);
		    }
		    Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		      var observedBits = nextProps.observedBits;
		      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
		      : observedBits;
		    };
		    Consumer.prototype.componentDidMount = function componentDidMount() {
		      if (this.context[contextProp]) {
		        this.context[contextProp].on(this.onUpdate);
		      }
		      var observedBits = this.props.observedBits;
		      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
		      : observedBits;
		    };
		    Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
		      if (this.context[contextProp]) {
		        this.context[contextProp].off(this.onUpdate);
		      }
		    };
		    Consumer.prototype.getValue = function getValue() {
		      if (this.context[contextProp]) {
		        return this.context[contextProp].get();
		      } else {
		        return defaultValue;
		      }
		    };
		    Consumer.prototype.render = function render() {
		      return onlyChild(this.props.children)(this.state.value);
		    };
		    return Consumer;
		  }(_react.Component);
		  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
		  return {
		    Provider: Provider,
		    Consumer: Consumer
		  };
		}
		exports.default = createReactContext;
		module.exports = exports['default']; 
	} (implementation, implementation.exports));
	return implementation.exports;
}

var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib.exports;
	hasRequiredLib$1 = 1;
	(function (module, exports) {

		exports.__esModule = true;
		var _react = require('react');
		var _react2 = _interopRequireDefault(_react);
		var _implementation = requireImplementation();
		var _implementation2 = _interopRequireDefault(_implementation);
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		exports.default = _react2.default.createContext || _implementation2.default;
		module.exports = exports['default']; 
	} (lib, lib.exports));
	return lib.exports;
}

var hasRequiredTimelineStateContext;

function requireTimelineStateContext () {
	if (hasRequiredTimelineStateContext) return TimelineStateContext;
	hasRequiredTimelineStateContext = 1;

	Object.defineProperty(TimelineStateContext, "__esModule", {
	  value: true
	});
	TimelineStateContext.TimelineStateConsumer = TimelineStateContext.TimelineStateProvider = void 0;
	var _react = _interopRequireDefault(require("react"));
	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
	var _createReactContext2 = _interopRequireDefault(requireLib$1());
	var _calendar = requireCalendar();
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }
	  return _typeof(obj);
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}
	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }
	  return _assertThisInitialized(self);
	}
	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}

	/* this context will hold all information regarding timeline state:
	  1. timeline width
	  2. visible time start and end
	  3. canvas time start and end
	  4. helpers for calculating left offset of items (and really...anything)
	*/

	/* eslint-disable no-console */
	var defaultContextState = {
	  getTimelineState: function getTimelineState() {
	    console.warn('"getTimelineState" default func is being used');
	  },
	  getLeftOffsetFromDate: function getLeftOffsetFromDate() {
	    console.warn('"getLeftOffsetFromDate" default func is being used');
	  },
	  getDateFromLeftOffsetPosition: function getDateFromLeftOffsetPosition() {
	    console.warn('"getDateFromLeftOffsetPosition" default func is being used');
	  },
	  showPeriod: function showPeriod() {
	    console.warn('"showPeriod" default func is being used');
	  }
	  /* eslint-enable */
	};
	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
	  Consumer = _createReactContext.Consumer,
	  Provider = _createReactContext.Provider;
	var TimelineStateProvider = /*#__PURE__*/
	function (_React$Component) {
	  _inherits(TimelineStateProvider, _React$Component);

	  /* eslint-disable react/no-unused-prop-types */
	  function TimelineStateProvider(props) {
	    var _this;
	    _classCallCheck(this, TimelineStateProvider);
	    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimelineStateProvider).call(this, props));
	    _defineProperty(_assertThisInitialized(_this), "getTimelineState", function () {
	      var _this$props = _this.props,
	        visibleTimeStart = _this$props.visibleTimeStart,
	        visibleTimeEnd = _this$props.visibleTimeEnd,
	        canvasTimeStart = _this$props.canvasTimeStart,
	        canvasTimeEnd = _this$props.canvasTimeEnd,
	        canvasWidth = _this$props.canvasWidth,
	        timelineUnit = _this$props.timelineUnit,
	        timelineWidth = _this$props.timelineWidth;
	      return {
	        visibleTimeStart: visibleTimeStart,
	        visibleTimeEnd: visibleTimeEnd,
	        canvasTimeStart: canvasTimeStart,
	        canvasTimeEnd: canvasTimeEnd,
	        canvasWidth: canvasWidth,
	        timelineUnit: timelineUnit,
	        timelineWidth: timelineWidth // REVIEW,
	      };
	    });
	    _defineProperty(_assertThisInitialized(_this), "getLeftOffsetFromDate", function (date) {
	      var _this$props2 = _this.props,
	        canvasTimeStart = _this$props2.canvasTimeStart,
	        canvasTimeEnd = _this$props2.canvasTimeEnd,
	        canvasWidth = _this$props2.canvasWidth;
	      return (0, _calendar.calculateXPositionForTime)(canvasTimeStart, canvasTimeEnd, canvasWidth, date);
	    });
	    _defineProperty(_assertThisInitialized(_this), "getDateFromLeftOffsetPosition", function (leftOffset) {
	      var _this$props3 = _this.props,
	        canvasTimeStart = _this$props3.canvasTimeStart,
	        canvasTimeEnd = _this$props3.canvasTimeEnd,
	        canvasWidth = _this$props3.canvasWidth;
	      return (0, _calendar.calculateTimeForXPosition)(canvasTimeStart, canvasTimeEnd, canvasWidth, leftOffset);
	    });
	    _this.state = {
	      timelineContext: {
	        getTimelineState: _this.getTimelineState,
	        getLeftOffsetFromDate: _this.getLeftOffsetFromDate,
	        getDateFromLeftOffsetPosition: _this.getDateFromLeftOffsetPosition,
	        showPeriod: _this.props.showPeriod
	      }
	    };
	    return _this;
	  }
	  _createClass(TimelineStateProvider, [{
	    key: "render",
	    value: function render() {
	      return _react["default"].createElement(Provider, {
	        value: this.state.timelineContext
	      }, this.props.children);
	    }
	  }]);
	  return TimelineStateProvider;
	}(_react["default"].Component);
	TimelineStateContext.TimelineStateProvider = TimelineStateProvider;
	_defineProperty(TimelineStateProvider, "propTypes", {
	  children: _propTypes["default"].element.isRequired,
	  visibleTimeStart: _propTypes["default"].number.isRequired,
	  visibleTimeEnd: _propTypes["default"].number.isRequired,
	  canvasTimeStart: _propTypes["default"].number.isRequired,
	  canvasTimeEnd: _propTypes["default"].number.isRequired,
	  canvasWidth: _propTypes["default"].number.isRequired,
	  showPeriod: _propTypes["default"].func.isRequired,
	  timelineUnit: _propTypes["default"].string.isRequired,
	  timelineWidth: _propTypes["default"].number.isRequired
	});
	var TimelineStateConsumer = Consumer;
	TimelineStateContext.TimelineStateConsumer = TimelineStateConsumer;
	return TimelineStateContext;
}

var hasRequiredColumns;

function requireColumns () {
	if (hasRequiredColumns) return Columns;
	hasRequiredColumns = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _react = _interopRequireWildcard(require("react"));
		var _calendar = requireCalendar();
		var _TimelineStateContext = requireTimelineStateContext();
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var passThroughPropTypes = {
		  canvasTimeStart: _propTypes["default"].number.isRequired,
		  canvasTimeEnd: _propTypes["default"].number.isRequired,
		  canvasWidth: _propTypes["default"].number.isRequired,
		  lineCount: _propTypes["default"].number.isRequired,
		  minUnit: _propTypes["default"].string.isRequired,
		  timeSteps: _propTypes["default"].object.isRequired,
		  height: _propTypes["default"].number.isRequired,
		  verticalLineClassNamesForTime: _propTypes["default"].func
		};
		var Columns = /*#__PURE__*/
		function (_Component) {
		  _inherits(Columns, _Component);
		  function Columns() {
		    _classCallCheck(this, Columns);
		    return _possibleConstructorReturn(this, _getPrototypeOf(Columns).apply(this, arguments));
		  }
		  _createClass(Columns, [{
		    key: "shouldComponentUpdate",
		    value: function shouldComponentUpdate(nextProps) {
		      return !(nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.lineCount === this.props.lineCount && nextProps.minUnit === this.props.minUnit && nextProps.timeSteps === this.props.timeSteps && nextProps.height === this.props.height && nextProps.verticalLineClassNamesForTime === this.props.verticalLineClassNamesForTime);
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this$props = this.props,
		        canvasTimeStart = _this$props.canvasTimeStart,
		        canvasTimeEnd = _this$props.canvasTimeEnd;
		        _this$props.canvasWidth;
		        var minUnit = _this$props.minUnit,
		        timeSteps = _this$props.timeSteps,
		        height = _this$props.height,
		        verticalLineClassNamesForTime = _this$props.verticalLineClassNamesForTime,
		        getLeftOffsetFromDate = _this$props.getLeftOffsetFromDate;
		      var lines = [];
		      (0, _calendar.iterateTimes)(canvasTimeStart, canvasTimeEnd, minUnit, timeSteps, function (time, nextTime) {
		        var minUnitValue = time.get(minUnit === 'day' ? 'date' : minUnit);
		        var firstOfType = minUnitValue === (minUnit === 'day' ? 1 : 0);
		        var classNamesForTime = [];
		        if (verticalLineClassNamesForTime) {
		          classNamesForTime = verticalLineClassNamesForTime(time.unix() * 1000,
		          // turn into ms, which is what verticalLineClassNamesForTime expects
		          nextTime.unix() * 1000 - 1);
		        } // TODO: rename or remove class that has reference to vertical-line

		        var classNames = 'rct-vl' + (firstOfType ? ' rct-vl-first' : '') + (minUnit === 'day' || minUnit === 'hour' || minUnit === 'minute' ? " rct-day-".concat(time.day(), " ") : ' ') + classNamesForTime.join(' ');
		        var left = getLeftOffsetFromDate(time.valueOf());
		        var right = getLeftOffsetFromDate(nextTime.valueOf());
		        lines.push(_react["default"].createElement("div", {
		          key: "line-".concat(time.valueOf()),
		          className: classNames,
		          style: {
		            pointerEvents: 'none',
		            top: '0px',
		            left: "".concat(left, "px"),
		            width: "".concat(right - left, "px"),
		            height: "".concat(height, "px")
		          }
		        }));
		      });
		      return _react["default"].createElement("div", {
		        className: "rct-vertical-lines"
		      }, lines);
		    }
		  }]);
		  return Columns;
		}(_react.Component);
		_defineProperty(Columns, "propTypes", _objectSpread({}, passThroughPropTypes, {
		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired
		}));
		var ColumnsWrapper = function ColumnsWrapper(_ref) {
		  var props = _extends({}, _ref);
		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref2) {
		    var getLeftOffsetFromDate = _ref2.getLeftOffsetFromDate;
		    return _react["default"].createElement(Columns, _extends({
		      getLeftOffsetFromDate: getLeftOffsetFromDate
		    }, props));
		  });
		};
		ColumnsWrapper.defaultProps = _objectSpread({}, passThroughPropTypes);
		var _default = ColumnsWrapper;
		exports["default"] = _default; 
	} (Columns));
	return Columns;
}

var GroupRows = {};

var GroupRow = {};

var PreventClickOnDrag = {};

var hasRequiredPreventClickOnDrag;

function requirePreventClickOnDrag () {
	if (hasRequiredPreventClickOnDrag) return PreventClickOnDrag;
	hasRequiredPreventClickOnDrag = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireWildcard(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var PreventClickOnDrag = /*#__PURE__*/
		function (_Component) {
		  _inherits(PreventClickOnDrag, _Component);
		  function PreventClickOnDrag() {
		    var _getPrototypeOf2;
		    var _this;
		    _classCallCheck(this, PreventClickOnDrag);
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PreventClickOnDrag)).call.apply(_getPrototypeOf2, [this].concat(args)));
		    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function (evt) {
		      _this.originClickX = evt.clientX;
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function (evt) {
		      if (Math.abs(_this.originClickX - evt.clientX) > _this.props.clickTolerance) {
		        _this.cancelClick = true;
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleClick", function (evt) {
		      if (!_this.cancelClick) {
		        _this.props.onClick(evt);
		      }
		      _this.cancelClick = false;
		      _this.originClickX = null;
		    });
		    return _this;
		  }
		  _createClass(PreventClickOnDrag, [{
		    key: "render",
		    value: function render() {
		      var childElement = _react["default"].Children.only(this.props.children);
		      return _react["default"].cloneElement(childElement, {
		        onMouseDown: this.handleMouseDown,
		        onMouseUp: this.handleMouseUp,
		        onClick: this.handleClick
		      });
		    }
		  }]);
		  return PreventClickOnDrag;
		}(_react.Component);
		_defineProperty(PreventClickOnDrag, "propTypes", {
		  children: _propTypes["default"].element.isRequired,
		  onClick: _propTypes["default"].func.isRequired,
		  clickTolerance: _propTypes["default"].number.isRequired
		});
		var _default = PreventClickOnDrag;
		exports["default"] = _default; 
	} (PreventClickOnDrag));
	return PreventClickOnDrag;
}

var hasRequiredGroupRow;

function requireGroupRow () {
	if (hasRequiredGroupRow) return GroupRow;
	hasRequiredGroupRow = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireWildcard(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _PreventClickOnDrag = _interopRequireDefault(requirePreventClickOnDrag());
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var GroupRow = /*#__PURE__*/
		function (_Component) {
		  _inherits(GroupRow, _Component);
		  function GroupRow() {
		    _classCallCheck(this, GroupRow);
		    return _possibleConstructorReturn(this, _getPrototypeOf(GroupRow).apply(this, arguments));
		  }
		  _createClass(GroupRow, [{
		    key: "render",
		    value: function render() {
		      var _this$props = this.props,
		        onContextMenu = _this$props.onContextMenu,
		        onDoubleClick = _this$props.onDoubleClick,
		        isEvenRow = _this$props.isEvenRow,
		        style = _this$props.style,
		        onClick = _this$props.onClick,
		        clickTolerance = _this$props.clickTolerance,
		        horizontalLineClassNamesForGroup = _this$props.horizontalLineClassNamesForGroup,
		        group = _this$props.group;
		      var classNamesForGroup = [];
		      if (horizontalLineClassNamesForGroup) {
		        classNamesForGroup = horizontalLineClassNamesForGroup(group);
		      }
		      return _react["default"].createElement(_PreventClickOnDrag["default"], {
		        clickTolerance: clickTolerance,
		        onClick: onClick
		      }, _react["default"].createElement("div", {
		        onContextMenu: onContextMenu,
		        onDoubleClick: onDoubleClick,
		        className: (isEvenRow ? 'rct-hl-even ' : 'rct-hl-odd ') + (classNamesForGroup ? classNamesForGroup.join(' ') : ''),
		        style: style
		      }));
		    }
		  }]);
		  return GroupRow;
		}(_react.Component);
		_defineProperty(GroupRow, "propTypes", {
		  onClick: _propTypes["default"].func.isRequired,
		  onDoubleClick: _propTypes["default"].func.isRequired,
		  onContextMenu: _propTypes["default"].func.isRequired,
		  isEvenRow: _propTypes["default"].bool.isRequired,
		  style: _propTypes["default"].object.isRequired,
		  clickTolerance: _propTypes["default"].number.isRequired,
		  group: _propTypes["default"].object.isRequired,
		  horizontalLineClassNamesForGroup: _propTypes["default"].func
		});
		var _default = GroupRow;
		exports["default"] = _default; 
	} (GroupRow));
	return GroupRow;
}

var hasRequiredGroupRows;

function requireGroupRows () {
	if (hasRequiredGroupRows) return GroupRows;
	hasRequiredGroupRows = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _react = _interopRequireWildcard(require("react"));
		var _GroupRow = _interopRequireDefault(requireGroupRow());
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var GroupRows = /*#__PURE__*/
		function (_Component) {
		  _inherits(GroupRows, _Component);
		  function GroupRows() {
		    _classCallCheck(this, GroupRows);
		    return _possibleConstructorReturn(this, _getPrototypeOf(GroupRows).apply(this, arguments));
		  }
		  _createClass(GroupRows, [{
		    key: "shouldComponentUpdate",
		    value: function shouldComponentUpdate(nextProps) {
		      return !(nextProps.canvasWidth === this.props.canvasWidth && nextProps.lineCount === this.props.lineCount && nextProps.groupHeights === this.props.groupHeights && nextProps.groups === this.props.groups);
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this$props = this.props,
		        canvasWidth = _this$props.canvasWidth,
		        lineCount = _this$props.lineCount,
		        groupHeights = _this$props.groupHeights,
		        onRowClick = _this$props.onRowClick,
		        onRowDoubleClick = _this$props.onRowDoubleClick,
		        clickTolerance = _this$props.clickTolerance,
		        groups = _this$props.groups,
		        horizontalLineClassNamesForGroup = _this$props.horizontalLineClassNamesForGroup,
		        onRowContextClick = _this$props.onRowContextClick;
		      var lines = [];
		      var _loop = function _loop(i) {
		        lines.push(_react["default"].createElement(_GroupRow["default"], {
		          clickTolerance: clickTolerance,
		          onContextMenu: function onContextMenu(evt) {
		            return onRowContextClick(evt, i);
		          },
		          onClick: function onClick(evt) {
		            return onRowClick(evt, i);
		          },
		          onDoubleClick: function onDoubleClick(evt) {
		            return onRowDoubleClick(evt, i);
		          },
		          key: "horizontal-line-".concat(i),
		          isEvenRow: i % 2 === 0,
		          group: groups[i],
		          horizontalLineClassNamesForGroup: horizontalLineClassNamesForGroup,
		          style: {
		            width: "".concat(canvasWidth, "px"),
		            height: "".concat(groupHeights[i], "px")
		          }
		        }));
		      };
		      for (var i = 0; i < lineCount; i++) {
		        _loop(i);
		      }
		      return _react["default"].createElement("div", {
		        className: "rct-horizontal-lines"
		      }, lines);
		    }
		  }]);
		  return GroupRows;
		}(_react.Component);
		exports["default"] = GroupRows;
		_defineProperty(GroupRows, "propTypes", {
		  canvasWidth: _propTypes["default"].number.isRequired,
		  lineCount: _propTypes["default"].number.isRequired,
		  groupHeights: _propTypes["default"].array.isRequired,
		  onRowClick: _propTypes["default"].func.isRequired,
		  onRowDoubleClick: _propTypes["default"].func.isRequired,
		  clickTolerance: _propTypes["default"].number.isRequired,
		  groups: _propTypes["default"].array.isRequired,
		  horizontalLineClassNamesForGroup: _propTypes["default"].func,
		  onRowContextClick: _propTypes["default"].func.isRequired
		}); 
	} (GroupRows));
	return GroupRows;
}

var ScrollElement = {};

var hasRequiredScrollElement;

function requireScrollElement () {
	if (hasRequiredScrollElement) return ScrollElement;
	hasRequiredScrollElement = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireWildcard(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _domHelpers = requireDomHelpers();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var ScrollElement = /*#__PURE__*/
		function (_Component) {
		  _inherits(ScrollElement, _Component);
		  function ScrollElement() {
		    var _this;
		    _classCallCheck(this, ScrollElement);
		    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollElement).call(this));
		    _defineProperty(_assertThisInitialized(_this), "handleScroll", function () {
		      var scrollX = _this.scrollComponent.scrollLeft;
		      _this.props.onScroll(scrollX);
		    });
		    _defineProperty(_assertThisInitialized(_this), "refHandler", function (el) {
		      _this.scrollComponent = el;
		      _this.props.scrollRef(el);
		      if (el) {
		        el.addEventListener('wheel', _this.handleWheel, {
		          passive: false
		        });
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleWheel", function (e) {
		      _this.props.traditionalZoom; // zoom in the time dimension

		      if (e.ctrlKey || e.metaKey || e.altKey) {
		        e.preventDefault();
		        var parentPosition = (0, _domHelpers.getParentPosition)(e.currentTarget);
		        var xPosition = e.clientX - parentPosition.x;
		        var speed = e.ctrlKey ? 10 : e.metaKey ? 3 : 1; // convert vertical zoom to horiziontal

		        _this.props.onWheelZoom(speed, xPosition, e.deltaY);
		      } else if (e.shiftKey) {
		        e.preventDefault(); // shift+scroll event from a touchpad has deltaY property populated; shift+scroll event from a mouse has deltaX

		        _this.props.onScroll(_this.scrollComponent.scrollLeft + (e.deltaY || e.deltaX)); // no modifier pressed? we prevented the default event, so scroll or zoom as needed
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function (e) {
		      if (e.button === 0) {
		        _this.dragStartPosition = e.pageX;
		        _this.dragLastPosition = e.pageX;
		        _this.setState({
		          isDragging: true
		        });
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (e) {
		      // this.props.onMouseMove(e)
		      //why is interacting with item important?
		      if (_this.state.isDragging && !_this.props.isInteractingWithItem) {
		        _this.props.onScroll(_this.scrollComponent.scrollLeft + _this.dragLastPosition - e.pageX);
		        _this.dragLastPosition = e.pageX;
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function () {
		      _this.dragStartPosition = null;
		      _this.dragLastPosition = null;
		      _this.setState({
		        isDragging: false
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function () {
		      // this.props.onMouseLeave(e)
		      _this.dragStartPosition = null;
		      _this.dragLastPosition = null;
		      _this.setState({
		        isDragging: false
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleTouchStart", function (e) {
		      if (e.touches.length === 2) {
		        e.preventDefault();
		        _this.lastTouchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX);
		        _this.singleTouchStart = null;
		        _this.lastSingleTouch = null;
		      } else if (e.touches.length === 1) {
		        e.preventDefault();
		        var x = e.touches[0].clientX;
		        var y = e.touches[0].clientY;
		        _this.lastTouchDistance = null;
		        _this.singleTouchStart = {
		          x: x,
		          y: y,
		          screenY: window.pageYOffset
		        };
		        _this.lastSingleTouch = {
		          x: x,
		          y: y,
		          screenY: window.pageYOffset
		        };
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleTouchMove", function (e) {
		      var _this$props = _this.props,
		        isInteractingWithItem = _this$props.isInteractingWithItem,
		        width = _this$props.width,
		        onZoom = _this$props.onZoom;
		      if (isInteractingWithItem) {
		        e.preventDefault();
		        return;
		      }
		      if (_this.lastTouchDistance && e.touches.length === 2) {
		        e.preventDefault();
		        var touchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX);
		        var parentPosition = (0, _domHelpers.getParentPosition)(e.currentTarget);
		        var xPosition = (e.touches[0].screenX + e.touches[1].screenX) / 2 - parentPosition.x;
		        if (touchDistance !== 0 && _this.lastTouchDistance !== 0) {
		          onZoom(_this.lastTouchDistance / touchDistance, xPosition / width);
		          _this.lastTouchDistance = touchDistance;
		        }
		      } else if (_this.lastSingleTouch && e.touches.length === 1) {
		        e.preventDefault();
		        var x = e.touches[0].clientX;
		        var y = e.touches[0].clientY;
		        var deltaX = x - _this.lastSingleTouch.x;
		        var deltaX0 = x - _this.singleTouchStart.x;
		        var deltaY0 = y - _this.singleTouchStart.y;
		        _this.lastSingleTouch = {
		          x: x,
		          y: y
		        };
		        var moveX = Math.abs(deltaX0) * 3 > Math.abs(deltaY0);
		        var moveY = Math.abs(deltaY0) * 3 > Math.abs(deltaX0);
		        if (deltaX !== 0 && moveX) {
		          _this.props.onScroll(_this.scrollComponent.scrollLeft - deltaX);
		        }
		        if (moveY) {
		          window.scrollTo(window.pageXOffset, _this.singleTouchStart.screenY - deltaY0);
		        }
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleTouchEnd", function () {
		      if (_this.lastTouchDistance) {
		        _this.lastTouchDistance = null;
		      }
		      if (_this.lastSingleTouch) {
		        _this.lastSingleTouch = null;
		        _this.singleTouchStart = null;
		      }
		    });
		    _this.state = {
		      isDragging: false
		    };
		    return _this;
		  }
		  /**
		   * needed to handle scrolling with trackpad
		   */

		  _createClass(ScrollElement, [{
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      if (this.scrollComponent) {
		        this.scrollComponent.removeEventListener('wheel', this.handleWheel);
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this$props2 = this.props,
		        width = _this$props2.width,
		        height = _this$props2.height,
		        children = _this$props2.children;
		      var isDragging = this.state.isDragging;
		      var scrollComponentStyle = {
		        width: "".concat(width, "px"),
		        height: "".concat(height + 20, "px"),
		        //20px to push the scroll element down off screen...?
		        cursor: isDragging ? 'move' : 'default',
		        position: 'relative'
		      };
		      return _react["default"].createElement("div", {
		        ref: this.refHandler,
		        className: "rct-scroll",
		        style: scrollComponentStyle,
		        onMouseDown: this.handleMouseDown,
		        onMouseMove: this.handleMouseMove,
		        onMouseUp: this.handleMouseUp,
		        onMouseLeave: this.handleMouseLeave,
		        onTouchStart: this.handleTouchStart,
		        onTouchMove: this.handleTouchMove,
		        onTouchEnd: this.handleTouchEnd,
		        onScroll: this.handleScroll
		      }, children);
		    }
		  }]);
		  return ScrollElement;
		}(_react.Component);
		_defineProperty(ScrollElement, "propTypes", {
		  children: _propTypes["default"].element.isRequired,
		  width: _propTypes["default"].number.isRequired,
		  height: _propTypes["default"].number.isRequired,
		  traditionalZoom: _propTypes["default"].bool.isRequired,
		  scrollRef: _propTypes["default"].func.isRequired,
		  isInteractingWithItem: _propTypes["default"].bool.isRequired,
		  onZoom: _propTypes["default"].func.isRequired,
		  onWheelZoom: _propTypes["default"].func.isRequired,
		  onScroll: _propTypes["default"].func.isRequired
		});
		var _default = ScrollElement;
		exports["default"] = _default; 
	} (ScrollElement));
	return ScrollElement;
}

var MarkerCanvas = {};

var MarkerCanvasContext = {};

var hasRequiredMarkerCanvasContext;

function requireMarkerCanvasContext () {
	if (hasRequiredMarkerCanvasContext) return MarkerCanvasContext;
	hasRequiredMarkerCanvasContext = 1;

	Object.defineProperty(MarkerCanvasContext, "__esModule", {
	  value: true
	});
	MarkerCanvasContext.MarkerCanvasConsumer = MarkerCanvasContext.MarkerCanvasProvider = void 0;
	var _createReactContext2 = _interopRequireDefault(requireLib$1());
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	/* eslint-disable no-console */
	var defaultContextState = {
	  subscribeToMouseOver: function subscribeToMouseOver() {
	    console.warn('"subscribeToMouseOver" default func is being used');
	  }
	  /* eslint-enable */
	};
	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
	  Consumer = _createReactContext.Consumer,
	  Provider = _createReactContext.Provider;
	var MarkerCanvasProvider = Provider;
	MarkerCanvasContext.MarkerCanvasProvider = MarkerCanvasProvider;
	var MarkerCanvasConsumer = Consumer;
	MarkerCanvasContext.MarkerCanvasConsumer = MarkerCanvasConsumer;
	return MarkerCanvasContext;
}

var TimelineMarkersRenderer = {};

var TimelineMarkersContext = {};

var hasRequiredTimelineMarkersContext;

function requireTimelineMarkersContext () {
	if (hasRequiredTimelineMarkersContext) return TimelineMarkersContext;
	hasRequiredTimelineMarkersContext = 1;

	Object.defineProperty(TimelineMarkersContext, "__esModule", {
	  value: true
	});
	TimelineMarkersContext.TimelineMarkersConsumer = TimelineMarkersContext.TimelineMarkersProvider = void 0;
	var _react = _interopRequireDefault(require("react"));
	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
	var _createReactContext2 = _interopRequireDefault(requireLib$1());
	var _generic = requireGeneric();
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }
	  return _typeof(obj);
	}
	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
	}
	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}
	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}
	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	    return arr2;
	  }
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    if (i % 2) {
	      var source = arguments[i] != null ? arguments[i] : {};
	      var ownKeys = Object.keys(source);
	      if (typeof Object.getOwnPropertySymbols === 'function') {
	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	        }));
	      }
	      ownKeys.forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
	    }
	  }
	  return target;
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}
	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }
	  return _assertThisInitialized(self);
	}
	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	var defaultContextState = {
	  markers: [],
	  subscribeMarker: function subscribeMarker() {
	    // eslint-disable-next-line
	    console.warn('default subscribe marker used');
	    return _generic.noop;
	  }
	};
	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
	  Consumer = _createReactContext.Consumer,
	  Provider = _createReactContext.Provider; // REVIEW: is this the best way to manage ids?

	var _id = 0;
	var createId = function createId() {
	  _id += 1;
	  return _id + 1;
	};
	var TimelineMarkersProvider = /*#__PURE__*/
	function (_React$Component) {
	  _inherits(TimelineMarkersProvider, _React$Component);
	  function TimelineMarkersProvider() {
	    var _getPrototypeOf2;
	    var _this;
	    _classCallCheck(this, TimelineMarkersProvider);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimelineMarkersProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _defineProperty(_assertThisInitialized(_this), "handleSubscribeToMarker", function (newMarker) {
	      newMarker = _objectSpread({}, newMarker, {
	        // REVIEW: in the event that we accept id to be passed to the Marker components, this line would override those
	        id: createId()
	      });
	      _this.setState(function (state) {
	        return {
	          markers: [].concat(_toConsumableArray(state.markers), [newMarker])
	        };
	      });
	      return {
	        unsubscribe: function unsubscribe() {
	          _this.setState(function (state) {
	            return {
	              markers: state.markers.filter(function (marker) {
	                return marker.id !== newMarker.id;
	              })
	            };
	          });
	        },
	        getMarker: function getMarker() {
	          return newMarker;
	        }
	      };
	    });
	    _defineProperty(_assertThisInitialized(_this), "handleUpdateMarker", function (updateMarker) {
	      var markerIndex = _this.state.markers.findIndex(function (marker) {
	        return marker.id === updateMarker.id;
	      });
	      if (markerIndex < 0) return;
	      _this.setState(function (state) {
	        return {
	          markers: [].concat(_toConsumableArray(state.markers.slice(0, markerIndex)), [updateMarker], _toConsumableArray(state.markers.slice(markerIndex + 1)))
	        };
	      });
	    });
	    _defineProperty(_assertThisInitialized(_this), "state", {
	      markers: [],
	      subscribeMarker: _this.handleSubscribeToMarker,
	      updateMarker: _this.handleUpdateMarker
	    });
	    return _this;
	  }
	  _createClass(TimelineMarkersProvider, [{
	    key: "render",
	    value: function render() {
	      return _react["default"].createElement(Provider, {
	        value: this.state
	      }, this.props.children);
	    }
	  }]);
	  return TimelineMarkersProvider;
	}(_react["default"].Component);
	TimelineMarkersContext.TimelineMarkersProvider = TimelineMarkersProvider;
	_defineProperty(TimelineMarkersProvider, "propTypes", {
	  children: _propTypes["default"].element.isRequired
	});
	var TimelineMarkersConsumer = Consumer;
	TimelineMarkersContext.TimelineMarkersConsumer = TimelineMarkersConsumer;
	return TimelineMarkersContext;
}

var markerType = {};

var hasRequiredMarkerType;

function requireMarkerType () {
	if (hasRequiredMarkerType) return markerType;
	hasRequiredMarkerType = 1;

	Object.defineProperty(markerType, "__esModule", {
	  value: true
	});
	markerType.TimelineMarkerType = void 0;
	var TimelineMarkerType = {
	  Today: 'Today',
	  Custom: 'Custom',
	  Cursor: 'Cursor'
	};
	markerType.TimelineMarkerType = TimelineMarkerType;
	return markerType;
}

var TodayMarker$1 = {};

var shared = {};

var hasRequiredShared;

function requireShared () {
	if (hasRequiredShared) return shared;
	hasRequiredShared = 1;

	Object.defineProperty(shared, "__esModule", {
	  value: true
	});
	shared.createDefaultRenderer = shared.createMarkerStylesWithLeftOffset = void 0;
	var _react = _interopRequireDefault(require("react"));
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    if (i % 2) {
	      var source = arguments[i] != null ? arguments[i] : {};
	      var ownKeys = Object.keys(source);
	      if (typeof Object.getOwnPropertySymbols === 'function') {
	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	        }));
	      }
	      ownKeys.forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
	    }
	  }
	  return target;
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}

	/**
	 * Baseline styles to get the marker to render correctly
	 */
	var criticalStyles = {
	  position: 'absolute',
	  top: 0,
	  bottom: 0,
	  width: '2px',
	  backgroundColor: 'black',
	  // by default, pointer events (specifically click) will
	  // "pass through".  This is added so that CursorMarker
	  // will not get in the way of canvas click
	  pointerEvents: 'none' // FIXME: this creates a new object each time in render
	  // might want to memoize this?
	};
	var createMarkerStylesWithLeftOffset = function createMarkerStylesWithLeftOffset(leftOffset) {
	  return _objectSpread({}, criticalStyles, {
	    left: leftOffset
	  });
	};
	shared.createMarkerStylesWithLeftOffset = createMarkerStylesWithLeftOffset;
	var createDefaultRenderer = function createDefaultRenderer(dataTestidValue) {
	  // eslint-disable-next-line
	  return function DefaultMarkerRenderer(_ref) {
	    var styles = _ref.styles;
	    return _react["default"].createElement("div", {
	      style: styles
	    });
	  };
	};
	shared.createDefaultRenderer = createDefaultRenderer;
	return shared;
}

var hasRequiredTodayMarker$1;

function requireTodayMarker$1 () {
	if (hasRequiredTodayMarker$1) return TodayMarker$1;
	hasRequiredTodayMarker$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _shared = requireShared();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var defaultRenderer = (0, _shared.createDefaultRenderer)('default-today-line');
		/** Marker that is placed based on current date.  This component updates itself on
		 * a set interval, dictated by the 'interval' prop.
		 */

		var TodayMarker = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(TodayMarker, _React$Component);
		  function TodayMarker() {
		    var _getPrototypeOf2;
		    var _this;
		    _classCallCheck(this, TodayMarker);
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TodayMarker)).call.apply(_getPrototypeOf2, [this].concat(args)));
		    _defineProperty(_assertThisInitialized(_this), "state", {
		      date: Date.now()
		    });
		    return _this;
		  }
		  _createClass(TodayMarker, [{
		    key: "componentDidMount",
		    value: function componentDidMount() {
		      this.intervalToken = this.createIntervalUpdater(this.props.interval);
		    }
		  }, {
		    key: "componentDidUpdate",
		    value: function componentDidUpdate(prevProps) {
		      if (prevProps.interval !== this.props.interval) {
		        clearInterval(this.intervalToken);
		        this.intervalToken = this.createIntervalUpdater(this.props.interval);
		      }
		    }
		  }, {
		    key: "createIntervalUpdater",
		    value: function createIntervalUpdater(interval) {
		      var _this2 = this;
		      return setInterval(function () {
		        _this2.setState({
		          date: Date.now() // FIXME: use date utils pass in as props
		        });
		      }, interval);
		    }
		  }, {
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      clearInterval(this.intervalToken);
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var date = this.state.date;
		      var leftOffset = this.props.getLeftOffsetFromDate(date);
		      var styles = (0, _shared.createMarkerStylesWithLeftOffset)(leftOffset);
		      return this.props.renderer({
		        styles: styles,
		        date: date
		      });
		    }
		  }]);
		  return TodayMarker;
		}(_react["default"].Component);
		_defineProperty(TodayMarker, "propTypes", {
		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired,
		  renderer: _propTypes["default"].func,
		  interval: _propTypes["default"].number.isRequired
		});
		_defineProperty(TodayMarker, "defaultProps", {
		  renderer: defaultRenderer
		});
		var _default = TodayMarker;
		exports["default"] = _default; 
	} (TodayMarker$1));
	return TodayMarker$1;
}

var CustomMarker$1 = {};

var hasRequiredCustomMarker$1;

function requireCustomMarker$1 () {
	if (hasRequiredCustomMarker$1) return CustomMarker$1;
	hasRequiredCustomMarker$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _shared = requireShared();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var defaultCustomMarkerRenderer = (0, _shared.createDefaultRenderer)('default-customer-marker-id');
		/**
		 * CustomMarker that is placed based on passed in date prop
		 */

		var CustomMarker = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(CustomMarker, _React$Component);
		  function CustomMarker() {
		    _classCallCheck(this, CustomMarker);
		    return _possibleConstructorReturn(this, _getPrototypeOf(CustomMarker).apply(this, arguments));
		  }
		  _createClass(CustomMarker, [{
		    key: "render",
		    value: function render() {
		      var date = this.props.date;
		      var leftOffset = this.props.getLeftOffsetFromDate(date);
		      var styles = (0, _shared.createMarkerStylesWithLeftOffset)(leftOffset);
		      return this.props.renderer({
		        styles: styles,
		        date: date
		      });
		    }
		  }]);
		  return CustomMarker;
		}(_react["default"].Component);
		_defineProperty(CustomMarker, "propTypes", {
		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired,
		  renderer: _propTypes["default"].func,
		  date: _propTypes["default"].number.isRequired
		});
		_defineProperty(CustomMarker, "defaultProps", {
		  renderer: defaultCustomMarkerRenderer
		});
		var _default = CustomMarker;
		exports["default"] = _default; 
	} (CustomMarker$1));
	return CustomMarker$1;
}

var CursorMarker$1 = {};

var hasRequiredCursorMarker$1;

function requireCursorMarker$1 () {
	if (hasRequiredCursorMarker$1) return CursorMarker$1;
	hasRequiredCursorMarker$1 = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _shared = requireShared();
		var _MarkerCanvasContext = requireMarkerCanvasContext();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var defaultRenderer = (0, _shared.createDefaultRenderer)('default-cursor-marker');
		/**
		 * CursorMarker implementation subscribes to 'subscribeToCanvasMouseOver' on mount.
		 * This subscription is passed in via MarkerCanvasConsumer, which is wired up to
		 * MarkerCanvasProvider in the MarkerCanvas component. When the user mouses over MarkerCanvas,
		 * the callback registered in CursorMarker (this component) is passed:
		 *  leftOffset - pixels from left edge of canvas, used to position this element
		 *  date - the date the cursor pertains to
		 *  isCursorOverCanvas - whether the user cursor is over the canvas. This is set to 'false'
		 *  when the user mouseleaves the element
		 */

		var CursorMarker = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(CursorMarker, _React$Component);
		  function CursorMarker() {
		    var _this;
		    _classCallCheck(this, CursorMarker);
		    _this = _possibleConstructorReturn(this, _getPrototypeOf(CursorMarker).call(this));
		    _defineProperty(_assertThisInitialized(_this), "handleCanvasMouseOver", function (_ref) {
		      var leftOffset = _ref.leftOffset,
		        date = _ref.date,
		        isCursorOverCanvas = _ref.isCursorOverCanvas;
		      _this.setState({
		        leftOffset: leftOffset,
		        date: date,
		        isShowingCursor: isCursorOverCanvas
		      });
		    });
		    _this.state = {
		      leftOffset: 0,
		      date: 0,
		      isShowingCursor: false
		    };
		    return _this;
		  }
		  _createClass(CursorMarker, [{
		    key: "componentDidMount",
		    value: function componentDidMount() {
		      this.unsubscribe = this.props.subscribeToCanvasMouseOver(this.handleCanvasMouseOver);
		    }
		  }, {
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      if (this.unsubscribe != null) {
		        this.unsubscribe();
		        this.unsubscribe = null;
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this$state = this.state,
		        isShowingCursor = _this$state.isShowingCursor,
		        leftOffset = _this$state.leftOffset,
		        date = _this$state.date;
		      if (!isShowingCursor) return null;
		      var styles = (0, _shared.createMarkerStylesWithLeftOffset)(leftOffset);
		      return this.props.renderer({
		        styles: styles,
		        date: date
		      });
		    }
		  }]);
		  return CursorMarker;
		}(_react["default"].Component); // TODO: turn into HOC?

		_defineProperty(CursorMarker, "propTypes", {
		  subscribeToCanvasMouseOver: _propTypes["default"].func.isRequired,
		  renderer: _propTypes["default"].func
		});
		_defineProperty(CursorMarker, "defaultProps", {
		  renderer: defaultRenderer
		});
		var CursorMarkerWrapper = function CursorMarkerWrapper(props) {
		  return _react["default"].createElement(_MarkerCanvasContext.MarkerCanvasConsumer, null, function (_ref2) {
		    var subscribeToMouseOver = _ref2.subscribeToMouseOver;
		    return _react["default"].createElement(CursorMarker, _extends({
		      subscribeToCanvasMouseOver: subscribeToMouseOver
		    }, props));
		  });
		};
		CursorMarkerWrapper.displayName = 'CursorMarkerWrapper';
		var _default = CursorMarkerWrapper;
		exports["default"] = _default; 
	} (CursorMarker$1));
	return CursorMarker$1;
}

var hasRequiredTimelineMarkersRenderer;

function requireTimelineMarkersRenderer () {
	if (hasRequiredTimelineMarkersRenderer) return TimelineMarkersRenderer;
	hasRequiredTimelineMarkersRenderer = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _TimelineMarkersContext = requireTimelineMarkersContext();
		var _markerType = requireMarkerType();
		var _TodayMarker = _interopRequireDefault(requireTodayMarker$1());
		var _CustomMarker = _interopRequireDefault(requireCustomMarker$1());
		var _TimelineStateContext = requireTimelineStateContext();
		var _CursorMarker = _interopRequireDefault(requireCursorMarker$1());
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		/** Internal component used in timeline to render markers registered */
		var TimelineMarkersRenderer = function TimelineMarkersRenderer() {
		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref) {
		    var getLeftOffsetFromDate = _ref.getLeftOffsetFromDate,
		      getTimelineState = _ref.getTimelineState;
		    return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref2) {
		      var markers = _ref2.markers;
		      var timelineState = getTimelineState();
		      return markers.map(function (marker) {
		        switch (marker.type) {
		          case _markerType.TimelineMarkerType.Today:
		            if (!(new Date().valueOf() >= timelineState.canvasTimeStart && new Date().valueOf() <= timelineState.canvasTimeEnd)) return null;
		            return _react["default"].createElement(_TodayMarker["default"], {
		              key: marker.id,
		              getLeftOffsetFromDate: getLeftOffsetFromDate,
		              renderer: marker.renderer,
		              interval: marker.interval
		            });
		          case _markerType.TimelineMarkerType.Custom:
		            //filter out cursors outside canvas start/end
		            if (!(marker.date >= timelineState.canvasTimeStart && marker.date <= timelineState.canvasTimeEnd)) return null;
		            return _react["default"].createElement(_CustomMarker["default"], {
		              key: marker.id,
		              renderer: marker.renderer,
		              date: marker.date,
		              getLeftOffsetFromDate: getLeftOffsetFromDate
		            });
		          case _markerType.TimelineMarkerType.Cursor:
		            return _react["default"].createElement(_CursorMarker["default"], {
		              key: marker.id,
		              renderer: marker.renderer,
		              getLeftOffsetFromDate: getLeftOffsetFromDate
		            });
		          default:
		            return null;
		        }
		      });
		    });
		  });
		};
		var _default = TimelineMarkersRenderer;
		exports["default"] = _default; 
	} (TimelineMarkersRenderer));
	return TimelineMarkersRenderer;
}

var hasRequiredMarkerCanvas;

function requireMarkerCanvas () {
	if (hasRequiredMarkerCanvas) return MarkerCanvas;
	hasRequiredMarkerCanvas = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _MarkerCanvasContext = requireMarkerCanvasContext();
		var _TimelineMarkersRenderer = _interopRequireDefault(requireTimelineMarkersRenderer());
		var _TimelineStateContext = requireTimelineStateContext();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}

		// expand to fill entire parent container (ScrollElement)
		var staticStyles = {
		  position: 'absolute',
		  left: 0,
		  right: 0,
		  top: 0,
		  bottom: 0
		  /**
		   * Renders registered markers and exposes a mouse over listener for
		   * CursorMarkers to subscribe to
		   */
		};
		var MarkerCanvas = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(MarkerCanvas, _React$Component);
		  function MarkerCanvas() {
		    var _getPrototypeOf2;
		    var _this;
		    _classCallCheck(this, MarkerCanvas);
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MarkerCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));
		    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (evt) {
		      if (_this.subscription != null) {
		        var pageX = evt.pageX; // FIXME: dont use getBoundingClientRect. Use passed in scroll amount

		        var _this$containerEl$get = _this.containerEl.getBoundingClientRect(),
		          containerLeft = _this$containerEl$get.left; // number of pixels from left we are on canvas
		        // we do this calculation as pageX is based on x from viewport whereas
		        // our canvas can be scrolled left and right and is generally outside
		        // of the viewport.  This calculation is to get how many pixels the cursor
		        // is from left of this element

		        var canvasX = pageX - containerLeft;
		        var date = _this.props.getDateFromLeftOffsetPosition(canvasX);
		        _this.subscription({
		          leftOffset: canvasX,
		          date: date,
		          isCursorOverCanvas: true
		        });
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function () {
		      if (_this.subscription != null) {
		        // tell subscriber that we're not on canvas
		        _this.subscription({
		          leftOffset: 0,
		          date: 0,
		          isCursorOverCanvas: false
		        });
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleMouseMoveSubscribe", function (sub) {
		      _this.subscription = sub;
		      return function () {
		        _this.subscription = null;
		      };
		    });
		    _defineProperty(_assertThisInitialized(_this), "state", {
		      subscribeToMouseOver: _this.handleMouseMoveSubscribe
		    });
		    return _this;
		  }
		  _createClass(MarkerCanvas, [{
		    key: "render",
		    value: function render() {
		      var _this2 = this;
		      return _react["default"].createElement(_MarkerCanvasContext.MarkerCanvasProvider, {
		        value: this.state
		      }, _react["default"].createElement("div", {
		        style: staticStyles,
		        onMouseMove: this.handleMouseMove,
		        onMouseLeave: this.handleMouseLeave,
		        ref: function ref(el) {
		          return _this2.containerEl = el;
		        }
		      }, _react["default"].createElement(_TimelineMarkersRenderer["default"], null), this.props.children));
		    }
		  }]);
		  return MarkerCanvas;
		}(_react["default"].Component);
		_defineProperty(MarkerCanvas, "propTypes", {
		  getDateFromLeftOffsetPosition: _propTypes["default"].func.isRequired,
		  children: _propTypes["default"].node
		});
		var MarkerCanvasWrapper = function MarkerCanvasWrapper(props) {
		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref) {
		    var getDateFromLeftOffsetPosition = _ref.getDateFromLeftOffsetPosition;
		    return _react["default"].createElement(MarkerCanvas, _extends({
		      getDateFromLeftOffsetPosition: getDateFromLeftOffsetPosition
		    }, props));
		  });
		};
		var _default = MarkerCanvasWrapper;
		exports["default"] = _default; 
	} (MarkerCanvas));
	return MarkerCanvas;
}

var window$1 = {};

var hasRequiredWindow;

function requireWindow () {
	if (hasRequiredWindow) return window$1;
	hasRequiredWindow = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		function addListener(component) {
		  component._resizeEventListener = {
		    handleEvent: function handleEvent() {
		      component.resize();
		    }
		  };
		  window.addEventListener('resize', component._resizeEventListener);
		}
		function removeListener(component) {
		  window.removeEventListener('resize', component._resizeEventListener);
		}
		var _default = {
		  addListener: addListener,
		  removeListener: removeListener
		};
		exports["default"] = _default; 
	} (window$1));
	return window$1;
}

var defaultConfig = {};

var hasRequiredDefaultConfig;

function requireDefaultConfig () {
	if (hasRequiredDefaultConfig) return defaultConfig;
	hasRequiredDefaultConfig = 1;

	Object.defineProperty(defaultConfig, "__esModule", {
	  value: true
	});
	defaultConfig.defaultHeaderFormats = defaultConfig.defaultTimeSteps = defaultConfig.defaultKeys = void 0;
	var defaultKeys = {
	  groupIdKey: 'id',
	  groupTitleKey: 'title',
	  groupRightTitleKey: 'rightTitle',
	  groupLabelKey: 'title',
	  itemIdKey: 'id',
	  itemTitleKey: 'title',
	  itemDivTitleKey: 'title',
	  itemGroupKey: 'group',
	  itemTimeStartKey: 'start_time',
	  itemTimeEndKey: 'end_time'
	};
	defaultConfig.defaultKeys = defaultKeys;
	var defaultTimeSteps = {
	  second: 1,
	  minute: 1,
	  hour: 1,
	  day: 1,
	  month: 1,
	  year: 1
	};
	defaultConfig.defaultTimeSteps = defaultTimeSteps;
	var defaultHeaderFormats = {
	  year: {
	    "long": 'YYYY',
	    mediumLong: 'YYYY',
	    medium: 'YYYY',
	    "short": 'YY'
	  },
	  month: {
	    "long": 'MMMM YYYY',
	    mediumLong: 'MMMM',
	    medium: 'MMMM',
	    "short": 'MM/YY'
	  },
	  week: {
	    "long": 'w',
	    mediumLong: 'w',
	    medium: 'w',
	    "short": 'w'
	  },
	  day: {
	    "long": 'dddd, LL',
	    mediumLong: 'dddd, LL',
	    medium: 'dd D',
	    "short": 'D'
	  },
	  hour: {
	    "long": 'dddd, LL, HH:00',
	    mediumLong: 'L, HH:00',
	    medium: 'HH:00',
	    "short": 'HH'
	  },
	  minute: {
	    "long": 'HH:mm',
	    mediumLong: 'HH:mm',
	    medium: 'HH:mm',
	    "short": 'mm'
	  },
	  second: {
	    "long": 'mm:ss',
	    mediumLong: 'mm:ss',
	    medium: 'mm:ss',
	    "short": 'ss'
	  }
	};
	defaultConfig.defaultHeaderFormats = defaultHeaderFormats;
	return defaultConfig;
}

var HeadersContext = {};

var hasRequiredHeadersContext;

function requireHeadersContext () {
	if (hasRequiredHeadersContext) return HeadersContext;
	hasRequiredHeadersContext = 1;

	Object.defineProperty(HeadersContext, "__esModule", {
	  value: true
	});
	HeadersContext.TimelineHeadersConsumer = HeadersContext.TimelineHeadersProvider = void 0;
	var _react = _interopRequireDefault(require("react"));
	var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
	var _createReactContext2 = _interopRequireDefault(requireLib$1());
	var _generic = requireGeneric();
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }
	  return _typeof(obj);
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}
	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }
	  return _assertThisInitialized(self);
	}
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	var defaultContextState = {
	  registerScroll: function registerScroll() {
	    // eslint-disable-next-line
	    console.warn('default registerScroll header used');
	    return _generic.noop;
	  },
	  rightSidebarWidth: 0,
	  leftSidebarWidth: 150,
	  timeSteps: {}
	};
	var _createReactContext = (0, _createReactContext2["default"])(defaultContextState),
	  Consumer = _createReactContext.Consumer,
	  Provider = _createReactContext.Provider;
	var TimelineHeadersProvider = /*#__PURE__*/
	function (_React$Component) {
	  _inherits(TimelineHeadersProvider, _React$Component);
	  function TimelineHeadersProvider() {
	    _classCallCheck(this, TimelineHeadersProvider);
	    return _possibleConstructorReturn(this, _getPrototypeOf(TimelineHeadersProvider).apply(this, arguments));
	  }
	  _createClass(TimelineHeadersProvider, [{
	    key: "render",
	    value: function render() {
	      var contextValue = {
	        rightSidebarWidth: this.props.rightSidebarWidth,
	        leftSidebarWidth: this.props.leftSidebarWidth,
	        timeSteps: this.props.timeSteps,
	        registerScroll: this.props.registerScroll
	      };
	      return _react["default"].createElement(Provider, {
	        value: contextValue
	      }, this.props.children);
	    }
	  }]);
	  return TimelineHeadersProvider;
	}(_react["default"].Component);
	HeadersContext.TimelineHeadersProvider = TimelineHeadersProvider;
	_defineProperty(TimelineHeadersProvider, "propTypes", {
	  children: _propTypes["default"].element.isRequired,
	  rightSidebarWidth: _propTypes["default"].number,
	  leftSidebarWidth: _propTypes["default"].number.isRequired,
	  //TODO: maybe this should be skipped?
	  timeSteps: _propTypes["default"].object.isRequired,
	  registerScroll: _propTypes["default"].func.isRequired
	});
	var TimelineHeadersConsumer = Consumer;
	HeadersContext.TimelineHeadersConsumer = TimelineHeadersConsumer;
	return HeadersContext;
}

var TimelineHeaders = {};

var classnames = {exports: {}};

/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/

var hasRequiredClassnames;

function requireClassnames () {
	if (hasRequiredClassnames) return classnames.exports;
	hasRequiredClassnames = 1;
	(function (module) {
		/* global define */

		(function () {

		  var hasOwn = {}.hasOwnProperty;
		  function classNames() {
		    var classes = '';
		    for (var i = 0; i < arguments.length; i++) {
		      var arg = arguments[i];
		      if (arg) {
		        classes = appendClass(classes, parseValue(arg));
		      }
		    }
		    return classes;
		  }
		  function parseValue(arg) {
		    if (typeof arg === 'string' || typeof arg === 'number') {
		      return arg;
		    }
		    if (typeof arg !== 'object') {
		      return '';
		    }
		    if (Array.isArray(arg)) {
		      return classNames.apply(null, arg);
		    }
		    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
		      return arg.toString();
		    }
		    var classes = '';
		    for (var key in arg) {
		      if (hasOwn.call(arg, key) && arg[key]) {
		        classes = appendClass(classes, key);
		      }
		    }
		    return classes;
		  }
		  function appendClass(value, newClass) {
		    if (!newClass) {
		      return value;
		    }
		    if (value) {
		      return value + ' ' + newClass;
		    }
		    return value + newClass;
		  }
		  if (module.exports) {
		    classNames.default = classNames;
		    module.exports = classNames;
		  } else {
		    window.classNames = classNames;
		  }
		})(); 
	} (classnames));
	return classnames.exports;
}

var SidebarHeader = {};

var constants = {};

var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;

	Object.defineProperty(constants, "__esModule", {
	  value: true
	});
	constants.RIGHT_VARIANT = constants.LEFT_VARIANT = void 0;
	var LEFT_VARIANT = 'left';
	constants.LEFT_VARIANT = LEFT_VARIANT;
	var RIGHT_VARIANT = 'right';
	constants.RIGHT_VARIANT = RIGHT_VARIANT;
	return constants;
}

var hasRequiredSidebarHeader;

function requireSidebarHeader () {
	if (hasRequiredSidebarHeader) return SidebarHeader;
	hasRequiredSidebarHeader = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _HeadersContext = requireHeadersContext();
		var _constants = requireConstants();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var SidebarHeader = /*#__PURE__*/
		function (_React$PureComponent) {
		  _inherits(SidebarHeader, _React$PureComponent);
		  function SidebarHeader() {
		    var _getPrototypeOf2;
		    var _this;
		    _classCallCheck(this, SidebarHeader);
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SidebarHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
		    _defineProperty(_assertThisInitialized(_this), "getRootProps", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		      var style = props.style;
		      var width = _this.props.variant === _constants.RIGHT_VARIANT ? _this.props.rightSidebarWidth : _this.props.leftSidebarWidth;
		      return {
		        style: _objectSpread({}, style, {
		          width: width
		        })
		      };
		    });
		    _defineProperty(_assertThisInitialized(_this), "getStateAndHelpers", function () {
		      return {
		        getRootProps: _this.getRootProps,
		        data: _this.props.headerData
		      };
		    });
		    return _this;
		  }
		  _createClass(SidebarHeader, [{
		    key: "render",
		    value: function render() {
		      var props = this.getStateAndHelpers();
		      var Renderer = this.props.children;
		      return _react["default"].createElement(Renderer, props);
		    }
		  }]);
		  return SidebarHeader;
		}(_react["default"].PureComponent);
		_defineProperty(SidebarHeader, "propTypes", {
		  children: _propTypes["default"].func.isRequired,
		  rightSidebarWidth: _propTypes["default"].number,
		  leftSidebarWidth: _propTypes["default"].number.isRequired,
		  variant: _propTypes["default"].string,
		  headerData: _propTypes["default"].object
		});
		var SidebarWrapper = function SidebarWrapper(_ref) {
		  var children = _ref.children,
		    variant = _ref.variant,
		    headerData = _ref.headerData;
		  return _react["default"].createElement(_HeadersContext.TimelineHeadersConsumer, null, function (_ref2) {
		    var leftSidebarWidth = _ref2.leftSidebarWidth,
		      rightSidebarWidth = _ref2.rightSidebarWidth;
		    return _react["default"].createElement(SidebarHeader, {
		      leftSidebarWidth: leftSidebarWidth,
		      rightSidebarWidth: rightSidebarWidth,
		      children: children,
		      variant: variant,
		      headerData: headerData
		    });
		  });
		};
		SidebarWrapper.propTypes = {
		  children: _propTypes["default"].func.isRequired,
		  variant: _propTypes["default"].string,
		  headerData: _propTypes["default"].object
		};
		SidebarWrapper.defaultProps = {
		  variant: _constants.LEFT_VARIANT,
		  children: function children(_ref3) {
		    var getRootProps = _ref3.getRootProps;
		    return _react["default"].createElement("div", getRootProps());
		  }
		};
		SidebarWrapper.secretKey = "SidebarHeader";
		var _default = SidebarWrapper;
		exports["default"] = _default; 
	} (SidebarHeader));
	return SidebarHeader;
}

var hasRequiredTimelineHeaders;

function requireTimelineHeaders () {
	if (hasRequiredTimelineHeaders) return TimelineHeaders;
	hasRequiredTimelineHeaders = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _classnames = _interopRequireDefault(requireClassnames());
		var _HeadersContext = requireHeadersContext();
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _SidebarHeader = _interopRequireDefault(requireSidebarHeader());
		var _constants = requireConstants();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var TimelineHeaders = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(TimelineHeaders, _React$Component);
		  function TimelineHeaders(props) {
		    var _this;
		    _classCallCheck(this, TimelineHeaders);
		    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimelineHeaders).call(this, props));
		    _defineProperty(_assertThisInitialized(_this), "getRootStyle", function () {
		      return _objectSpread({}, _this.props.style, {
		        display: 'flex',
		        width: '100%'
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "getCalendarHeaderStyle", function () {
		      var _this$props = _this.props,
		        leftSidebarWidth = _this$props.leftSidebarWidth,
		        rightSidebarWidth = _this$props.rightSidebarWidth,
		        calendarHeaderStyle = _this$props.calendarHeaderStyle;
		      return _objectSpread({}, calendarHeaderStyle, {
		        overflow: 'hidden',
		        width: "calc(100% - ".concat(leftSidebarWidth + rightSidebarWidth, "px)")
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleRootRef", function (element) {
		      if (_this.props.headerRef) {
		        _this.props.headerRef(element);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "isSidebarHeader", function (child) {
		      if (child.type === undefined) return false;
		      return child.type.secretKey === _SidebarHeader["default"].secretKey;
		    });
		    return _this;
		  }
		  _createClass(TimelineHeaders, [{
		    key: "render",
		    value: function render() {
		      var _this2 = this;
		      var rightSidebarHeader;
		      var leftSidebarHeader;
		      var calendarHeaders = [];
		      var children = Array.isArray(this.props.children) ? this.props.children.filter(function (c) {
		        return c;
		      }) : [this.props.children];
		      _react["default"].Children.map(children, function (child) {
		        if (_this2.isSidebarHeader(child)) {
		          if (child.props.variant === _constants.RIGHT_VARIANT) {
		            rightSidebarHeader = child;
		          } else {
		            leftSidebarHeader = child;
		          }
		        } else {
		          calendarHeaders.push(child);
		        }
		      });
		      if (!leftSidebarHeader) {
		        leftSidebarHeader = _react["default"].createElement(_SidebarHeader["default"], null);
		      }
		      if (!rightSidebarHeader && this.props.rightSidebarWidth) {
		        rightSidebarHeader = _react["default"].createElement(_SidebarHeader["default"], {
		          variant: "right"
		        });
		      }
		      return _react["default"].createElement("div", {
		        ref: this.handleRootRef,
		        style: this.getRootStyle(),
		        className: (0, _classnames["default"])('rct-header-root', this.props.className)
		      }, leftSidebarHeader, _react["default"].createElement("div", {
		        ref: this.props.registerScroll,
		        style: this.getCalendarHeaderStyle(),
		        className: (0, _classnames["default"])('rct-calendar-header', this.props.calendarHeaderClassName)
		      }, calendarHeaders), rightSidebarHeader);
		    }
		  }]);
		  return TimelineHeaders;
		}(_react["default"].Component);
		_defineProperty(TimelineHeaders, "propTypes", {
		  registerScroll: _propTypes["default"].func.isRequired,
		  leftSidebarWidth: _propTypes["default"].number.isRequired,
		  rightSidebarWidth: _propTypes["default"].number.isRequired,
		  style: _propTypes["default"].object,
		  children: _propTypes["default"].node,
		  className: _propTypes["default"].string,
		  calendarHeaderStyle: _propTypes["default"].object,
		  calendarHeaderClassName: _propTypes["default"].string,
		  headerRef: _propTypes["default"].func
		});
		var TimelineHeadersWrapper = function TimelineHeadersWrapper(_ref) {
		  var children = _ref.children,
		    style = _ref.style,
		    className = _ref.className,
		    calendarHeaderStyle = _ref.calendarHeaderStyle,
		    calendarHeaderClassName = _ref.calendarHeaderClassName;
		  return _react["default"].createElement(_HeadersContext.TimelineHeadersConsumer, null, function (_ref2) {
		    var leftSidebarWidth = _ref2.leftSidebarWidth,
		      rightSidebarWidth = _ref2.rightSidebarWidth,
		      registerScroll = _ref2.registerScroll;
		    return _react["default"].createElement(TimelineHeaders, {
		      leftSidebarWidth: leftSidebarWidth,
		      rightSidebarWidth: rightSidebarWidth,
		      registerScroll: registerScroll,
		      style: style,
		      className: className,
		      calendarHeaderStyle: calendarHeaderStyle,
		      calendarHeaderClassName: calendarHeaderClassName
		    }, children);
		  });
		};
		TimelineHeadersWrapper.propTypes = {
		  style: _propTypes["default"].object,
		  children: _propTypes["default"].node,
		  className: _propTypes["default"].string,
		  calendarHeaderStyle: _propTypes["default"].object,
		  calendarHeaderClassName: _propTypes["default"].string
		};
		TimelineHeadersWrapper.secretKey = "TimelineHeaders";
		var _default = TimelineHeadersWrapper;
		exports["default"] = _default; 
	} (TimelineHeaders));
	return TimelineHeaders;
}

var DateHeader = {};

var CustomHeader = {};

var hasRequiredCustomHeader;

function requireCustomHeader () {
	if (hasRequiredCustomHeader) return CustomHeader;
	hasRequiredCustomHeader = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.CustomHeader = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _HeadersContext = requireHeadersContext();
		var _TimelineStateContext = requireTimelineStateContext();
		var _calendar = requireCalendar();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var CustomHeader = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(CustomHeader, _React$Component);
		  function CustomHeader(_props) {
		    var _this;
		    _classCallCheck(this, CustomHeader);
		    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomHeader).call(this, _props));
		    _defineProperty(_assertThisInitialized(_this), "getHeaderIntervals", function (_ref) {
		      var canvasTimeStart = _ref.canvasTimeStart,
		        canvasTimeEnd = _ref.canvasTimeEnd,
		        unit = _ref.unit,
		        timeSteps = _ref.timeSteps,
		        getLeftOffsetFromDate = _ref.getLeftOffsetFromDate;
		      var intervals = [];
		      (0, _calendar.iterateTimes)(canvasTimeStart, canvasTimeEnd, unit, timeSteps, function (startTime, endTime) {
		        var left = getLeftOffsetFromDate(startTime.valueOf());
		        var right = getLeftOffsetFromDate(endTime.valueOf());
		        var width = right - left;
		        intervals.push({
		          startTime: startTime,
		          endTime: endTime,
		          labelWidth: width,
		          left: left
		        });
		      });
		      return intervals;
		    });
		    _defineProperty(_assertThisInitialized(_this), "getRootProps", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		      var style = props.style;
		      return {
		        style: Object.assign({}, style ? style : {}, {
		          position: 'relative',
		          width: _this.props.canvasWidth,
		          height: _this.props.height
		        })
		      };
		    });
		    _defineProperty(_assertThisInitialized(_this), "getIntervalProps", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		      var interval = props.interval,
		        style = props.style;
		      if (!interval) throw new Error('you should provide interval to the prop getter');
		      var startTime = interval.startTime,
		        labelWidth = interval.labelWidth,
		        left = interval.left;
		      return {
		        style: _this.getIntervalStyle({
		          style: style,
		          startTime: startTime,
		          labelWidth: labelWidth,
		          canvasTimeStart: _this.props.canvasTimeStart,
		          unit: _this.props.unit,
		          left: left
		        }),
		        key: "label-".concat(startTime.valueOf())
		      };
		    });
		    _defineProperty(_assertThisInitialized(_this), "getIntervalStyle", function (_ref2) {
		      var left = _ref2.left,
		        labelWidth = _ref2.labelWidth,
		        style = _ref2.style;
		      return _objectSpread({}, style, {
		        left: left,
		        width: labelWidth,
		        position: 'absolute'
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "getStateAndHelpers", function () {
		      var _this$props = _this.props,
		        canvasTimeStart = _this$props.canvasTimeStart,
		        canvasTimeEnd = _this$props.canvasTimeEnd,
		        unit = _this$props.unit,
		        showPeriod = _this$props.showPeriod,
		        timelineWidth = _this$props.timelineWidth,
		        visibleTimeStart = _this$props.visibleTimeStart,
		        visibleTimeEnd = _this$props.visibleTimeEnd,
		        headerData = _this$props.headerData; //TODO: only evaluate on changing params

		      return {
		        timelineContext: {
		          timelineWidth: timelineWidth,
		          visibleTimeStart: visibleTimeStart,
		          visibleTimeEnd: visibleTimeEnd,
		          canvasTimeStart: canvasTimeStart,
		          canvasTimeEnd: canvasTimeEnd
		        },
		        headerContext: {
		          unit: unit,
		          intervals: _this.state.intervals
		        },
		        getRootProps: _this.getRootProps,
		        getIntervalProps: _this.getIntervalProps,
		        showPeriod: showPeriod,
		        data: headerData
		      };
		    });
		    var _canvasTimeStart = _props.canvasTimeStart,
		      _canvasTimeEnd = _props.canvasTimeEnd,
		      canvasWidth = _props.canvasWidth,
		      _unit = _props.unit,
		      _timeSteps = _props.timeSteps,
		      _showPeriod = _props.showPeriod,
		      _getLeftOffsetFromDate = _props.getLeftOffsetFromDate;
		    var _intervals = _this.getHeaderIntervals({
		      canvasTimeStart: _canvasTimeStart,
		      canvasTimeEnd: _canvasTimeEnd,
		      canvasWidth: canvasWidth,
		      unit: _unit,
		      timeSteps: _timeSteps,
		      showPeriod: _showPeriod,
		      getLeftOffsetFromDate: _getLeftOffsetFromDate
		    });
		    _this.state = {
		      intervals: _intervals
		    };
		    return _this;
		  }
		  _createClass(CustomHeader, [{
		    key: "shouldComponentUpdate",
		    value: function shouldComponentUpdate(nextProps) {
		      if (nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || nextProps.unit !== this.props.unit || nextProps.timeSteps !== this.props.timeSteps || nextProps.showPeriod !== this.props.showPeriod || nextProps.children !== this.props.children || nextProps.headerData !== this.props.headerData) {
		        return true;
		      }
		      return false;
		    }
		  }, {
		    key: "componentWillReceiveProps",
		    value: function componentWillReceiveProps(nextProps) {
		      if (nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || nextProps.unit !== this.props.unit || nextProps.timeSteps !== this.props.timeSteps || nextProps.showPeriod !== this.props.showPeriod) {
		        var canvasTimeStart = nextProps.canvasTimeStart,
		          canvasTimeEnd = nextProps.canvasTimeEnd,
		          canvasWidth = nextProps.canvasWidth,
		          unit = nextProps.unit,
		          timeSteps = nextProps.timeSteps,
		          showPeriod = nextProps.showPeriod,
		          getLeftOffsetFromDate = nextProps.getLeftOffsetFromDate;
		        var intervals = this.getHeaderIntervals({
		          canvasTimeStart: canvasTimeStart,
		          canvasTimeEnd: canvasTimeEnd,
		          canvasWidth: canvasWidth,
		          unit: unit,
		          timeSteps: timeSteps,
		          showPeriod: showPeriod,
		          getLeftOffsetFromDate: getLeftOffsetFromDate
		        });
		        this.setState({
		          intervals: intervals
		        });
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var props = this.getStateAndHelpers();
		      var Renderer = this.props.children;
		      return _react["default"].createElement(Renderer, props);
		    }
		  }]);
		  return CustomHeader;
		}(_react["default"].Component);
		exports.CustomHeader = CustomHeader;
		_defineProperty(CustomHeader, "propTypes", {
		  //component props
		  children: _propTypes["default"].func.isRequired,
		  unit: _propTypes["default"].string.isRequired,
		  //Timeline context
		  timeSteps: _propTypes["default"].object.isRequired,
		  visibleTimeStart: _propTypes["default"].number.isRequired,
		  visibleTimeEnd: _propTypes["default"].number.isRequired,
		  canvasTimeStart: _propTypes["default"].number.isRequired,
		  canvasTimeEnd: _propTypes["default"].number.isRequired,
		  canvasWidth: _propTypes["default"].number.isRequired,
		  showPeriod: _propTypes["default"].func.isRequired,
		  headerData: _propTypes["default"].object,
		  getLeftOffsetFromDate: _propTypes["default"].func.isRequired,
		  height: _propTypes["default"].number.isRequired
		});
		var CustomHeaderWrapper = function CustomHeaderWrapper(_ref3) {
		  var children = _ref3.children,
		    unit = _ref3.unit,
		    headerData = _ref3.headerData,
		    height = _ref3.height;
		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref4) {
		    var getTimelineState = _ref4.getTimelineState,
		      showPeriod = _ref4.showPeriod,
		      getLeftOffsetFromDate = _ref4.getLeftOffsetFromDate;
		    var timelineState = getTimelineState();
		    return _react["default"].createElement(_HeadersContext.TimelineHeadersConsumer, null, function (_ref5) {
		      var timeSteps = _ref5.timeSteps;
		      return _react["default"].createElement(CustomHeader, _extends({
		        children: children,
		        timeSteps: timeSteps,
		        showPeriod: showPeriod,
		        unit: unit ? unit : timelineState.timelineUnit
		      }, timelineState, {
		        headerData: headerData,
		        getLeftOffsetFromDate: getLeftOffsetFromDate,
		        height: height
		      }));
		    });
		  });
		};
		CustomHeaderWrapper.propTypes = {
		  children: _propTypes["default"].func.isRequired,
		  unit: _propTypes["default"].string,
		  headerData: _propTypes["default"].object,
		  height: _propTypes["default"].number
		};
		CustomHeaderWrapper.defaultProps = {
		  height: 30
		};
		var _default = CustomHeaderWrapper;
		exports["default"] = _default; 
	} (CustomHeader));
	return CustomHeader;
}

var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === 'number' && value !== value;
};
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual) {
  if (isEqual === void 0) {
    isEqual = areInputsEqual;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}

var CustomDateHeader = {};

var Interval = {};

var hasRequiredInterval;

function requireInterval () {
	if (hasRequiredInterval) return Interval;
	hasRequiredInterval = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _calendar = requireCalendar();
		var _events = requireEvents();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var Interval = /*#__PURE__*/
		function (_React$PureComponent) {
		  _inherits(Interval, _React$PureComponent);
		  function Interval() {
		    var _getPrototypeOf2;
		    var _this;
		    _classCallCheck(this, Interval);
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Interval)).call.apply(_getPrototypeOf2, [this].concat(args)));
		    _defineProperty(_assertThisInitialized(_this), "onIntervalClick", function () {
		      var _this$props = _this.props,
		        primaryHeader = _this$props.primaryHeader,
		        interval = _this$props.interval,
		        unit = _this$props.unit,
		        showPeriod = _this$props.showPeriod;
		      if (primaryHeader) {
		        var nextUnit = (0, _calendar.getNextUnit)(unit);
		        var newStartTime = interval.startTime.clone().startOf(nextUnit);
		        var newEndTime = interval.startTime.clone().endOf(nextUnit);
		        showPeriod(newStartTime, newEndTime);
		      } else {
		        showPeriod(interval.startTime, interval.endTime);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "getIntervalProps", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		      return _objectSpread({}, _this.props.getIntervalProps(_objectSpread({
		        interval: _this.props.interval
		      }, props)), {
		        onClick: (0, _events.composeEvents)(_this.onIntervalClick, props.onClick)
		      });
		    });
		    return _this;
		  }
		  _createClass(Interval, [{
		    key: "render",
		    value: function render() {
		      var _this$props2 = this.props,
		        intervalText = _this$props2.intervalText,
		        interval = _this$props2.interval,
		        intervalRenderer = _this$props2.intervalRenderer,
		        headerData = _this$props2.headerData;
		      var Renderer = intervalRenderer;
		      if (Renderer) {
		        return _react["default"].createElement(Renderer, {
		          getIntervalProps: this.getIntervalProps,
		          intervalContext: {
		            interval: interval,
		            intervalText: intervalText
		          },
		          data: headerData
		        });
		      }
		      return _react["default"].createElement("div", _extends({}, this.getIntervalProps({}), {
		        className: "rct-dateHeader ".concat(this.props.primaryHeader ? 'rct-dateHeader-primary' : '')
		      }), _react["default"].createElement("span", null, intervalText));
		    }
		  }]);
		  return Interval;
		}(_react["default"].PureComponent);
		_defineProperty(Interval, "propTypes", {
		  intervalRenderer: _propTypes["default"].func,
		  unit: _propTypes["default"].string.isRequired,
		  interval: _propTypes["default"].object.isRequired,
		  showPeriod: _propTypes["default"].func.isRequired,
		  intervalText: _propTypes["default"].string.isRequired,
		  primaryHeader: _propTypes["default"].bool.isRequired,
		  getIntervalProps: _propTypes["default"].func.isRequired,
		  headerData: _propTypes["default"].object
		});
		var _default = Interval;
		exports["default"] = _default; 
	} (Interval));
	return Interval;
}

var hasRequiredCustomDateHeader;

function requireCustomDateHeader () {
	if (hasRequiredCustomDateHeader) return CustomDateHeader;
	hasRequiredCustomDateHeader = 1;

	Object.defineProperty(CustomDateHeader, "__esModule", {
	  value: true
	});
	CustomDateHeader.CustomDateHeader = CustomDateHeader$1;
	var _react = _interopRequireDefault(require("react"));
	var _Interval = _interopRequireDefault(requireInterval());
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}
	function CustomDateHeader$1(_ref) {
	  var _ref$headerContext = _ref.headerContext,
	    intervals = _ref$headerContext.intervals,
	    unit = _ref$headerContext.unit,
	    getRootProps = _ref.getRootProps,
	    getIntervalProps = _ref.getIntervalProps,
	    showPeriod = _ref.showPeriod,
	    _ref$data = _ref.data,
	    style = _ref$data.style,
	    intervalRenderer = _ref$data.intervalRenderer,
	    className = _ref$data.className,
	    getLabelFormat = _ref$data.getLabelFormat,
	    unitProp = _ref$data.unitProp,
	    headerData = _ref$data.headerData;
	  return _react["default"].createElement("div", _extends({
	    className: className
	  }, getRootProps({
	    style: style
	  })), intervals.map(function (interval) {
	    var intervalText = getLabelFormat([interval.startTime, interval.endTime], unit, interval.labelWidth);
	    return _react["default"].createElement(_Interval["default"], {
	      key: "label-".concat(interval.startTime.valueOf()),
	      unit: unit,
	      interval: interval,
	      showPeriod: showPeriod,
	      intervalText: intervalText,
	      primaryHeader: unitProp === 'primaryHeader',
	      getIntervalProps: getIntervalProps,
	      intervalRenderer: intervalRenderer,
	      headerData: headerData
	    });
	  }));
	}
	return CustomDateHeader;
}

var hasRequiredDateHeader;

function requireDateHeader () {
	if (hasRequiredDateHeader) return DateHeader;
	hasRequiredDateHeader = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _TimelineStateContext = requireTimelineStateContext();
		var _CustomHeader = _interopRequireDefault(requireCustomHeader());
		var _calendar = requireCalendar();
		var _defaultConfig = requireDefaultConfig();
		var _memoizeOne = _interopRequireDefault(memoizeOne);
		var _CustomDateHeader = requireCustomDateHeader();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _slicedToArray(arr, i) {
		  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
		}
		function _nonIterableRest() {
		  throw new TypeError("Invalid attempt to destructure non-iterable instance");
		}
		function _iterableToArrayLimit(arr, i) {
		  var _arr = [];
		  var _n = true;
		  var _d = false;
		  var _e = undefined;
		  try {
		    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
		      _arr.push(_s.value);
		      if (i && _arr.length === i) break;
		    }
		  } catch (err) {
		    _d = true;
		    _e = err;
		  } finally {
		    try {
		      if (!_n && _i["return"] != null) _i["return"]();
		    } finally {
		      if (_d) throw _e;
		    }
		  }
		  return _arr;
		}
		function _arrayWithHoles(arr) {
		  if (Array.isArray(arr)) return arr;
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var DateHeader = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(DateHeader, _React$Component);
		  function DateHeader() {
		    var _getPrototypeOf2;
		    var _this;
		    _classCallCheck(this, DateHeader);
		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DateHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
		    _defineProperty(_assertThisInitialized(_this), "getHeaderUnit", function () {
		      if (_this.props.unit === 'primaryHeader') {
		        return (0, _calendar.getNextUnit)(_this.props.timelineUnit);
		      } else if (_this.props.unit) {
		        return _this.props.unit;
		      }
		      return _this.props.timelineUnit;
		    });
		    _defineProperty(_assertThisInitialized(_this), "getRootStyle", (0, _memoizeOne["default"])(function (style) {
		      return _objectSpread({
		        height: 30
		      }, style);
		    }));
		    _defineProperty(_assertThisInitialized(_this), "getLabelFormat", function (interval, unit, labelWidth) {
		      var labelFormat = _this.props.labelFormat;
		      if (typeof labelFormat === 'string') {
		        var startTime = interval[0];
		        return startTime.format(labelFormat);
		      } else if (typeof labelFormat === 'function') {
		        return labelFormat(interval, unit, labelWidth);
		      } else {
		        throw new Error('labelFormat should be function or string');
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "getHeaderData", (0, _memoizeOne["default"])(function (intervalRenderer, style, className, getLabelFormat, unitProp, headerData) {
		      return {
		        intervalRenderer: intervalRenderer,
		        style: style,
		        className: className,
		        getLabelFormat: getLabelFormat,
		        unitProp: unitProp,
		        headerData: headerData
		      };
		    }));
		    return _this;
		  }
		  _createClass(DateHeader, [{
		    key: "render",
		    value: function render() {
		      var unit = this.getHeaderUnit();
		      var _this$props = this.props;
		        _this$props.headerData;
		        var height = _this$props.height;
		      return _react["default"].createElement(_CustomHeader["default"], {
		        unit: unit,
		        height: height,
		        headerData: this.getHeaderData(this.props.intervalRenderer, this.getRootStyle(this.props.style), this.props.className, this.getLabelFormat, this.props.unit, this.props.headerData),
		        children: _CustomDateHeader.CustomDateHeader
		      });
		    }
		  }]);
		  return DateHeader;
		}(_react["default"].Component);
		_defineProperty(DateHeader, "propTypes", {
		  unit: _propTypes["default"].string,
		  style: _propTypes["default"].object,
		  className: _propTypes["default"].string,
		  timelineUnit: _propTypes["default"].string,
		  labelFormat: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].objectOf(_propTypes["default"].objectOf(_propTypes["default"].string)), _propTypes["default"].string]).isRequired,
		  intervalRenderer: _propTypes["default"].func,
		  headerData: _propTypes["default"].object,
		  height: _propTypes["default"].number
		});
		var DateHeaderWrapper = function DateHeaderWrapper(_ref) {
		  var unit = _ref.unit,
		    labelFormat = _ref.labelFormat,
		    style = _ref.style,
		    className = _ref.className,
		    intervalRenderer = _ref.intervalRenderer,
		    headerData = _ref.headerData,
		    height = _ref.height;
		  return _react["default"].createElement(_TimelineStateContext.TimelineStateConsumer, null, function (_ref2) {
		    var getTimelineState = _ref2.getTimelineState;
		    var timelineState = getTimelineState();
		    return _react["default"].createElement(DateHeader, {
		      timelineUnit: timelineState.timelineUnit,
		      unit: unit,
		      labelFormat: labelFormat,
		      style: style,
		      className: className,
		      intervalRenderer: intervalRenderer,
		      headerData: headerData,
		      height: height
		    });
		  });
		};
		DateHeaderWrapper.propTypes = {
		  style: _propTypes["default"].object,
		  className: _propTypes["default"].string,
		  unit: _propTypes["default"].string,
		  labelFormat: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].objectOf(_propTypes["default"].objectOf(_propTypes["default"].string)), _propTypes["default"].string]),
		  intervalRenderer: _propTypes["default"].func,
		  headerData: _propTypes["default"].object,
		  height: _propTypes["default"].number
		};
		DateHeaderWrapper.defaultProps = {
		  labelFormat: formatLabel
		};
		function formatLabel(_ref3, unit, labelWidth) {
		  var _ref4 = _slicedToArray(_ref3, 2),
		    timeStart = _ref4[0];
		    _ref4[1];
		  var formatOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _defaultConfig.defaultHeaderFormats;
		  var format;
		  if (labelWidth >= 150) {
		    format = formatOptions[unit]['long'];
		  } else if (labelWidth >= 100) {
		    format = formatOptions[unit]['mediumLong'];
		  } else if (labelWidth >= 50) {
		    format = formatOptions[unit]['medium'];
		  } else {
		    format = formatOptions[unit]['short'];
		  }
		  return timeStart.format(format);
		}
		var _default = DateHeaderWrapper;
		exports["default"] = _default; 
	} (DateHeader));
	return DateHeader;
}

var hasRequiredTimeline;

function requireTimeline () {
	if (hasRequiredTimeline) return Timeline$1;
	hasRequiredTimeline = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _react = _interopRequireWildcard(require("react"));
		var _Items = _interopRequireDefault(requireItems());
		var _Sidebar = _interopRequireDefault(requireSidebar());
		var _Columns = _interopRequireDefault(requireColumns());
		var _GroupRows = _interopRequireDefault(requireGroupRows());
		var _ScrollElement = _interopRequireDefault(requireScrollElement());
		var _MarkerCanvas = _interopRequireDefault(requireMarkerCanvas());
		var _window = _interopRequireDefault(requireWindow());
		var _calendar = requireCalendar();
		var _generic = requireGeneric();
		var _defaultConfig = requireDefaultConfig();
		var _TimelineStateContext = requireTimelineStateContext();
		var _TimelineMarkersContext = requireTimelineMarkersContext();
		var _HeadersContext = requireHeadersContext();
		var _TimelineHeaders = _interopRequireDefault(requireTimelineHeaders());
		var _DateHeader = _interopRequireDefault(requireDateHeader());
		function _interopRequireWildcard(obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) {
		          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
		          if (desc.get || desc.set) {
		            Object.defineProperty(newObj, key, desc);
		          } else {
		            newObj[key] = obj[key];
		          }
		        }
		      }
		    }
		    newObj["default"] = obj;
		    return newObj;
		  }
		}
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _slicedToArray(arr, i) {
		  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
		}
		function _nonIterableRest() {
		  throw new TypeError("Invalid attempt to destructure non-iterable instance");
		}
		function _iterableToArrayLimit(arr, i) {
		  var _arr = [];
		  var _n = true;
		  var _d = false;
		  var _e = undefined;
		  try {
		    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
		      _arr.push(_s.value);
		      if (i && _arr.length === i) break;
		    }
		  } catch (err) {
		    _d = true;
		    _e = err;
		  } finally {
		    try {
		      if (!_n && _i["return"] != null) _i["return"]();
		    } finally {
		      if (_d) throw _e;
		    }
		  }
		  return _arr;
		}
		function _arrayWithHoles(arr) {
		  if (Array.isArray(arr)) return arr;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var ReactCalendarTimeline = /*#__PURE__*/
		function (_Component) {
		  _inherits(ReactCalendarTimeline, _Component);
		  _createClass(ReactCalendarTimeline, [{
		    key: "getChildContext",
		    value: function getChildContext() {
		      var _this2 = this;
		      return {
		        getTimelineContext: function getTimelineContext() {
		          return _this2.getTimelineContext();
		        }
		      };
		    }
		  }]);
		  function ReactCalendarTimeline(_props) {
		    var _this;
		    _classCallCheck(this, ReactCalendarTimeline);
		    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactCalendarTimeline).call(this, _props));
		    _defineProperty(_assertThisInitialized(_this), "getTimelineContext", function () {
		      var _this$state = _this.state,
		        width = _this$state.width,
		        visibleTimeStart = _this$state.visibleTimeStart,
		        visibleTimeEnd = _this$state.visibleTimeEnd,
		        canvasTimeStart = _this$state.canvasTimeStart,
		        canvasTimeEnd = _this$state.canvasTimeEnd;
		      return {
		        timelineWidth: width,
		        visibleTimeStart: visibleTimeStart,
		        visibleTimeEnd: visibleTimeEnd,
		        canvasTimeStart: canvasTimeStart,
		        canvasTimeEnd: canvasTimeEnd
		      };
		    });
		    _defineProperty(_assertThisInitialized(_this), "getTimelineUnit", function () {
		      var _this$state2 = _this.state,
		        width = _this$state2.width,
		        visibleTimeStart = _this$state2.visibleTimeStart,
		        visibleTimeEnd = _this$state2.visibleTimeEnd;
		      var timeSteps = _this.props.timeSteps;
		      var zoom = visibleTimeEnd - visibleTimeStart;
		      var minUnit = (0, _calendar.getMinUnit)(zoom, width, timeSteps);
		      return minUnit;
		    });
		    _defineProperty(_assertThisInitialized(_this), "resize", function () {
		      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
		      var _this$container$getBo = _this.container.getBoundingClientRect(),
		        containerWidth = _this$container$getBo.width;
		      var width = containerWidth - props.sidebarWidth - props.rightSidebarWidth;
		      var canvasWidth = (0, _calendar.getCanvasWidth)(width, props.buffer);
		      var _stackTimelineItems = (0, _calendar.stackTimelineItems)(props.items, props.groups, canvasWidth, _this.state.canvasTimeStart, _this.state.canvasTimeEnd, props.keys, props.lineHeight, props.itemHeightRatio, props.stackItems, _this.state.draggingItem, _this.state.resizingItem, _this.state.dragTime, _this.state.resizingEdge, _this.state.resizeTime, _this.state.newGroupOrder),
		        dimensionItems = _stackTimelineItems.dimensionItems,
		        height = _stackTimelineItems.height,
		        groupHeights = _stackTimelineItems.groupHeights,
		        groupTops = _stackTimelineItems.groupTops; // this is needed by dragItem since it uses pageY from the drag events
		      // if this was in the context of the scrollElement, this would not be necessary

		      _this.setState({
		        width: width,
		        dimensionItems: dimensionItems,
		        height: height,
		        groupHeights: groupHeights,
		        groupTops: groupTops
		      }); //initial scroll left is the buffer - 1 (1 is visible area) divided by 2 (2 is the buffer split on the right and left of the timeline)

		      var scrollLeft = width * ((props.buffer - 1) / 2);
		      _this.scrollComponent.scrollLeft = scrollLeft;
		      _this.scrollHeaderRef.scrollLeft = scrollLeft;
		    });
		    _defineProperty(_assertThisInitialized(_this), "onScroll", function (scrollX) {
		      var width = _this.state.width;
		      var canvasTimeStart = _this.state.canvasTimeStart;
		      var zoom = _this.state.visibleTimeEnd - _this.state.visibleTimeStart;
		      var visibleTimeStart = canvasTimeStart + zoom * scrollX / width;
		      if (_this.state.visibleTimeStart !== visibleTimeStart || _this.state.visibleTimeEnd !== visibleTimeStart + zoom) {
		        _this.props.onTimeChange(visibleTimeStart, visibleTimeStart + zoom, _this.updateScrollCanvas, _this.getTimelineUnit());
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "updateScrollCanvas", function (visibleTimeStart, visibleTimeEnd, forceUpdateDimensions) {
		      var items = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _this.props.items;
		      var groups = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _this.props.groups;
		      _this.setState((0, _calendar.calculateScrollCanvas)(visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, items, groups, _this.props, _this.state));
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleWheelZoom", function (speed, xPosition, deltaY) {
		      _this.changeZoom(1.0 + speed * deltaY / 500, xPosition / _this.state.width);
		    });
		    _defineProperty(_assertThisInitialized(_this), "changeZoom", function (scale) {
		      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
		      var _this$props = _this.props,
		        minZoom = _this$props.minZoom,
		        maxZoom = _this$props.maxZoom;
		      var oldZoom = _this.state.visibleTimeEnd - _this.state.visibleTimeStart;
		      var newZoom = Math.min(Math.max(Math.round(oldZoom * scale), minZoom), maxZoom); // min 1 min, max 20 years

		      var newVisibleTimeStart = Math.round(_this.state.visibleTimeStart + (oldZoom - newZoom) * offset);
		      _this.props.onTimeChange(newVisibleTimeStart, newVisibleTimeStart + newZoom, _this.updateScrollCanvas, _this.getTimelineUnit());
		    });
		    _defineProperty(_assertThisInitialized(_this), "showPeriod", function (from, to) {
		      var visibleTimeStart = from.valueOf();
		      var visibleTimeEnd = to.valueOf();
		      var zoom = visibleTimeEnd - visibleTimeStart; // can't zoom in more than to show one hour

		      if (zoom < _this.props.minZoom) {
		        return;
		      }
		      _this.props.onTimeChange(visibleTimeStart, visibleTimeStart + zoom, _this.updateScrollCanvas, _this.getTimelineUnit());
		    });
		    _defineProperty(_assertThisInitialized(_this), "selectItem", function (item, clickType, e) {
		      if (_this.isItemSelected(item) || _this.props.itemTouchSendsClick && clickType === 'touch') {
		        if (item && _this.props.onItemClick) {
		          var time = _this.timeFromItemEvent(e);
		          _this.props.onItemClick(item, e, time);
		        }
		      } else {
		        _this.setState({
		          selectedItem: item
		        });
		        if (item && _this.props.onItemSelect) {
		          var _time = _this.timeFromItemEvent(e);
		          _this.props.onItemSelect(item, e, _time);
		        } else if (item === null && _this.props.onItemDeselect) {
		          _this.props.onItemDeselect(e); // this isnt in the docs. Is this function even used?
		        }
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "doubleClickItem", function (item, e) {
		      if (_this.props.onItemDoubleClick) {
		        var time = _this.timeFromItemEvent(e);
		        _this.props.onItemDoubleClick(item, e, time);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "contextMenuClickItem", function (item, e) {
		      if (_this.props.onItemContextMenu) {
		        var time = _this.timeFromItemEvent(e);
		        _this.props.onItemContextMenu(item, e, time);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "getTimeFromRowClickEvent", function (e) {
		      var _this$props2 = _this.props,
		        dragSnap = _this$props2.dragSnap,
		        buffer = _this$props2.buffer;
		      var _this$state3 = _this.state,
		        width = _this$state3.width,
		        canvasTimeStart = _this$state3.canvasTimeStart,
		        canvasTimeEnd = _this$state3.canvasTimeEnd; // this gives us distance from left of row element, so event is in
		      // context of the row element, not client or page

		      var offsetX = e.nativeEvent.offsetX;
		      var time = (0, _calendar.calculateTimeForXPosition)(canvasTimeStart, canvasTimeEnd, (0, _calendar.getCanvasWidth)(width, buffer), offsetX);
		      time = Math.floor(time / dragSnap) * dragSnap;
		      return time;
		    });
		    _defineProperty(_assertThisInitialized(_this), "timeFromItemEvent", function (e) {
		      var _this$state4 = _this.state,
		        width = _this$state4.width,
		        visibleTimeStart = _this$state4.visibleTimeStart,
		        visibleTimeEnd = _this$state4.visibleTimeEnd;
		      var dragSnap = _this.props.dragSnap;
		      var scrollComponent = _this.scrollComponent;
		      var _scrollComponent$getB = scrollComponent.getBoundingClientRect(),
		        scrollX = _scrollComponent$getB.left;
		      var xRelativeToTimeline = e.clientX - scrollX;
		      var relativeItemPosition = xRelativeToTimeline / width;
		      var zoom = visibleTimeEnd - visibleTimeStart;
		      var timeOffset = relativeItemPosition * zoom;
		      var time = Math.round(visibleTimeStart + timeOffset);
		      time = Math.floor(time / dragSnap) * dragSnap;
		      return time;
		    });
		    _defineProperty(_assertThisInitialized(_this), "dragItem", function (item, dragTime, newGroupOrder) {
		      var newGroup = _this.props.groups[newGroupOrder];
		      var keys = _this.props.keys;
		      _this.setState({
		        draggingItem: item,
		        dragTime: dragTime,
		        newGroupOrder: newGroupOrder,
		        dragGroupTitle: newGroup ? (0, _generic._get)(newGroup, keys.groupLabelKey) : ''
		      });
		      _this.updatingItem({
		        eventType: 'move',
		        itemId: item,
		        time: dragTime,
		        newGroupOrder: newGroupOrder
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "dropItem", function (item, dragTime, newGroupOrder) {
		      _this.setState({
		        draggingItem: null,
		        dragTime: null,
		        dragGroupTitle: null
		      });
		      if (_this.props.onItemMove) {
		        _this.props.onItemMove(item, dragTime, newGroupOrder);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "resizingItem", function (item, resizeTime, edge) {
		      _this.setState({
		        resizingItem: item,
		        resizingEdge: edge,
		        resizeTime: resizeTime
		      });
		      _this.updatingItem({
		        eventType: 'resize',
		        itemId: item,
		        time: resizeTime,
		        edge: edge
		      });
		    });
		    _defineProperty(_assertThisInitialized(_this), "resizedItem", function (item, resizeTime, edge, timeDelta) {
		      _this.setState({
		        resizingItem: null,
		        resizingEdge: null,
		        resizeTime: null
		      });
		      if (_this.props.onItemResize && timeDelta !== 0) {
		        _this.props.onItemResize(item, resizeTime, edge);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "updatingItem", function (_ref) {
		      var eventType = _ref.eventType,
		        itemId = _ref.itemId,
		        time = _ref.time,
		        edge = _ref.edge,
		        newGroupOrder = _ref.newGroupOrder;
		      if (_this.props.onItemDrag) {
		        _this.props.onItemDrag({
		          eventType: eventType,
		          itemId: itemId,
		          time: time,
		          edge: edge,
		          newGroupOrder: newGroupOrder
		        });
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleRowClick", function (e, rowIndex) {
		      // shouldnt this be handled by the user, as far as when to deselect an item?
		      if (_this.hasSelectedItem()) {
		        _this.selectItem(null);
		      }
		      if (_this.props.onCanvasClick == null) return;
		      var time = _this.getTimeFromRowClickEvent(e);
		      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);
		      _this.props.onCanvasClick(groupId, time, e);
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleRowDoubleClick", function (e, rowIndex) {
		      if (_this.props.onCanvasDoubleClick == null) return;
		      var time = _this.getTimeFromRowClickEvent(e);
		      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);
		      _this.props.onCanvasDoubleClick(groupId, time, e);
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleScrollContextMenu", function (e, rowIndex) {
		      if (_this.props.onCanvasContextMenu == null) return;
		      var timePosition = _this.getTimeFromRowClickEvent(e);
		      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);
		      if (_this.props.onCanvasContextMenu) {
		        e.preventDefault();
		        _this.props.onCanvasContextMenu(groupId, timePosition, e);
		      }
		    });
		    _defineProperty(_assertThisInitialized(_this), "handleHeaderRef", function (el) {
		      _this.scrollHeaderRef = el;
		      _this.props.headerRef(el);
		    });
		    _defineProperty(_assertThisInitialized(_this), "isTimelineHeader", function (child) {
		      if (child.type === undefined) return false;
		      return child.type.secretKey === _TimelineHeaders["default"].secretKey;
		    });
		    _defineProperty(_assertThisInitialized(_this), "renderHeaders", function () {
		      if (_this.props.children) {
		        var headerRenderer;
		        _react["default"].Children.map(_this.props.children, function (child) {
		          if (_this.isTimelineHeader(child)) {
		            headerRenderer = child;
		          }
		        });
		        if (headerRenderer) {
		          return headerRenderer;
		        }
		      }
		      return _react["default"].createElement(_TimelineHeaders["default"], null, _react["default"].createElement(_DateHeader["default"], {
		        unit: "primaryHeader"
		      }), _react["default"].createElement(_DateHeader["default"], null));
		    });
		    _defineProperty(_assertThisInitialized(_this), "getScrollElementRef", function (el) {
		      _this.props.scrollRef(el);
		      _this.scrollComponent = el;
		    });
		    _this.getSelected = _this.getSelected.bind(_assertThisInitialized(_this));
		    _this.hasSelectedItem = _this.hasSelectedItem.bind(_assertThisInitialized(_this));
		    _this.isItemSelected = _this.isItemSelected.bind(_assertThisInitialized(_this));
		    var _visibleTimeStart = null;
		    var _visibleTimeEnd = null;
		    if (_this.props.defaultTimeStart && _this.props.defaultTimeEnd) {
		      _visibleTimeStart = _this.props.defaultTimeStart.valueOf();
		      _visibleTimeEnd = _this.props.defaultTimeEnd.valueOf();
		    } else if (_this.props.visibleTimeStart && _this.props.visibleTimeEnd) {
		      _visibleTimeStart = _this.props.visibleTimeStart;
		      _visibleTimeEnd = _this.props.visibleTimeEnd;
		    } else {
		      //throwing an error because neither default or visible time props provided
		      throw new Error('You must provide either "defaultTimeStart" and "defaultTimeEnd" or "visibleTimeStart" and "visibleTimeEnd" to initialize the Timeline');
		    }
		    var _getCanvasBoundariesF = (0, _calendar.getCanvasBoundariesFromVisibleTime)(_visibleTimeStart, _visibleTimeEnd, _props.buffer),
		      _getCanvasBoundariesF2 = _slicedToArray(_getCanvasBoundariesF, 2),
		      _canvasTimeStart = _getCanvasBoundariesF2[0],
		      _canvasTimeEnd = _getCanvasBoundariesF2[1];
		    _this.state = {
		      width: 1000,
		      visibleTimeStart: _visibleTimeStart,
		      visibleTimeEnd: _visibleTimeEnd,
		      canvasTimeStart: _canvasTimeStart,
		      canvasTimeEnd: _canvasTimeEnd,
		      selectedItem: null,
		      dragTime: null,
		      dragGroupTitle: null,
		      resizeTime: null,
		      resizingItem: null,
		      resizingEdge: null
		    };
		    var _canvasWidth = (0, _calendar.getCanvasWidth)(_this.state.width, _props.buffer);
		    var _stackTimelineItems2 = (0, _calendar.stackTimelineItems)(_props.items, _props.groups, _canvasWidth, _this.state.canvasTimeStart, _this.state.canvasTimeEnd, _props.keys, _props.lineHeight, _props.itemHeightRatio, _props.stackItems, _this.state.draggingItem, _this.state.resizingItem, _this.state.dragTime, _this.state.resizingEdge, _this.state.resizeTime, _this.state.newGroupOrder),
		      _dimensionItems = _stackTimelineItems2.dimensionItems,
		      _height = _stackTimelineItems2.height,
		      _groupHeights = _stackTimelineItems2.groupHeights,
		      _groupTops = _stackTimelineItems2.groupTops;
		    /* eslint-disable react/no-direct-mutation-state */

		    _this.state.dimensionItems = _dimensionItems;
		    _this.state.height = _height;
		    _this.state.groupHeights = _groupHeights;
		    _this.state.groupTops = _groupTops;
		    /* eslint-enable */

		    return _this;
		  }
		  _createClass(ReactCalendarTimeline, [{
		    key: "componentDidMount",
		    value: function componentDidMount() {
		      this.resize(this.props);
		      if (this.props.resizeDetector && this.props.resizeDetector.addListener) {
		        this.props.resizeDetector.addListener(this);
		      }
		      _window["default"].addListener(this);
		      this.lastTouchDistance = null;
		    }
		  }, {
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      if (this.props.resizeDetector && this.props.resizeDetector.addListener) {
		        this.props.resizeDetector.removeListener(this);
		      }
		      _window["default"].removeListener(this);
		    }
		  }, {
		    key: "componentDidUpdate",
		    value: function componentDidUpdate(prevProps, prevState) {
		      var newZoom = this.state.visibleTimeEnd - this.state.visibleTimeStart;
		      var oldZoom = prevState.visibleTimeEnd - prevState.visibleTimeStart; // are we changing zoom? Report it!

		      if (this.props.onZoom && newZoom !== oldZoom) {
		        this.props.onZoom(this.getTimelineContext(), this.getTimelineUnit());
		      } // The bounds have changed? Report it!

		      if (this.props.onBoundsChange && this.state.canvasTimeStart !== prevState.canvasTimeStart) {
		        this.props.onBoundsChange(this.state.canvasTimeStart, this.state.canvasTimeStart + newZoom * 3);
		      } // Check the scroll is correct

		      var scrollLeft = Math.round(this.state.width * (this.state.visibleTimeStart - this.state.canvasTimeStart) / newZoom);
		      var componentScrollLeft = Math.round(prevState.width * (prevState.visibleTimeStart - prevState.canvasTimeStart) / oldZoom);
		      if (componentScrollLeft !== scrollLeft) {
		        this.scrollComponent.scrollLeft = scrollLeft;
		        this.scrollHeaderRef.scrollLeft = scrollLeft;
		      }
		    }
		  }, {
		    key: "columns",
		    value: function columns(canvasTimeStart, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height) {
		      return _react["default"].createElement(_Columns["default"], {
		        canvasTimeStart: canvasTimeStart,
		        canvasTimeEnd: canvasTimeEnd,
		        canvasWidth: canvasWidth,
		        lineCount: (0, _generic._length)(this.props.groups),
		        minUnit: minUnit,
		        timeSteps: timeSteps,
		        height: height,
		        verticalLineClassNamesForTime: this.props.verticalLineClassNamesForTime
		      });
		    }
		  }, {
		    key: "rows",
		    value: function rows(canvasWidth, groupHeights, groups) {
		      return _react["default"].createElement(_GroupRows["default"], {
		        groups: groups,
		        canvasWidth: canvasWidth,
		        lineCount: (0, _generic._length)(this.props.groups),
		        groupHeights: groupHeights,
		        clickTolerance: this.props.clickTolerance,
		        onRowClick: this.handleRowClick,
		        onRowDoubleClick: this.handleRowDoubleClick,
		        horizontalLineClassNamesForGroup: this.props.horizontalLineClassNamesForGroup,
		        onRowContextClick: this.handleScrollContextMenu
		      });
		    }
		  }, {
		    key: "items",
		    value: function items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops) {
		      return _react["default"].createElement(_Items["default"], {
		        canvasTimeStart: canvasTimeStart,
		        canvasTimeEnd: canvasTimeEnd,
		        canvasWidth: canvasWidth,
		        dimensionItems: dimensionItems,
		        groupTops: groupTops,
		        items: this.props.items,
		        groups: this.props.groups,
		        keys: this.props.keys,
		        selectedItem: this.state.selectedItem,
		        dragSnap: this.props.dragSnap,
		        minResizeWidth: this.props.minResizeWidth,
		        canChangeGroup: this.props.canChangeGroup,
		        canMove: this.props.canMove,
		        canResize: this.props.canResize,
		        useResizeHandle: this.props.useResizeHandle,
		        canSelect: this.props.canSelect,
		        moveResizeValidator: this.props.moveResizeValidator,
		        itemSelect: this.selectItem,
		        itemDrag: this.dragItem,
		        itemDrop: this.dropItem,
		        onItemDoubleClick: this.doubleClickItem,
		        onItemContextMenu: this.props.onItemContextMenu ? this.contextMenuClickItem : undefined,
		        itemResizing: this.resizingItem,
		        itemResized: this.resizedItem,
		        itemRenderer: this.props.itemRenderer,
		        selected: this.props.selected,
		        scrollRef: this.scrollComponent
		      });
		    }
		  }, {
		    key: "sidebar",
		    value: function sidebar(height, groupHeights) {
		      var sidebarWidth = this.props.sidebarWidth;
		      return sidebarWidth && _react["default"].createElement(_Sidebar["default"], {
		        groups: this.props.groups,
		        groupRenderer: this.props.groupRenderer,
		        keys: this.props.keys,
		        width: sidebarWidth,
		        groupHeights: groupHeights,
		        height: height
		      });
		    }
		  }, {
		    key: "rightSidebar",
		    value: function rightSidebar(height, groupHeights) {
		      var rightSidebarWidth = this.props.rightSidebarWidth;
		      return rightSidebarWidth && _react["default"].createElement(_Sidebar["default"], {
		        groups: this.props.groups,
		        keys: this.props.keys,
		        groupRenderer: this.props.groupRenderer,
		        isRightSidebar: true,
		        width: rightSidebarWidth,
		        groupHeights: groupHeights,
		        height: height
		      });
		    }
		    /**
		     * check if child of type TimelineHeader
		     * refer to for explanation https://github.com/gaearon/react-hot-loader#checking-element-types
		     */
		  }, {
		    key: "childrenWithProps",
		    value: function childrenWithProps(canvasTimeStart, canvasTimeEnd, canvasWidth, dimensionItems, groupHeights, groupTops, height, visibleTimeStart, visibleTimeEnd, minUnit, timeSteps) {
		      var _this3 = this;
		      if (!this.props.children) {
		        return null;
		      } // convert to an array and remove the nulls

		      var childArray = Array.isArray(this.props.children) ? this.props.children.filter(function (c) {
		        return c;
		      }) : [this.props.children];
		      var childProps = {
		        canvasTimeStart: canvasTimeStart,
		        canvasTimeEnd: canvasTimeEnd,
		        canvasWidth: canvasWidth,
		        visibleTimeStart: visibleTimeStart,
		        visibleTimeEnd: visibleTimeEnd,
		        dimensionItems: dimensionItems,
		        items: this.props.items,
		        groups: this.props.groups,
		        keys: this.props.keys,
		        groupHeights: groupHeights,
		        groupTops: groupTops,
		        selected: this.getSelected(),
		        height: height,
		        minUnit: minUnit,
		        timeSteps: timeSteps
		      };
		      return _react["default"].Children.map(childArray, function (child) {
		        if (!_this3.isTimelineHeader(child)) {
		          return _react["default"].cloneElement(child, childProps);
		        } else {
		          return null;
		        }
		      });
		    }
		  }, {
		    key: "getSelected",
		    value: function getSelected() {
		      return this.state.selectedItem && !this.props.selected ? [this.state.selectedItem] : this.props.selected || [];
		    }
		  }, {
		    key: "hasSelectedItem",
		    value: function hasSelectedItem() {
		      if (!Array.isArray(this.props.selected)) return !!this.state.selectedItem;
		      return this.props.selected.length > 0;
		    }
		  }, {
		    key: "isItemSelected",
		    value: function isItemSelected(itemId) {
		      var selectedItems = this.getSelected();
		      return selectedItems.some(function (i) {
		        return i === itemId;
		      });
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      var _this4 = this;
		      var _this$props3 = this.props,
		        items = _this$props3.items,
		        groups = _this$props3.groups,
		        sidebarWidth = _this$props3.sidebarWidth,
		        rightSidebarWidth = _this$props3.rightSidebarWidth,
		        timeSteps = _this$props3.timeSteps,
		        traditionalZoom = _this$props3.traditionalZoom,
		        buffer = _this$props3.buffer;
		      var _this$state5 = this.state,
		        draggingItem = _this$state5.draggingItem,
		        resizingItem = _this$state5.resizingItem,
		        width = _this$state5.width,
		        visibleTimeStart = _this$state5.visibleTimeStart,
		        visibleTimeEnd = _this$state5.visibleTimeEnd,
		        canvasTimeStart = _this$state5.canvasTimeStart,
		        canvasTimeEnd = _this$state5.canvasTimeEnd;
		      var _this$state6 = this.state,
		        dimensionItems = _this$state6.dimensionItems,
		        height = _this$state6.height,
		        groupHeights = _this$state6.groupHeights,
		        groupTops = _this$state6.groupTops;
		      var zoom = visibleTimeEnd - visibleTimeStart;
		      var canvasWidth = (0, _calendar.getCanvasWidth)(width, buffer);
		      var minUnit = (0, _calendar.getMinUnit)(zoom, width, timeSteps);
		      var isInteractingWithItem = !!draggingItem || !!resizingItem;
		      if (isInteractingWithItem) {
		        var stackResults = (0, _calendar.stackTimelineItems)(items, groups, canvasWidth, this.state.canvasTimeStart, this.state.canvasTimeEnd, this.props.keys, this.props.lineHeight, this.props.itemHeightRatio, this.props.stackItems, this.state.draggingItem, this.state.resizingItem, this.state.dragTime, this.state.resizingEdge, this.state.resizeTime, this.state.newGroupOrder);
		        dimensionItems = stackResults.dimensionItems;
		        height = stackResults.height;
		        groupHeights = stackResults.groupHeights;
		        groupTops = stackResults.groupTops;
		      }
		      var outerComponentStyle = {
		        height: "".concat(height, "px")
		      };
		      return _react["default"].createElement(_TimelineStateContext.TimelineStateProvider, {
		        visibleTimeStart: visibleTimeStart,
		        visibleTimeEnd: visibleTimeEnd,
		        canvasTimeStart: canvasTimeStart,
		        canvasTimeEnd: canvasTimeEnd,
		        canvasWidth: canvasWidth,
		        showPeriod: this.showPeriod,
		        timelineUnit: minUnit,
		        timelineWidth: this.state.width
		      }, _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersProvider, null, _react["default"].createElement(_HeadersContext.TimelineHeadersProvider, {
		        registerScroll: this.handleHeaderRef,
		        timeSteps: timeSteps,
		        leftSidebarWidth: this.props.sidebarWidth,
		        rightSidebarWidth: this.props.rightSidebarWidth
		      }, _react["default"].createElement("div", {
		        style: this.props.style,
		        ref: function ref(el) {
		          return _this4.container = el;
		        },
		        className: "react-calendar-timeline ".concat(this.props.className)
		      }, this.renderHeaders(), _react["default"].createElement("div", {
		        style: outerComponentStyle,
		        className: "rct-outer"
		      }, sidebarWidth > 0 ? this.sidebar(height, groupHeights) : null, _react["default"].createElement(_ScrollElement["default"], {
		        scrollRef: this.getScrollElementRef,
		        width: width,
		        height: height,
		        onZoom: this.changeZoom,
		        onWheelZoom: this.handleWheelZoom,
		        traditionalZoom: traditionalZoom,
		        onScroll: this.onScroll,
		        isInteractingWithItem: isInteractingWithItem
		      }, _react["default"].createElement(_MarkerCanvas["default"], null, this.columns(canvasTimeStart, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height), this.rows(canvasWidth, groupHeights, groups), this.items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops), this.childrenWithProps(canvasTimeStart, canvasTimeEnd, canvasWidth, dimensionItems, groupHeights, groupTops, height, visibleTimeStart, visibleTimeEnd, minUnit, timeSteps))), rightSidebarWidth > 0 ? this.rightSidebar(height, groupHeights) : null)))));
		    }
		  }], [{
		    key: "getDerivedStateFromProps",
		    value: function getDerivedStateFromProps(nextProps, prevState) {
		      var visibleTimeStart = nextProps.visibleTimeStart,
		        visibleTimeEnd = nextProps.visibleTimeEnd,
		        items = nextProps.items,
		        groups = nextProps.groups; // This is a gross hack pushing items and groups in to state only to allow
		      // For the forceUpdate check

		      var derivedState = {
		        items: items,
		        groups: groups // if the items or groups have changed we must re-render
		      };
		      var forceUpdate = items !== prevState.items || groups !== prevState.groups; // We are a controlled component

		      if (visibleTimeStart && visibleTimeEnd) {
		        // Get the new canvas position
		        Object.assign(derivedState, (0, _calendar.calculateScrollCanvas)(visibleTimeStart, visibleTimeEnd, forceUpdate, items, groups, nextProps, prevState));
		      } else if (forceUpdate) {
		        // Calculate new item stack position as canvas may have changed
		        var canvasWidth = (0, _calendar.getCanvasWidth)(prevState.width, nextProps.buffer);
		        Object.assign(derivedState, (0, _calendar.stackTimelineItems)(items, groups, canvasWidth, prevState.canvasTimeStart, prevState.canvasTimeEnd, nextProps.keys, nextProps.lineHeight, nextProps.itemHeightRatio, nextProps.stackItems, prevState.draggingItem, prevState.resizingItem, prevState.dragTime, prevState.resizingEdge, prevState.resizeTime, prevState.newGroupOrder));
		      }
		      return derivedState;
		    }
		  }]);
		  return ReactCalendarTimeline;
		}(_react.Component);
		exports["default"] = ReactCalendarTimeline;
		_defineProperty(ReactCalendarTimeline, "propTypes", {
		  groups: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
		  items: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]).isRequired,
		  sidebarWidth: _propTypes["default"].number,
		  rightSidebarWidth: _propTypes["default"].number,
		  dragSnap: _propTypes["default"].number,
		  minResizeWidth: _propTypes["default"].number,
		  lineHeight: _propTypes["default"].number,
		  itemHeightRatio: _propTypes["default"].number,
		  minZoom: _propTypes["default"].number,
		  maxZoom: _propTypes["default"].number,
		  buffer: _propTypes["default"].number,
		  clickTolerance: _propTypes["default"].number,
		  canChangeGroup: _propTypes["default"].bool,
		  canMove: _propTypes["default"].bool,
		  canResize: _propTypes["default"].oneOf([true, false, 'left', 'right', 'both']),
		  useResizeHandle: _propTypes["default"].bool,
		  canSelect: _propTypes["default"].bool,
		  stackItems: _propTypes["default"].bool,
		  traditionalZoom: _propTypes["default"].bool,
		  itemTouchSendsClick: _propTypes["default"].bool,
		  horizontalLineClassNamesForGroup: _propTypes["default"].func,
		  onItemMove: _propTypes["default"].func,
		  onItemResize: _propTypes["default"].func,
		  onItemClick: _propTypes["default"].func,
		  onItemSelect: _propTypes["default"].func,
		  onItemDeselect: _propTypes["default"].func,
		  onCanvasClick: _propTypes["default"].func,
		  onItemDoubleClick: _propTypes["default"].func,
		  onItemContextMenu: _propTypes["default"].func,
		  onCanvasDoubleClick: _propTypes["default"].func,
		  onCanvasContextMenu: _propTypes["default"].func,
		  onZoom: _propTypes["default"].func,
		  onItemDrag: _propTypes["default"].func,
		  moveResizeValidator: _propTypes["default"].func,
		  itemRenderer: _propTypes["default"].func,
		  groupRenderer: _propTypes["default"].func,
		  className: _propTypes["default"].string,
		  style: _propTypes["default"].object,
		  keys: _propTypes["default"].shape({
		    groupIdKey: _propTypes["default"].string,
		    groupTitleKey: _propTypes["default"].string,
		    groupLabelKey: _propTypes["default"].string,
		    groupRightTitleKey: _propTypes["default"].string,
		    itemIdKey: _propTypes["default"].string,
		    itemTitleKey: _propTypes["default"].string,
		    itemDivTitleKey: _propTypes["default"].string,
		    itemGroupKey: _propTypes["default"].string,
		    itemTimeStartKey: _propTypes["default"].string,
		    itemTimeEndKey: _propTypes["default"].string
		  }),
		  headerRef: _propTypes["default"].func,
		  scrollRef: _propTypes["default"].func,
		  timeSteps: _propTypes["default"].shape({
		    second: _propTypes["default"].number,
		    minute: _propTypes["default"].number,
		    hour: _propTypes["default"].number,
		    day: _propTypes["default"].number,
		    month: _propTypes["default"].number,
		    year: _propTypes["default"].number
		  }),
		  defaultTimeStart: _propTypes["default"].object,
		  defaultTimeEnd: _propTypes["default"].object,
		  visibleTimeStart: _propTypes["default"].number,
		  visibleTimeEnd: _propTypes["default"].number,
		  onTimeChange: _propTypes["default"].func,
		  onBoundsChange: _propTypes["default"].func,
		  selected: _propTypes["default"].array,
		  resizeDetector: _propTypes["default"].shape({
		    addListener: _propTypes["default"].func,
		    removeListener: _propTypes["default"].func
		  }),
		  verticalLineClassNamesForTime: _propTypes["default"].func,
		  children: _propTypes["default"].node
		});
		_defineProperty(ReactCalendarTimeline, "defaultProps", {
		  sidebarWidth: 150,
		  rightSidebarWidth: 0,
		  dragSnap: 1000 * 60 * 15,
		  // 15min
		  minResizeWidth: 20,
		  lineHeight: 30,
		  itemHeightRatio: 0.65,
		  buffer: 3,
		  minZoom: 60 * 60 * 1000,
		  // 1 hour
		  maxZoom: 5 * 365.24 * 86400 * 1000,
		  // 5 years
		  clickTolerance: 3,
		  // how many pixels can we drag for it to be still considered a click?
		  canChangeGroup: true,
		  canMove: true,
		  canResize: 'right',
		  useResizeHandle: false,
		  canSelect: true,
		  stackItems: false,
		  traditionalZoom: false,
		  horizontalLineClassNamesForGroup: null,
		  onItemMove: null,
		  onItemResize: null,
		  onItemClick: null,
		  onItemSelect: null,
		  onItemDeselect: null,
		  onItemDrag: null,
		  onCanvasClick: null,
		  onItemDoubleClick: null,
		  onItemContextMenu: null,
		  onZoom: null,
		  verticalLineClassNamesForTime: null,
		  moveResizeValidator: null,
		  dayBackground: null,
		  defaultTimeStart: null,
		  defaultTimeEnd: null,
		  itemTouchSendsClick: false,
		  style: {},
		  className: '',
		  keys: _defaultConfig.defaultKeys,
		  timeSteps: _defaultConfig.defaultTimeSteps,
		  headerRef: function headerRef() {},
		  scrollRef: function scrollRef() {},
		  // if you pass in visibleTimeStart and visibleTimeEnd, you must also pass onTimeChange(visibleTimeStart, visibleTimeEnd),
		  // which needs to update the props visibleTimeStart and visibleTimeEnd to the ones passed
		  visibleTimeStart: null,
		  visibleTimeEnd: null,
		  onTimeChange: function onTimeChange(visibleTimeStart, visibleTimeEnd, updateScrollCanvas) {
		    updateScrollCanvas(visibleTimeStart, visibleTimeEnd);
		  },
		  // called when the canvas area of the calendar changes
		  onBoundsChange: null,
		  children: null,
		  selected: null
		});
		_defineProperty(ReactCalendarTimeline, "childContextTypes", {
		  getTimelineContext: _propTypes["default"].func
		}); 
	} (Timeline$1));
	return Timeline$1;
}

var TimelineMarkers = {};

var hasRequiredTimelineMarkers;

function requireTimelineMarkers () {
	if (hasRequiredTimelineMarkers) return TimelineMarkers;
	hasRequiredTimelineMarkers = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		// Is this necessary? The initial reason for including this is for organization sake in the
		// user code e.g.

		/*
		<Timeline {...otherProps}>
		  <TimelineMarkers> // would there be props passed in here?
		    <TodayLine />
		    <CursorLine />
		    <CustomLine />
		  </TimelineMarkers>
		</Timeline>

		*/
		// If we decide to pass in props to TimelineMarkers, then yes, this is necessary.
		var TimelineMarkers = function TimelineMarkers(props) {
		  return props.children || null;
		};
		var _default = TimelineMarkers;
		exports["default"] = _default; 
	} (TimelineMarkers));
	return TimelineMarkers;
}

var TodayMarker = {};

var hasRequiredTodayMarker;

function requireTodayMarker () {
	if (hasRequiredTodayMarker) return TodayMarker;
	hasRequiredTodayMarker = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _TimelineMarkersContext = requireTimelineMarkersContext();
		var _markerType = requireMarkerType();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var TodayMarker = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(TodayMarker, _React$Component);
		  function TodayMarker() {
		    _classCallCheck(this, TodayMarker);
		    return _possibleConstructorReturn(this, _getPrototypeOf(TodayMarker).apply(this, arguments));
		  }
		  _createClass(TodayMarker, [{
		    key: "componentDidMount",
		    value: function componentDidMount() {
		      var _this$props$subscribe = this.props.subscribeMarker({
		          type: _markerType.TimelineMarkerType.Today,
		          renderer: this.props.children,
		          interval: this.props.interval
		        }),
		        unsubscribe = _this$props$subscribe.unsubscribe,
		        getMarker = _this$props$subscribe.getMarker;
		      this.unsubscribe = unsubscribe;
		      this.getMarker = getMarker;
		    }
		  }, {
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      if (this.unsubscribe != null) {
		        this.unsubscribe();
		        this.unsubscribe = null;
		      }
		    }
		  }, {
		    key: "componentDidUpdate",
		    value: function componentDidUpdate(prevProps) {
		      if (prevProps.interval !== this.props.interval && this.getMarker) {
		        var marker = this.getMarker();
		        this.props.updateMarker(_objectSpread({}, marker, {
		          interval: this.props.interval
		        }));
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      return null;
		    }
		  }]);
		  return TodayMarker;
		}(_react["default"].Component); // TODO: turn into HOC?

		_defineProperty(TodayMarker, "propTypes", {
		  subscribeMarker: _propTypes["default"].func.isRequired,
		  updateMarker: _propTypes["default"].func.isRequired,
		  interval: _propTypes["default"].number,
		  children: _propTypes["default"].func
		});
		_defineProperty(TodayMarker, "defaultProps", {
		  interval: 1000 * 10 // default to ten seconds
		});
		var TodayMarkerWrapper = function TodayMarkerWrapper(props) {
		  return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref) {
		    var subscribeMarker = _ref.subscribeMarker,
		      updateMarker = _ref.updateMarker;
		    return _react["default"].createElement(TodayMarker, _extends({
		      subscribeMarker: subscribeMarker,
		      updateMarker: updateMarker
		    }, props));
		  });
		};
		TodayMarkerWrapper.displayName = 'TodayMarkerWrapper';
		var _default = TodayMarkerWrapper;
		exports["default"] = _default; 
	} (TodayMarker));
	return TodayMarker;
}

var CustomMarker = {};

var hasRequiredCustomMarker;

function requireCustomMarker () {
	if (hasRequiredCustomMarker) return CustomMarker;
	hasRequiredCustomMarker = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _TimelineMarkersContext = requireTimelineMarkersContext();
		var _markerType = requireMarkerType();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _objectSpread(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    if (i % 2) {
		      var source = arguments[i] != null ? arguments[i] : {};
		      var ownKeys = Object.keys(source);
		      if (typeof Object.getOwnPropertySymbols === 'function') {
		        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
		          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
		        }));
		      }
		      ownKeys.forEach(function (key) {
		        _defineProperty(target, key, source[key]);
		      });
		    } else {
		      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
		    }
		  }
		  return target;
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var CustomMarker = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(CustomMarker, _React$Component);
		  function CustomMarker() {
		    _classCallCheck(this, CustomMarker);
		    return _possibleConstructorReturn(this, _getPrototypeOf(CustomMarker).apply(this, arguments));
		  }
		  _createClass(CustomMarker, [{
		    key: "componentDidUpdate",
		    value: function componentDidUpdate(prevProps) {
		      if (prevProps.date !== this.props.date && this.getMarker) {
		        var marker = this.getMarker();
		        this.props.updateMarker(_objectSpread({}, marker, {
		          date: this.props.date
		        }));
		      }
		    }
		  }, {
		    key: "componentDidMount",
		    value: function componentDidMount() {
		      var _this$props$subscribe = this.props.subscribeMarker({
		          type: _markerType.TimelineMarkerType.Custom,
		          renderer: this.props.children,
		          date: this.props.date
		        }),
		        unsubscribe = _this$props$subscribe.unsubscribe,
		        getMarker = _this$props$subscribe.getMarker;
		      this.unsubscribe = unsubscribe;
		      this.getMarker = getMarker;
		    }
		  }, {
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      if (this.unsubscribe != null) {
		        this.unsubscribe();
		        this.unsubscribe = null;
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      return null;
		    }
		  }]);
		  return CustomMarker;
		}(_react["default"].Component); // TODO: turn into HOC?

		_defineProperty(CustomMarker, "propTypes", {
		  subscribeMarker: _propTypes["default"].func.isRequired,
		  updateMarker: _propTypes["default"].func.isRequired,
		  children: _propTypes["default"].func,
		  date: _propTypes["default"].number.isRequired
		});
		var CustomMarkerWrapper = function CustomMarkerWrapper(props) {
		  return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref) {
		    var subscribeMarker = _ref.subscribeMarker,
		      updateMarker = _ref.updateMarker;
		    return _react["default"].createElement(CustomMarker, _extends({
		      subscribeMarker: subscribeMarker,
		      updateMarker: updateMarker
		    }, props));
		  });
		};
		CustomMarkerWrapper.displayName = 'CustomMarkerWrapper';
		var _default = CustomMarkerWrapper;
		exports["default"] = _default; 
	} (CustomMarker));
	return CustomMarker;
}

var CursorMarker = {};

var hasRequiredCursorMarker;

function requireCursorMarker () {
	if (hasRequiredCursorMarker) return CursorMarker;
	hasRequiredCursorMarker = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;
		var _react = _interopRequireDefault(require("react"));
		var _propTypes = _interopRequireDefault(/*@__PURE__*/ requirePropTypes());
		var _TimelineMarkersContext = requireTimelineMarkersContext();
		var _markerType = requireMarkerType();
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		}
		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];
		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }
		    return target;
		  };
		  return _extends.apply(this, arguments);
		}
		function _typeof(obj) {
		  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
		    _typeof = function _typeof(obj) {
		      return typeof obj;
		    };
		  } else {
		    _typeof = function _typeof(obj) {
		      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		    };
		  }
		  return _typeof(obj);
		}
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}
		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  return Constructor;
		}
		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  }
		  return _assertThisInitialized(self);
		}
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		  return self;
		}
		function _getPrototypeOf(o) {
		  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  };
		  return _getPrototypeOf(o);
		}
		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf(subClass, superClass);
		}
		function _setPrototypeOf(o, p) {
		  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  };
		  return _setPrototypeOf(o, p);
		}
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
		  return obj;
		}
		var CursorMarker = /*#__PURE__*/
		function (_React$Component) {
		  _inherits(CursorMarker, _React$Component);
		  function CursorMarker() {
		    _classCallCheck(this, CursorMarker);
		    return _possibleConstructorReturn(this, _getPrototypeOf(CursorMarker).apply(this, arguments));
		  }
		  _createClass(CursorMarker, [{
		    key: "componentDidMount",
		    value: function componentDidMount() {
		      var _this$props$subscribe = this.props.subscribeMarker({
		          type: _markerType.TimelineMarkerType.Cursor,
		          renderer: this.props.children
		        }),
		        unsubscribe = _this$props$subscribe.unsubscribe;
		      this.unsubscribe = unsubscribe;
		    }
		  }, {
		    key: "componentWillUnmount",
		    value: function componentWillUnmount() {
		      if (this.unsubscribe != null) {
		        this.unsubscribe();
		        this.unsubscribe = null;
		      }
		    }
		  }, {
		    key: "render",
		    value: function render() {
		      return null;
		    }
		  }]);
		  return CursorMarker;
		}(_react["default"].Component); // TODO: turn into HOC?

		_defineProperty(CursorMarker, "propTypes", {
		  subscribeMarker: _propTypes["default"].func.isRequired,
		  children: _propTypes["default"].func
		});
		var CursorMarkerWrapper = function CursorMarkerWrapper(props) {
		  return _react["default"].createElement(_TimelineMarkersContext.TimelineMarkersConsumer, null, function (_ref) {
		    var subscribeMarker = _ref.subscribeMarker;
		    return _react["default"].createElement(CursorMarker, _extends({
		      subscribeMarker: subscribeMarker
		    }, props));
		  });
		};
		CursorMarkerWrapper.displayName = 'CursorMarkerWrapper';
		var _default = CursorMarkerWrapper;
		exports["default"] = _default; 
	} (CursorMarker));
	return CursorMarker;
}

var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib$1;
	hasRequiredLib = 1;
	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "TimelineMarkers", {
		  enumerable: true,
		  get: function get() {
		    return _TimelineMarkers["default"];
		  }
		});
		Object.defineProperty(exports, "TodayMarker", {
		  enumerable: true,
		  get: function get() {
		    return _TodayMarker["default"];
		  }
		});
		Object.defineProperty(exports, "CustomMarker", {
		  enumerable: true,
		  get: function get() {
		    return _CustomMarker["default"];
		  }
		});
		Object.defineProperty(exports, "CursorMarker", {
		  enumerable: true,
		  get: function get() {
		    return _CursorMarker["default"];
		  }
		});
		Object.defineProperty(exports, "TimelineHeaders", {
		  enumerable: true,
		  get: function get() {
		    return _TimelineHeaders["default"];
		  }
		});
		Object.defineProperty(exports, "SidebarHeader", {
		  enumerable: true,
		  get: function get() {
		    return _SidebarHeader["default"];
		  }
		});
		Object.defineProperty(exports, "CustomHeader", {
		  enumerable: true,
		  get: function get() {
		    return _CustomHeader["default"];
		  }
		});
		Object.defineProperty(exports, "DateHeader", {
		  enumerable: true,
		  get: function get() {
		    return _DateHeader["default"];
		  }
		});
		exports["default"] = void 0;
		var _Timeline = _interopRequireDefault(requireTimeline());
		var _TimelineMarkers = _interopRequireDefault(requireTimelineMarkers());
		var _TodayMarker = _interopRequireDefault(requireTodayMarker());
		var _CustomMarker = _interopRequireDefault(requireCustomMarker());
		var _CursorMarker = _interopRequireDefault(requireCursorMarker());
		var _TimelineHeaders = _interopRequireDefault(requireTimelineHeaders());
		var _SidebarHeader = _interopRequireDefault(requireSidebarHeader());
		var _CustomHeader = _interopRequireDefault(requireCustomHeader());
		var _DateHeader = _interopRequireDefault(requireDateHeader());
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		var _default = _Timeline["default"];
		exports["default"] = _default; 
	} (lib$1));
	return lib$1;
}

var libExports = requireLib();
var Timeline = /*@__PURE__*/getDefaultExportFromCjs(libExports);

const TimelineContainer = ({ items, resources, onItemClick, onItemMove, onItemResize, enableDragDrop, enableResize, enableMultiSelect }) => {
    // Transform scheduler items to timeline items
    const timelineItems = items.map(item => ({
        id: item.id,
        group: item.resourceId,
        title: item.title,
        start_time: item.start.getTime(),
        end_time: item.end.getTime(),
        itemProps: {
            onDoubleClick: () => onItemClick?.(item)
        }
    }));
    // Transform resources to timeline groups
    const timelineGroups = resources.map(resource => ({
        id: resource.id,
        title: resource.title
    }));
    const handleItemMove = useCallback((itemId, dragTime, newGroupOrder) => {
        if (!enableDragDrop || !onItemMove) {
            return;
        }
        const item = items.find(i => i.id === itemId);
        const newGroup = timelineGroups[newGroupOrder];
        if (item && newGroup) {
            const duration = item.end.getTime() - item.start.getTime();
            const newStart = new Date(dragTime);
            const newEnd = new Date(dragTime + duration);
            onItemMove(item, newStart, newEnd, newGroup.id);
        }
    }, [enableDragDrop, onItemMove, items, timelineGroups]);
    const handleItemResize = useCallback((itemId, time, edge) => {
        if (!enableResize || !onItemResize) {
            return;
        }
        const item = items.find(i => i.id === itemId);
        if (item) {
            const newStart = edge === "left" ? new Date(time) : item.start;
            const newEnd = edge === "right" ? new Date(time) : item.end;
            onItemResize(item, newStart, newEnd);
        }
    }, [enableResize, onItemResize, items]);
    return (jsx("div", { className: "modern-schedule-board-timeline", children: jsx(Timeline, { groups: timelineGroups, items: timelineItems, defaultTimeStart: new Date(Date.now() - 24 * 60 * 60 * 1000), defaultTimeEnd: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), canMove: enableDragDrop, canResize: enableResize ? "both" : false, onItemMove: handleItemMove, onItemResize: handleItemResize, lineHeight: 50, itemHeightRatio: 0.8, sidebarWidth: 150, traditionalZoom: true }) }));
};

const ModernScheduleBoard = ({ name, class: className, style, tabIndex, dataSource, resourcesSource, startDateAttribute, endDateAttribute, titleAttribute, resourceIdAttribute, enableDragDrop, enableResize, enableMultiSelect, onItemClick, onItemMove, onItemResize }) => {
    const { items, resources, loading, updateItem } = useSchedulerData({
        dataSource,
        resourcesSource,
        startDateAttribute,
        endDateAttribute,
        titleAttribute,
        resourceIdAttribute
    });
    const handleItemClick = useCallback((item) => {
        if (onItemClick && onItemClick.canExecute) {
            onItemClick.execute();
        }
    }, [onItemClick]);
    const handleItemMove = useCallback((item, newStart, newEnd, newResourceId) => {
        // Update the item optimistically
        updateItem(item.id, {
            start: newStart,
            end: newEnd,
            resourceId: newResourceId
        });
        // Update the Mendix object
        const mendixObject = item.mendixObject;
        if (mendixObject &&
            startDateAttribute.get(mendixObject) &&
            endDateAttribute.get(mendixObject) &&
            resourceIdAttribute.get(mendixObject)) {
            startDateAttribute.get(mendixObject).setValue(newStart);
            endDateAttribute.get(mendixObject).setValue(newEnd);
            resourceIdAttribute.get(mendixObject).setValue(newResourceId);
        }
        // Execute the action
        if (onItemMove && onItemMove.canExecute) {
            onItemMove.execute();
        }
    }, [onItemMove, updateItem, startDateAttribute, endDateAttribute, resourceIdAttribute]);
    const handleItemResize = useCallback((item, newStart, newEnd) => {
        // Update the item optimistically
        updateItem(item.id, {
            start: newStart,
            end: newEnd
        });
        // Update the Mendix object
        const mendixObject = item.mendixObject;
        if (mendixObject && startDateAttribute.get(mendixObject) && endDateAttribute.get(mendixObject)) {
            startDateAttribute.get(mendixObject).setValue(newStart);
            endDateAttribute.get(mendixObject).setValue(newEnd);
        }
        // Execute the action
        if (onItemResize && onItemResize.canExecute) {
            onItemResize.execute();
        }
    }, [onItemResize, updateItem, startDateAttribute, endDateAttribute]);
    if (loading) {
        return (jsx("div", { className: `modern-schedule-board ${className}`, style: style, tabIndex: tabIndex, children: jsx("div", { className: "modern-schedule-board-loading", children: "Loading scheduler..." }) }));
    }
    return (jsx("div", { className: `modern-schedule-board ${className}`, style: style, tabIndex: tabIndex, "data-widget-name": name, children: jsx(TimelineContainer, { items: items, resources: resources, onItemClick: handleItemClick, onItemMove: handleItemMove, onItemResize: handleItemResize, enableDragDrop: enableDragDrop, enableResize: enableResize, enableMultiSelect: enableMultiSelect }) }));
};

export { ModernScheduleBoard as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
